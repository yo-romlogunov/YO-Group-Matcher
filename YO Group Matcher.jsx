var scriptVersion = "3.5.6";

var soloShapesStates = {};
var soloTextStates = {};
var soloNullStates = {};
var soloTrackMatteStates = {};
var soloAdjustStates = {};

var autoSaveEnabled = false;
var presetFilePath = "";

 // LAYER_GROUP Color Label

   var none_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%ADIDATx%01%C2%A5S%C2%B1%11%C3%820%0C%C2%94EE%07%5D.U6%20E%0AJ%C2%98%20Y%C2%81%0D%C3%98%C2%80%C2%B0%01l%01%1DL%00%23h%03%5C%C2%A6%C2%A4%C2%A4Jxq%0E%C2%84%14%C2%80%C3%8D%17%C2%B1%C3%AC%C3%A8_%3A%C3%B9m%C2%A8%C2%87%2C%C3%8Bfu%5D%C3%A7M%C3%93%14%C3%98%26%C3%AEX%C2%8C1%C2%82%C3%B3%C2%B5%C2%88%C3%98n%C2%BEi%C2%834MG%C3%8C%C2%BC%02qI%1F%00%C2%A1%C2%8D%13%C2%BA%3E%05%C2%94%C2%8C%1F'%0D%C3%A97%08%0A%C3%8DU%C2%84u%C2%A7%C2%95%3D%C3%88%C2%8F%C2%9A%C2%8EC%06%C3%95%13T%C2%BFP%00%C2%B4%0Bn%C2%95B%00n%C3%81P%C3%B1i%C2%BD%C3%9FA%C2%AE3%08%16%00%12%C2%A6%3F%C2%A1%02%C2%96%C3%82!%C2%8C%1B8R%20%C3%94%C2%9D%0CW%1D(%10%C3%AA%C3%88AUU6%C2%8E%C3%A31%C3%B6S%1F2n%60%0B'%C3%AE%C3%98)%C2%95X%C3%84%C2%83%C2%AF%C2%B9%C2%A5%06%03%C3%BD%C2%A0%C2%8B%5B%14E%7B%18c%C3%B8%C2%AD%13%C2%AD%C2%8Ce%C3%B1%C3%B6%C2%98%C2%BAp%C3%96.%11N%C3%A8%C3%A5%11%C2%AB%C3%83%C3%96y%C2%81x%C3%AE%C3%A6%C3%9F%01%C2%8Ecc%C3%BE%C3%9CD%C3%80%C2%BE%00%00%00%00IEND%C2%AEB%60%C2%82"; 
    
   var red_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%10IDATx%01%C2%A5%C2%93AN%C3%830%10E%C3%BFL%40%C2%A8R%17%1C!7%C2%80%23%24%12%0Bv%0D%C3%8B%2C%C2%B9%017hs%03r%C2%8A%2C)%3B%16Hx%C3%81%01r%03r%C2%84%0AUB%C2%A5%C3%98%C3%83%C3%98RQD%C2%A5%C3%8Au%C3%9F%C3%8A%C2%B6%C3%A6%7F%C2%8F%C3%873%C2%84%7Ft7EAp3%11T%02%C3%89%C3%83!QO%22%3D%C3%8E%C2%B3%C2%A6~1%C3%838%C2%9Ev%C2%8B%C2%A7%C2%AA%C2%B8%C3%BC%C3%BAts%C2%90%3C%C3%A0%00L%C3%B4x1%C3%A5%C3%A6niV%7F%06A%C2%BCvo%10%C2%B9F%0C%C2%9A%C3%91d%C3%8A%C2%A57a%C2%BF%0F7%C3%87%C2%8A%3D%1A%C2%BBY%C2%AB%C3%86%7Bu%C2%B7E.%5B%C3%BB%C2%81%04%C2%88%C2%A4dl%C3%AD%1C%C2%89%C2%88p%C3%85%C2%8E(%3E%C3%B5%7D%C2%8B%19%C3%931o%C3%9F'g%C2%9C%C2%88%1A%C3%90%C2%80T%C3%B4%3BY%C2%80g%24%C3%A2%C2%BB%C2%93%C2%99%C3%9C%12%C2%A9%C3%98%C2%AC%C3%A1%C3%BA%C3%B5%C3%9Dh%C3%8F%C2%B78%1Aikc%C2%86P%C3%84o%7B%C2%B6%C3%90%C2%84%C3%BAh%C2%ADo%C3%A5%C2%A0%09E%04%C3%AE%C2%8DYm%2C%C2%97q%C2%99H%3B%C3%B9%C3%9190%C2%A3a%1A%C3%93%15%C3%9A%C3%9A%C2%99%5D%C3%A8-W%C2%BB%C3%B9%20%C3%BD)_l%C3%92z%C3%B9'%C2%8F%C3%A3%7F%01%C3%A8%C2%B2p%C3%B2%C2%B6%C2%85%3F%3C%00%00%00%00IEND%C2%AEB%60%C2%82"; 
  
   var yellow_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%BCIDATx%01%C2%A5S%C2%BB%0D%C3%82%40%0C%7Dv%14hi)%C2%90BI%05%23%C2%90%09%60%C2%84%C2%8C%C3%80%06%C3%80%06%C2%B0AF%C2%80%09%60%04%3A%0A%C2%8A%20%C2%B1%005%C2%88%0B~%C3%A1%23%14%24%C2%94%1COJ%C3%A4%3B%C3%99%C3%AF%C3%9E%C3%99%C3%AF%04%25%C2%9C%0E%C3%890%C3%8F1%C2%B2o%2C%40%C3%84%C2%BD%1C%C3%98%C2%89%60%17%C3%9E0o%C3%B7%C3%92%C3%A3g%C2%BE%C2%BC%C2%82%2CKZ%C3%81%15S%C3%8B%C2%9E%C3%A0%17%04%C2%8B%5B%C2%88y%C2%B7%C2%9B%C2%9E%C3%9F%04%2C%C3%96%0B6%C2%B6%18%C2%A0%02%C2%A8%C3%885%10%C2%93D%C2%B9%C3%81%C2%93%C2%AB%16%3FO%1D%14j%19g%C3%BB%24%0A%14%19%3C%20%0E%C2%B1%06%C3%81%C2%83%C3%89%07N0%C3%96%3A%C3%92%C2%BF%14%08Fj%C3%A3%C3%B2%260D%C2%8A%3F%C2%A16%C2%92%23%3C%C3%81q%C2%AA%C3%BD%C3%97%C3%B0%04%C3%9D%C2%A9%26a%05O%C3%90%C3%9A%C3%9A%C3%A9%C2%A5%5Bk%C3%A4%125%C3%81%1A%C2%BE%C2%8B%C2%A2%C2%89%C2%AE%C2%89Ynr*%17%C3%93%C3%8AV%C3%83%C2%B8%20%C2%A0%C2%A7%5D%C2%88%C2%B8%C2%8A%12%C3%A6%C2%BC%C3%9E%01%C3%97RN%C2%A0%C2%B5U%C2%8D%5D%C3%90%C2%97%C2%A7G%C2%8AIY%C2%B3%C3%99%2F%5E%C3%B93%C3%BF%0E%C3%88%C2%80ZToZ%C2%B8%C2%B9%00%00%00%00IEND%C2%AEB%60%C2%82"; 
    
   var aqua_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%BDIDATx%01%C2%A5%C2%93%C2%B1q%C3%82%40%10E%C3%BF%C2%AE%C3%A7%C3%86C%C3%A6%12%C3%94%C2%81Q%C3%A0%C2%80%C3%8C%C2%AA%C3%80V'%C3%AE%40%C2%A2%03%C2%BB%12%C2%A0%02%C2%93)%20%40%1D%C2%A0%12%C3%88%18%0D%0C%C3%8B_10%40%C3%80%C2%88%C3%A3E%3A%C3%9D%C3%BE%7F%7B%7B%C2%BB%C2%82%1B%26%C2%8B%C3%AAS!_f%C3%B6%C3%8Der%C3%BC%2B5%60%C2%B5%05%C2%8C%C3%B3t%C3%94%5C%C3%86%C3%8BY%C2%B8%5C%C2%BE%C3%A9%C2%AE-(%C3%BC%C3%81%1D%04%C3%B6%C2%BB%0F%03%1A%C2%A5%C3%AB%C2%B3%C2%81%C2%8Be%C3%9B%C3%BE%C3%B3%C2%94!z!%C3%8C%C3%A65s%13%C3%B5%C2%A5%C2%9F%C3%9C_%C3%AC%C3%98P%C2%B7%C2%9B%C2%A2%C2%B3%C2%9ATU%22%2FX!%02%13dJq%C2%81XXh%16%C3%BC%C2%91%C3%94%C2%AF%11%C2%BE%C2%962%C2%8Fh%03%C2%92(%C2%9E%C3%84%0D%1ADc%C2%B5%1Al%C2%86h%C2%B4f%11e%C2%8AH%2C%C3%98X%C3%B3%C2%8F%C3%91%C2%9CY%C3%BC%C3%A1A%5C%C3%A3sq%2CbhK%C2%BFO%7F9%C2%87%2B%0CJ%C3%BF%C3%AA%0C%C3%B24%5B%5Bh%C2%B3%3E%C2%99x%C3%8Ci%0E%3A%C2%AB%C3%9B%00om%C3%9A%C2%96%22%C3%B6%C3%8E%C3%ADS%C2%8F4%06%C2%99%C2%B1%C3%A9%C2%A6~%C3%A5%C3%8B%C3%B8%03f%C2%AC%60%C3%8E%C3%97%C3%AD%C3%8F%C3%A3%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var pink_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%A9IDATx%01%C2%A5%C2%93%C2%B1%11%C2%82%60%0C%C2%85_%C3%82%C3%91%3B%02%16%C3%96ja%2F%13%C3%A8(n%C2%80n%C2%A0%C2%9B%C3%A8%04%C3%98YX%C3%88%060%C2%82%C2%BD%C3%BA%C3%87DP%C2%90%C3%82%C2%83%C3%9F%C2%AF%22%5C%C3%9E%C2%BB%C3%BC%C2%B9%17B%C2%8B%3C%3D%C3%8F%1D%C2%B0%C2%80%C3%88R%C3%8B%C2%A8%C3%BA%C2%9D%C2%81%C2%901%C3%82%C3%8D0%C2%9E%16%C3%8D~%C2%AA%C2%85%C2%97%01pO%C2%9C%C3%88%0A%C2%BF%20l%2B%C2%A3%C3%AB%C3%87%C3%80%C3%84Nn%C2%A9~N%C3%90%C2%8D%C2%8C)%C2%8C%C3%8D%C2%84%C3%8B%C3%BA%C2%9E%C3%B4%10%1B%13%C2%87%5B%C3%B2%C2%9A%20OO%C2%91%C2%93%20%C2%87%07L%14%C2%B3C%C2%90%C3%80%C2%93%C2%87%C2%93%25C%C2%A8%C3%8F%C3%A8_%10a%C2%A1%3B%10o%03%25b%C3%BC%C2%89%19%14%C3%B0G%C3%83%258%C3%80%17K%C2%A7c%C3%9A%C3%83%13K%24%C2%8F%C3%A2%C3%99Q%04%3B%C3%B4%C3%844v%17%C2%AF%25%06%1C%C2%AE%C3%89%0E%C2%A6%3B%C2%99i%C3%8A)%14%C3%8B4i%C2%B6%C2%BBLb%3D%C3%AF%3B%C2%B0%C2%9A%C3%9A%0D%16%C3%AD%C2%87%C3%B0%C2%9AAc%C2%A9%C3%AF%C2%A3P%C3%A1At_%C3%B6%C3%A4f%C3%BF%13%C2%8BqUrl%C2%8F%C2%B1%C3%87%00%00%00%00IEND%C2%AEB%60%C2%82"; 
    
   var lavender_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%B3IDATx%01%C2%A5%C2%93%C2%B1%0D%C3%820%14D%C3%AF%3B%C2%92%C3%932B6%00J%3A%C2%98%00(%C3%99%C2%82%0D%02%1B%C3%80%14%14%14%C2%81%09%C2%A0K%C2%897%20%23%C3%90b%14%1B%C3%BFXAQ%C2%90Pb%5E%15G%C3%BF%C3%8E%C3%B6%C3%A9Lhq%3C%C3%A6Sc%C2%A29%60%16n%C2%99%C3%B8%C2%BF%C2%A4%C2%88%C2%AC*K%C2%BB%5D%C2%AD%26Es%C2%9E%C3%AA%C2%8F%2C%C2%BB%0D%C2%B4~%C2%A5N%C2%B8%C3%86ovR%C3%86%C3%9B%C3%A5r%C3%BC%C3%B8%18x%C2%B1%C2%BE%00v%C2%84N%C2%90%C2%92R%C3%8E%C3%98D%C3%B0%C3%92%C3%AF%C3%9CU%C3%8C%C3%98%C2%91%C3%96%C3%8F%C2%B4%C2%B2%3A%1C%C3%B2D%08%C2%BA%23%00c%C3%ACLD%11%C2%A5%08%C2%84%C2%88%16%C3%82Z%C3%AAq%C3%B4%C2%B6%01%C3%A6%C2%A2%C3%9F%C3%9D%C2%BFH%04%C3%BE%C2%84%0D%0A%C2%84%C2%A3%5C%068%23%10%C2%97%01%1B%C3%98%13%02%C3%A1j%0B%C3%97%C3%AD%C2%AB%3B%C3%85%1E%3Da%0D%C2%BF%C2%8B*%C3%848%C2%8E7%5C%C3%8F%C3%AErR%5E%C3%A3C%04w%C2%9A%C2%BB%C3%9D%C3%A5%24%3CS%C2%BF%C2%83%C3%8A%C2%AA%3D%C3%A0%C2%AB%C2%8D%C2%8D%C3%B3%1E6%3ARp%C3%98%C2%9C%17_%C2%B99%C3%BF%06h%07dS%C2%86qO%C3%AA%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var peach_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%A5%C2%931R%C3%830%10E%C3%BF_%0F%15%14%1C%C3%81%3E%01i)%C2%98A'H()(%C2%B8%017%C2%B0%7D%03r%02%0A%0AJ%C3%82%09%C3%82%0C%05%25%C2%BE%C2%81%7D%C2%84%C3%8C%C2%84T%C2%96%C2%B5H%C3%B6%C2%8C'%C2%A4%60%1C%C3%B1*I%C2%B3%C3%BFkw%C2%B5%22%0E%C2%A8%3F%C2%9E%C2%AF%C2%85%C2%9C%C2%ABs%0B%10%C3%A9p%C3%8A%C2%8Ad%C3%A5%C2%92%C2%A4%C3%8C.o%C2%9B%C3%BDx%C2%8E%C3%82%C2%AF%C3%97s%C3%99ns%25%1E%C3%B0%07%C2%A4%3C%C2%BA%C3%B6%C2%B4%C3%8C%C3%8C%C3%8Df4%08b%C3%AE%C2%BE%C3%97P%C2%9Da%12%C2%AC%C3%94%C2%9E%C2%99%60%22a%1Bn%C2%9E.%0E%C3%A8LNvyoU%7F%C2%BE%C2%A4%C2%B4m%C2%8D%08%144%22%5D%C2%97%23%C2%9E%C2%85%C3%A8Q%C2%A9%C3%BF%C2%86%C3%94%C2%B9%C2%84z%10%C2%8B%22%15%C3%BC%13%C3%B1.%0Db%C3%B1%C3%83%25J%7DC%24%C2%84V%C2%BE%04Y!%12%C3%97v%C2%A5dWw%C3%AF%0A%5D%C3%A2H%C3%BC%0C%2C3s%C3%9F%0CM%C2%B4%C2%AE%08%C3%A39Y%C3%ADk%C2%87%C2%B5EX%C3%B6%06%C3%9Ei%C2%A3%C3%96%C2%9A)%C2%99%C2%84%C2%9B%C2%B5%C2%B5%26hz%C2%AF%C3%83%C2%80z%C3%BD%C2%94%22%C2%91%C3%82%C3%BF%C2%BA%C2%8BqF%C3%BCK%0D%C3%8D%C2%96U(y%3F%C3%BE%07a3k%C2%98%0D%C3%8D1%13%00%00%00%00IEND%C2%AEB%60%C2%82"; 
  
   var sea_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%03IDATx%01%C2%A5%C2%93%3Dr%C3%820%10%C2%85%C3%9Fn%11%C3%86%5D%C2%8E%C3%A0%1B%C2%84%C2%94tq%C3%A9%22%03%C2%BEIn%00%C2%BEA8%09PQ%26%5D%C3%8A%C3%B8%06%C3%B1%11%C3%A8%3C%C3%B6%10%C2%BDh%1D%C3%BE%06f%18!%C2%BEB%23i%C3%B6%C3%A7%C2%AD%C2%B4%2B8c%C3%BD%C2%B5~%11%C3%A1%C2%98%0E%13%C2%80%C2%A9%C3%9D%11%C2%A8DP%01Z%C3%A6%C2%A3%C2%BC%3E%C2%B5%C2%97%C3%BDf%C3%B1%C2%BDxL%C2%9A%C3%81%C2%94%C3%A0%1B%C2%AE%20%C2%90%C3%B7%26i%C3%8B%C3%A2%C2%B9%C3%98%1C%02%C2%98%C3%B3%C2%A0y%C3%B8%C3%B0%C2%87!%020Em%C3%92e%16D%C3%AD%C3%822%C2%87%3A%C3%AF%C2%B2%0E%C3%8D%C2%A7%C3%9F%C3%BB%C2%9AS%C3%90%C3%BD%20%06q%C2%99%0A%C3%9C%14%C2%91%C2%90%3AQ_P%C2%B0%C3%B4%0B%01%C3%80X%C2%89%C3%B8%00%C2%9ETq'%3E%C2%80%C3%94%C2%88D%C2%88JI%C2%AE%10%09%C3%95%07%10uKD%C2%A3%C2%A5%C3%A6%C2%A3%C3%97O%C3%92%C3%8Dq%23%C2%84%C2%9B%C3%9B%5C%C3%B4%C2%8F%C3%98v%C3%9B%C2%99%C3%BF%C2%92*%C3%9C%C3%99Zy%3B%C3%AB5%C3%98Rd%C3%85%C2%A6i%C2%BB%2CD%C2%89e%C3%9E%C3%8F%C2%81%C2%9D%C3%A5%C3%9C%C3%A0%C2%BF%C2%B5%7F%C2%BD%22y%3A%C3%B6%C2%88%C3%94~JW%22ni%25%C2%9F%C3%9A%C3%BF%01%0E%3Ci%C3%B6%C3%A1U%C3%8Bw%00%00%00%00IEND%C2%AEB%60%C2%82"; 
  
   var blue_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%BBIDATx%01%C2%A5%C2%93%C2%BDq%C3%82%40%10%C2%85%C3%B7%C3%AD%C2%9Ds%C2%97%20%07%0E%1C%C2%99%12L%05P%C2%88%03%15%C3%A0%19%C2%8E%19%17%20%C3%8D%C2%B8%10%5C%C2%81%5D%C3%82e%04%04%C2%A8%04rt%2C%C2%BB%20~%03%06%1D_%C2%A2%3BI%C3%AF%C3%AD%C3%9E%C3%AA%09t%C3%85%C3%A7%C3%97%C3%A2%03%C2%A0%11md%2C%40%C3%91%C3%9D%C2%8E%00%C2%A2snZ%C2%85%C2%97%C3%A6%C3%BC%7D%1C%16eX%3E%C2%A7%C3%94ND%C2%A8%C2%A4%1B%C2%A8y%C3%A5%C2%9C7%C2%A3%C3%95%C3%91%C3%80%C3%84m%C3%9B%C3%BE%C3%A9r%40%C3%B7%11%C2%BD%C3%B7C3a%C3%9BY%C3%A5%1Ebc%C3%90i%08Z%C2%BD%C3%90%C3%AAK%C3%8Ac%C3%88)%C2%A5%09e%23c%16%C2%91%3E%C2%AD_%00%C3%B0%C3%88f%C2%90m%C2%A0%C3%85%0B%C2%A6%07a%C2%884%C2%94%C2%8DD%16%C3%B0%2Fe%C2%A23%C2%88z%04%C2%99Q%26%C3%8E%C2%AD%C2%A7%C3%BC%C3%B3%C3%BD%C3%BA%C2%AF%5E5%C3%B5F%C3%AA*%C2%BC5%C2%BB!z%C3%AF%C2%82%5Eb%0F%C2%B5F%C3%B9%C3%894%C2%B43%C2%B0L%5B%C2%B6%C3%AF%C3%ABD%C3%AA%C3%83%7F%60%3B%5C%3F.%C3%83%5C%C2%A3m%1D%C3%A1%C2%9D%C2%BA%C2%8C%C3%98%C2%97%12%C2%90%0E%1B%C2%B3%C3%BD%C2%91Ol%01%5C%C3%BF%5DO%C3%B7%C3%A9%C3%88%C2%BE%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var green_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%19IDATx%01%C2%A5%C2%93%3BN%C3%83%40%10%C2%86gf%23%C2%9A%C2%80%C3%84%11%7C%038%02%3EA%C2%8CD%01%05%C2%85%25%C2%8A%C2%94%C3%9C%20%C3%B1%0D%C2%92.%05%12%C2%91(H%C2%81%C2%849%01%1C%C3%817%C3%80G%C2%88D%C3%92%C3%80%C2%AC%C2%87%19KAV%C2%90%C2%A2%C3%8D%C3%A6%C2%ABvW%C3%B3%C3%B8%C3%A7%C2%B1%08%5B%C3%9C%3D%5D%5D%10%C3%82%C3%807%C2%98!H%C3%92%3E%22T%C2%88X9%C3%A7%C2%8A%C3%99%C3%8D%C2%A2%C3%AE%C3%9A%C3%A3%C3%A6p%C3%BF%C2%9A%C2%9D%C2%AE%C2%BEz%23%3B%C3%82%0E%C2%88%60%C3%B2%C3%9D%C3%A7b~Y.%C3%BF%02%C2%98%C3%B3z%C3%95%7B%17%C2%81s%08A%15%C3%B11%C2%A7%16%C2%84%C3%ACn%C2%99%C2%83%C2%9D%0D%C2%B5%3DZ%C2%B7j%01%C2%87%C3%8F%C3%97%09%C3%BF%C3%B0'%C3%84%C2%80%C2%90%C2%92%C3%B7~%04%C2%91%08HF%22%12.%7D%0B%12%1A%10%C3%ACS%C3%BB%7F%05%09%C3%81%C2%81%C2%90%00%C3%96%10%09%C3%AA8%C2%B5%C2%84%C3%A6%0Db%11%C2%AC%08%09K%C2%88%C3%84yW%C3%90%C3%83%C3%AD%C3%8B%C2%87Nb%0A%7B%22(%C3%93Y%C2%BE%C2%A8%C3%9B%26%C3%BA%C3%86%C2%8Fm%3DC%C2%9D%C2%AD%C3%B6%13V%1F%C2%A5%0D0%C3%8F%C3%8B%253%C2%A7!J%2Cs_m'y%C3%A73u%19%3E%C3%AAj%13%C2%8F5%C3%B4%C3%99fGlR%C2%A4%C3%8D%16%C3%AD%C2%97%C2%95%C3%9C%C2%B5%C3%BF%05G%C3%93ub%07%C3%AC%C2%8B%06%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var purple_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%11IDATx%01%C2%A5%C2%931N%C3%83%40%10E%C3%BF%C2%8C%C2%85%00!%24%C2%8E%C3%A0%1B%C2%90%C2%82%C2%822%3EAr%05%C3%8AtPR%20%C2%AF%C3%85%05%C2%A0J%C3%89%15%C2%92%13%C2%90%C2%92%C2%82bo%40%C2%8E%C2%90%02%14%22%C2%BC%C3%BEx%2C%11Y%20%C2%A1%C3%8D%C3%A6U%C2%AB%C3%91%C3%8C%C3%9F%3F%C2%BB3%C2%82_%C3%9C_L%C2%87%14%19%C2%A1%C3%A1%18%C2%82%C3%9Cb%02%C3%B1%22%C3%B4Y%C2%86%C3%AA%C3%B6e%C2%B2%C3%AC%C3%A7%C3%8B%C3%8F%C3%81%0D%C2%9F%C3%8E%C3%B4%7DS%02%C2%BC%C3%86%7F%08%1F%C2%9A%C2%AF%C3%A3%C3%8A%C3%B9%C2%AB%C3%95V%C3%80%C2%8A%C2%B3%C2%8F%C3%8D3%C3%89%01%220G%C2%A1%3E%2CLD-%607%C3%87%16%1B%04%07z%C2%B0.%3B1w9%C3%8D%C2%B5%C3%86%1B%12h%C3%AD%17%C2%AA%01%25%12i%C2%88%C2%B1%0A%25%C3%9A%C3%BA%1F%07%C2%8A%C2%91Z%3FH%C2%85%C3%88%15%7B%C2%A2%C2%AD%C3%8A%12%C2%89%C3%98p%C2%B5-%60%C2%8ED%04%C3%AAU%053%24%C2%92e%C2%AC%C3%B4%C3%AEu%C2%B2%20%C3%B1%C2%88%1D%C2%B1%1A%C3%9B%C2%8B%C3%AE%11%19%3E%C2%9D%C2%8Dgl%C2%B1%C2%88x%C2%9E%1E9%3Bw%02%C3%8E%C3%9F%C2%ACB%C2%BD.b%C2%9CXN8i%C3%B7%60%C3%91%5B%C2%A6%3E6%C3%9A%12%C3%A0%C2%94r%C2%BE%C2%9D%C2%91%C3%B6%C2%A7%C2%A82Wrf-%C3%B7%C3%B3%C2%BF%01S%0Fp%C2%9Ft%3Ay%C2%A6%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var orange_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%03IDATx%01%C2%A5%C2%93%C2%BDQ%C3%83%40%10%C2%85%C3%9F%5B%C2%89%19%C2%9CQ%C2%82%1D%10%10%C2%A1%C2%80%02P%05v%0B%C2%84%C3%8E%C2%A0%02L%078rH%0Bv%05P%C3%82f%04%04r%09%C3%8E%18%C3%80%C3%9C%C2%B2'%C3%89%C2%8Cq%C3%80H%C3%A7%2F%C2%B9%C2%BF%7D%C3%AF%C3%BEv%C2%89%03%C3%9E%16W%C3%97%60%18%5B%C2%B0%09%C2%81a%3B%C2%AD%245Cx%18Mu%C2%BD%1F%C3%8F%5D%C2%A7z*%C3%8E%C2%B6%C3%AFr%0F%C3%98-%C3%BE%C2%85%C2%8F%C3%B9%C3%80%C2%8Dnt%C3%B3k%C3%90%C2%88%C3%B9%C3%AC%C3%9D%02%C3%9D%C3%90%7C%60e4%C2%918jv%C3%AE%2C%C2%8E%14%C2%AD%06%C2%AC%16%C3%85pk%C2%AC%C2%90%02%C2%AD%C2%94o4N)%18d%22f%C3%96%C3%A7%C3%A8%7Fp%C3%B18%C2%BEA%C2%B2%C2%81%C3%B97%0B%C2%8ED%C3%9Ce%C2%8DD%5C%C2%AB%22%C3%86%15%12%11%C3%8FN1%09K%24%C3%B2%C3%A5%C2%A9-%C3%A7S%7D%C2%A1q%C2%8E%C2%9E%18m~%C3%A1uQ%3Fb%C3%B6%19f%C3%9Eh%0F%C2%BD%C2%9E%C2%9C%22jP%1B%C2%8C%C3%AEt%C2%93%7FX%C3%99%C3%A5%24q%C3%A7%5D%1D%C3%841%0F%03%5E%3D%C2%B53%C3%A3%C3%8C%17.%C3%91%C3%A6H%C3%BDS%C3%A4%C2%8A%08%C3%8Bx%C3%A5%C3%BD%C3%B8%1F%C3%9F%C2%A2b%C2%A8D%C2%9C2%C2%8F%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var brown_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%11IDATx%01%C2%A5%C2%93-O%03A%10%C2%86%C3%9F%C2%99%13%C2%97C%C2%81%C2%AC%3B%C2%83B%C2%B0%C2%86%C2%84%C2%A0%C2%A8C%C2%90%C3%B4%C3%BE%02%C3%BF%00Y%C3%97%3B%07%0E%C3%BE%05%C2%B8%C3%96%C3%95%C2%81%40%20G%22H8Y%C2%89%C3%A2%23%C2%A4%3B%C3%8C%C3%B6%0A%C2%B9%22%C2%A0%C2%B7%3C%C3%89~M%C3%B6%7Dw2%C3%99!%C3%BC%60x%C3%AC%0Eu%C3%AE%07%00%15%0A%C3%A4%C3%8B%C2%B0%10%C3%99%C3%B0T%C2%9DM%C2%A5n%C3%9F%C2%A7%C2%AFMY%C2%B8%C3%8D%C2%97w%3F%C2%B2%C3%90)~%C2%81%C2%A0%17Y%C3%8AU9%C2%96%C3%A7o%C2%83F%C2%AC7%C2%B6uX%0F%C3%99H%C2%A9%1FL8%C2%9C%C2%9A%C2%97%C3%97%16%07%C3%9Ck%C2%A3%01%0D%C2%8F%5C%C3%AEI%C2%9F%10%01%2B%C3%B5YYG%C2%88D%09%05k%C2%B7%C3%94W%0D%C2%A0%03%C2%B69%C3%9A%C3%80%C3%88%19%C3%BF%24%18%C3%94%C2%88%C3%84%C3%BE%C2%80X%0Dh%C2%82X%C2%88%C2%84%13%C3%85%18%C2%91%C2%90G%C2%95%C3%9C%3D%C3%8E%C3%AA%C2%83%C3%AD%C3%9E%C2%96%C2%A5%C2%B3%C3%9FI%0C%C2%BA%3C%C2%9F%C3%8A%C3%95%C2%A2%C2%88%1F)J%C2%8BH%07%C2%BDdAc%24a%C2%BA%7F%C2%98%C2%BD%C3%AD%C3%AD%C3%B4%C2%AEyN%C3%99_%C2%99%C2%84%C2%97%C2%AD%0FNV%C2%9A%C2%A9M%C3%B3%C2%B5%17%19%C3%ADB%C3%95-E%C2%B5-%13%C2%B2zY%3B%C3%9F%C2%B6%C3%AF%7F%02%17%C2%8D%5B%C2%8A%C2%94B)%18%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var fuchsia_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%16IDATx%01%C2%A5%C2%93%3BN%C3%83%40%10%C2%86%C3%BF%C2%99U%1A%C3%9C%C3%90%C2%A6%40%C2%B2K%0AD%7C%03%7C%C2%82%C3%A4(%C2%94%C3%AElw)(%C2%92%C2%9B%C3%80%09%C3%A0%06X%C2%A2%C2%A0%C2%B4%25.%10%099%C2%8D%C3%AD%1Dv%C3%8C%C3%8B%02)r6_5%1A%C3%AD%3C%C3%B6%C2%9F%19%C3%82%1F%C3%9E%C3%92%C2%97%1B%C2%B1%C2%B4%14%60E%22%C2%A1%C3%BA%04T%12P%C3%8E%C2%8C)%C3%A6%C3%AB%C3%8Bz%C3%BC%C2%9E%C2%BE%C2%8D*%C2%AF%C3%8E%C3%8D%C3%BE%3D%C2%83%C3%90-%0EA%C2%B4%C3%A9%C3%8F%C2%82%22%C3%8A%C2%A3%C3%9DO%02%0D%C3%A6%C2%A6y%24%C3%88%02%13%C3%90%C2%8El%10%24%C2%9A%C2%84%C3%95%C2%A1%C2%95%C2%A7%06%7FV%C2%95%C2%85%C3%997%C3%99%60W%C3%A9kh%C3%BA%C2%AE%C2%82%07%24H%C3%98%C3%B4%7D%06O%2Ca%C3%85%C3%87%C2%B4%C3%BE%C2%AF%03%C3%90%C2%92%C3%9D%C2%B8%C2%BC%1389C%C3%86%C2%89%C2%B0%10%C3%95%C3%B0%C3%84%C3%85%C2%96%0C%C2%91%07x%C3%A2%C2%A6P%C2%B2%13%C3%A1%1E%C2%9E%C3%8CL%5B%C3%B0%C3%85%C3%9D%C3%95%C2%93Xlq%24N%C3%BC%C3%AD%7C%1D%C3%97%C2%83%C2%88%C2%B6%C3%AFr%C3%A7(%C2%A7%07%C3%AB*w%C2%B9%C3%9AC%C2%82h%13%C3%AFl%C3%9B%25S%3A%C3%91%C3%8A6h%C3%9D%1D%C3%84%C2%BF%C3%874%C2%A6J%C2%9FC%C3%AEL%C3%AE%C2%AE%C3%AE%C2%9A%C2%BEvd%C2%98%C2%94%13%5B%C3%B5%C3%92%2F%C2%8F%C3%9F%7F%00%C2%B7ml%C3%AC%C3%80%C2%93om%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var cyan_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%08IDATx%01%C2%A5%C2%93%C3%81m%C3%82%40%10E%C3%BF%0C%C3%B1!%C3%89%25%25%C2%B8%C2%83PB%5C%01%C3%A4%C2%96H%C2%89%C2%84%3BH%07%26%1D%C2%84%0A%C2%8C%C2%94H%C3%89-%C2%A6%C2%82%C2%A4%C2%84%C3%AD%00%C2%97%C3%80%058%2C%C3%B60k%190%1C%C2%90%C2%BD%3C%C3%89%C3%92x%C2%B5%C3%B3%C3%B7%C3%8F%C3%AE%0C%C3%A1%C2%84%C2%97%C3%B4%C3%B3A%C2%A87%00d%C2%A8_X%2F%1B%C2%80L%20%C3%BC%3E%C2%8D%C2%9F%C3%B3%C3%A6~%C3%9A%05%C2%A3%C3%B4%C3%B7%C3%8E%C3%922%C3%91%C3%B0%0Dg%C3%A1%C2%8F%40%C2%AEU%C3%A8q%C2%B1%17%C2%A8%C2%93%C3%BF4%C3%AC%C2%A3%1D%C3%AA%C3%A66r%22%C3%AC%C3%BE%C3%AA%C2%93%C3%9B%26%3B%C3%BA%C2%96%C3%96I%C3%A5%60%C2%94~%C2%87%C2%96%C2%8A9%3C%20%C2%91%C2%88-%C2%95%09%3C)%C3%81C%26H%17%C3%AB%C3%87%0EH%06%2C%C3%9Dj%3F%25d%5C%C2%88%0AP%0E%7F%0C%C2%93%C2%943xC%C3%86%C2%95%C2%90%C3%81%C2%93B%5B%C2%9B%C2%BF%C3%A2%C3%97%7F%7D%C3%8F%09%3A%22B%C2%93%1F%C2%9D%C2%8B%C3%AA%12%C2%AF%C2%B0%19%C2%A3%1A%C2%98%C3%96%C2%98%15n%5C%0E*%C2%81i%1C%2F%02%C2%B1Q%1B'%C3%AE%C3%A4%C2%A5%C3%8EA%C3%96%1C%C2%A6%26O%C3%9A%C3%9A%3D%14c%22%C3%9C%1Fz%C2%84r%11%C3%8C%18e%C3%A6Jn%C3%AE%C3%9F%02%C3%A9%C2%8Ba%C2%9C%C2%B6%C3%B6%C2%AA%C2%81%00%00%00%00IEND%C2%AEB%60%C2%82"; 
  
   var sandstone_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0FIDATx%01%C2%A5%C2%931R%C3%830%10E%C3%BF.%C3%A3%0C%C2%86%C2%86%23%C3%B8%06%C3%A4%08%C3%B8%04%09e%0A%C2%8A%C2%94%C3%AE%C2%A0%C2%A3%60%06y%C2%86%C2%82%C2%92T.)(R%C2%92%C2%9C%00%C2%8E%C2%A0%1B%C3%A0%23%C2%A4a28%C2%A0eec%26%C2%A4%60l%C3%A5U%C2%92f%C3%BF%C3%9F%C3%95%C2%AED%C3%98%C3%A1%C2%A9%C2%B89%3B%20%19%C2%89%C2%93%C2%B1%00%C3%89%C3%8F%C2%B1%25%22%C3%8B%C2%88%C3%B2If%C3%8A%C3%ADxj%17%C3%8F%C2%8F%C3%A6%C3%A4%7D%C2%BD%C2%B9%05%C3%A4%12%C3%BF%C3%80%C2%A0%C2%878%C2%8E%C3%B2%C3%B3%C2%A9Y%C3%BD%1A4%C3%A2%C3%AAE%C2%97Ct%C3%83%1E%C3%87%C2%83%C3%94%C2%9B%C2%B0%C3%9F5%C2%99%3B%C2%8B%3D%C3%83u%C2%A3%01%C3%8D%0B%C2%93%7CI%C3%B5%C2%86%00%C2%848e%C2%87%C3%86)%04%C2%86%1B%C2%B3H%C2%AF%C3%92%C3%BFV%20%18i%0F%24%C3%98%40I%18%7B%C3%82%3A%C3%87%12%C3%A1Xv%C2%82%25%02!R%030%2F%10%C2%88N!%C3%A7%C2%8B%C3%AC%C3%AEU%C2%BB9CO4%C3%BBl%C2%92%C3%9D%C2%97u%13%3F%C2%AB%C2%81%C3%91%23%C3%9BCo%C2%8F%0E%C2%BD%C3%86W%C2%A1L%C2%AF%C3%8Cj%C3%B3%11%C2%A5%5D*%C3%B1%C2%99%C3%9B%7FP%C3%AFw%03%C3%A6%C3%85%C2%B5%3Em2%C3%AA%7D%C3%9A%C2%BE%C2%91zR%C2%84%C2%A5%03%2F%C3%BC%C2%95%C2%B7%C3%A3%C2%BF%01%C2%B4%7B_%5E%C2%8D%C3%88%C3%A8%C2%8D%00%00%00%00IEND%C2%AEB%60%C2%82"; 
  
   var dark_green_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%04IDATx%01%C2%A5S%C2%B1%C2%8D%021%10%1C%C2%9B%C3%97%C2%BF%3Ex%C3%A9%5E%C3%BA%02L%C3%B6%19%C2%84%C2%84G%05%C3%90%02%1D%C3%90%01%C3%90%01t%01%19T%C3%80%C2%95p!Dl%01%04%17%02%01f%16%0Et%20%04%C2%87%C2%99%C3%80%C3%B6%C2%AE%C2%BC%C2%BB%C3%A3%C3%B1%C2%AE%C3%81%0D%C3%BEc%17%7B%C2%A0%05%C2%8F6M%C2%A7%3E%C3%9A)%C2%B7%C3%94%1A%0C%16%C2%89H%C3%B1%C2%BE9%1F%5C%C3%AC%C2%A2%C2%AF%3Dz%C3%B4t%C3%B1%08%1E%C3%83%C2%AD%C3%85%40%12%C3%89.%094%C3%B8%C3%93cN%C2%A3%C2%8E%12PF%3B%C2%83%C2%A6%26%C2%B1%C3%AA%C3%90%C3%8Ae%C2%83%C3%B3%C2%AA%C3%B5%23%5B%3D%C3%B3%C3%8D%C3%8E%7B%C2%AC%10%00C%16%C3%8A%C2%A0%C2%87%40%C3%B0)m%C3%8B%C3%AA%C2%A5%C2%A9%C3%9F%C3%89%C3%90R%06%C3%A1%09%C2%A8%C2%BF%C3%85%C2%9B%C2%B0%14B%10%C2%8E%C3%94R%C2%88%19%02%C3%A1O%C3%9D%C2%89)%02%C2%A1%C2%AD%5DYK%26%7F%C3%95%C3%A8%C2%97v%C3%A3%C2%A5h%C2%83%C3%912%C2%91%C3%B1Q%C3%84-%C3%90%C3%87i%60JA%C2%A9%C3%A71%C2%A8%C3%A8%C2%92I%C2%B6%C3%B9%C2%A9F%C2%93%0F%C2%83%C3%AF%C2%A7LX%C2%99s%C3%90%C2%B9%1A%C2%A6%22%C2%B4%C2%B5%C2%B9%C3%B5Y%C2%A5%C2%86%C2%BC%C3%89%C3%B4%C2%A7Tl%C3%95%C2%8B%C3%A3%C2%9C%14%C3%AF%1F%00%11%C3%9EQ%01%C3%865%C2%A3%C2%A6%00%00%00%00IEND%C2%AEB%60%C2%82"; 
 
//icons for layers and Effects Group

   var view_button_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01oIDATx%01%C3%A5SK%C2%8E%C2%82%40%10m0%26%26%C2%BA%C3%80%C2%85%C2%BF%C3%84d%C3%A4%06%C3%A3%0D%C3%B0%06z%02%C2%99%13%C3%8C%C3%9C%409%C2%81%C3%83%09%C3%B4%06r%C2%83%C3%A1%06%C3%8C%0D%60V%04%C3%98%C3%B4%06%12%16%C3%80%C2%BC%22%C2%B6i%09%24%C2%B3%1E%2B1%C3%9D%C3%B5%C2%AA%C3%AA%C3%B9%C3%AA%01%C2%8C%C3%BD%C3%9BP%C2%BA%0AI%C2%92%18eY%1A%C2%B8%C2%BE%C3%9C%C2%A0%1FUU%C3%9D%C3%89d%C3%A2%C3%BE%C2%89(%C2%8E%C3%A3w%1C%C3%87%C2%AA%C2%AA4%C3%96%1E%C2%81%C2%A2(%C3%96t%3A%C2%BD%C2%B4%12%C3%B9%C2%BE%C2%AF%C2%8DF%C2%A33Tl%05%062%1BC.0%0E5%26%C2%A0%C2%BD4%C3%ABdY%C3%B6%C2%A6%C3%AB%3A%C2%A7D%15%C3%A8p8%C2%BC%C3%8A%24%20X%C3%8F%C3%A7%C3%B3%0F%C2%9CA%C2%AF%C3%97%C3%A3%C2%B3%C3%99%C3%8C%24L%22%C3%9A%C3%92%C2%8CHj%C2%A2(%C2%8A%0E%C3%B8wC%22%C2%B9%40%C3%BA7%C3%96%3C%01%C3%B7%C3%A8%07%C3%8FN%C2%84%C2%91JI%C2%B1%C2%81%C3%99c%3D%13%C2%86%C3%A1%0A%C2%B2%7Dy_%C3%A4%C2%9B%3C%C3%8Fy%C2%BF%C3%9F%C3%B7%1E%7C%C2%80%22%0C%C2%AFp%C2%BDJ0%C3%87%C2%8A%C2%BA%3A%18%0C8%1A%C2%B8%3C%C2%80%15%C2%BB%C2%8C%C2%A6%1Ao%40%1A84u%3C%1E%C3%B3%C2%A2(l%C2%B9B%C2%92%C2%97%C3%8Bes%0D%C2%9BV%C2%83_%C3%BB%06%C2%91%C2%B5X%2C%C2%82%C3%BBS%C2%83%1F_%0D%C2%9F%C3%967%C2%9F%5E)%17w%C3%B2K%C3%AAq%C2%81oj%3B%04%08%3Fv8%1CI%C2%81%C2%87%C3%813%C2%9A5%C3%B2E%18%2F%C3%AA%C3%B0%C3%91I%C3%93tw'm%C3%88d0%C3%9FD%C3%93%01%C3%97%15k%09%C3%B2%13%3EYx5%3E%1Fp%C3%96%11%204%40h0%C3%A9%13%01%C2%81%0B%3F%5C%C3%B6%5C%C3%B1%0BY.%C2%BA%C3%B0%C3%A0%24%C2%9B6%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var view_button_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%02%12IDATx%01%C3%8D%C2%93%3Dh%13a%18%C3%87%2F%C2%97%3B%3F%C2%88%C2%93%20%C2%88PpR%10Lb%0C(H%C2%9D%C3%84((%C3%89%25%10%C2%97*%0E%C2%82%60q(%22%C2%AD%19lP(%C2%B4u%10q%10D7Q%03%C3%B9%12%C2%82%20J%16%C3%85%C2%B6%C2%A4%19%12h%C2%A1c%C2%97%C3%92%C2%A1M%C2%A1%14%C2%92%C3%8B%25%C3%A9%C3%AFM%C3%AF-%C3%97%C2%AF%C2%A1t%C3%A9%03%0F%C3%8F%C3%A7%C3%BB%7F%C2%BE%C3%AE%14%C3%A5%C2%B0%C2%91K*%C2%99L%C3%A6V%C2%A7%C3%93%C3%A9%C2%ADV%C2%AB%C3%83%C3%89d%C3%92R%C3%B6I%C3%9A%26%C2%A2%C3%8Bu%05%C2%91%C3%B0%C3%BB%C3%BDn%C3%A4P.%C2%97%C2%BB%C3%98j%C2%B5r%C3%A8%3D%C3%84%C2%84o%01%C3%BE%05%7F%C2%8EF%C2%A3%7F%C3%B7%C3%ACH%10%C2%8F%C3%9F%C2%B7%C3%9B%C3%AD~%3A%7B%1B%C2%8B%C3%85%06%C2%B0%1Fa%7F%C3%9C%C2%A5%C2%81%2F%1E%C2%8F%C3%A7q(%14Z%C3%9B%01T(%14N%C3%97%C3%AB%C3%B5%02%C3%95%03%C3%82%06lD%C2%8C%19%08%04.Y%C2%96u%06%C3%BF%5D%40%1F%20u%3B%3E%C2%890(%C2%B8%C2%B0%09%C3%84N4%C2%AF%C3%97%3B%C2%81z%C3%99%1Es%C2%8DD%C2%8F%C2%AA%C2%AA%C2%A3%C2%91HdH%16K%C2%A7%C3%93%C3%97%C2%88%C3%BDA%3Dj%C2%BB~%C2%BA%C3%9D%C3%AE%7B%C3%A1pxU%15%C2%96%C3%8F%C3%A7%7B%25A%04Q%C3%B9%1Bb%149%C3%88%11%C3%86%C2%A5%C2%9F%C3%AA%C3%BF%10%C3%9F%1D%23%C3%9E6M%C3%B3I%C2%B78%7B%C3%A8%C3%A1%C3%81%0C%C3%BA%09%19%C2%A5J%C2%98q%C2%96%C2%A8.%C2%97%C3%BA%C2%AER%C2%A9%3C%13%C3%97%24%C3%9F%20%3F%C3%A3%00%5B%26%C3%BF%C2%ACJ%C2%B2%C2%89%C2%B1%C3%A5%C3%9C%C2%8CuD%C3%97%C3%B5%15%C2%87%C3%AB%C2%A9%C3%9D%C2%B5%C2%88%C3%8D%C3%83MG%C3%8Cj4%1A%C2%BA%C3%8A%7C%C2%8B%C2%80%C2%8Dm%03%C2%BA%5E.%C2%97gQ%3F8%7C%2F%18s%C3%8C0%C2%8Ci%C3%B2%07%1C%C3%A9%C3%A3%C3%B1x%7C%C2%B9%C2%BB%C3%ACb%C2%B1x%C2%ACV%C2%AB%C3%A5Qo%C3%9AA%C2%93%C3%A4%5E%1EM1%C3%8A%05%C3%86lj%C2%9A%C3%B6%C2%90%C2%91%12%C3%B2%C2%9At%C3%98%C2%87%C3%9E%C3%877u%C2%A3%C2%BB%23%09%C2%9BJ%C2%A5N%C2%92%C3%BC%1F%C3%B5%C2%9Cl%02%C3%BE%C3%84%C3%A3%1F%C3%AC%C3%A08%C3%B2%0E%C3%A0%C3%B7E%40%5E%C2%B3T*%C3%A9%C3%81%60%C2%B0%C2%B9%05%C3%88%06%3BE%C3%920%C3%9C%C2%AF%C3%ACMm%C2%81%05%C2%BF%C2%A1%C2%9B%C3%A7%C3%92%C3%A9%C3%9A-3%C2%9F%C3%8F%C2%9F%C3%A7%C3%B7%18T6%3E%09%C3%99%C3%A1%1C%1D%C3%BD%C3%86%C3%BF%C2%95%C3%8E%C3%85%C3%A5%12%C3%98%2F%19%C3%BF%C2%B5r%10%C3%8Af%C2%B3%23%7C%C2%A0W%C2%95CK%C3%AB%160%C3%B1%C2%AA%5E%C2%B1%C3%8Ex%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var hide_on_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%B3IDATx%01%C3%8DSKK%C2%95A%18~%C3%9E%C2%999%7C'%C2%A2%5D%C2%84%C3%8BV%16%C3%ADB%10*%C2%A2%C2%B4SQB%C3%902%C3%A8%07dx!%C3%A2%C2%B4h%C2%97%C3%9B6%C2%9Dc%17%C2%A2%40%10DW%C2%82%20%C2%A2%C2%A0~%5E%10%C2%BCl%C3%A4%C2%A0%C3%A0B%C2%BC%2CDW*%C3%A2%05%C2%BF%C3%B9f%5E_%15%C3%84%C2%83z%C2%BC%C2%80%C3%A0%C2%B3%C2%99%C2%99w%C3%A6y%C3%9E%C3%AB%00W%05t%C2%9C%C3%B1g7%17%C2%B3%C3%B1%15%C3%B0%C3%BCH%5E%C3%9C%02c%05%C3%84%C2%A3%3A6%C3%8D%1F%C2%9F%C3%93LA%C2%91_!%17y%C3%B0of%C3%BF%16'%C3%BBmv%C3%9B%C3%AA%C3%AB%C2%A7W4wD%24%C3%9B%C3%8F%C3%B7%C3%89%C2%B9N%C2%86x%3E%1D%C3%B3%0A%C2%AE%C2%A2%C2%AA%3C%C2%98%3C%10%C3%B9%13%C3%B2m%0B%3F%06%C3%A6%C2%9B8%3BV%C3%99%C2%BA%C3%87%C2%B5%2F%C2%83%09bf%C2%AA%0F%C3%BD%14%C3%80%C3%858%3F%C2%86n%C2%90NQv%20*E%C2%ACFpA(%C3%A3K%C3%94%C3%B2Rb%5C%C2%B2%C3%8A%C3%A1B%C3%A0%C2%9C_OL%C3%AE%C3%95%24%C3%9B%23%C3%91%C2%90%1A%C3%86%09-%3F%C2%9E%C2%8F%C2%88%C2%8C%C2%BE%5B%C3%BD%C2%84fU%C2%B6%C2%83%03%09*%C2%BDk%C2%96%C3%8E%2C%C2%9CM%C2%81V%C2%A0%C2%A0%C3%98%C2%B9tC%C3%88IE%C3%89%C3%B8%C2%8B%C3%B8%7Fa%3D%C2%A7%C2%8C%C2%8E%1E%10%C2%A1%C2%BD%20_%C2%A1u%5BG%25%22T%25%C2%A7%C3%8A%C2%B5%C3%98%C2%BE3%C2%8A%C3%8C%3F%C3%AB%C2%A2%C2%B6%C3%8F%C2%A9%20%C2%B7%C2%9FZ%C2%ACA4'b%C3%BFeb%C3%9F0%C2%A1T%C3%8C%C3%9DB%1A%C2%94%C3%B5%03%C2%BC%5BL%C2%97_%C2%9B%C2%95%C3%BD%C3%9F%1F%C2%BD%3CnHO%C3%A7%C3%95%20%C3%93c%1F%12%C3%91%10%3C%C3%9E%C3%97%C2%A4LS%7Dh%C2%9F%C3%8A%04%C2%84D%5CV%5D%C2%96%C3%A8%C3%8B%C3%B4%C3%9A%3Ab%C2%AAM%40%C3%9F%C2%AB%7CF%07%C2%A9%C2%9B%C2%BCHI~%08%C3%90X%C2%B4%C2%AC%5B%C2%B0_%24%3E%7C%C2%AF%C3%BDV%C3%86%C2%A9%C3%A4%C2%9D%0D%C2%B6y%C2%BC%C2%82%C3%9D%C3%B8%C3%9E%C3%85%C3%97%C2%83%C3%80%C3%97aS%7D%C2%AByMk%C2%B8L%C3%AC%00%C2%83%C2%BF%C2%A9%C2%8C%C2%AD%C3%BE%C3%9Dw%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var hide_off_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%13%00%00%00%11%08%06%00%00%00%3F%C2%98%C2%97%C3%87%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%A0IDATx%01%C3%95%C2%93%3FH%02a%14%C3%80%C3%AFT%C2%A4%1C2*(%C2%9A%1A%C2%A2%02%C3%A1%08%C2%A2%C2%A0%C2%A5%10%C2%A2%C2%86%C3%88%3F'HCK%C3%90%1EA%05%C2%81Ca%11%244%14%C2%B9%C2%B4%C2%95%04%09%C2%9EN%C2%AD%11%05%C2%B5%C3%9E%12HCC%C2%83%0D%11%C3%98%C2%9F%23%C3%A2%C3%94~%17(G*jS%3Dx%C2%BCw%C3%AF%7B%C3%AFw%C3%9F%7B%C3%9F%C3%B7%09%C3%82_%15%C2%B1VB2%C2%99l%C2%B5%C3%9B%C3%ADM%C2%BA%C2%AE%C2%BF%7B%C2%BD%C3%9E%C3%97%C2%86a%C2%8A%C2%A2%C2%B4%17%0A%C2%85uQ%14e%3E%C2%BBMK%C3%8F%C3%84%C2%8E%C2%ACV%C3%AB%C2%9E%C3%87%C3%A3%C2%B9%C2%AF%09%034K%C3%81%3E%C2%B0%0E%C2%A1%C2%8A%C2%B0%C3%B6%C2%88%09%07%02%C2%81hUX*%C2%95Z%22q%07%C2%B5%09%C3%B5IH%C2%96%C3%A5%C2%AD2%18%C2%B3%19%01r%C2%8Dk%11%C3%AA%C2%97O%C2%9B%C3%8D6I%C3%8B%17B%C2%B1%10%C2%88%C2%98%C3%8F%C3%A7%0F%1B%04%19b%C3%A7%60%0Eb%C2%B1XK%09%C2%96H%24%06%C2%99%C2%93%24%C3%BCN%5C%0E%C2%87%C3%83e8%C3%9F%C2%B3aWw%16%C2%8B%C3%A5%06w%00%C3%A8%09%C2%B6%C2%8FX%0F~o%C2%85%C3%A2%0Cz%C3%8BZ%C2%9A%C2%8E%C3%A6%C3%B0%C2%9FhU-%C3%AD%2C%18%0C%C2%BE%01%5B%C3%85mF%C2%B3%C2%AA%C2%AAN%C2%910N%C3%81%C2%99%C2%99B%C3%B1%15q%C2%89%C2%A1O%C3%A0%3F%102%C3%9A%5BafZ%09f%C2%88%C3%8F%C3%A7%C2%BB%C3%84%C2%84IZ%C2%93%24)%C3%8A%C3%8E4%C2%BF%C3%9F%3F%C3%8D%C2%9D%1A%06%C2%BA%40%7C%14%C3%88%189%1A%C3%97'%C2%82%C3%9D%26%C2%B6AL)2%C3%8A%C3%AE%19%C2%A7%C2%BAHR%08%C3%95%00%1Dc%C3%8F%C3%99%C3%B5%07%C2%B6-%C2%97%C3%8B%0D%C2%912%0F%C2%BC%15%C2%8D%C3%B0%C2%B3Msm%C3%85%17%10%C2%8F%C3%87%C3%BBig%19w%06%C3%AD4%C2%B5%C2%99%C3%85%C2%9C%C2%B2%C2%B6%C3%8B%C3%93J%C3%BF%C2%AC%C2%AB%C3%B56EN%C2%BA%C3%8B%C3%98%15%C2%80%17%C2%A7%C3%93%C2%99q%C2%BB%C3%9D%C2%BA%C3%B0%C3%AF%C3%A4%0BCc%C2%A9%C2%84%C2%B8%05%C3%A9%C3%A2%00%00%00%00IEND%C2%AEB%60%C2%82"; 
  
   var solo_on_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0B%08%06%00%00%00O%C2%85%C2%BCb%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%3EIDATx%01%C2%BD%C3%8EA%0D%00%20%0C%04%C3%81%3B%C3%92%0AA%5B%C3%AB%03%C2%B0%C2%80%20%C2%94%C2%91%14%0F%C3%B7%60%C3%BE%C2%9B%2C%23%C2%A2%200%C2%92%0B%3Fq%C2%9F%2B%C2%AD6%C2%88%C3%BE%C2%872f%C3%A6%C2%84%C3%80%C2%AAj%40%60%C3%AE%C3%9E!x%C3%BE%C3%81%0Be4%0Ee%C3%8E%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var solo_off_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0B%08%06%00%00%00O%C2%85%C2%BCb%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00AIDATx%01%C2%BD%C3%8EA%0D%C3%800%0CCQ%7B%0A%C2%90%0D%C3%A96%40%09%C2%A5BI%5B%0A%C3%BF%C3%90'%C3%B9%C3%B8%25%C2%BB%C2%AAZ%40t%C3%B7%C2%AF%C2%93%C2%BC%C2%AE%0E%01%C2%B1v%0B%C2%B8%04%C3%A1%10sf~%02%C3%82%C3%B6%2B%60%C2%87%C2%8F%C2%80%09%C2%875%0C%C3%95%10%C2%B0%C3%9Aj%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var add_layer_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%99IDATx%01%C2%9DR%0B%0D%C3%820%10%C2%BD6%08%C2%98%C2%84%C3%A2%00%140%C2%9C%C2%80%02%C2%82%C2%81%7D%0D%C2%80%02%2C%C3%A0%60%C2%930%07%C2%AB%C2%84%19%C3%98%C3%86%3B%C3%92B!kKxI%C3%93%C3%AB%C3%B5%C3%9E%7B%C2%BB%C3%AB%049%C2%A8%C2%AA%C2%AA%C2%99%C3%A79%C2%A5%08%C2%84%10%17a%0Fu%5D%C2%A7%C3%9345%C3%B4%23VL%18%C3%87Q%7B%C2%94%5B%C2%88%1D%C2%B1%C2%B3%C2%A0r%C3%AF%24%C2%BBH)S%C2%9FrQ%14z%C3%91%C3%91So%C2%8B%07%C3%A3%C2%AC%C3%91%C2%BB%C2%BDS%3E%C2%A2%C3%8E%C3%B3%7C%C3%AD%26%C2%B2%2C%C3%9B%1Bw%05%C2%91%C3%9EGLx%C2%BA%26%C3%AE%40%3A%C3%A3%7Cc'%C2%B8%26%C2%A1OM%C3%AC%C2%93%40%C3%BD%C2%990g%C3%A5%16I%C3%BA%13A%22%3B%C2%95e%C3%99%7F%C2%BB%7D%10%C3%B1%C2%96%1D%C2%BD%C2%A7%C3%A9B-%C3%A4%C3%B4%C2%ABGLl%C3%80%C3%9A%22%C3%9CP%18%C2%83K%C3%9Car%14%03~%C2%96%3B%1Bp%C3%8C%C3%84%2Bz9a%3FP%1C%1A%C2%AB%C3%A5%C3%A0%01%C2%89%06Y%C2%BEvj%18%C2%BB%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var edit_group_layers_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0F%08%06%00%00%00%3B%C3%96%C2%95J%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%3AIDATx%01%C2%8DS1V%C2%83%40%10%C3%9D%5D-%2C%C3%B1%06%C3%A4%06x%027%C2%A5%C2%A5'%C3%90%C3%9C%20%C2%B9%00%C2%B0%3C%C3%BAhiii%C2%A57%10%3A%3B%C2%B9%C2%81%1C%C2%8126%C3%A0%C3%BF%C2%B8%24%C2%9B%C3%8D%26%2FS%C3%80%C2%BC%3F%7F%C3%BE%C3%8C%C3%BE%05)%02Q%14%C3%85z%18%C2%86%C2%A5%03%3DgY%C2%B6%C3%B4y*%C3%94%C2%8CF%C3%ADA%C2%B7!%C2%9E%C3%A4%C2%A3%2C%C3%8B%C2%87%C2%BE%C3%AF%1F%C2%91%C2%BEJ)%5B%C3%A4%C3%AF%C3%88%23%C2%87%C3%97%01_Y%C2%8CBu%C2%9A%C2%A6O2%C3%8F%C3%B3%18%C2%85O%00%C2%B18%3F%3Al7S%C2%88%C3%ACDc%7B%04%C2%8F%C3%90%C2%B7V%C2%81%C3%B31%1A%C3%A0%C3%970i%C3%86%09%C3%98%C3%AC%C3%83'%C2%B0%C2%8F%C3%8Ds%7F%02%C2%B0%7B%1C%C2%A7c%C2%8E7%3DXpUO%7C%C2%AEX%C3%84%0A%0BwUb%C2%AE%18%C2%850%C2%BDq%C3%84W%C3%A4L%C2%86%C3%91%C3%9D%C3%84%C3%96F3%C2%A6%C3%89%C2%B69%02%C3%A7G%C3%ACn%C2%A0%1D'%5B%C2%A7%13%C3%97%0Cb%14%C2%9D%1Ai%C2%8E%C3%98%C2%BF%C2%BA%C3%B1%C2%86.%C2%91%C3%94%C3%A2%C3%90%C3%AD%C2%84%C2%93%C2%8C1-k%C2%98%22%C3%BC%40%C2%BDR%C3%B63%C3%ACD8%C3%A2%238M4%17UUm%C2%B4%C3%96%C2%BFXm%03%C2%B5%17%C2%88%C2%BD%C3%A1%C2%ADA%C2%B8r%C3%88%C3%B4%C3%A1%C2%8E%5B%C2%82%17!78%C3%8E%C2%97%0C%C3%89b%C3%9Do%C2%B1%C3%AFC%C2%83%3B%C2%BF%C3%B1y%C3%81%1FC%C3%BC%C3%BB%C2%B0%0DL%C2%AAC%C2%A4%3F%C3%B5%26%C2%9C%C2%BE%C2%9FH%40%2B%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var delete_group_layers_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%10%08%06%00%00%00%22a%C2%9E%07%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%20IDATx%01%C2%AD%C2%92%3DK%C3%84%40%10%C2%863%C3%89%1AH%17%C3%ACEA%10%C3%8B%C3%BB%07%C2%9E%C2%A0X%C3%B9%1F%C3%8EF%2Cl%C2%AE%0E%C2%84%10Hm%25XXX%C3%B8%1F%049%C3%BC(%2Cl%C2%AE%15l%C3%8E%C3%86%C3%82%C3%8EN%C3%8C%C3%87%C3%86g%C3%81%C3%80%26%18%C3%AF%C2%8A%1B%C2%98%C3%8C%C3%87%C3%8E%3B%C3%B3Nv%C3%85%C3%A9H%C2%92%24%23%11%C3%990%3E%C3%B6-%C2%8E%C3%A3%2B%C3%BB%5C%C3%924%C2%BDo%C2%82%C2%BA%C2%AEC%C3%8C%C2%A0%C3%93%C3%A3%19%C3%A0W%13%C2%A8%16Z%C3%A4%13%C3%B3%C3%A0%2CS%24%C3%8B%C2%B2AUUg%C2%8B%14k%C2%AD%C3%87%C2%8AO%08%C3%B7%C2%A1%C2%B3%C2%98%C2%84nk%C2%9C%C3%88%0C%C3%B3j%C2%A5%5E%C3%88%C2%BD%C3%9B5n%C2%A7%C3%83%C2%91%C3%A7y%7B%C2%BF%C2%A0i%C2%9E%C3%A7%C3%BB%00FvA%C3%AB%2FA%C3%AD%C2%A2%2C%C3%8B%03%C3%9C%5D%13%07A%C2%B0%C3%82~%C2%97%C2%BD%00d%1B%3D%C3%A7%C3%B2%0EM%C3%80%1D%C3%9D%60%C3%96%C3%BF%03L%C2%8B%C2%A28%C2%89%C2%A2%C3%88%14i%C3%97u%C2%8F%C2%990%C3%81%C3%9F%C3%BAs%07(%C2%8D%C2%A1%C2%A1%7C%C3%9F%7FDo%C2%A1'%C2%A4O%7B'%C2%B0%C3%A05%1DuC%C2%83%C3%B8%0E%5D%C2%A5Q%2F%C2%A5%C2%B5N%C2%BCi%177%C2%94%3E%C3%90og%C2%8E0%C2%A9PJ%C3%8D%0CG%C3%B3%C2%A4%C2%87%24vL%C2%BE%C2%A7%C2%BE%C3%A6%7C%C3%82S%7F%C3%BA%01Li_V%C2%B1%C3%9E%C3%AB%08%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var guide_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%ABIDATx%01%C2%BD%C2%92%C3%9B%0D%C3%820%0CE%C2%AF%2B%06%C3%A8%08%1D%C2%A1%1B%C3%80%26%C2%8C%C3%80%0A%C2%AC%C3%902%01%C2%83%10%C3%84%06l%C3%90%C2%8E%C2%90%7FJ%C2%8C%C2%9D%C3%84%C2%A2j%11H%7C%C3%84%C2%92%C2%AD%1C%3B%C3%B2C6%C2%90%C2%A5w%C3%8F%C2%A1%C2%BB%3C%C2%8E%C3%86'7%5DU%C2%8D5%C3%96%C2%BBi0%C2%AE%C3%B0%C2%A7%C2%90VJOn%C3%84xq%C3%B9%C3%8C%C2%B5%18Q%1A%3F%C3%B1%C2%869%C2%9Cc%06%C2%A2%03%01%C3%B7%C3%80%C3%A1%C2%96%C2%B8%C3%9Ak%22%C2%8BWD%5B%06Zc%C2%94%C2%9F%C3%91%C2%B2J%1B%3B%C3%AD%C2%9F%C3%80c%C3%A66~%C2%90%C3%B6%13S%C2%A3s%1A%C3%8F%2Bz%C3%BC%C2%96z%C3%A5)7%C2%A3Uy%C2%AF%C2%83%C3%A7%C3%AB%C3%80z%1D%C3%9C%C3%85%C3%B8%C2%97%03X%C3%B2%C3%A2%20J%C3%8F%C3%B8%02%C3%A1%7F%C2%8D%C3%9F%C2%A9%24R!%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var guide_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%92IDATx%01%C3%85%C2%92%5D%0D%C2%800%0C%C2%84%3B%C2%82%00%24%20%01%07%C3%A0%04%09X%C3%80%02%12%10%C2%B0Y%208%C2%98%03%C2%90%C2%80%C2%83%C2%B1%C2%92k%C2%B2%C2%8C%C2%BF%C2%84%C2%87%C3%91%C2%A4i%C2%BEm%C2%B9%C3%AE%C3%92%12!%C2%8C1%C2%8B%C3%96%C2%BA%0Fx%C3%A2%14%C3%A6%3B~%23%C2%9C%C3%91%C3%87P%C2%81J%C3%A9sCr%14%C3%88%C3%B5%C2%8As%C3%A7%C3%9Cx((%C3%95%C3%B9b%3D%C3%8F%C3%A0%C2%96E%C2%82%C3%BB%C3%9A%C2%97J%C2%98%C3%A8%0F%C2%8F%C2%A2%C3%9A%C3%A0%C3%BF%2B%C2%B8B%C2%B5%C2%A8%25%3C%C3%9A%C2%B8%C3%A3F%C3%AFQ%C2%9CN%C3%92y%C2%94.7%C3%A3%C2%A0%C2%8Bq%0C%07%3F%2C%40%C3%8C%C3%B1B%24%C3%B6%C2%B8%03%3A%C3%BDy%C2%9BY.~%C2%94%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var lock_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%10%08%06%00%00%00%22a%C2%9E%07%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%ACIDATx%01%C2%95R%C3%91M%C3%830%14%C2%BC%C2%B3%C3%83%7FF%08%13%00%13Ta%11%C3%A0%C2%93%2F%C3%88%060%01%02!%C3%B1%09Y%C2%840B7hF%C3%887%C3%849%C3%BC%C3%94%C2%A6r%C2%95%C2%AAMO%C2%B2t%C3%8F%C3%AF%C3%AE9g%C2%87H%C3%B0%C3%91%C2%A8%C3%A8%15%3E%05%5C%C3%862w%C3%84%C2%97%C2%87%7F%C2%BE%2F%C3%99%C2%8E%1A%C2%A6%C3%A2%3F%0D%0D%C2%A0%5CR%0D*'%C3%BC%C3%82z%C2%81%C3%AE%C2%AA*%C3%99%19%C3%8FF%C3%83%C3%AF%C3%90%3F%C2%92%2C%02%C3%BDyu%C2%BD%C2%9E%C3%B8%12%C2%87x%C2%85%C2%95%C2%8B%C2%BDX%3E%C3%99%C2%9E%1B%0D%C2%8E%C2%BC%C2%88%C3%87%C3%BDT%C3%89%C3%B1%C3%86%09.co%C2%B1%C3%95%C3%A1(%C3%94%C2%A5%15%C3%9F%1B%C3%9DH%C3%A1v%13%C3%94B-w%C3%A4%C3%A9%3E%C3%B1%C3%8A%C2%B7%C3%AF%5E%C2%98%C2%8Fn%C3%86'%C3%AD%20%3F%C3%95%C2%B0%2F4%5B%C2%BBZ%5B%C3%86%C2%8F%1A%C2%A4%C2%A1%C2%B6%C3%AB%C2%B4e%7C2n%1A%C2%9A%C3%AD%19%5Dil%C3%B3%C3%B2E%C3%9A%C3%8D0%C2%81%C3%BD%22a%C2%85%C3%B9%19%0E%C3%83%0C%C3%9D)%C2%86%C2%8C%C3%84%5D%7C%C3%8E%C2%879b%09%C3%B5%3FiJ_%C2%A3%C3%B5j%0F%16%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var lock_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%10%08%06%00%00%00%22a%C2%9E%07%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%B9IDATx%01%C2%95Q%C3%AD%11%C2%820%0Cm%7B%0C%C3%80%06%C3%A2%06%3A%C2%82%1B%08%0C%C2%80n%C2%80%13%C2%88%1B%C3%88%04%C3%A0%00%C2%80L%C2%A0%1B%C3%88%08l%C2%A0%C3%BE%C3%A7%C3%83%C2%97%C2%B3%C3%A5z%08%C2%9C%C2%BC%C2%BB%5C%C3%924y%7DI9%C3%93%C2%90e%C2%99%C3%95%C2%B6m%C2%84pEg%C3%8E%C3%B9%15%C3%AEd%C3%9Bv%C2%A9jx%C2%AF%C3%B8F1%C3%BCE6x%C3%92%C2%AF%C3%91%C3%B4%C2%A2%C3%98P%0D(%C3%B2%C3%A1L%C2%BAt%1C%C2%A7%C2%94%241%C3%B2%C2%8F%C2%A6i%C3%A8.%C2%A0%C2%9C%C3%90%25%C3%A12%C3%94%C2%9F%C2%A7%18%04w%C3%98J%C3%A5%C2%BA%17%C3%80%C3%AA%C2%B3%01%C2%80%C3%A4%0D%C2%B7%C3%A8f%C3%88%C3%B3%C3%9C%C2%AB%C2%AAj%0B%16%C2%93%0DC%C2%B1%17%C2%90%16%1Au%5D%C2%9FQL%03%C2%95%23%0D%C2%85%C3%B4%C2%96%10%22%22I%26iw%5D7%60%13H%C2%92%24%00%C3%B1Q%C2%B0%C2%990%C3%BA%09%C3%BD%3F%C3%80%C2%B8%C3%91%C2%B7F%C3%B8y%01%C2%83%C3%ADH%2F%C2%99%C2%8C%C3%99d%03%06%C2%8B%C3%99w%01%C2%A5%C2%8C%C2%A7%25I%09K6%C2%82%C3%99C%C3%B34M%C2%9F%C3%B0S%C3%BF%C2%A0%60%C3%81L%C2%81M%C3%AC%C3%BF(%C2%A6%C2%8D%15%C2%B0%C3%83%07%3A%C3%B2g%C2%8BJEv8%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var view_button_fx_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%8DR%0B%C2%91%C3%820%10MR%04T%02%C3%A7%C3%A0%C3%8E%01%C2%A7%C3%A0%C2%AE%C2%AD%01%1C%14%14P%1C%C2%80%02%40%40%C2%A7S%05T%02(%00%09%18h%C3%8B%7B%C3%8C%26%C2%B3%C3%BCy3%C2%9D%C3%AC%C2%BE%C3%ACK%C3%9Enj%C2%8DB%5D%C3%97y%C3%9B%C2%B6%05%C3%82%C3%98s%C3%96%C3%9A%C2%AF%24I%C2%8E%C2%BAn%C3%A0%C2%83%C2%AA%C2%AAb%11%C2%B0p%C2%ADjN%C3%A6%06A%04%C3%81%C3%889%17%C3%B7%7D%3FM%C3%93ta%5E%C3%80%C3%B9%20%C2%8A%C2%A2%C2%BF%0B%C3%A1%5Cc%C3%9E%C3%80%C3%92%16%7B%C3%80%0D%5B%C2%AE%C2%B0%C3%B6%C2%A3%0Bt%3F%C2%A8%1D%5E%0EFq%C2%85%C3%AF%C2%80x(%C3%A2%C2%83%C3%BE%C3%8A%C2%B2%2CD0c%C3%9Eu%C3%9Dx%C2%80%C2%93%C3%A7H%C3%B6%C3%A0s%C2%ACsm%0F%C3%B9%0C%C3%BB9%04%08%C3%BB%C2%82%C3%BBY%C2%96%15VNY%C2%81%18%C3%93%1A%C3%AC%C3%AC%C2%94%C2%9D%C2%91%C3%986%5E%10%06%01%C3%A2%1B%C3%8BI%0B%04a%C3%9Cp%10%26%C3%AAd%10%14%5D%09%C3%98%C2%B4%C3%9C%C3%920G%2F%C2%93%20%12%01%C2%B1%7F%208%C3%A2%C3%8D~)dow%22%C2%90%C2%8D'q*%7B%C3%99%C2%80Kdo%C2%8A%7C%C3%A9G%C3%8Ew%C3%A2h%C3%BE%1F%C3%BDc%C3%8F%C3%A0%C3%94%10%3E%12%10gup%C2%AC%C2%BD%C3%A7%C3%BASp%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var view_button_fx_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01AIDATx%01%C2%8D%C2%92%C3%8BM%C3%83%40%10%C2%86g6N%C3%8E.%01%3AH%3A%C2%88%C2%95%02%C2%80%0ErEB%04W%10%C2%A7%02%C2%88%C2%8C%C3%841PA*%40%C3%AB%12H%05%C2%A4%C2%84%1C8%20%C3%AC%C3%9D%C2%9F%C2%99%0Dv%16%C3%84k%24%C3%8B%C3%A3%C2%99%C3%BD%C3%A6%C3%B1%C2%AF%C2%99%22%2B%C2%AD%C2%9B%01(%C3%84M%C3%9B%C2%98%C3%A3%C3%9Eq%C2%9E%C3%B16%3E%C2%97%C2%B4%C3%8E%C2%B5E%0A8%05%C3%88%C2%80%C3%AE%0F%10%C3%AD%C3%A8%C2%8BuP%C3%A2%C3%9C%18F%3A%C3%80%C3%A7%17%C2%93%C3%81%0D%C3%BDb%C2%A6u%C2%B8G'%C2%A1%C2%B2%C2%A1%C2%8A%C3%BE0%5E%C3%89X%C2%AF%C2%B2C%0Do%C2%89%C2%90%C3%B6%C2%B97%C2%8A%0F%C2%9CG%C3%BB%C3%9CY%1C%C2%85N%2Fp%C3%AB%1A%C3%AEY%00%0D%C2%A4%C3%AA%C3%87%C3%8F%C3%B2%C2%B1.%C3%B4%C2%A0%C2%884%C3%97%C3%AF7%C3%9FL%13b%2C%C3%A0i%C3%83%C3%8C%C2%AA%C3%9C%C3%82%C3%84%C3%A3%C2%81%C3%A7%24q%01%C2%A0%C2%AAj~6%C3%A9%17%C2%AC%C2%B9%5B%C3%9B%C2%AC%3Ch%C3%AA%C3%98%C2%8F%C3%B2l%C3%B0%C3%942%C2%A5%C2%AD%C3%87%00%C3%9B%C3%80%7F%00%C2%9D%10%C2%92%18%C3%8Ak%17%03%C3%BB%24%3A%C2%B9%C2%BDI%3AEM%C2%B8%1F%C3%82PZ~%02ti%07c%C2%89%C3%B7%C3%A3%1A%C3%9F%5CuPB%C3%8D0T%0261%C2%A0j2%C3%B1%C3%B62K2)X%C3%A9%C3%8E%1D%04%C2%8F%00%19%C3%83U%1B%C2%AC%C2%BD%5C4%C3%BCC%C3%83%C3%A6%2C%C3%A4%C3%98%C3%A7%C2%B2%C3%93%C2%B2%C2%95%C2%9CK%C3%9B%C2%AC%01%3A%C3%BD%C3%AE%1F%C3%BB%C3%89%C3%8CA%C2%84%C3%BF%01j%C3%AF%C2%83%C2%BD%C2%BA%C2%93!%C3%A8%C2%BFM%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var collapse_transformation_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%40IDATx%01%C2%B5S%C3%8Bm%C2%83%40%10%5D%3E%C3%A2L%09%C2%B8%03%C2%A7%C2%82%40%05%C3%8E%1D%C2%81%C2%A0%C2%82l%07V*H%5C%01%09%1Fq%C2%A4%04%C2%93%0AB%3Ap%09D%C3%A2%C2%84%C3%B8%C3%A4-Z%C2%AC%C2%B5Ya_%3C%C3%92hwgv%C3%9E%C2%BCy%0B%C2%84%C3%9C%C2%B0(%C2%8A%C2%AC%C2%B5%C2%BC%C2%BA%C2%96L%C2%92%C3%846%0C%C3%83%C2%BE%1B%C2%A0(%0AS%3C%C2%8F%C3%A3%C2%B8%C2%85%3F%C2%8B%C2%B1%3C%C3%8F%C2%AD%2C%C3%8B%C2%B6R%C2%80%C2%A6i(%C2%BA%C3%AE%C3%A7%C2%B3%C2%A2(%C2%AC%C3%98%16%18%C2%BDv%5DG%5D%C3%97%C2%AD%C3%8EwD%00%C3%8Ckj%C2%9A%C3%B6%C2%A3%C2%AA*%19%C2%86%C3%A1%0D%C3%AB%1E%0C%2C%C2%A4%1C%C3%B8%C2%B4%C3%AF%C3%BB%C3%9E%09%C3%83%C3%B0%24%05%C2%98%C3%A7%C3%86r%24%12%03%40%C3%A8%C3%BB%C3%BE%C2%A7%18%5B%C2%88%C2%88%C2%AE5%C2%96J%06%C2%80%C2%91N%C2%8B%18%C2%A7%1D%20%C2%B9%C3%83%C2%99%C2%89c%C2%92%C3%9BV%C3%82%C2%BF%C2%A1%C3%87%C3%87y%04%C3%B6%C3%9E%C2%BA%C2%AE3%00%1BTw%00%C2%B4%24%C2%85%070%C2%AC%C3%9A%C2%B6-g%1D%16%1A%C2%B0g%C2%82PG.%C3%9E%C2%B59%C2%9E%C3%A7%C2%95b%60%C2%A1%01%C2%8Ag%C3%A5%0F%C3%B0%C2%9A%C2%87%C2%BF%C2%A6n%C2%8A%C3%B2~%7D%C3%BF%02%20%C2%8E%C3%A3%00%C3%8Fg%C3%B3N%14%05L%C3%8C%1A%C3%BB%00%C3%B3n%C2%903q%C2%87%C2%8A5%C2%BA%C2%84%C3%81%13%C3%A6%C2%9B%3A%C2%83%C3%89%2F%C3%BC%C2%8F%C3%AD%C3%B9%C3%8C%1B%C3%96%C2%84%C3%9Ck%C3%B8%26%5E%C3%924%C2%A5kwV%7F%26%C3%90.%C3%81%C2%A0%22%C2%8F%C2%B4%7F%C3%9A%C2%A4%C2%96h-9%C2%8E%C2%B6%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
   var collapse_transformation_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%0F%08%06%00%00%00%C3%ADsO%2F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%017IDATx%01%C2%8DR%C3%8BQ%C3%830%10%C3%9D%C2%95%C2%93%19%C2%8E%C2%94%10%3Ap%3A%C2%B0%C2%A1%00%C3%92%C2%81%C3%93%00%13%C2%A7%02%C2%86%0A%3Cv%26%C3%831%C3%90%01%0D%04%C2%B9%03%C3%9C%01.%C3%81%07N%C2%B6%C2%A4E%C2%8B1%C3%84N%C3%BCy%17i%C2%A5%C3%9D%C3%B7%C2%B4%C3%BB%040%C2%80%C2%83%C2%A4k%18%C2%81%18%C2%BA%C3%BC%C3%92%C3%9A%C2%8BFHZ%04%C3%8F%C2%92%16%C2%A71%3Ap%3F%03%C3%ADM%26(%C2%8DZ'G%C2%B5nb%22t%C2%8D!%C2%AF%C2%89wR%3F%C3%AE%C2%A4Z%C2%B5DN%03~%C2%AEC%C3%BAS%20%C2%BC!%C2%98X%C2%93%C3%B8%C2%B0%09)%20%3D%11%C2%89%03%02%C3%A5%0F%C2%B73%C2%BF%C2%97%C2%80%C2%91%C3%882%04%12%11%5C%C2%80F%C3%A7f%C3%ABc%C3%9E%C3%9B%02%C3%83aEh'%C3%BD*%C2%A5Wp%0E%C3%BCy6%C3%A8%15%12%04%04%C3%A0%C3%9A%C2%B3%11%C3%AB0G%C2%A2L%09%C2%8A%C2%B7%C3%BE%3C%C3%BDk%C2%81%C2%89x%C3%A2%3C4D%0C%C2%BAD%08%C2%98%11%C3%AAW%5E%15%C3%8C2%C3%9BJQ%C2%9Fw%C3%80VVv%C2%90%C2%97%C2%945%C2%8AeS%C3%98%C3%A0l%06%15%19i%C2%97%C2%82%C2%88%C3%A2%C2%A6%C2%B0%C3%9E%C3%93B%18%15v%C3%B3%5B%04%C3%96%C3%A7%C2%8D%C2%B5%2C%C2%B3%C3%93%5En%C3%AE%C3%A6%C2%9C%5C%C3%988%C3%A5%3D%3B%C2%80(%C2%82%C2%BD%2C%5D%C3%A8C%C3%94%C3%B9%C2%89%C3%B1%7B%C3%B9%C2%92%C3%88%C3%BF%C2%8FU%C2%8BT%1ELEr%2C%C3%83hHq%0C%C3%BB%09%C3%85%C3%9F%C2%9D%C2%AF%C2%90%C2%84%C2%A7%C2%88%C2%9A%1E%00%00%00%00IEND%C2%AEB%60%C2%82"; 

//Setting Panel Icons

    var create_group_layers_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0C%08%06%00%00%00%C2%BDB%C3%A7%C3%A4%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8FIDATx%01%C2%A5R%5B%0D%C2%800%0C%C3%AC%08%02%C2%900%098%00%098%00%14%C2%81%03%C2%90%02J%40%02%0E%C3%8A5t%C2%84%0F%1E%C3%9B%C2%B8%C3%A4%C2%B2%C2%B5%C3%A9u%C2%BBu%C3%84%C3%8C%1D%C3%BBc%013r%C3%A0p%C2%94N%C2%9B%C3%90%0F%C2%A4%C2%BA%C2%8E%C3%A0%C3%BCQ%2B%C3%97%C3%AD%C3%AE%C3%84%C2%B31f%7CS%C2%AAW%0B%C2%AE%C3%97%C2%A4%C2%A0%C2%A1%08%04y%C3%86!%C2%95%C2%BCx%C2%94%C2%98%0E%C3%9F%C3%96%05%C2%A9%C2%8FBm%0D%C2%97%C2%98%C2%B1%C2%AC%5Eb%60%02%5B%C2%B0%04k%C3%9D%C2%9F%C3%A2%C3%A2h%C3%B6%C2%88M%C2%A6%C2%A15%C3%B59%19%24z%C3%8F%C2%9Fee%5C%60%C3%AE%3A%C3%AE%C2%94s%C3%80%C3%BFf%C3%B8%C2%8C%C2%8A%00%00%00%00IEND%C2%AEB%60%C2%82"; 

   var save_my_presets_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8AIDATx%01%C3%95%C2%90%C3%91%0D%C2%80%20%0CD%C2%8Bq%00G%60%0470l%C3%86%26%C2%BA%C2%89%C2%A3%C3%A8%06%C2%BA%01%C3%9E%C2%99%C2%9A%20%C2%8AA%C3%BF%C2%BC%C3%A4%C2%A0%C2%A1%7D%C2%A5%C2%A9HF!%C2%84%C2%91%C3%8E%C3%A5%2B%C3%B9%C2%A8%C2%BF%C2%82XF%03%C2%B7i%11%C3%9F%C2%98%C3%8B%C2%82P%0F%C2%8F1%C2%AC1%C2%B7%3B%C2%A4%C3%9D(%C2%AF%C2%B1%C2%85'x%C3%91%3B%C2%8E%C2%AD%C3%96x%02%C2%A7%1F%C2%8D13.%07%C2%AF%C2%B0U3v%C2%9A%C3%8B%C2%8E%1A%C3%83%C2%B3%C3%BA%02Q%C2%B5%C3%9C%C2%88%C2%85%C2%98%C3%86E%C2%8D%C2%A4%08%7C%02R%C2%B0%3B%16T%C2%A0n%3F%C2%8F-%C2%BD%C2%94%C3%9F%00C%C3%9A%C2%92%C2%B0%C3%A1%C3%90gS%00%00%00%00IEND%C2%AEB%60%C2%82";

   var load_my_presets_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%0F%08%06%00%00%00%C3%90%C3%A1.I%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%B0IDATx%01%C2%8D%C2%92%C2%81%11%C3%82%20%0CEC%C3%8F%01%C3%9C%40Gp%03%C3%9B%09%C3%AA%06%C2%B2%C2%89lR7%C2%B1n%C2%A0%13%C3%88%08n%10%C3%BFW%C3%ACQ%0E8%C3%BE%C3%9D%3BJ%C2%92OH%5BQ%C3%95%C2%8B%C2%96%C3%B5%02%7B%C2%89d%18%C3%85%3A%C2%83%C2%BB%C2%AC%C2%B5%03%16x0%18c%C3%BC7%1ANrI1%C3%A3%7D%C2%AES'mb%C3%B1%C2%8D%C2%A6V%C3%83b%C3%9AT%0A%1E%60%C2%88%C3%B6%16%C2%9Ck%06%C3%81%C2%A0%C3%B3%C3%BF%C2%993q%C3%8D%5E%09%C3%89I~w%C3%9E%C2%A6%C2%B9%C2%AEPl%C3%81%01LUCTL%C2%BD%C3%81)%C3%84%16%C2%A53%C3%B0%C3%A3%3D%C3%81%18%C3%AD%7D%C3%91%C2%80!%C2%AF%C2%A1%C3%93%18%C3%B6.9PJo%C2%89%5D4%C2%97%C2%A8%C3%BDK%C2%A9%C2%8E%C2%A0g%7B%C2%A7%C3%ADr%1F%C2%A7%C3%86%C2%A2m%0C%0F%C3%81%C2%AB%00%00%00%00IEND%C2%AEB%60%C2%82";
    
   var unlink_layer_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%10%08%06%00%00%00%C3%B01%C2%94_%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C3%B2IDATx%01%C3%8DQ1h%14A%14%C3%BD%7Fv6wI%40%12H%23%C2%A2D%14-%02%C2%A2%C2%85%C2%95%C2%88%C2%B9S!%60%C2%95%C3%8AJ%0B%11%C3%84%C3%88%C2%8A%C2%B9N%1B%C2%B7%C3%91J%C2%B9%C3%8B%C3%A5%1Am%C2%84%C3%98%06%0CV%11%C3%8Dm%10%C3%81BAc%C2%91%C3%86%C3%82%C2%A0%C2%82%C3%98%24WhLvw%C3%BEs%C3%A6%C2%8E%C2%8D9E%C3%82%C2%A5%C3%8A%C2%83%C3%99%C3%BD%C3%B3g%C3%A6%C3%8D%C2%9B%C3%B7%C2%88v%0Ax%C3%B3%24%C2%8C%C2%A0%07%C2%84%C3%B6x%C2%AA%C3%95%C2%BFZ%C3%A0%25%C3%B7%7F%14%C2%A1o%C2%8D%C2%A8%C3%8F%C3%95%C2%A2%C3%88%5C%3BE_%C3%ADQd%C3%A7TVLF%C3%A9%C3%B9~%C2%98o%C3%82f)%C2%81%C3%B9%C3%A4%C3%86d%C2%94%0C%C2%BB%C2%B5%1F%C2%94%1E%C3%8Dz%C3%86%C2%98%C3%8F%C3%95%C3%88%7C%C2%9Fx%C2%91%C2%8C%C2%B4%C2%91T%C3%AA8%2CBSDxLH%0F%C3%BA%C3%AC%C3%ADw%23%25%C3%BD%C3%9E%C2%AD%07%05%7F%3E%C3%AB%C2%91%C2%98!%C2%80%C2%9E%C2%B0R%C3%93%C3%95%C3%A7%C3%B11%C2%B7%C2%AE%5B%1F%C2%B9%08%C3%A6%C3%85%C2%A0%C2%A8K-U%C3%A66%0B%06%7D%5B%C3%97%C3%A6%C3%92%C3%A6mF%0C%09%C3%89%C3%82%C3%B53%C2%B9%C2%8A%C2%9D%5E%C2%A9%C3%8E%C2%99a%C3%B1%C3%88)%7D%C3%97%24%01S%2F%20~%26OD%C3%BA%15%C3%B3%20%C3%BD%05%C3%85%5E%C3%A3%C2%8F%C2%9BhX%C3%AB%C2%BA7%C2%94(R%C3%93%C2%86%10%C3%94%C3%A6Q%C2%B2%C2%A6U%C2%98%C3%B9%06%C3%BD%07%0F%C3%9E%C3%82%C2%8F%1B2%06%C3%82q%C3%BB%C2%AC%C3%B1%C2%B6tjuS%12%C2%A6%3B%04%C3%A47.c%14%C2%9C%1F%C3%8E%60%C2%80%C2%A3M%5C%C3%ABLr3(v%C2%95%C3%9BH%1C%C3%8A%C2%B3%C3%98%C3%ADu%C2%A5%C2%87%C2%98%5B%7Dg%C3%ACx%C2%81%1Be%1B%C2%B1%C2%B6%0957!I%3C%C2%BF%7Bq%C3%AC%24%C2%AF%C3%90vp%C3%BF%19%C3%B6N%C2%BC%C3%82%3EW%C2%87!%C3%B4%C2%BD%C2%A7%18%C3%B8G%C3%89V%C2%A8%C3%96%C3%93%19%2BrH%C3%A7VO%C3%84q%C3%BE%C2%96Mdt%C3%A5%C2%A5w%40wB%C3%92%13%7B%C2%97~%C3%B9%C3%A6M%C2%B2%C3%96%C3%B3%C3%91%C2%A6%C3%B3%C2%93%C2%8D%C2%9C%0BC%C2%9D%C2%AANH.%C2%8F%C3%B0%C2%B2%C2%8D%C3%B2%C2%83%25%C3%98e%C3%A3%5D%C2%8E%C2%B5%C3%BF%C3%85%C3%B5%3B%22%C2%B1%C3%8Fyhc-Z%C3%A3G%C2%AD%C3%83%C3%B9%1C%C3%A4%C3%B5%C3%94%02z%3B%22!%C2%8Ff%09r6(%C3%A8%C2%99u%24%C2%A7E%C3%A1%C3%AE%C2%85%23%C2%B4%C3%BA%1B%C3%A0%C3%82%C3%9B%C3%96%C2%A4%03%C2%AB%C2%B4%00%00%00%00IEND%C2%AEB%60%C2%82"; 
    
    var unlink_effects_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%10%08%06%00%00%00%C3%B01%C2%94_%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C3%B2IDATx%01%C3%8DQ1h%14A%14%C3%BD%7Fv6wI%40%12H%23%C2%A2D%14-%02%C2%A2%C2%85%C2%95%C2%88%C2%B9S!%60%C2%95%C3%8AJ%0B%11%C3%84%C3%88%C2%8A%C2%B9N%1B%C2%B7%C3%91J%C2%B9%C3%8B%C3%A5%1Am%C2%84%C3%98%06%0CV%11%C3%8Dm%10%C3%81BAc%C2%91%C3%86%C3%82%C2%A0%C2%82%C3%98%24WhLvw%C3%BEs%C3%A6%C2%8E%C2%8D9E%C3%82%C2%A5%C3%8A%C2%83%C3%99%C3%BD%C3%B3g%C3%A6%C3%8D%C2%9B%C3%B7%C2%88v%0Ax%C3%B3%24%C2%8C%C2%A0%07%C2%84%C3%B6x%C2%AA%C3%95%C2%BFZ%C3%A0%25%C3%B7%7F%14%C2%A1o%C2%8D%C2%A8%C3%8F%C3%95%C2%A2%C3%88%5C%3BE_%C3%ADQd%C3%A7TVLF%C3%A9%C3%B9~%C2%98o%C3%82f)%C2%81%C3%B9%C3%A4%C3%86d%C2%94%0C%C2%BB%C2%B5%1F%C2%94%1E%C3%8Dz%C3%86%C2%98%C3%8F%C3%95%C3%88%7C%C2%9Fx%C2%91%C2%8C%C2%B4%C2%91T%C3%AA8%2CBSDxLH%0F%C3%BA%C3%AC%C3%ADw%23%25%C3%BD%C3%9E%C2%AD%07%05%7F%3E%C3%AB%C2%91%C2%98!%C2%80%C2%9E%C2%B0R%C3%93%C3%95%C3%A7%C3%B11%C2%B7%C2%AE%5B%1F%C2%B9%08%C3%A6%C3%85%C2%A0%C2%A8K-U%C3%A66%0B%06%7D%5B%C3%97%C3%A6%C3%92%C3%A6mF%0C%09%C3%89%C3%82%C3%B53%C2%B9%C2%8A%C2%9D%5E%C2%A9%C3%8E%C2%99a%C3%B1%C3%88)%7D%C3%97%24%01S%2F%20~%26OD%C3%BA%15%C3%B3%20%C3%BD%05%C3%85%5E%C3%A3%C2%8F%C2%9BhX%C3%AB%C2%BA7%C2%94(R%C3%93%C2%86%10%C3%94%C3%A6Q%C2%B2%C2%A6U%C2%98%C3%B9%06%C3%BD%07%0F%C3%9E%C3%82%C2%8F%1B2%06%C3%82q%C3%BB%C2%AC%C3%B1%C2%B6tjuS%12%C2%A6%3B%04%C3%A47.c%14%C2%9C%1F%C3%8E%60%C2%80%C2%A3M%5C%C3%ABLr3(v%C2%95%C3%9BH%1C%C3%8A%C2%B3%C3%98%C3%ADu%C2%A5%C2%87%C2%98%5B%7Dg%C3%ACx%C2%81%1Be%1B%C2%B1%C2%B6%0957!I%3C%C2%BF%7Bq%C3%AC%24%C2%AF%C3%90vp%C3%BF%19%C3%B6N%C2%BC%C3%82%3EW%C2%87!%C3%B4%C2%BD%C2%A7%18%C3%B8G%C3%89V%C2%A8%C3%96%C3%93%19%2BrH%C3%A7VO%C3%84q%C3%BE%C2%96Mdt%C3%A5%C2%A5w%40wB%C3%92%13%7B%C2%97~%C3%B9%C3%A6M%C2%B2%C3%96%C3%B3%C3%91%C2%A6%C3%B3%C2%93%C2%8D%C2%9C%0BC%C2%9D%C2%AANH.%C2%8F%C3%B0%C2%B2%C2%8D%C3%B2%C2%83%25%C3%98e%C3%A3%5D%C2%8E%C2%B5%C3%BF%C3%85%C3%B5%3B%22%C2%B1%C3%8Fyhc-Z%C3%A3G%C2%AD%C3%83%C3%B9%1C%C3%A4%C3%B5%C3%94%02z%3B%22!%C2%8Ff%09r6(%C3%A8%C2%99u%24%C2%A7E%C3%A1%C3%AE%C2%85%23%C2%B4%C3%BA%1B%C3%A0%C3%82%C3%9B%C3%96%C2%A4%03%C2%AB%C2%B4%00%00%00%00IEND%C2%AEB%60%C2%82"; 


//Head Panel

    var logo_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%7C%00%00%00%19%08%06%00%00%00%C3%B3'JW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%04%C3%B9IDATx%01%C3%ADXKn%1BG%10%C2%ADfhXI%14%C2%84A%0E%C3%A0%C3%91%0D%C3%A8%13x%C2%B6Y%C2%85%3E%01%C3%A9%13%C2%88%5Cf%C3%85%C3%91%09(%C2%9D%C2%80%14%C2%9C%20%08%C2%90%C2%804%C2%90%C2%AC%C3%89%C2%AC%C2%B2%14O%C3%A0%C2%99%C2%AC%C2%82%2C%022%C2%AB%C3%88%C2%B6%C3%A4N%C3%95%C3%8Ck%C2%B1%C3%94%C2%9C%19R0%0C%C3%88p%3F%C2%A0%C3%94%C2%BF%C3%AA%C3%97%C3%95%C3%95%C3%93%C3%95%25%12%05%04%04%04%04%04%04%04%04%04%04%C3%9C%2F%18%C3%9D%C2%B0%C3%96F%C2%95%C2%8A%C3%86d%C2%94%C3%98%16%C3%91e%C3%AB%C2%80%C3%9B%C2%97%C2%84%3F%07%07kJ%C3%8C%C2%9A%02%3E%084%5C%C2%85%0F%3B%C3%A5%C2%A2N%C2%88%1E%5E%C3%B6%C3%8D%03%C2%93%C2%BEj%C2%9A%C2%97%C2%A6a%5E%C3%92C%C3%AE%C2%BF%C2%BE%C3%AC%C2%94%113_%C3%8C2%16%5E%C2%96%0B%C3%94%23%C2%BAG%60%7BZ%2CsH%5C%C2%A13%C3%85x%C2%87%C3%9E%03%C3%A0%C2%A7%C3%B7%C3%86%C3%AF%C2%A3%C2%81E%23.D%C3%A4%C2%A6%C2%9E%C2%B1%C3%8CJ%C2%B5%3Fc9%C3%8CKcY%C3%A8%C3%90H%7D%C3%A1%C2%AB1_%C2%97%C2%8B9K%0F%C2%9C%C2%84%C2%BA%1C%7C%C2%9B%C3%AE%0F8bQ%0C%C3%99r8%C3%9B%C3%9AC%7F%0C%C3%9D%C2%9D%C3%A09%13%5B%20%C2%A2%C3%BD%10%C3%9D%C2%85%C3%BF%5D%C3%91%C3%B0%C3%9Ag%1C%C2%BA%C3%BB%5C%3E%2B%C3%95%3Ed%C3%B5%C3%8FY%C3%B8%C2%A0%C2%8D%1C%C3%B6%C2%A1%C2%99%C3%90w%C2%9FfZ%05%1B%C2%9D%C2%B0H%C3%BF%11%C3%B3%3D%16%C3%A1%C3%BA%C2%80%C2%8AM%C2%8D%C2%A0%C3%97%C3%82%C3%97%1D%C2%A1%C3%9EQ%1Cy%C3%9B%C2%8D%7B%C3%BC%C2%B1%C3%BEh4%0F%C3%9Amw%5B%C3%91%2F%3C%C3%BB8%C2%B3%5B%C2%A2%C3%97-ST%C3%B6u%C2%B4%7D%C2%B0%C3%AB%11%C2%9A%C3%AD%12%3B%C2%B7%C3%A6%C2%94%C3%B0%C3%B6%C3%8A%C2%A2%C2%8D%C3%9Ag%C2%A7%C3%8A'j~%C3%BD~%C3%A1t%C2%8B%C3%90%2B%13%C2%8F%C2%AD%C2%87%5C%C3%B1%C2%A7W%C2%89%C3%B9%C3%B1%C2%B5%C2%A5%1F%5E%5B%C3%B3%C2%9C%C3%8B%C3%AF%C3%9F%C2%8C%C3%A8%C3%B9%7F%C2%B1%C3%87%C3%95%C3%87%C2%94%5E%C3%89%3A2%C2%96(%C3%A3%05%23%C2%BD%06%C3%96%5E%C2%A9%C2%A5W%C2%88%18%C3%9A%C3%8E%C2%B1%C3%A2%C3%AC%C2%A1%2FA%3B%C2%85%C2%8C%14GjK%22%C2%8B%C3%A2K5G%C3%85X%0F%C3%BDm%C3%8F%3E%C3%81%10cs%C2%AF%7F%C2%BC%C3%87%1Cg%C3%BF%C3%90%C3%93%19)%5B%C3%9A%C3%8A%0E%7F%C2%BE%C2%B3s%C2%AEtb%C3%9Aq%C3%A0%C2%AD%12%C2%83n!W%C3%BC%C3%ADzh~%C2%BD%C2%B24%C3%A3%C3%83%C2%9E%C2%BE%C2%B1%C3%A6%17.%7F%C2%BE%C3%AAz%5C%13Li%C3%AFX%C3%93%1D%C3%B8%0A%C2%9B%C2%8E%C3%ADm'%C2%B7%C3%95FW%C2%B0q%C3%9F%03%17%C2%9CB%C3%9F%7D%C2%80s%C2%AA%3E%C3%B01%1Cv%C2%A1%C3%86%C3%86%C2%8E%17e%0F%C3%BD%C3%B2%C2%A6%C2%BB%C2%8B%C3%A1r%00k7%C2%91j%C3%AA%C2%9C%C2%8Ev%C3%8Bn%3EBw%13%2F%C3%94%C2%9C%C2%9E%C3%9As%0CI%C3%9D%C2%B8%C3%9AS%C2%AA%7C4Qk%C2%B8%3D8%5B%C3%B3u%C2%AB%C3%BC%C3%9E%C2%94%3F%1Cr%C3%97%C2%AC%24a7%C2%A2%3A4%1A%C3%A7%C2%B6y%C3%B5%C2%BB9h%C3%8C%C3%A9-%7F%03%C3%97%1C%C2%B6%C2%BFi%C2%9E%7BZ_%C2%A2%5C%2B%C3%A7%C2%A5%1E%C3%B7%C2%91%C2%AA%C3%8B32%C2%81%5E%C2%82%C2%BE%01%C3%B7-%C3%91w%C3%82%C2%85%1Cp%C2%8F%C2%AAr%C2%8Bm%C2%AC%C3%B14%09%C3%A4%C3%A0%C2%BF%C3%A52wN%C3%BE%C3%9FF9%5E%C2%B0HT%C2%88YgA%C3%85%C2%BB*%7D%C2%B7%C3%B4y%C3%AC)%C3%AC%C2%8Ah%C2%93%C3%B7%08%C2%84%7B%C3%81%C3%BD%C3%BF%C2%A2%C2%9D%C3%81%C2%AF%1D%C3%A8%0D%C3%80%2Bs%C2%9F%C2%82_%C3%A3L%C2%8D%C2%8BO%C3%A5%06Gj%C2%9DS%C2%B7%0E%C2%8B%C3%A8u%C3%811A%C3%BF%C2%82%C3%A7'%C2%B4%03MU%C2%8F%C2%A8%C3%A6%C3%80%C3%B1%C2%85%2F%C2%8Dy%C2%B0%C2%B0%7F%5Cq%C3%96%C3%96%C2%B0%C3%B6%C3%AD%26%04*%C3%BC%C2%A9%C3%B82%C3%94%25%11%C2%94%C2%AFN%1C_w%C3%B3%23%C2%94%C2%99%C3%AAs%C3%B5%C2%BB%245%C3%AB%0A%C2%9B%C3%AA8%26T8y%C2%A8%C2%9C%3C%C3%B0%C3%A7%C3%B0%C3%981%17%09%C3%BA%C3%B7%C3%B9w%C2%B4%C3%AD%C3%9B%C2%84%C2%8Fn%02%3E%C3%B2%C3%87%3DD(%C3%BB%10%C2%8DGtG4%C2%B1%C2%A8%18%3F%C3%9FC_n%C3%9BR%126%7B%C3%8DN%C2%B4%C2%9F%C2%BC(%C3%91%C2%91%5Bx%0CYH%07o%C3%B0%14%C3%AB%C2%B8%C3%B0_%C2%B5%C2%B9%C2%9B%C3%9B%22%C3%AB%C2%A8%C2%BA%3F%C3%A7%2B%C2%AAG%1EJ%C3%A5%C2%86%C2%A1%C3%AD%1C%C2%93UM%C3%80m%3C%C2%87%C3%9D%11%157tfU.%C2%82%0FA%C3%B6%22%7B%C2%94%1B%C2%9B!*%0D%C2%A9%1A%C2%99%C2%B3I%C3%B1H%C2%BDM5%C3%B6(%C2%B8%3D%0C%C2%9C%1F5%C3%AC%1D%C3%BF%C3%95mx%C3%86d%2C%12%C3%9AOjgI%C2%86%C3%BE%05%C2%87%C3%B5%C3%87%C3%9B%3F%C2%B8%20%2C%C3%89au%C3%B0%0E%C2%BA%C3%8CrJ%C2%85%23%C3%8F%C3%94A%C3%B8p!%7B%C3%A8%C3%9ED%C3%9A8s%C2%86%C2%9B!s%C2%9F%C3%A0%C3%AD%C3%ABP%C2%B9%C2%B3%5B%C2%8A%C3%83%C2%85%C2%BE%C2%ACf%5D%7F%C3%BD%C2%88%C3%A5%C2%BC%C2%82W%C2%B0%C3%86aK%C2%BB%5B%C3%81%C3%A5%C3%9E%C3%92%19l%3Ev%C3%AF%3E%15O%C3%94%3E%17L%C2%B0P%C3%B3%23%C3%A9%C2%B0E%C2%82%C2%97%C3%9A%5D%C3%89Y%15%C3%94%C3%83%C2%9F%C2%A0%C3%9D%C2%B2%C3%A5%C3%88%C3%87%C3%8D%C3%9F%C3%BC%C2%80%C3%BFU%C3%BDe%C2%81oZ2%7F%C2%A2tb%C3%8D%C2%A9%C3%BA%C2%93%C2%92y%7D5%C3%9E%C3%B7%C3%86F%C2%9E%C3%AD)d%C2%AEt%24%C3%A9kW%C3%98)%C3%90I%C2%A0%C2%9B%17%C2%A1%C3%AD%C2%92%C2%AA%1E%C3%9A%17%C2%8As%C2%A5%C3%9A%C2%B1%C2%B7%C2%AF%1B%5Ep%C3%B8IqR%C3%86%C3%AF%C3%B9%C3%80qv%C3%ACv%C2%96%3E%C3%B7%C3%B6%C2%B0%C3%97%07d%C3%9C%24*~M%C3%8B%C2%A8xo%C2%9FP%C3%89%0F%11%C2%8C%C2%93%3C1%C3%B8%C2%877%C3%B2%C2%B5y%C2%B6%C2%8B%1CNv%C2%8E%5E%C3%A8%C2%84%C3%89%C2%AA%C2%B0%C3%A6'R%C2%B0G%C3%86%C3%B2%1B%C3%A2%C3%9FL%C3%85%C3%ABn%C3%A4%0D%C2%8F-%12D%C2%894G%C2%B6%C2%88%00%C2%A5%1CU6%60%C3%AD%C2%96J%1A%C2%A5-%C2%B2t%1C%C2%8A7%C2%83%C3%B8%C3%A3%C3%8E%C3%BE%C2%B5J%C3%84%C3%B4%C2%9E%C2%96%3B%C3%B8%C2%A3%1A%C3%8E%16%C3%AC%5Dx%7BX%3B%C3%8E%C2%9D%C2%B0%C2%9B%7F%1Dv!%C3%89'%C2%AC%C3%AE%C3%97O%C2%A4%1A%C3%98GJ%01%1F%07%C3%82%C2%81%07%04%04%04%04%04%04%04%04%7C%C3%B0%C3%B8%1F%C3%97Yf.%C3%8A%C3%89c!%00%00%00%00IEND%C2%AEB%60%C2%82"; 

    var logo_about_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%7C%00%00%00%19%08%06%00%00%00%C3%B3'JW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%04%C3%B9IDATx%01%C3%ADXKn%1BG%10%C2%ADfhXI%14%C2%84A%0E%C3%A0%C3%91%0D%C3%A8%13x%C2%B6Y%C2%85%3E%01%C3%A9%13%C2%88%5Cf%C3%85%C3%91%09(%C2%9D%C2%80%14%C2%9C%20%08%C2%90%C2%804%C2%90%C2%AC%C3%89%C2%AC%C2%B2%14O%C3%A0%C2%99%C2%AC%C2%82%2C%022%C2%AB%C3%88%C2%B6%C3%A4N%C3%95%C3%8Ck%C2%B1%C3%94%C2%9C%19R0%0C%C3%88p%3F%C2%A0%C3%94%C2%BF%C3%AA%C3%97%C3%95%C3%95%C3%93%C3%95%25%12%05%04%04%04%04%04%04%04%04%04%04%C3%9C%2F%18%C3%9D%C2%B0%C3%96F%C2%95%C2%8A%C3%86d%C2%94%C3%98%16%C3%91e%C3%AB%C2%80%C3%9B%C2%97%C2%84%3F%07%07kJ%C3%8C%C2%9A%02%3E%084%5C%C2%85%0F%3B%C3%A5%C2%A2N%C2%88%1E%5E%C3%B6%C3%8D%03%C2%93%C2%BEj%C2%9A%C2%97%C2%A6a%5E%C3%92C%C3%AE%C2%BF%C2%BE%C3%AC%C2%94%113_%C3%8C2%16%5E%C2%96%0B%C3%94%23%C2%BAG%60%7BZ%2CsH%5C%C2%A13%C3%85x%C2%87%C3%9E%03%C3%A0%C2%A7%C3%B7%C3%86%C3%AF%C2%A3%C2%81E%23.D%C3%A4%C2%A6%C2%9E%C2%B1%C3%8CJ%C2%B5%3Fc9%C3%8CKcY%C3%A8%C3%90H%7D%C3%A1%C2%AB1_%C2%97%C2%8B9K%0F%C2%9C%C2%84%C2%BA%1C%7C%C2%9B%C3%AE%0F8bQ%0C%C3%99r8%C3%9B%C3%9AC%7F%0C%C3%9D%C2%9D%C3%A09%13%5B%20%C2%A2%C3%BD%10%C3%9D%C2%85%C3%BF%5D%C3%91%C3%B0%C3%9Ag%1C%C2%BA%C3%BB%5C%3E%2B%C3%95%3Ed%C3%B5%C3%8FY%C3%B8%C2%A0%C2%8D%1C%C3%B6%C2%A1%C2%99%C3%90w%C2%9FfZ%05%1B%C2%9D%C2%B0H%C3%BF%11%C3%B3%3D%16%C3%A1%C3%BA%C2%80%C2%8AM%C2%8D%C2%A0%C3%97%C3%82%C3%97%1D%C2%A1%C3%9EQ%1Cy%C3%9B%C2%8D%7B%C3%BC%C2%B1%C3%BEh4%0F%C3%9Amw%5B%C3%91%2F%3C%C3%BB8%C2%B3%5B%C2%A2%C3%97-ST%C3%B6u%C2%B4%7D%C2%B0%C3%AB%11%C2%9A%C3%AD%12%3B%C2%B7%C3%A6%C2%94%C3%B0%C3%B6%C3%8A%C2%A2%C2%8D%C3%9Ag%C2%A7%C3%8A'j~%C3%BD~%C3%A1t%C2%8B%C3%90%2B%13%C2%8F%C2%AD%C2%87%5C%C3%B1%C2%A7W%C2%89%C3%B9%C3%B1%C2%B5%C2%A5%1F%5E%5B%C3%B3%C2%9C%C3%8B%C3%AF%C3%9F%C2%8C%C3%A8%C3%B9%7F%C2%B1%C3%87%C3%95%C3%87%C2%94%5E%C3%89%3A2%C2%96(%C3%A3%05%23%C2%BD%06%C3%96%5E%C2%A9%C2%A5W%C2%88%18%C3%9A%C3%8E%C2%B1%C3%A2%C3%AC%C2%A1%2FA%3B%C2%85%C2%8C%14GjK%22%C2%8B%C3%A2K5G%C3%85X%0F%C3%BDm%C3%8F%3E%C3%81%10cs%C2%AF%7F%C2%BC%C3%87%1Cg%C3%BF%C3%90%C3%93%19)%5B%C3%9A%C3%8A%0E%7F%C2%BE%C2%B3s%C2%AEtb%C3%9Aq%C3%A0%C2%AD%12%C2%83n!W%C3%BC%C3%ADzh~%C2%BD%C2%B24%C3%A3%C3%83%C2%9E%C2%BE%C2%B1%C3%A6%17.%7F%C2%BE%C3%AAz%5C%13Li%C3%AFX%C3%93%1D%C3%B8%0A%C2%9B%C2%8E%C3%ADm'%C2%B7%C3%95FW%C2%B0q%C3%9F%03%17%C2%9CB%C3%9F%7D%C2%80s%C2%AA%3E%C3%B01%1Cv%C2%A1%C3%86%C3%86%C2%8E%17e%0F%C3%BD%C3%B2%C2%A6%C2%BB%C2%8B%C3%A1r%00k7%C2%91j%C3%AA%C2%9C%C2%8Ev%C3%8Bn%3EBw%13%2F%C3%94%C2%9C%C2%9E%C3%9As%0CI%C3%9D%C2%B8%C3%9AS%C2%AA%7C4Qk%C2%B8%3D8%5B%C3%B3u%C2%AB%C3%BC%C3%9E%C2%94%3F%1Cr%C3%97%C2%AC%24a7%C2%A2%3A4%1A%C3%A7%C2%B6y%C3%B5%C2%BB9h%C3%8C%C3%A9-%7F%03%C3%97%1C%C2%B6%C2%BFi%C2%9E%7BZ_%C2%A2%5C%2B%C3%A7%C2%A5%1E%C3%B7%C2%91%C2%AA%C3%8B32%C2%81%5E%C2%82%C2%BE%01%C3%B7-%C3%91w%C3%82%C2%85%1Cp%C2%8F%C2%AAr%C2%8Bm%C2%AC%C3%B14%09%C3%A4%C3%A0%C2%BF%C3%A52wN%C3%BE%C3%9FF9%5E%C2%B0HT%C2%88YgA%C3%85%C2%BB*%7D%C2%B7%C3%B4y%C3%AC)%C3%AC%C2%8Ah%C2%93%C3%B7%08%C2%84%7B%C3%81%C3%BD%C3%BF%C2%A2%C2%9D%C3%81%C2%AF%1D%C3%A8%0D%C3%80%2Bs%C2%9F%C2%82_%C3%A3L%C2%8D%C2%8BO%C3%A5%06Gj%C2%9DS%C2%B7%0E%C2%8B%C3%A8u%C3%811A%C3%BF%C2%82%C3%A7'%C2%B4%03MU%C2%8F%C2%A8%C3%A6%C3%80%C3%B1%C2%85%2F%C2%8Dy%C2%B0%C2%B0%7F%5Cq%C3%96%C3%96%C2%B0%C3%B6%C3%AD%26%04*%C3%BC%C2%A9%C3%B82%C3%94%25%11%C2%94%C2%AFN%1C_w%C3%B3%23%C2%94%C2%99%C3%AAs%C3%B5%C2%BB%245%C3%AB%0A%C2%9B%C3%AA8%26T8y%C2%A8%C2%9C%3C%C3%B0%C3%A7%C3%B0%C3%981%17%09%C3%BA%C3%B7%C3%B9w%C2%B4%C3%AD%C3%9B%C2%84%C2%8Fn%02%3E%C3%B2%C3%87%3DD(%C3%BB%10%C2%8DGtG4%C2%B1%C2%A8%18%3F%C3%9FC_n%C3%9BR%126%7B%C3%8DN%C2%B4%C2%9F%C2%BC(%C3%91%C2%91%5Bx%0CYH%07o%C3%B0%14%C3%AB%C2%B8%C3%B0_%C2%B5%C2%B9%C2%9B%C3%9B%22%C3%AB%C2%A8%C2%BA%3F%C3%A7%2B%C2%AAG%1EJ%C3%A5%C2%86%C2%A1%C3%AD%1C%C2%93UM%C3%80m%3C%C2%87%C3%9D%11%157tfU.%C2%82%0FA%C3%B6%22%7B%C2%94%1B%C2%9B!*%0D%C2%A9%1A%C2%99%C2%B3I%C3%B1H%C2%BDM5%C3%B6(%C2%B8%3D%0C%C2%9C%1F5%C3%AC%1D%C3%BF%C3%95mx%C3%86d%2C%12%C3%9AOjgI%C2%86%C3%BE%05%C2%87%C3%B5%C3%87%C3%9B%3F%C2%B8%20%2C%C3%89au%C3%B0%0E%C2%BA%C3%8CrJ%C2%85%23%C3%8F%C3%94A%C3%B8p!%7B%C3%A8%C3%9ED%C3%9A8s%C2%86%C2%9B!s%C2%9F%C3%A0%C3%AD%C3%ABP%C2%B9%C2%B3%5B%C2%8A%C3%83%C2%85%C2%BE%C2%ACf%5D%7F%C3%BD%C2%88%C3%A5%C2%BC%C2%82W%C2%B0%C3%86aK%C2%BB%5B%C3%81%C3%A5%C3%9E%C3%92%19l%3Ev%C3%AF%3E%15O%C3%94%3E%17L%C2%B0P%C3%B3%23%C3%A9%C2%B0E%C2%82%C2%97%C3%9A%5D%C3%89Y%15%C3%94%C3%83%C2%9F%C2%A0%C3%9D%C2%B2%C3%A5%C3%88%C3%87%C3%8D%C3%9F%C3%BC%C2%80%C3%BFU%C3%BDe%C2%81oZ2%7F%C2%A2tb%C3%8D%C2%A9%C3%BA%C2%93%C2%92y%7D5%C3%9E%C3%B7%C3%86F%C2%9E%C3%AD)d%C2%AEt%24%C3%A9kW%C3%98)%C3%90I%C2%A0%C2%9B%17%C2%A1%C3%AD%C2%92%C2%AA%1E%C3%9A%17%C2%8As%C2%A5%C3%9A%C2%B1%C2%B7%C2%AF%1B%5Ep%C3%B8IqR%C3%86%C3%AF%C3%B9%C3%80qv%C3%ACv%C2%96%3E%C3%B7%C3%B6%C2%B0%C3%97%07d%C3%9C%24*~M%C3%8B%C2%A8xo%C2%9FP%C3%89%0F%11%C2%8C%C2%93%3C1%C3%B8%C2%877%C3%B2%C2%B5y%C2%B6%C2%8B%1CNv%C2%8E%5E%C3%A8%C2%84%C3%89%C2%AA%C2%B0%C3%A6'R%C2%B0G%C3%86%C3%B2%1B%C3%A2%C3%9FL%C3%85%C3%ABn%C3%A4%0D%C2%8F-%12D%C2%894G%C2%B6%C2%88%00%C2%A5%1CU6%60%C3%AD%C2%96J%1A%C2%A5-%C2%B2t%1C%C2%8A7%C2%83%C3%B8%C3%A3%C3%8E%C3%BE%C2%B5J%C3%84%C3%B4%C2%9E%C2%96%3B%C3%B8%C2%A3%1A%C3%8E%16%C3%AC%5Dx%7BX%3B%C3%8E%C2%9D%C2%B0%C2%9B%7F%1Dv!%C3%89'%C2%AC%C3%AE%C3%97O%C2%A4%1A%C3%98GJ%01%1F%07%C3%82%C2%81%07%04%04%04%04%04%04%04%04%7C%C3%B0%C3%B8%1F%C3%97Yf.%C3%8A%C3%89c!%00%00%00%00IEND%C2%AEB%60%C2%82"; 

    var push_update_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%12%08%06%00%00%00%C2%BD%C3%B95T%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%90IDATx%01%C3%95%C2%92A%12%C2%820%0CE%C3%9B%C3%A2%C2%B0%C2%95%1B%C2%88%1B%C2%86%C2%9D%1C%C3%81%23p%03%C3%B1%04%C3%A8M8%C2%927PW0t%C3%91%2B%C2%B0n%C2%A7%C2%AD%C3%A9%C2%8C%0B%C2%A4%C2%B4UgX%C3%B07M%C3%92%C3%A4M%C2%92%09B%C2%AB%11c%2C%0D%C3%A5%10%C3%9Fg%C3%9F%C3%B7%15%C3%A7%C2%9C%C2%99%C3%B7%2F%08%C2%A5%C3%B4%C2%A8%C2%B5%C2%AE%C3%9F%C3%AE%09%40%C2%85%2B%17%C2%A3%C3%B9%0Ej%004%C3%938%C3%84%C2%AEy%C2%9E7AH%C3%9B%C2%B6)!%C3%A4%0Ef%C2%82l%0Dq%1C%C3%AFA%C3%838h%C2%8D%03%C2%80%C3%82%010J%C2%84%10%C2%A5U3%C2%93%C3%A8%C2%9C%C3%9D%08FJ%C2%BF%C2%81%C3%BC%C2%AC%C3%85%20%07_%01%C3%86x%C3%A7%C2%85t%5Dw%C2%81%C2%A7%C3%B4A%60'%C3%95%C3%B4%C3%B86%1FDBnR%C3%8A3%0A(%C2%8A%C2%A2%C3%87%C3%98%C3%87%C2%BEd%C3%A8%C2%AC%01%C3%B0%C3%96%C3%98Y%C2%969%C3%A1%C3%9E%C3%85B%C3%AB%C3%A6%C2%A8%0A%C2%A5%C3%94%13%C2%ADB%2Fu%C3%ACH%C2%81%04k%07%C2%95%00%00%00%00IEND%C2%AEB%60%C2%82"; 

    var push_update_new_update_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%12%08%06%00%00%00%C2%BD%C3%B95T%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%81IDATx%01%C3%95%C2%93%C2%B1N%C3%82%60%10%C3%87%C2%AF%C2%ADL%C2%A4%C2%B1%0C%24%C3%92%04%C2%84%C2%A51a%C3%B0%5Bdn%C3%A4%01%60pS%C2%92%C3%BA%04%C3%A8%C3%A2Z%1F%C2%80A%13%06FM%7C%C2%80%C3%BA%02%C2%85A%16MHI%20%25%C2%90%002%18%02%03%04%07%16h%C2%BD%C3%8F%C3%81%C2%B4%C3%94%C2%96%C2%B8%C3%89%7F%C3%B8%C3%AE%C2%BE%C3%8B%C3%A5w%C3%97%C3%BB%C2%AE%00%C3%BFE%C3%8C%C2%B6%C2%84%C3%81%60%C2%90L%C2%A5RCB%C2%88%60YV%C3%91%C2%B6%C3%AD%24%C3%830%C3%AF%2C%C3%8B%3E%18%C2%861%C2%A49%5C%10%C2%A0%C3%9B%C3%AD*%C3%AB%C3%B5%C2%BA%C2%9A%C3%8DfA%C3%97%C3%B5JN%14%C3%B3%17%C3%B18%C3%A1C!%C3%99%5C%2C%C3%B2%C2%A2(%3E%C2%8F%C3%87%C3%A3%C2%B9%2F%C2%A4%C3%97%C3%AB%C3%89XUE%C3%B7%C2%A0%5C.%C3%8Bg%3C%2F%C3%9CH%12%1C%C3%B1%3C%C2%9CF%C2%A3%C2%80%20%C3%A1e%3A%25%C2%93%C3%89%C3%A4%C2%91%C3%B5%C3%A9%C2%A0%C2%88%C2%ADW%C3%91%25%C3%B4%C3%9En%C2%B7%C3%A1%3C%C2%91p%C3%A5%C3%A4b1jdzx%20%C2%A6i%26%C2%B1%C2%83%5Bg%2C%1C%0E%7B%0A%7D%C2%AEV%C3%94%C3%8C%7F%C2%85%C3%A0%C3%80hu%C3%81%19%C3%8Bd2P%C3%A9%C3%B7%5DyO%C2%A3%115%1A%3D%C3%B6%C3%80%2B%C2%B2%19P%14%05TU%05%C2%BD%5E%C2%87%C2%93H%04%3E%C2%96Kx%C2%9B%C3%8Dj%1C%C3%87%5D%C3%BBA%3C%C2%A2%C2%9FS*%C2%95%C2%BEg%C3%93h4%C2%B4WM%C2%BBo%C2%B5Z%C2%B5%C2%9F%C3%AE%C3%A1%0FJ%C2%A7%C3%93P(%14%C2%9AN%C2%80%1F%C3%A4%18%02%C2%84%C2%8Bv%C2%B8%19sA%3A%C2%9D%C3%8E%15%C2%9A%7C%00%03%C3%B0%C3%A5%14%C2%BA%C2%84%C3%8E%C2%98k%26%C3%B825%C3%9C%C3%90K%C3%98%22%1C%C2%A8%C3%A1%C2%BC%07%C3%BE%3B%C3%98%C3%99%1D%C2%82%C3%B7%C2%A9%2FI%C2%92%2F%3Cp%C2%B0%C3%98%3A%5D%26%C2%82%C3%9B%C3%9B%C2%84%C2%9D%C3%90%17%C3%B2k%C2%89%C2%B2%07%C2%A9%C3%A4F%00%00%00%00IEND%C2%AEB%60%C2%82"; 

    var settings_window_button_panel_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%0F%08%06%00%00%00%C3%ADsO%2F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%8CIDATx%01%C2%95S%C2%81%0D%C2%820%10%7C%C2%8C%030%02%1B8%C2%82l%C2%A0%1B%C2%88%1B%C3%A8%06l%C3%A0%08%C2%B8%C2%81%3AA%C3%83%04%C2%B8A%C3%99%C2%A0n%C3%B0%5E%0DM%C3%8A%C3%9B%C2%AFr%C3%89%05%C3%8A%C3%9D%C3%BF_%3F%C2%81(%01fny%C2%8E%3B)X)%C3%9F%C2%B7%C3%A2%C2%BC%C2%A1%1C0a%0F%1A%C2%B0%01k%C3%90%C3%B27%C2%82%C3%A6%7D%C2%A7%C2%B8%C2%B8R%0Arp%C2%BE.4%C2%B8d%C2%8C6%C2%A3%C2%99%C3%90%60H%C2%88C%C2%980%25%C2%BC*)%C3%8A%600B%C2%AC%12%7Br%22Y%15%C2%8Bu%2C*%C2%8B%C2%8E%C2%874r%C2%89%C3%BF%24%C2%B0%C3%89%04%C3%BC%7B%07%25%C3%98%25%3C.4hY%C2%87%C3%A5%C3%B9%C3%9Dct%14Mp%C2%BC%1C%C2%9F%C2%84%C3%AB%C2%A2(%5E8%C2%9C%C3%B1%C2%BE%03%7Bp%04%7D%C3%B7R%C2%AC%C3%A18%3D%0F%C3%A0%03u%23i%40%C3%83%C2%9B%C2%BC%C2%8A%C3%A6%C3%95~%C2%A6%5E%C2%9C%C2%9F%C2%8A%C2%8F%C3%9E%1F%1E'%C2%BD%C2%90%C3%A4%C3%AD%C3%AB%00%00%00%00IEND%C2%AEB%60%C2%82"; 

// ABOUT ICONS
    
    var update_ready_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0E%08%06%00%00%00%C3%B0%C2%8AF%C3%AF%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%90IDATx%01%C3%9D%C2%91%C3%8D%0D%C3%820%0C%C2%85%C3%BDZ%C3%A0%C3%8C%08e%04%26%C2%80%C2%88E%60%00%C3%BE%26%00%26%40%C3%80%C2%81%2B%1B0%01%C2%84%11%C3%98%C2%80%C2%8E%C3%90%3Bm%1F%C2%B1P%11%C2%94%C2%B6R%C3%85%C2%8D'E%C2%91c%7FN%C3%B2%0C)%C3%91%C3%8E%C3%9E%C3%BB%24%C2%ACPF%C2%93A%C3%A3PT%C3%A3%C3%89%0F%C3%BA%17xo%19%14%15%C2%AA%C2%81%C3%B93%C2%BC%07k%C3%8B%C2%B6%C3%8F%C3%A4%06A(%C3%A0%C2%8A%C2%94%C2%A3%C2%BA%C3%AD%C2%AE%C3%A8%C2%B9%7D%C2%98%20%C3%AD%C3%8EM%C3%AB%C3%BA%C2%827%C2%A7%C3%BB%12%C3%80%22%C2%81%C3%9F%C2%99%1B%C2%84Y%C3%ACr%C2%91%5Bm%C3%91F%C3%82%C2%80%C3%A4j%3Ah.%15%C3%9A%C2%9Ecj%C3%BC%C3%B5l-%C3%90%C3%84%13T%7D%C2%82%C2%95%7F%C3%8E5%C2%902%C2%B0%14%C3%8E%1A%004e%60%25%C2%AC%1A%C2%9B%C3%A6%C2%A5*%C3%9F%C2%800R%C3%93%C2%BD4%C2%9E9%C2%B3%22%C2%A9!%C2%B8%C3%B1%04%3ES%C2%AB%C3%86%C3%94%C3%80%C3%82%04%C2%9Ey%00%C2%92%C3%9E_%0F%C3%86gw%C3%91%00%00%00%00IEND%C2%AEB%60%C2%82"; 
   
    var updates_check_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%5BIDATx%01%7D%C2%92%C3%91Q%C3%82%40%10%C2%86%C3%BF%C2%BD%04%C2%9E)%01%2B0%25%24%C3%92%00V%00%C2%AF%3E%60%C2%A4%02%C2%A0%02%40t%7C%C3%95%0E%C3%92%00%13%C2%A9%C3%80X%C2%81%C2%B1%C2%83%3C%C2%9B%C3%9C%C2%AD%C2%BB%C3%889a%06%C3%98%C2%99%C3%8C%C3%A4%C3%AE%C3%BE%C3%AFn%C3%AF%C3%BF%C2%8F%C3%90%C2%AA%C2%97%C2%9C%C3%BB%16.eF%C3%8C%40%C2%8F%C3%80%25%11%15%01%C3%8C%C3%BA.%C2%A1R5%C2%9B%C3%9C%C3%8E%C3%88%03%3A%60%C3%A6%C2%B9%C3%BCV%C3%84x%C2%97%C2%85%C2%8A%09%7D%C2%81c%5D%17X%C3%97%C2%A0%1Aj%03%C3%B2%C2%AD%C2%9D%09%C3%A7%C3%93%C2%84*%C2%BF%C3%99RN7%5C%C2%8B%C3%90%C2%8C%C3%BC%1CiK5%C3%9B%2F%01%16%C3%A9%C2%A03%C3%B7m6%C2%B0%C3%91%24%093%1D%3F%C3%A5%3Crl_%3Dd%2C%C3%ACL%C3%98%C3%92%03Z%0D%C2%9A%C2%BE%C3%9Cky%0A%C3%90%0A%1Dc%08%C3%A2%0Cg*%00v%01%05WG%C2%90%7C%3Dv%C3%BC%7D%0A%C2%90%C3%BB%C3%B4%C2%BCkZ%C3%8F%C3%B9Oda%22%C2%A3n)%C3%98%167%08%0B%C2%86%C3%9B%05%C3%AC%3E%1E%C2%B7%C3%8D%C3%B8%7F%C3%9E%C3%91%10%C3%92%C2%B6%11%C3%BB%0A%C2%B1s%C3%94%C2%86%C3%94%C2%BD%C3%B4%C2%A6%3B%C2%B6do%C3%85%C3%AB%C2%99%C2%9E%C2%B8w%C2%8D%C3%84ABF%C2%9B%C2%BC%C2%8E%C2%99)%07%C2%BB%C3%A9%C3%BD%C2%A0%C2%BB%C3%82%C2%99%C2%92X%24t%5E%11qb%26IG%C2%82to%20%C2%B3%C3%94%C2%BC.%01%C2%9A%C3%A3%C2%9F%C3%BEP%C3%ABm-%C2%BBP%C2%AA%C3%B6K%C3%8F%C2%99%03%7F%1A%C3%90%C2%B5%08%23%7D%15%0AH%2C%0F%C3%BB6%C2%8Fw%C2%ACc8J%C3%A5%C3%B9%C3%84%07s*%C2%BD%C2%B3D%C2%B2%C3%90%13%C2%BC%C3%AE%17%C3%A5-%C3%80%0B%C2%A9%C3%A0Y%C2%B6%00%00%00%00IEND%C2%AEB%60%C2%82";

//WITH Groups

    var close_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%88IDATx%01%C2%8D%C2%92%C3%8B%0D%C3%83%20%0C%C2%861%13d%C2%93v%C2%84f%C2%8EHi%C3%98%C2%A0%C2%9D%C2%A4%C3%AA%04%C2%A4y%C2%9C3BV%C3%88(%C2%BDp%02AM%14*%C2%8BB%1AK%60%C2%84%C3%BDa%C3%BB%17%C2%8C%C2%A1M%C3%93T%C2%8C%C3%A3xf%7F%C2%AC%C3%AF%C3%BB%C2%8B%C3%B7%C3%9CoJ%C2%A9%C3%99Z%3B%C3%AF%C2%81%C3%830%5C%C3%91%C3%8D%C3%A8%1F%2B%C2%84%C3%80%13%5D%C2%91%03%3D%C3%A0%C2%9Ck%C3%B1%C3%B8%C3%96Z%C2%BF%20%04%C2%BA%C2%AEk%00%40%C3%BA%00%C3%A7%C2%BC%C2%AC%C2%AAj%C2%89%01cL)%C2%84X%C2%80%C2%BE%18%C2%83%C2%98%7C%C2%8A%01%C2%9F%07q%2B%14%C3%B4-%C3%87%C3%80W%08ju%5D%C2%B7%08%C2%B5%1B%C3%80%C2%B0%C3%92%C2%9D%02%C3%89Jt%C2%86P%C2%89%C3%8E%C3%B8S)%1E%1A%C3%8F%C2%82%25T%C2%85%1C%10ZJ%C2%A9%0A%7B%40NU%C2%BE%0D%7B%C3%8B%01A%1C%C3%92j%C2%B3%5EJ)%0B%5C%C2%87%C3%BF%C3%9E%07%C3%AB%C2%9A%C2%B5%C2%B8%C3%9C%7C%0B%C3%A1%00%00%00%00IEND%C2%AEB%60%C2%82"; 

    var open_selected_comp_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%B3IDATx%01%C2%95%C2%92%C3%A1%0D%C2%820%10%C2%85%5B%C3%92%01%C2%BA%C2%818%02%1B%C3%A8%08%C3%BC%26%C2%A4%C2%B2%C2%81%1B%C2%80%230%01%1A%18%C3%80%11%18%C2%81%0D%60%C2%84%0E%40%C3%80w%0AZ%C2%A4%C2%80%C2%BE%C2%84p%C3%A9%C3%B5%C2%BB%C3%B6%5D%C2%8F%C2%B3AY%C2%96%C2%B9%C3%8C%C2%90%C2%94R%C3%BB%C2%BE%C2%AFm%C2%B9(%C2%8A%1ANAQ%14u%C3%9F%C3%B7%C2%93%24%C2%A9m%C3%9B%C2%BD%10%C3%A2%C2%8406%C3%97%1D%C3%87%C3%B1%04%05%03%C2%94%C3%A2%C2%BB%1B%C2%90%C2%A6%C3%8A%08%C2%93%3C%C3%8FK%C3%BC%C2%A9%C2%80%C2%A2%5C%C3%97uR%18U%C2%AA%20%08Jf%11%C3%A7%7C%C2%87%C3%A2%04%C3%9DF%C3%98a%1B%C2%82%0D%05%C3%A8%C2%8AS.%C2%B8E2%C2%AE%C2%8B_!%C2%A5%C3%94%13%C3%82%C2%B5S%14h%C3%84%3F%10)%0C%C3%83%C3%B3%C3%A2%C2%89K%10%C2%9EE%C2%A2%C3%8B5%C3%BAq%C2%9Cy%C2%A4%C2%A4%0D%1A%24%C3%A9%C2%A3%C2%AE%C3%8E%40%3C%C2%81%C2%86%07%C3%8F%02Md%C3%AD*%C3%A0%C2%8Am%C3%A8%C3%AD%11%C3%87%C2%BB%C3%A8%C3%98am3%C2%BC%C2%B9%C3%98%C3%B7%01%C3%B1%C3%80%25%7C%C3%91X%C3%85k%C3%A0%00%C2%91%C2%95%C3%97%C2%AC%C2%92%C2%BE%07yE4%C2%8A%C3%BA%01%C3%9Bd%C2%94%C3%A1S%C2%A4%C2%B5%C3%98%00%00%00%00IEND%C2%AEB%60%C2%82"; 
    
    var disable_effect_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01oIDATx%01%C3%A5SK%C2%8E%C2%82%40%10m0%26%26%C2%BA%C3%80%C2%85%C2%BF%C3%84d%C3%A4%06%C3%A3%0D%C3%B0%06z%02%C2%99%13%C3%8C%C3%9C%409%C2%81%C3%83%09%C3%B4%06r%C2%83%C3%A1%06%C3%8C%0D%60V%04%C3%98%C3%B4%06%12%16%C3%80%C2%BC%22%C2%B6i%09%24%C2%B3%1E%2B1%C3%9D%C3%B5%C2%AA%C3%AA%C3%B9%C3%AA%01%C2%8C%C3%BD%C3%9BP%C2%BA%0AI%C2%92%18eY%1A%C2%B8%C2%BE%C3%9C%C2%A0%1FUU%C3%9D%C3%89d%C3%A2%C3%BE%C2%89(%C2%8E%C3%A3w%1C%C3%87%C2%AA%C2%AA4%C3%96%1E%C2%81%C2%A2(%C3%96t%3A%C2%BD%C2%B4%12%C3%B9%C2%BE%C2%AF%C2%8DF%C2%A33Tl%05%062%1BC.0%0E5%26%C2%A0%C2%BD4%C3%ABdY%C3%B6%C2%A6%C3%AB%3A%C2%A7D%15%C3%A8p8%C2%BC%C3%8A%24%20X%C3%8F%C3%A7%C3%B3%0F%C2%9CA%C2%AF%C3%97%C3%A3%C2%B3%C3%99%C3%8C%24L%22%C3%9A%C3%92%C2%8CHj%C2%A2(%C2%8A%0E%C3%B8wC%22%C2%B9%40%C3%BA7%C3%96%3C%01%C3%B7%C3%A8%07%C3%8FN%C2%84%C2%91JI%C2%B1%C2%81%C3%99c%3D%13%C2%86%C3%A1%0A%C2%B2%7Dy_%C3%A4%C2%9B%3C%C3%8Fy%C2%BF%C3%9F%C3%B7%1E%7C%C2%80%22%0C%C2%AFp%C2%BDJ0%C3%87%C2%8A%C2%BA%3A%18%0C8%1A%C2%B8%3C%C2%80%15%C2%BB%C2%8C%C2%A6%1Ao%40%1A84u%3C%1E%C3%B3%C2%A2(l%C2%B9B%C2%92%C2%97%C3%8Bes%0D%C2%9BV%C2%83_%C3%BB%06%C2%91%C2%B5X%2C%C2%82%C3%BBS%C2%83%1F_%0D%C2%9F%C3%967%C2%9F%5E)%17w%C3%B2K%C3%AAq%C2%81oj%3B%04%08%3Fv8%1CI%C2%81%C2%87%C3%813%C2%9A5%C3%B2E%18%2F%C3%AA%C3%B0%C3%91I%C3%93tw'm%C3%88d0%C3%9FD%C3%93%01%C3%97%15k%09%C3%B2%13%3EYx5%3E%1Fp%C3%96%11%204%40h0%C3%A9%13%01%C2%81%0B%3F%5C%C3%B6%5C%C3%B1%0BY.%C2%BA%C3%B0%C3%A0%24%C2%9B6%00%00%00%00IEND%C2%AEB%60%C2%82"; 

    var import_ffx_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%8DR%0B%C2%91%C3%820%10MR%04T%02%C3%A7%C3%A0%C3%8E%01%C2%A7%C3%A0%C2%AE%C2%AD%01%1C%14%14P%1C%C2%80%02%40%40%C2%A7S%05T%02(%00%09%18h%C3%8B%7B%C3%8C%26%C2%B3%C3%BCy3%C2%9D%C3%AC%C2%BE%C3%ACK%C3%9Enj%C2%8DB%5D%C3%97y%C3%9B%C2%B6%05%C3%82%C3%98s%C3%96%C3%9A%C2%AF%24I%C2%8E%C2%BAn%C3%A0%C2%83%C2%AA%C2%AAb%11%C2%B0p%C2%ADjN%C3%A6%06A%04%C3%81%C3%889%17%C3%B7%7D%3FM%C3%93ta%5E%C3%80%C3%B9%20%C2%8A%C2%A2%C2%BF%0B%C3%A1%5Cc%C3%9E%C3%80%C3%92%16%7B%C3%80%0D%5B%C2%AE%C2%B0%C3%B6%C2%A3%0Bt%3F%C2%A8%1D%5E%0EFq%C2%85%C3%AF%C2%80x(%C3%A2%C2%83%C3%BE%C3%8A%C2%B2%2CD0c%C3%9Eu%C3%9Dx%C2%80%C2%93%C3%A7H%C3%B6%C3%A0s%C2%ACsm%0F%C3%B9%0C%C3%BB9%04%08%C3%BB%C2%82%C3%BBY%C2%96%15VNY%C2%81%18%C3%93%1A%C3%AC%C3%AC%C2%94%C2%9D%C2%91%C3%986%5E%10%06%01%C3%A2%1B%C3%8BI%0B%04a%C3%9Cp%10%26%C3%AAd%10%14%5D%09%C3%98%C2%B4%C3%9C%C3%920G%2F%C2%93%20%12%01%C2%B1%7F%208%C3%A2%C3%8D~)dow%22%C2%90%C2%8D'q*%7B%C3%99%C2%80Kdo%C2%8A%7C%C3%A9G%C3%8Ew%C3%A2h%C3%BE%1F%C3%BDc%C3%8F%C3%A0%C3%94%10%3E%12%10gup%C2%AC%C2%BD%C3%A7%C3%BASp%00%00%00%00IEND%C2%AEB%60%C2%82"; 

    var export_ffx_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%8DR%0B%C2%91%C3%820%10MR%04T%02%C3%A7%C3%A0%C3%8E%01%C2%A7%C3%A0%C2%AE%C2%AD%01%1C%14%14P%1C%C2%80%02%40%40%C2%A7S%05T%02(%00%09%18h%C3%8B%7B%C3%8C%26%C2%B3%C3%BCy3%C2%9D%C3%AC%C2%BE%C3%ACK%C3%9Enj%C2%8DB%5D%C3%97y%C3%9B%C2%B6%05%C3%82%C3%98s%C3%96%C3%9A%C2%AF%24I%C2%8E%C2%BAn%C3%A0%C2%83%C2%AA%C2%AAb%11%C2%B0p%C2%ADjN%C3%A6%06A%04%C3%81%C3%889%17%C3%B7%7D%3FM%C3%93ta%5E%C3%80%C3%B9%20%C2%8A%C2%A2%C2%BF%0B%C3%A1%5Cc%C3%9E%C3%80%C3%92%16%7B%C3%80%0D%5B%C2%AE%C2%B0%C3%B6%C2%A3%0Bt%3F%C2%A8%1D%5E%0EFq%C2%85%C3%AF%C2%80x(%C3%A2%C2%83%C3%BE%C3%8A%C2%B2%2CD0c%C3%9Eu%C3%9Dx%C2%80%C2%93%C3%A7H%C3%B6%C3%A0s%C2%ACsm%0F%C3%B9%0C%C3%BB9%04%08%C3%BB%C2%82%C3%BBY%C2%96%15VNY%C2%81%18%C3%93%1A%C3%AC%C3%AC%C2%94%C2%9D%C2%91%C3%986%5E%10%06%01%C3%A2%1B%C3%8BI%0B%04a%C3%9Cp%10%26%C3%AAd%10%14%5D%09%C3%98%C2%B4%C3%9C%C3%920G%2F%C2%93%20%12%01%C2%B1%7F%208%C3%A2%C3%8D~)dow%22%C2%90%C2%8D'q*%7B%C3%99%C2%80Kdo%C2%8A%7C%C3%A9G%C3%8Ew%C3%A2h%C3%BE%1F%C3%BDc%C3%8F%C3%A0%C3%94%10%3E%12%10gup%C2%AC%C2%BD%C3%A7%C3%BASp%00%00%00%00IEND%C2%AEB%60%C2%82"; 

//Volume
var volume_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%81IDATx%01%C2%A5T%C3%8Bq%C3%820%10%C2%95M%C3%A0%C3%84%C3%81%C3%A9%C2%80T%10%C3%92%01T%10rf%20v%05I%07%C2%98%0A%C2%92T%C3%A0%C2%84%C3%8Fpt%09%C3%90A%C3%9CA%C3%A8%20%3A%00%07%C3%BC%C3%8B%7B%1E%C2%99%18%C2%90a%18vF%C3%9E%C2%95%C2%B5z%C3%BB%C3%9Ez%C3%87B%C3%80%7C%C3%9F%C2%B7%C3%84%15fz%C2%9Eg%C2%ADV%C2%AB%C3%9F%C3%B1x%3C8%C2%95%C2%88%C2%BC%C3%A6d2%C3%B9%1E%C2%8DF%C3%B6%11%C2%88%C3%A38%12%C3%BE%0B%C3%8B%3D%04%C2%9A%C3%8Df%C2%8D%C3%A9t%C3%9A%C3%8C%C3%B7I%C2%92X%C2%86ax%00%C3%B3%C2%8A%C3%ACM%3Ez%C2%BD%C2%9E%C2%AD%03%C2%8A%C3%A3%C3%98%C3%87%C3%859c%14%0B%C3%BA%C3%BD%C3%BE%1D%C3%82a%C2%9A%C2%A6%C3%B6z%C2%BD~%C3%9B%03)%03%0A%C3%83%C3%90%C3%89%C3%8F%C3%B3%C3%8A%C3%88s%C3%A1%3E%08%C2%84%C2%BC%C3%8E%1E%08%C2%B4%C2%BE%C3%82-%C2%B1d%0E%C3%84%C3%AAQ%14%C2%B5y%C2%BE%C3%99l%3A%C2%94%C3%81%18%C3%AF%5C%C2%95%C3%B7%C3%82%C2%BD%C3%81%07.%C2%B4%C3%A0%C3%A6%C3%A2%C3%98%5CT%1E2%40olH%23H%1B%C3%AF%16%C2%B8%C3%B3N%C2%90z%C2%BD~k%C2%8A%C3%93%C2%B6%C2%93%C2%B6%C3%9Dn%03U%3D%C2%93%009Kz)%C2%A5u%0EDh%C2%A4%C3%89%C3%A2a%C2%ADV%C2%B3n%18%C2%98%C2%A6)A%C3%B5%1C%C2%90P%C3%92%02u%C3%A7%1ElD%C2%B7%C3%9B%0D2%26%0C%C3%A0%C2%9Ep%C3%A0p%C3%A5T%0B%C2%A6%C2%9B%C2%A3%16%C3%96%C2%82%C2%81%C2%A1%2B%C2%8B%C3%A9lT*%C2%959%06%C2%AB%C3%81%3D%18%18%00%C3%B8D%C3%B8%2CT%C2%B39%C3%81%C2%90%C2%92%11%C3%90%C2%82%14%C2%81%18%C2%AB!%13%C2%87%40ynic%C3%91%C3%88%25%26%C2%B6%C2%8D%C3%B5%C2%A0%00%C3%B8U%1E%C3%85%7F%C2%8Fv%C3%92J%C2%99%C3%A8%C2%98U%C2%AB%C3%95%01%C3%BA%C3%85%C3%BE%C3%98%3AF%17%1B%C2%A5a%C3%8A%7F%C3%84%C2%B5%C3%86%C3%9F%08%C3%BD%1Fh~%C3%98%C2%80%C2%B2%C3%87%15r%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var volume_min_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01dIDATx%01%C3%8D%C2%93%5DN%C2%83%40%10%C3%87w%11%C3%9F%C3%94%C3%A0%0D%C3%B0%04%5E%01%C2%BC%C2%80%C3%B6%00%040%3E%C3%B8%C3%88%0DZNP%7D%C3%97T%03%09%C2%8F%C3%A8%09%C2%96%1B%C3%B4%08r%03%C2%89%C2%85%C3%B8%C3%80%C3%878%C2%83%2C%C3%81*M%C3%93%C3%B8%C3%90I%C2%96%C3%BD%0F%C3%8B%C3%BCvgg%60%C3%AC%1F%C2%8Co%C3%BBa%14EzUU%0B%C2%94%C2%BEeY%C3%89pM%C3%99%14%C3%A8%C2%81%C3%90n%3F%C2%85N%1A%01%3A%00%C2%90%16a%18%C3%8E%C2%B7%C2%82P%C3%B0%C2%AA%C2%80eY%C3%81%C2%92%7C%C3%9A%C2%BD%C2%AEk%13%C3%A53%C3%82%C2%BC!H%19%03%C2%945%08%06LGW%C2%93%C3%A9%C2%B8%C2%AE%C2%9B%22%C3%8C%C2%91%C2%A0%20%08%0CZSe%C3%A0%C3%B5%C2%87p%C2%A4F%C3%80%C2%B4%03%C3%B4%C2%86%C3%A98%18%04%08%C3%B1Q%7B%C2%AA%C2%AA%5E%C3%A2%C3%AB)%C2%8E%C2%A4%3D%C3%89%C3%8DJ%18%C2%9C%C3%83B%C2%8Eu%C3%80%C3%80f%C2%B4%3B%C2%9E(C%C3%BD%C2%8A%C3%83%C2%88%C3%A3X%C3%9Bx%C2%B1%23ftsJ%C2%8F%2C%C3%8Bv%C2%82%C3%BC%C2%B2%5D%20I7%C2%9F%C3%93%C2%83.%C2%BB%C2%85%3C%1C%C2%9B%09%03%3E%01%C3%A0.%0Dl%C3%81%C3%B4%C2%AF%C3%A8%C2%A6i%C3%9AF%C2%A3J%C2%B1%C3%AF%C2%B4Z%60_%C2%9D%C3%87%13%C3%B3Ej%C3%A7%5D%24%07%C2%87%7D%C2%89%5B%C3%83%C2%8A%C3%9Cu%17J%C2%9Az%C2%84J%C3%AF%C2%93%3F%C3%9A%C3%B6%08%C3%92%5B%10mptqF3U%C2%A2(%C2%8A9%C3%B6%C2%88C%C2%A7%C2%B2m%7BF%C3%AFG%C3%AF%C3%A4%C3%A9%C3%94L%C3%AB%C2%92%C2%9B%0A%C3%A3%13%C3%B2%C2%B1%C2%B4Wy%C2%9E%C2%BF%11%00%C3%9D%7B%09%C3%B8%C2%91%C3%8E%18h%C2%90N%C2%8A%0D%C2%96%10%60%C3%BD%07%C3%9C%1F%C3%BB%02%C2%9C%C3%90%C2%B6%C3%A3%C3%85(%C3%A1%C2%9A%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var volume_normal_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01pIDATx%01%C3%8D%C2%93%C3%81m%C3%820%14%C2%86%C3%AD%C3%84%C2%BD3B%3AAW%C2%88%C2%BB%40%C3%8B%00(%C3%A4%C3%98%03%15%C2%9D%C2%A0d%02%C3%9Ar%C3%A8%C2%91V%20q%C2%A4%C2%9D%C3%80%C3%99%C2%80%11%C2%9A%11%22%15.%25%C2%B6%C3%BB%C2%BF%C2%80Q%1A%11%04R%0F%3C%C3%A9%25%C3%BFs%C3%AC%C3%8F~~%2F%C2%8C%C3%BD%C2%83%C3%B1c'%C3%8Ef%C2%B3%C2%A0(%C2%8A1d%C3%92%C3%A9t%C3%92%C3%AA7%C3%AF%C3%90%C3%82%C2%B1%C2%B2%C2%ADWe%03%C3%92%00%04%C3%96%C2%96ZM%C2%A7%C3%93%C3%A1Q%10Z%C3%BCm%C3%8Dbm%C3%B5%C2%82b%C3%9A%5Dk-!%C3%9F%01%C3%ABWA%C2%BC%09%C2%B0%C2%B6F1%C2%B69%C3%85%C3%BD%C2%B5%C3%A04v'yF%C3%B1d2y%C3%83%2B%C2%82K%C2%82%0B%C2%B7%C3%B0E%15%5D%C2%A7%01xt%00g%3F%C2%A6%C3%A8%C2%8E%C2%94%C2%B6%3D%C3%A9'H%C2%AD%2F%C2%84%C2%B8%C3%810%C3%A6%C2%B1%C2%B4Lg%C2%A4%C3%96!%C2%B3l%C2%BC%C3%B3%1A%C3%80%19%C3%92%18%C3%90%C3%9C8%C2%8Es%C2%84%C2%9F%C3%B0p%3E%C2%9F%C2%B7%0E%5E%C3%AC%3E3%C2%86%C2%85%5B%C2%99%C3%91%23%C3%8F%C3%B3%C3%93!%C3%BB%C3%ACd%C2%88%C3%A7%C2%B1t%2B%C2%AF%C3%A8%C2%81%C3%94%C2%B2%12%C3%92%C2%93%17)%C3%A7%C2%AC%C2%8DZ%C3%85%C2%A5%C2%B3M%15%C3%AA%C2%86%3BIh.5%1E%C3%82%10%5E%02w%C3%95%C3%A9I%C3%B1%C3%A1%C3%B4P%C3%99%C3%94%C2%AF%C2%94%C2%98%C3%8Cx%C3%A2%C3%A9Ar%C2%BAPj%3C%C3%AA%C2%91%16%3C%C2%A1%C2%B8%C2%B1%C3%AD%01%0A6%20%C3%AA%13%C3%BF%C2%92%C3%9ET%C2%89%C3%95j5%C3%84%C2%89%C2%BA%C3%86%C2%98%24%C2%8A%C2%A2A%C2%99b%13%04%C2%BBf%C2%9A%7B%C3%92%C3%A7%C2%BAM1%1A%C3%ACv%C2%B9%5C~%11%00%C3%A1%C2%B3%03%C3%BCI%C2%A7%09%C3%A44R%C3%88%C3%90%60)%01%C3%AA%3F%C3%A0%C3%B9%C3%98%2FN%10%C2%B5%00~%2B%C3%BBG%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var volume_high_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01tIDATx%01%C3%8D%C2%93KN%C3%830%10%C2%86%C3%87q%C3%83%C2%82U%C2%8E%C2%90.%C2%8Bx%C2%88%1B%C2%94%13%007%08%07H%1F'h%7B%C2%82%00EbYq%038A%7C%C2%83.%C2%90%C2%9Ae%7B%C2%84J%15%C2%A8%22%C3%B6%0Cc%C2%97%04%C2%A8%C2%9A%0AX%C2%A0%C2%8E%14ylg%C2%BE%C3%BC%C3%B3%C3%9B%01%C3%B8%C3%8F%C2%A0%C3%AC%3E%C3%94%C2%93a%C2%9Ag%C3%83%C3%A6%C3%BA%C2%9E%C2%B7%C2%B5p%3A%0Al%C2%B1%C3%8D%C2%B5%C3%96%C2%A1%00%0A%05Rj%26w%C3%89%C2%8F%20%C2%B6%18_%17c%C2%83%C3%B9%C3%98%C3%8E%C3%BD%C2%A3Xy%C3%82%C2%9C!%C3%91%03%11v%C2%BE%C2%82%C2%BCJ%00%C3%A6)%01%C2%84%3C%0D%C2%8A5%C3%91%C3%A8%C3%8E%C3%B6%0E%C3%9B%11%C2%92p%C2%A0%C3%BCy%C3%95Z%C2%AD(%C3%94%C3%99mT%C3%A4%0C%C3%A8%7D%00%C3%8A%C3%90%C3%B8%16%C2%99lH%C2%B2%11%0F%C3%BC%5Cw%C2%8C%2F%C3%8F%C2%85%C2%84%1Eo)%C2%A7%C3%84%C2%99%C2%850*%C2%9Eu%40%C2%A9%10%C2%A9o%C2%BF.N%C2%BBs%04z%02%C2%A2%26M%C2%93%60%C2%AB%C2%B1%1B%C3%83%C3%83%C2%A6%1D%C2%84%C2%80%C2%99%C2%9B%2F%C3%A1%0F%C2%90M%5C%C3%B8m%C2%A0%C2%A7%C2%9C%12%C3%B0N%C3%9C%C3%88f%3B%C2%88%C3%9F%C2%88%15%18q%C3%89%C3%A9%C2%95%7DJ%C2%A9k%C3%81%C2%9E%0C%C3%ACQ%C2%BB%C2%BB%C3%83~pO%0EX%C2%9EN%C3%AD8~%2C_%C3%8E%12%C2%85%20S%C2%A2O%C2%83k%C3%BBx-%C3%AA%C3%9D%C2%B9%C3%8D%0D%C3%AA%C2%84%C2%A5%04d%60%C2%B0RU%11%0C%0A%C2%91djsy%C3%90%C2%AA%C2%BB5%C2%BE%C3%81f%C2%B9H%C3%B8%04%C2%A3%C2%95%C2%AAv%C3%9F%C2%AEWz%C3%A2z%C3%A5%1BjH%C3%9A6%C2%81%C3%BF%C2%9B%0B%C3%B3%C2%B2%C2%98%3A%00%C3%91M%01%C3%B8%C3%96N%15%C2%A8%C3%88%C2%91%3C%C2%86%C2%A2%22%04%06%C2%B4%14%C3%ACd%C2%BC%03%C3%88%C2%92%C3%83%C2%98%C2%8E%C2%B6%C2%B4%C3%B4%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var volume_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%AAIDATx%01%C2%BD%C2%93%C3%9F%11%C2%820%0C%C3%86S%C3%BE%C2%BC3%02%1B%C3%A8%08%C2%B8%C2%81n%C3%A0%26%C3%82%04%C2%BA%C2%81n%C3%A0%082%C2%82%1B%C3%88%06%C2%BEC%C2%B9%C2%98%C2%94%C2%90%2B'%C2%9E%C3%80%03%C3%9F%5D%C2%AF%C2%A5%C3%A9%C3%B7k%C3%92%16%C2%805%C2%85%C2%88)Z%C3%BB%C3%80%C2%A6%C3%89%C3%A6%C3%B8%C3%98%C2%98%C2%B0%C3%99%C2%8D%C3%89%C2%8Cm%C3%BB%22%10R%7F%C2%9E%0AH%C3%85%C3%B4%1E%C3%8C%C3%95%C3%B5m%12%C3%88%03%20%C2%B7~N%C3%A3%3DHJ3%1A%C2%B0%C3%B6%C2%A8%14cN%C3%A0%C2%99L%14%192%C3%A4%10%04h%C3%82%C2%B0%C3%A02%C2%816%C2%A1%C3%90%C2%93b%3B%C3%90ze%C3%97%C2%B1%26kr%7Fw%C3%8D%C2%86%C2%80%01%C3%8CW%26%C3%99V%C3%B2%C2%BD%08%C3%B2%C2%A5%25%C2%90%12%C2%BAL6%5Dg%C2%AA%C3%88%0D%C3%A2%C2%B8%C2%A4%C3%BA%0E%C2%9C%C2%9A%2C%18%1C%C2%AC%0A%C2%B1pk9%C3%96%C2%B6%C2%99%02%C3%87%C3%B4%C3%A3%C2%8A%13%C2%8D%5B%7B%C3%B7%0F%C3%B9%3F%C2%A8%C2%BB%C3%8A~.!%C3%B3U%009L%C2%91%C2%BC%C3%90%C2%AD%C3%AC%C2%BE%C3%A7%C3%97%2B%C2%80%0B%2C%11%C3%83%5C%19s%7F%C3%80U%C3%B5%01%1DW%02k%3D%C2%BA%C2%9Ao%00%00%00%00IEND%C2%AEB%60%C2%82"; 


//Solo icons

var shapes_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%11%08%06%00%00%00%C3%90Z%C3%BC%C3%B9%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%012IDATx%01%C2%AD%C2%93%C3%8BM%C3%840%10%C2%86m'%C3%8A9t%C3%A0t%10*%00*%60%C2%A9%00%3A%609%C3%A6%C2%90%C2%87%14E9%02%1D%C2%B0%15%40%07%C3%90%01%C2%A1%03%C2%97%C2%B0%C3%97%1C%C2%92%C3%B0O%C3%A4%C2%ACV%2B%3FvW%3B%C2%923~%C3%BC%C3%BEf%C3%ACq%18%C2%BB%C2%90%C3%B1%C3%BDAUU%C2%B1%10b5M%C2%93%C2%A41%C3%BA%5D%C2%9E%C3%A7_'%C2%81%00I9%C3%A7%C2%9F%C3%A8%C3%8A%03%C2%8D%02%C3%B8%0E%C3%AB%C3%8A%0B%C2%82H%02%C3%B2%C2%8Bnl%C3%91%11%C3%AC%1A%C2%BA%C2%AD%0D%24%C3%A6%C2%8F%10%C2%A5%03BF%C2%81%C3%96%C2%8Eu%16%C3%92%07%C3%91V%C3%8Cc%00%C3%9D%C2%90%C2%AF%C3%ABz%C3%96%0E%C3%83%C3%90%C3%AD%1F7%C3%94%3E%C3%B6%C2%81%C2%96%02%C3%80%3F%C2%A3%C3%9D%02%C2%AC0L%C2%96u%C2%A1%C2%BD%C3%B2%C2%81%C3%B4F%02-Ae%C3%9B%C2%B6%C3%B2%10%C2%B4a~%C3%9BPQ%C3%A0S%C3%93%C2%A2%C3%90Q%C3%9E%3CYuEQ%7C%04A%C3%B0h%13%C3%8C%20*%2B%C2%BD%15Sf%C2%98%7F%C3%97%C3%AF(%1D%C3%87%C2%B1r%C2%824L%C2%95e%C3%B9%C2%84M%09mD%7B%40%C2%BB%C3%82%C3%BC%C2%9A2%C3%81%1D%7D3%C2%87q%C3%93d%C3%934%14%5D%C3%AAJ%C3%9DS%C2%95L%C2%BA(%C2%8A%C2%92%2C%C3%8B%14%C3%B5C%C2%93%00o%C3%A4%C3%95%C2%B6%C3%99f%C3%822%C2%BFeGX%C3%9F%C3%B7%3B%C2%9D1%23%1C%C3%AB%05w%C3%B2%C3%A7%60P%11~%5C%C3%BF%C3%9E%C3%99%C3%B6%0F%23%16%C2%8Dx%01%2B%C2%8E%C3%A8%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var shapes_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%09IDATx%01%C3%8D%C2%92%C3%91%0D%C3%82%20%10%C2%86%C2%8F%C3%86D%1F%1D%C2%A1%C2%9D%40%C3%9D%407%C3%B1%C3%91%C2%A8%C2%89u%C2%83v%02%C3%B5%C3%85%C3%B8%C2%A6N%C2%A0n%C3%90%11%C3%9C%00%C3%9D%C2%A0%C3%8F%26%05%7F%2C5%C3%98%C2%B4%3D%1F%C3%BB'p%C3%80%C3%81ww%00Q%C3%9B%24%C3%9C%C3%89%C3%BC%C2%A9WZQ%C2%88%C2%A1o%C2%9Dw%C2%98%C3%9D%3E%10%C2%A7%C2%BFAs%C2%A9%C2%8F%C2%9AhZ%C2%B3)%02%2CfA3%C2%A9%C2%A7%18%1C%C2%9B6%22%C3%88%C3%A4%10%C2%88%C2%A4%C3%8E%C3%AF%C3%99nE%C2%BC%C3%82%26g%C3%87F%1B%12%23d%3C0%16Wp%C2%A1%C3%BC%0E%C2%AFn%C2%B9%C2%9E%C2%B5)%C3%B1Jm%C3%90%C2%BE%09%C2%8C%16%C2%85R%C3%B7%C3%8B%C2%A0%3BG%11%C3%9Ew%C2%8F%C2%9B%C3%BD%2F%08%C3%B4%C2%98%C3%A1%C2%A4JQ%C2%BC%C2%94z%C3%AC%1Ev%C3%B5%01%C2%99%C3%97h%C2%80%C2%A5%C3%B0%C2%AD%7B%C2%B0Y%C3%83%C3%8B%16%C2%A5%19X%C2%84%03%01%C3%92%3Bc%C2%9A%C2%98%26%14%C3%AD%C2%B06%02%C3%A4%C3%BA%22%C3%9A%C2%90%C3%BD%C2%A8U%12%C3%84%C3%88%C2%94c3%C3%B1%C3%8B%C2%BE.%02o%03%C3%B10%C3%A3N%C3%95%C3%A1%C2%85%C3%94%1Bd2F%C3%B3%C2%B3%C2%9A%3B)%C2%AB%12%C2%A4%C3%B2%C2%97a%C3%BF%C2%96%2B%C2%AFf%C3%BDF%C2%BC%C2%92%C2%A2%C2%ACv%C3%AA%0D%C2%95%3FO%C3%B1%C2%AC)%C3%99O%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var text_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%92IDATx%01%C3%9DS%C2%BB%0D%C2%830%14%C2%B4%11%12%C2%ADG%08%1B%C2%91%09%C2%A2L%C2%90%C2%A4%C2%A42%C2%88%C2%822%2Bx%04F%20%1Bd%C2%83x%04Z%C2%BB%C2%B0s%2F%22R%3EFq%C3%A1%02%C3%A5%24s%C3%A8%1E%1C%C2%BE%C2%B3%60lm%C3%A0t%C3%A9%C2%BA%C2%AE%C3%B2%C3%9E%C2%8B%C2%98%17%C2%9CsC%C3%934%C3%93%C2%A7%C2%9E%C3%8F%C3%833h%13cT%14%C3%85%08%C3%BA2%C3%8AX%22%3Cv%C2%84X%C3%BB7%C3%B7%2C%3B%40%C2%AB%C3%A8%C3%8B%C3%A0%C3%AD%C3%AB%C2%AC%C2%AEk%1D2%C3%A2!%C2%B1m%5B%05%C3%9Aai)e%C2%89N%04%22-vH%C3%A69%C2%8B%00%C3%A7%C3%BCh%C2%AD%C2%95K%C3%B3%C2%BE%C3%AF%C3%8B%C2%B4%1D%C3%BD%02z%1A%40%C2%9A%C3%AE%C2%B1%3B%3Aa%C2%8Ay%C2%81%C2%AEH3%C3%86LQF%C3%A8%C3%A8%0A%C2%A2E%C3%BDQD%01%C3%83%1B%C3%BAS%C3%8Fg%C2%92E%C3%BBc%C2%A3%60%C3%99%C3%B3i%C2%8C%2C%C3%B0Oav%02%09%C2%B0f%C2%AB%C3%86%1D3%C2%B1O%15%C3%A90%C3%94%C2%B8%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var text_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%11%08%06%00%00%00%C3%90Z%C3%BC%C3%B9%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%88IDATx%01%C3%9D%C2%92Q%0E%011%10%C2%86%C3%BF%C3%99H%3CI%1C%C2%A1n%C3%A0%0AN%C3%80%0Dp%04Y%09%1E%C2%BD%C3%A0%C2%85%C3%AC%11%1C%C3%81%0D8%C2%82%1B%C3%A8%11%C3%AA%C2%8D%07%C3%86t5%C2%8BMW%C2%9A%C3%B0%C2%B0%C3%99%3F%C3%AD%C2%B4%C2%9Di%C2%BFi%C2%A6%05%C3%8A%26%C2%B2%C2%86W%C3%A3%C2%BDX%15t%C2%82o%1D%C2%9A%25%3A%C3%AF%C2%AE%C2%B9%C2%A8%12%C2%A3%C3%B0%C2%83%1C(%3A%0AL%C2%BF%C2%A5U%2F0%1D%3EN%5C%C2%9B%C3%86%07%22%C2%9F%C2%93%C2%97%C3%B1V%22%7D%C2%99j%C2%9A%C2%AE%5B%08%C2%BF%C3%91w%C3%B1%22%C3%AE!B%C2%B7p%C3%83%C2%A51%0A%02%C2%81%C2%A8-%C2%B8Aa%C2%BCn%C3%A6a%C2%A0%C3%A8n%C3%80%C2%A4%C3%9DJ%3D%C3%A1%10%1F%C2%B2z%05%C2%81h%C2%B2Id%C2%B0%5D%C2%BEJ%7CJa%C2%8C%C2%9D%C3%94o%C2%98%C3%A5%C3%82%C2%9FTa%C2%90%C2%BF%C3%98%C2%94%C2%BE%C2%86v%3D%1F%14%1F%C3%9BvF%C2%A9%C3%B5%00%C2%BC%7B1%C2%AE%C2%9C%C3%BA%0F%C2%BA%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var null_objects_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%1FIDATx%01%C3%9DS%C3%81%C2%91%C2%830%0C%C2%94%C3%A1%0AH%09)!%1D%60*%C2%B8%C3%AB%20)%C3%A3%5E%60C%23I%25q%09%C2%94%C3%A0%12%C2%B8%02%C3%80%C2%B7%3Bc%C3%8F%18%C2%87%C2%BB%17%C2%AFhF%C2%A0Y-%C2%8B%2C%C3%89%22%07%C2%98J%C3%818%C2%8E%3A%C3%85%C3%8B%C2%B2xc%C2%8C%2F%C3%89%C3%80%C3%8Eu%5D%C2%9F3%C3%9E%04l%C2%AERr%5D%C3%97gr%C2%A5%C3%94m%C3%B7%C2%8F%C3%80s%1E%C2%A0%0B%C3%B1%C2%8F%C2%9C%C3%94%C3%B7%C2%BD%1A%C2%86%C3%A1%19B%C3%A8%C2%AD%C2%B5%C3%BD%1FB%C2%AE%C3%AB%C2%BA%16%C3%B9%C2%90%C2%B0%C2%8DH%14%C2%A0%C3%BA%03%C3%AF%C3%BB%5E%25%C3%80%3F%23OJ%C2%91%19nY%01%C2%88w%C2%94%C3%BA%C3%80%11%C2%9D%C2%BC%C3%B6D%C2%AA%C2%AA%02-%C3%9C%C3%88%C2%87%C3%BB%C2%92%23%2C%11D-%C3%BF%18%07%C2%90%1F%C2%85V%C3%89%01%C3%B6f%225%1Fh%C3%A6%C2%A9m%C3%9Bo%C2%84%1A%C3%9D%C2%97%C2%A6i~%C2%9Cs%C2%BE%24%C2%B3%C3%A9%C2%98%C3%9E%15%C3%A1%05%7C%C2%A5%C2%B5%C3%B6%C3%A0%C3%8Di%C3%84'8%C3%87%C3%AB0%C2%BE%2F%0Aa%0A%2F%7FD%C3%AE%C3%8A%7C%C3%A4q%19%1D%C3%9Co%C2%8E%C3%83M%04a%C3%A2%1E%C3%A4%C3%AB%C2%9D%C2%9C8%C3%B3%C3%A4%C3%A5%C3%9Fm6%C2%96%C3%B3%C2%8F%C2%9Bhq%05LY%09%C3%B2%26%5E%C2%89%C2%B0'2%23%C2%99%C2%AB%7B%C3%99%C2%B1x%15%5C%06Mr%C2%94%C3%BD%025%C3%93%C3%80Yy%3FjR%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var null_object_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%1AIDATx%01%C3%9DS1%C2%B2%C2%820%10%C3%9D(%C2%85%C2%A5G%C2%A0t%06%0A%C2%8E%C3%B09%C3%81%C3%B7%06r%13%C3%B0%26x%12s%04%0A%C3%AC9%C2%82%C2%85%C2%85%053%C3%AB%C3%9B52%C3%84%C3%84%C2%B1%C2%A1rg%12vv%1F%2F%2F%C3%89%0B%C3%91%02a%5E%09%C3%A7%C3%B9%C3%9FTM%C2%92%C3%81t%C3%9D%C3%B0%0E%C3%A6%C2%A2Hi%1C%C3%93%19%C2%AE%03%C3%AE%C2%BA%C3%92%C3%A6n%C2%97%12%C3%B3y%1A%C3%A3X%C3%85V%C3%94%C2%BA%C2%8F%2B%C2%94%C3%8B%C2%93u%C2%B9%18(%12%40%C3%8DYV%07%24%C3%8C2%5B%C3%A0J%C3%B4y%12%C3%A4a%C2%B2%C3%AC%C2%8C%C2%8F%C2%B0%C2%9F%C3%88%C2%986BRa%C3%BEw8%C3%B2I6%C2%9B%2B%C2%A4%1DE%01F%0B%C2%82%C2%93%C3%A9%7B%1Bp%C3%A4%C2%B9%10%C2%89%C2%82%0A%C2%98%23%C3%BE%19%C3%82%C2%85%20%C3%91%3B%C3%A0HH%7F%C2%BE%15%C2%89%15-%10%C2%BFH%02'nq%60%C2%8DV%C2%98%0F%C2%9F%0EW%C3%AB%C3%A8%C2%BB%C2%BCQ%C2%93%C3%92%C3%AB%C2%8A%C3%AF%C3%B7-%C2%AD%C3%975%C2%AE%C3%8D%02%C2%B4%17S%C3%A9u%06%2C%200f%C2%8F%C3%8C%C2%AA%1D%C2%92%C3%84%22%1F%7C%C3%87%C3%B6%7D%C3%A9%1C%5B9c%C3%85%C2%88%C2%BE%3A%C2%96%C3%95%C3%9A0%12%08%1B%0A%C2%B7%C3%93%C2%B8'%C3%A1%C3%B9d%C3%AE%C3%98r%C2%AA%C3%86%C2%9C%C3%B8%C2%AC%C2%B7n%0B%C3%8F%C2%B8%C3%9D%3AZ*%1E%C3%8A%C2%93%C2%A08%C2%B1%C3%A4%C2%8E'%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var trackmatte_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%09IDATx%01%C3%8D%C2%92%C3%9F%0D%C2%820%10%C3%86%C2%AF%C3%84%C3%B0%C3%8C%088%C2%81%C2%BA%01N%C2%A0N%20n%C2%80%0BP%C3%9E%18C6%10'%C3%90%0D%C3%84%0D%18%C2%81WB%02~%C2%A75%C2%A9%14%C2%A5%C2%8F%5Cr%C3%A9%C2%BF%C2%AF%C2%BF%C2%BB%5E%C2%8Fh*%26%C2%866%C2%93%24%C3%B1%1C%C3%87%091%5D%C3%80%7Dx%05%C2%BF%C3%84q%C2%9CYA%00X%0A!%C3%8E%C3%AA%C3%B2%5B%24%C3%84%C2%AD%C3%AB%C2%BA%C3%97%1A%C3%A3%1A%C2%9A%C3%B2'%04%C2%87%3E.%C3%9C1%C3%B5%C3%B4%7D%C3%97u%C3%A7u%5D3%2C%C3%82r%0F%C3%90J%079%C2%BA%18O8%C3%B5%01Z%C2%80RJ%19qVJG%06%C2%84%C2%B3%40%C2%84%C2%80F%C2%ACm%C3%9B%23%C3%AB%C3%924%C3%B5%0D%08%C3%A8%5B%C2%B20%C3%B5%C2%8C%C2%A2i%C2%9A%C3%80%C2%80%C2%80%C3%AE%C2%91%C2%A5%C3%A1I%C3%95%C2%A7%C3%90%7DHI%C2%96%C3%86%01%19d%408E%1B%00%C3%97%0E%C3%83%12%C2%B5%C3%89%0D%08%0E%0B%C2%AE%C3%BC%18%04%C2%B5%C2%93%C2%AC%C3%93%C2%BFx%C2%A6%0B%40%3F%0C%C3%B5%C2%89%0A%C3%82%5D%2C%C3%B9g%C2%B8%C3%A1%C3%B4%C2%B3%C2%A1%C2%8E%C3%A5%C2%86%C2%BB%C3%92w%C3%87%C3%A6%C3%AA%C3%BB%C2%B9%C2%A0%3B%C3%8E%C3%BA%2FD%C2%83%C2%85%C2%88%C2%BCQY%C2%95%C3%B0%072%C3%8D%C2%B0_%C3%91d%C3%AD%09%C3%A5nx%3F%C2%8C%C2%B3%C3%85T%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var trackmatte_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%B6IDATx%01%C3%8D%C2%92%C3%81%0D%C3%820%0CE%1D%26%C3%88%08%C3%9E%C2%80%C2%8E%C3%80%060B7%C2%82%0D%C3%A8%06%15%13d%05%C2%98%C2%A0%C3%99%C2%80n%60~%C2%84%0FiH%C2%83%C3%A1%C3%94%2F%3DYr%C3%93%C3%97%C3%8A%0E%C3%91V%C3%A2jM%11%C3%B1(%3D%C3%98%03%063%C2%B89%C3%A7%06%C2%B2%04%C2%82%0EL%C2%B2L%C3%90%5E%C2%82%C2%BF%09%18%3C%C3%A53%C2%AC%5C%C3%B49%C2%B7%24A%C3%AA%C3%A1%C3%AC%C3%8C%C2%98%C3%8E%C2%B5%C3%BEB%0C%12.%7B%C2%BB%C3%8Cs%22C0%C3%9C%C2%88r%07%C2%87%C2%9A%C3%84%C2%93%3Di%5B%5C%C2%93D%C2%B2%C3%87%C2%ABh%19%5D%C3%AD_3)E%C3%81%20%C2%B9%C2%AEn'%C3%BB%C3%8A%C3%9A%3D%C3%B1%C3%A0%2C%3F%5C%C2%B8%C2%A9%C2%90%C2%8C*O%C3%BD%C2%AE%7C%C3%875d%3D%C3%8A%C2%91%C3%9EC%C2%8C%C3%A0%01%06%C2%ACx%C2%A6%C3%8D%C3%A6%05%7C%C2%959%C3%B2%C2%BA%C2%AB'%1C%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var Adjust_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%015IDATx%01%C3%8D%C2%93%C3%A1q%C3%820%0C%C2%85%C3%AD%5C%07%60%C2%83%C2%A6%13%C2%B4%23x%03%C3%98%C2%80f%C2%830A%C3%9C%C3%8B%00%C2%B0A%C3%9B%09J'%20%23%C2%94%09H7%C2%80%01%C2%92%C3%B4Sc8%C3%85%09%C3%BC%C3%86w%C3%AF%C3%ACHO%C3%8F%C2%92%C2%AC%18s%2F%C3%8BN%19%C2%BD%C3%B7%C2%B3%24I%5E9%3E%C2%83%14%1C%C3%81w%C3%9B%C2%B6%15%C2%BE%3A%C3%A6'%13%02%0Bk%C3%AD%C2%A1%C3%AB%C2%BA%C2%82%C3%8F%19%C2%BB%13%C2%BB%7Cc%C3%9F%C2%89%C3%BF%C2%A6H%10%C3%B8%22%C3%A0%13%3Cq%C3%B3*%08%C2%BC%04J*%C3%BEX%C3%88*%01!%C3%ACD%C2%80%C2%B3W%C2%B6%03%C2%A5%C3%A5M%C3%93%C2%9C%C3%BE%03%C2%ACuls%C2%B9%04%C2%BF%C2%94i%1E%C2%94%C2%A0%0B%C2%81%3EN%C2%97%C2%8C6%04%0FK%C3%A8%7B%C2%B6%19%C2%88%60%C2%9C%C2%B3Ufz%C2%BDqs%C2%AD%C2%B8K%C3%937%C3%9D%C3%84%C2%99H%13%C3%B7WD%0A%C2%9D%09%3C)%C2%AB%1A%C2%89%C3%A0%C3%B8%C3%85%C3%B18%C2%A5%C2%80%5D%1A%7CT%C2%A6%25%C3%BC%C3%93%253E%C3%BC%C3%81%C2%B1%C2%90%19%C2%89E%C2%B0%C2%AF%C3%81%C2%BB%C2%82%C2%83%C2%BF%1D%C2%89%C3%90%C2%BC%0F%C3%93%C3%97%5B%C3%84%22%C3%B2%3A%04e%01%C3%92%C3%8CZ%06o%24%22%C3%8F%C3%85%0D%19%C3%88%C3%8B%C2%B2%1C%08%11%C2%90%C2%ABl%C3%A4%C2%BC%C3%92%C2%93%3B%1A%C3%BB0pk%5D%C2%A2%C2%A4%C2%AE%267%C2%83%C2%B3%C3%951%C3%97%C3%BE%C2%9D%C2%94%C3%8D%C2%85g%C2%97%1E%C3%95%60%2F%25%C2%9F%07%C3%AC%3E%C3%97%1F~%C3%9F%C2%BBU%C3%80%C3%99y%C2%AE%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var Adjust_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%84IDATx%01%C3%8D%C2%92%C3%81m%C3%82%40%10E%C3%A7%C2%AF%03%C2%96%C2%95%0B%1D%04N%C2%88%13)%01%0E%11G%C2%A0%C2%82%C2%84%0EB%05%40%05P%02T%009E%C2%91%22A%09%C3%A1%14q%C2%82t%00%12%C2%91%C3%A5%60v2kb%C3%A3%C3%98%16gF%C3%B2a%C2%BFw%C3%9F%C3%BC%C3%BD%3BD%C3%97R%C3%88%12%C3%A7k.%C3%B8%C2%9E%C3%BB%C3%84%40%C2%95%C2%98%C2%8A%20l%C2%99%C3%B9%25G%C2%B4%C2%A8W%C2%9CMr%C2%BFJ%0Ao%2B%C2%AF%C3%A5%C3%BF%C2%B8k%C3%81%C3%B7%40%5C%10%C2%A9%16%C2%B4%C2%92%C3%B5%0147%C3%BF%2FB%C3%8C%06%C2%B0%C2%9E2%C3%93d%C2%9FwJ%C2%BEF%C3%97%C3%A8%C3%A2%C3%A2%C3%BEoK%C3%91%C3%BCO%C2%82%C2%A2%C3%AB%C3%8C%3F%C3%9D%C2%A2%C3%A9%C3%84%C2%AC'%C2%8D%C3%8Am%C3%9Fh%C2%AF%C2%A2Y%C2%A0%C2%B5Rx%C3%96G%C3%9E%05%40%C3%925(%C2%AB%C2%99%C3%8B%C3%9B%C2%A5z%09%5B%C2%A3%C3%9D%C2%84%C2%90%C2%83%C2%B1-%15%02%C3%A2%C2%A55%C2%8F%C3%82v0%C3%A6%C3%85%C2%AA'%C2%99%C3%89r%C3%B4%0F%02%C2%A0)A.(%C2%A3%C3%A4%C3%8C%40%18%C2%9B%C2%98%C3%BFG%05%C2%AB%1A.%23%08K%C2%88%C2%ACy%C2%99%05%C2%81%C2%84%C2%9A%26%C3%ABE%1A%C3%82%C3%B4%05%C2%A5%C3%AE2!%C3%84%5D%C3%A6%C3%93%C3%BDC'%C3%92p%C2%97%C2%82(%C3%B0%C2%87%C2%B8%C3%A9%C3%89%C2%8Ct%C3%83%C3%80%C3%8E.1LN%C2%94%5C%C2%BF%13%C2%9D%C2%8Dh%C2%B67%C2%96%08%C3%89%3F%C2%B8)%C3%AB%C3%A6u%C2%84%C3%941%1F%14L%C2%98%C2%9B%C2%A3%0C%C3%9E%C3%99X%C2%AC%C3%9EW%C3%9F-%C3%8Dj*%19%C3%B4%1F%C3%8A%C3%8E%20%7Cbs%08%C2%90%C3%8C%18%C2%85%C3%80%19T%C2%BBQ%C2%B6g%C2%99%C2%90%18hx%C2%B2%2CWd%C2%B4d%C3%ACg%04%5D3%C2%9A%26%C2%AB%13%07dBL%05%0Edn%C2%A0%C2%B8%19t%C2%878a%5E%C3%AEmg%C3%9CN%C3%A4u%5D%C3%B5%0B%C3%BE%04%C2%AF%C3%80%7D%C3%A6%C2%90%C3%BB%00%00%00%00IEND%C2%AEB%60%C2%82"; 


//TOOLS
var add_null_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0F%08%06%00%00%00%3B%C3%96%C2%95J%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%18IDATx%01%C3%95%C2%92AR%C2%83%40%10E%7F%0F%C2%B8%C3%A7%06r%04n%10%C3%B0%02%C3%A6%06%C2%BAu%C2%91%C3%B2%08)O%40%25%2C%C3%9C%C2%86%13%18%C3%B7%1A%C3%B0%06z%03%C2%8E%C3%80Zf%C2%A6%C3%AD%26%C2%91*C%C3%8C%C2%86Uz%01L%C3%B7%7F3%C3%94%C3%BC%0FL(%C3%92%C3%87s%C3%85q%07%C2%97%1E%1A%C3%AD%22%0B%C2%B7%C3%87%C3%82%C2%A2%C2%B2s%06%22%C3%BD%C2%BEBP%3Fd%C3%94%C2%84%C2%BA%C3%A8%C2%BC%C2%80DK%027%22H%C3%96%C2%95%C2%8DF%C3%870%3D%12%C3%8B%C2%9C(%C3%A9%C3%98ig%13%0E%C2%BF%40%C3%BC%C3%89%C3%9E%7F%C2%80LJ%C2%8C%C2%BB%11%0B%C2%8E%01_%12%C2%99%C2%88y%C3%9F%C3%ABa2h%C2%A5%C2%91%C3%B6%20P%2Fn%C3%82%C3%AC%18%5E%C3%AD%C2%BE7%02%C3%A6%C2%A2kE%C2%BF%C3%BA3%5C%C2%BF%C3%9B%C3%BBbg%2B%C2%9C)%C2%9D%C2%AB%C3%AEwm0%C2%A1.%19.%C3%9E%C3%AC%5C%C3%92%C2%91%C2%8B%03%C3%A9%7F%C2%97%26%C3%9E%C2%BFh%06T%C3%97%C3%ABq%C2%B0%C2%8A%09%C2%91%C3%B8%C3%B8%25!%C3%982%C2%99%C3%A5%C2%A9%0D%C3%84%C2%A2%04%C3%AC%C2%9F%60%C3%8CL%C3%B5%03%C2%ACE0%C3%97%C2%92%C2%B0%19%C3%AF7%2BGG3%C3%85%C3%A2%C3%B3-%C3%8B%5B%16%C2%AF%03%C3%ACLP%07p%0Ai%C2%B6%C3%8BS%C3%99%C3%8E%C2%AB%C2%AE%09%C3%90%C2%83p%14%C3%94%C2%98Z%3F%19%03x%C3%AC%1ED%C2%94X%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var clear_all_panels_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%0E%08%06%00%00%00%26%2F%C2%9C%C2%8A%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%7FIDATx%01%C2%9DR%C3%8Bm%C3%82%40%10%C2%9D%C2%B1%1D%C3%8E%C2%94%40*%C2%88K0%C2%90%02%C3%A8%008%C3%A6%40%C3%80%15%04*%08%1FE9%C2%92%0E%20%C3%B7%C2%80%C3%A9%00%C2%A7%02(%C3%81%C2%91r%0A%C3%9E%7D%C2%99%C2%B5X%C3%8B%06D%C2%A4%C3%8CeWow%C3%9E%C2%BC%C2%99yL%17b%1E%C2%A1%C3%BAM%C2%BAO%40%00%22_%C2%A0*%13%C3%87%C3%8C%C2%88%5DrG%0Fu%C3%9E%C3%9B%C2%BF%7C%C2%9A%C3%BC%12%C3%BD%C3%B8%0A%C3%AE%C2%82%08%C2%B5%2C%09%C2%88%15%C3%A1%C3%8Ba%C2%BE%13%C2%B2%20%C3%BB%04%1D%3E6%2B%C3%A33%C2%82%C3%97%08%C2%B5%03%C3%94V%C3%A0%C2%84Yw%7B%C3%B5%C2%9BM%C3%B1%C3%BDY%C3%9E%3D%C3%A8%05%08%C2%BE%25)%11L%C3%97jgN%C3%85N%3D%2C%C3%88%3C%C2%8D%C3%99%3A%C2%8DLk%C2%8A%C3%9D%5B%2F%07%C2%A3C%00%C2%A0%26%C2%9A%C2%BA%C3%97%C2%92M%C2%A4%C3%ACv%5D%C2%A8%C2%9D%C2%A3%C3%93%C2%81cA%C2%AD%C2%A9%C2%95U'wYR%C2%B5J%3B%C2%93%C3%95a(%C3%B2%C2%AB%163%05D%C3%BA%C2%86%C2%99%C3%9B%C2%B9%023%24%C3%A9%3D%C2%96%C3%87%24W%C3%B5%C2%91%C2%B6%C3%804%C2%97a%C2%92T3%04%C2%83%C2%BC%20%C3%B0)%04%C2%81g%C3%98%C3%A5%C3%B2%C2%84%0C%C2%86%C3%8C!%C2%95N0%C3%AA7o%C2%86%C3%A4%22!%C3%B0%C2%B5n%C3%881%1FM%C2%82%05%C3%A4%3E%C3%89%C2%92%25%C2%B2-%C3%88L%C2%88u%C2%A8%1DoXJ%14%C3%85%C3%99%C2%9A-%60%C2%94%10%C2%A3%C3%96oT%3A%C3%B4G%1C%C3%97%C2%BD%13%C3%B27%C2%A6%7F%C3%84l%C2%AD%C2%B6%C3%86%0B%C2%A55%C2%9EVH%C2%95%C3%B2%7B%C3%B7%C3%9E%C3%B2%0C%C2%87%C2%9A%5B%23%C2%85%0Do%C3%8F%C2%97%2BdF%09%C2%AC%C2%95%C2%A5%C3%A1Df%C3%A3%1F%C2%AD%2C%C2%83%C3%95%C2%A3%C2%8BV.%C3%864J%3B%0Cj%C3%A7%C3%BE'%C3%9E%03%C3%BA%5D%C2%869.%1A%C3%AD%171X%C3%8D%C3%91%C2%9F%C3%BC%C3%93%C2%8D%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var track_matte__imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%10%08%06%00%00%00%C3%B01%C2%94_%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01.IDATx%01%C3%8D%C2%91%C2%B1J%03A%10%C2%86%C3%BF%C3%99%C3%9D%2B%C2%B4%12%2B%C2%B1Q%2CB%5E%40%C3%85*%C3%86%7B%C2%82%C2%94i%C3%A4l%04%C2%91%C2%9C%C3%B8%00%22%C2%A4%C2%B3%12%7C%07AP%C3%90%C3%86%C3%86%C3%82%C3%93V%C2%B0P%5B%5B-%C2%83%C2%95%18r%C2%BB%C3%A3DX%0C%C3%87%C3%A6re%C2%A6%C3%9A%7F%C2%98%C3%B9v%C3%BE%19%60Z%C2%82%C3%BC%C3%A3%C3%A4%C2%8E%17g%C2%8C%C3%8B%00%C2%AEM%C3%ACb8%C2%AD%C3%B4%C3%B6~%C2%93%C3%8E%C2%87R%C3%B9%C3%BCl%C2%94%C3%97*%01%C2%80%2FV%C3%B4j%C3%99%C3%AE%C3%B8%C2%84%C2%9A%C3%90%C3%B0I%C2%8C%0B%C3%B9%C3%B9%C3%89%03%C2%88%C2%B8%05%C2%B6%2FbAW%C2%80p%17%3Fz%C2%A5%13%C2%9Bv%1A%C2%9Bu%C3%92%3A%16%C3%A0n%C2%A7%19%3D%14%2BM%C2%B8%1F%C3%B7i%1C%1D%7By%C2%9A%C3%B1%1C%C2%AC%3DbBO%C3%A4e5%08%C3%A8j%14%60%C3%98%5E3%C2%B0)%C3%B2%3BT%5D%C2%BA%C2%93%02%60l%04!%C2%A4%C2%B8%15%02%C3%882oC%C3%B5A%3B%C3%8CX%C3%95p%C2%A9%00%1A%C3%BFdz6N%1DV%C2%9D%C3%A4%C3%AF%C2%8C%C3%A9%C2%96%C3%AEF%03%C2%BD%C2%A0%08m%C2%90%C3%9B%C3%A8%3D%C2%AA%C2%B5%C2%BD%C2%98%3EP6%C2%89%26cs%C2%B6%C3%83%C2%99o%18%C2%B4%7C%C2%96%C3%A5%C3%89%00%C3%96%C3%BFU%C2%9Fo%C3%98%C2%BA%C3%A4%C2%BC%C2%AD%25vr%C3%83%22%C2%A4%C3%8Fx%13%C3%B1.V%12%C2%91%09JB%C2%BA%C3%BB%60%3A%C3%80%C3%94%C3%85%2F%C2%95%C3%83o%C2%B5%C2%AF%C3%8B%C3%98%C3%9A%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var effect_manager_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%86IDATx%01%C2%8DR%0B%0D%021%0C%C3%9D.%08%40%C3%82%24%20a%0E%18%0A%C2%98%04P%40P%C3%80%24%20%01%07%03%05%04%05w%0E%C3%80Ai%C2%93w%C2%97f%C2%8C%C2%BB%C2%BD%C3%A4e%C3%9D%C3%BAogM%01%22%C2%8A%7C8%C3%B5%C2%94%C2%AC%C2%B5%1F%C3%B3%0F%C3%ACp%C2%A1_83%076x3%7B%C3%A6%C3%9A%C2%B4%C2%80%0D%3D%22%C3%87%25%C3%9BN%C3%89%01%C3%A7%7D%C3%89I2%04fFi%04Y%C3%93%C3%83n%C2%8F%7BX%C3%81w%60zdy%C2%A8%C2%98%5B%C3%A6%C2%89%0DE%C2%BE2%C3%8F%3C%C3%89%C2%9B%C3%8E%268%C2%98z%C2%9FRE*KLPn%C2%8Aw7%C3%8E%C2%BD%C3%96W.%15p%C3%A8A%1A%7B%C3%93%06%C2%92%3EW%1C%C2%9E%C2%B23%C3%88%C2%93%C2%BECI%C2%B2%C3%8C%C2%97%C2%8A%131%C2%94%1D%C2%BE%C3%90Q%C2%865%C3%BD%0EY%26%C3%92%07%C3%93%08Y%C2%AEx%0F%60%13%C2%BE%C2%B2%C3%96%C3%A3T%C2%BD%01_%C2%8E%00%00%00%00IEND%C2%AEB%60%C2%82"; 

////////////////////

var panelGlobal = this;
var palette = (panelGlobal instanceof Panel) 
    ? panelGlobal 
    : new Window("palette", undefined, undefined, {maximizeButton: true, resizeable: true}); 

if (!(panelGlobal instanceof Panel)) palette.text = "YO Group Matcher " + scriptVersion;
palette.preferredSize.width  = 395; 
palette.preferredSize.height = 490; 
palette.orientation          = "column";  
palette.alignChildren        = ["fill", "top"];  
palette.spacing              = 11; 
palette.margins              = 0; 

//----------------------------------------
//                HEAD_PANEL
//----------------------------------------

var head_panel = palette.add("group", undefined, {name: "head_panel"}); 
head_panel.orientation   = "row"; 
head_panel.alignChildren = ["left", "fill"]; 
head_panel.spacing       = 10; 
head_panel.margins = [10, 10, 10, 0];

// --- LOGO ---

var logo = head_panel.add("image", undefined, File.decode(logo_imgString), {name: "logo"}); 
logo.alignment = ["left", "fill"]; 
logo.helpTip   = "YO Group Matcher " + scriptVersion;

// --- SAVE PRESETS BUTTON ---

var save_my_presets_button = head_panel.add("iconbutton", undefined, File.decode(save_my_presets_button_imgString), {
    name: "save_my_presets_button", 
    style: "toolbutton"
}); 
save_my_presets_button.helpTip = "Save current Layer and Effect Groups to a .pgm file"; 
save_my_presets_button.text    = "Export"; 
save_my_presets_button.preferredSize.width  = 80; 
save_my_presets_button.preferredSize.height = 35; 

// --- LOAD PRESETS BUTTON ---

var load_my_presets_button = head_panel.add("iconbutton", undefined, File.decode(load_my_presets_button_imgString), {
    name: "load_my_presets_button", 
    style: "toolbutton"
}); 
load_my_presets_button.helpTip = "Load Layer and Effect Groups from a .pgm file"; 
load_my_presets_button.text    = "Import"; 
load_my_presets_button.preferredSize.width  = 80; 
load_my_presets_button.preferredSize.height = 35; 

// --- DIVIDER1 ---

var divider1 = head_panel.add("panel", undefined, undefined, {name: "divider1"}); 
divider1.alignment = "fill"; 
divider1.helpTip   = "Divider";

// --- ABOUT / CHECK UPDATE ---

var check_update_button = head_panel.add("iconbutton", undefined, File.decode(push_update_imgString), {
    name: "check_update_button", 
    style: "toolbutton"
});
check_update_button.helpTip = "Open About & Check for Updates window"; 
check_update_button.preferredSize.width  = 35; 
check_update_button.preferredSize.height = 35; 

// (1) "Технический" статус, невидимый
var silentUpdateStatus = head_panel.add("statictext", undefined, "");
silentUpdateStatus.visible = false; 

//
// ===== [C] compareVersions
//
function compareVersions(v1, v2) {
    var v1parts = v1.split(".");
    var v2parts = v2.split(".");
    var len = Math.max(v1parts.length, v2parts.length);

    for (var i = 0; i < len; i++) {
        var a = parseInt(v1parts[i] || "0", 10);
        var b = parseInt(v2parts[i] || "0", 10);
        if (a > b) return 1;
        if (a < b) return -1;
    }
    return 0;
}

function checkForUpdatesQuietlyForHeadPanel(headPanelButton) {
    var githubApiUrl = "https://api.github.com/repos/yo-romlogunov/YO-Group-Matcher/releases/latest";

    try {
        var curlCmd = 'curl -s -H "User-Agent: YO-Group-Matcher" "' + githubApiUrl + '"';
        var response = system.callSystem(curlCmd);
        if (response) {
            var tagNameMatch = response.match(/"tag_name":\s*"v?([0-9.]+)"/);
            if (tagNameMatch) {
                var latestVersion = tagNameMatch[1];
                if (compareVersions(latestVersion, scriptVersion) > 0) {
                    // Новая версия
                    setButtonIcon(headPanelButton, push_update_new_update_imgString, "head_update_new");
                } else {
                    // Актуальная
                    setButtonIcon(headPanelButton, push_update_imgString, "head_update_normal");
                }
            }
        }
    } catch (e) {
        // alert("Ошибка при тихой проверке: " + e.toString());
    }
}

function checkForUpdates(Status_update, check_updates) {
    var githubApiUrl = "https://api.github.com/repos/yo-romlogunov/YO-Group-Matcher/releases/latest";

    try {
        var curlCmd = 'curl -s -H "User-Agent: YO-Group-Matcher" "' + githubApiUrl + '"';
        var response = system.callSystem(curlCmd);

        if (response) {
            var tagNameMatch = response.match(/"tag_name":\s*"v?([0-9.]+)"/);
            var htmlUrlMatch = response.match(/"html_url":\s*"([^"]+)"/);

            if (tagNameMatch && htmlUrlMatch) {
                var latestVersion = tagNameMatch[1];
                var downloadUrl   = htmlUrlMatch[1];

                if (compareVersions(latestVersion, scriptVersion) > 0) {
                    // Новая версия
                    Status_update.text = "New Update: v" + latestVersion;
                    check_updates.text = "Download Now (Open Page)";
                    setButtonIcon(check_updates, update_ready_imgString, "update_ready");

                    check_updates.onClick = function() {
                        openURL(downloadUrl);
                    };

                } else {
                    // Версия актуальна
                    Status_update.text = "You are using the latest version";
                    check_updates.text = "Check For Updates";
                    setButtonIcon(check_updates, updates_check_button_imgString, "updates_check");

                    check_updates.onClick = function() {
                        checkForUpdates(Status_update, check_updates);
                    };
                }
            } else {
                Status_update.text = "Не удалось обработать ответ об обновлении.";
            }
        } else {
            Status_update.text = "Не удалось получить ответ от GitHub API.";
        }
    } catch (e) {
        Status_update.text = "Ошибка при проверке обновлений: " + e.toString();
    }
}

function openURL(url) {
    try {
        if ($.os.indexOf("Mac") !== -1) {
            system.callSystem('open "' + url + '"'); 
        } else if ($.os.indexOf("Windows") !== -1) {
            system.callSystem('cmd.exe /c start "" "' + url + '"');
        } else {
            alert("Unsupported operating system.");
        }
    } catch (e) {
        alert("Error opening URL: " + e.message);
    }
}


// Создаем панель с вкладками
var tpanel1 = palette.add("tabbedpanel", undefined, undefined, {name: "tpanel1"}); 
tpanel1.alignChildren       = "fill"; 
tpanel1.preferredSize.width = 100; 
tpanel1.margins             = 0; 
tpanel1.helpTip             = "Switch between Layers Group, Effects Group, and Tools tabs";

// --- TAB_LAYERS ---
var tab_layers = tpanel1.add("tab", undefined, undefined, {name: "tab_layers"}); 
tab_layers.text          = "Layers Group"; 
tab_layers.orientation   = "column"; 
tab_layers.alignChildren = ["left", "top"]; 
tab_layers.spacing       = 10; 
tab_layers.margins       = 10; 
tab_layers.helpTip       = "Here you can manage your Layer Groups";

// --- TAB_EFFECTS ---
var tab_effects = tpanel1.add("tab", undefined, undefined, {name: "tab_effects"}); 
tab_effects.text          = "Effects Group"; 
tab_effects.orientation   = "column"; 
tab_effects.alignChildren = ["fill", "top"]; 
tab_effects.spacing       = 10; 
tab_effects.margins       = 10; 
tab_effects.helpTip       = "Manage your Effects Groups";
// Если вкладка Tools уже не создана, создаём её:
var tab_tools = tpanel1.add("tab", undefined, undefined, {name: "tab_tools"}); 
tab_tools.text = "Tools";
tab_tools.orientation = "column"; 
tab_tools.alignChildren = ["fill", "top"]; 
tab_tools.spacing = 10; 
tab_tools.margins = 10; 
tab_tools.helpTip = "Tools Tab";

// ========= Панель Parameters =========
var panel_parameters = tab_tools.add("panel", undefined, "Parameters");
panel_parameters.orientation = "row";
panel_parameters.alignChildren = ["left", "center"];
panel_parameters.spacing = 15;
panel_parameters.margins = [15, 15, 15, 15];

var clear_all_panels_button = panel_parameters.add("iconbutton", undefined, File.decode(clear_all_panels_button_imgString), {
    name: "clear_all_panels_button", 
    style: "toolbutton"
});
clear_all_panels_button.helpTip = "Clear All Panels";
clear_all_panels_button.text    = "CLR ALL PANELS";
clear_all_panels_button.preferredSize.width  = 150; 
clear_all_panels_button.preferredSize.height = 35;    

clear_all_panels_button.onClick = function() {
    var confirmClear = confirm("Are you sure you want to clear all groups and reset layer and effect prefixes? This action cannot be undone.");
    if (!confirmClear) return;
    try {
        app.beginUndoGroup("Clear All Groups and Reset Names");
        
        if (!tab_layers || !tab_effects) {
            alert("Error: 'tab_layers' or 'tab_effects' is not defined.");
            app.endUndoGroup();
            return;
        }
        
        // Очистка групп слоёв
        for (var i = layerGroups.length - 1; i >= 0; i--) {
            var lg = layerGroups[i];
            var comps = getAllCompositions();
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = comp.numLayers; l >= 1; l--) {
                    var layer = comp.layer(l);
                    if (layer.name.indexOf("[" + lg.prefix + "]") === 0) {
                        var originalName = layer.name.replace("[" + lg.prefix + "] ", "");
                        layer.name = originalName;
                    }
                }
            }
            if (lg.panel && lg.panel.parent === tab_layers) {
                try { 
                    tab_layers.remove(lg.panel); 
                } catch (removeError) { 
                    alert("Failed to remove layer group panel for '" + lg.name + "': " + removeError.toString()); 
                }
            } else {
                alert("Layer group panel for '" + lg.name + "' has already been removed or does not exist.");
            }
            layerGroups.splice(i, 1);
        }
        
        // Очистка групп эффектов
        for (var i = effectGroups.length - 1; i >= 0; i--) {
            var eg = effectGroups[i];
            var comps = getAllCompositions();
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    if (layer.property("Effects")) {
                        for (var e = layer.property("Effects").numProperties; e >= 1; e--) {
                            var effect = layer.property("Effects").property(e);
                            if (effect.name.indexOf("[" + eg.prefix + "]") === 0) {
                                var originalName = effect.name.replace("[" + eg.prefix + "] ", "");
                                effect.name = originalName;
                            }
                        }
                    }
                }
            }
            if (eg.panel && eg.panel.parent === tab_effects) {
                try { 
                    tab_effects.remove(eg.panel); 
                } catch (removeError) { 
                    alert("Failed to remove effect group panel for '" + eg.name + "': " + removeError.toString()); 
                }
            } else {
                alert("Effect group panel for '" + eg.name + "' has already been removed or does not exist.");
            }
            effectGroups.splice(i, 1);
        }
        
        palette.layout.layout(true);
        palette.layout.resize();
        
        alert("All groups have been cleared and layer and effect prefixes have been reset.");
        app.endUndoGroup();
    } catch (error) {
        alert("An error occurred while clearing groups: " + error.toString());
        app.endUndoGroup();
    }
};

// ========= Панель Layers and Effects =========
var panel_layers_effects = tab_tools.add("panel", undefined, "Layers");
panel_layers_effects.orientation = "row";
panel_layers_effects.alignChildren = ["left", "center"];
panel_layers_effects.spacing = 15;
panel_layers_effects.margins = [15, 15, 15, 15];

// --- Кнопка Add Null Objects ---
// Добавляет нулевой объект в активной композиции на позицию,
// равную средней позиции выбранных слоёв, и назначает его родителем для этих слоёв.
var add_null_objects_button = panel_layers_effects.add("iconbutton", undefined, File.decode(add_null_imgString), {name: "add_null_objects_button", style: "toolbutton"});
add_null_objects_button.helpTip = "Add Null Object for selected layers";
add_null_objects_button.text = "ADD NULL OBJ";
add_null_objects_button.preferredSize.width = 135;
add_null_objects_button.preferredSize.height = 35;
add_null_objects_button.onClick = function() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var selectedLayers = [];
    for (var i = 1; i <= comp.numLayers; i++){
        var layer = comp.layer(i);
        if (layer.selected) { selectedLayers.push(layer); }
    }
    if (selectedLayers.length === 0) {
        alert("Please select layers in the active composition.");
        return;
    }
    
    // Вычисляем среднюю позицию выбранных слоёв (учитывая X, Y и Z)
    var sumX = 0, sumY = 0, sumZ = 0;
    for (var i = 0; i < selectedLayers.length; i++){
        var pos = selectedLayers[i].property("Position").value;
        sumX += pos[0];
        sumY += pos[1];
        // Если слой 2D, Z считается равной 0
        var zVal = (pos.length > 2) ? pos[2] : 0;
        sumZ += zVal;
    }
    var avgPos = [
        sumX / selectedLayers.length,
        sumY / selectedLayers.length,
        sumZ / selectedLayers.length
    ];
    
    // Проверяем, есть ли среди выбранных слоёв 3D
    var is3D = false;
    for (var i = 0; i < selectedLayers.length; i++){
        if (selectedLayers[i].threeDLayer) {
            is3D = true;
            break;
        }
    }
    
    app.beginUndoGroup("Add Null Object for Selected Layers");
    var nullLayer = comp.layers.addNull();
    nullLayer.name = "Controller Null";
    
    if (is3D) {
        nullLayer.threeDLayer = true;
        nullLayer.property("Position").setValue(avgPos);
    } else {
        // Если слои 2D, устанавливаем только X и Y
        nullLayer.property("Position").setValue([avgPos[0], avgPos[1]]);
    }
    
    // Назначаем нулевой объект родителем для всех выбранных слоёв
    for (var i = 0; i < selectedLayers.length; i++){
        selectedLayers[i].parent = nullLayer;
    }
    app.endUndoGroup();
};

// --- Кнопка Add Track Matte Layer ---
// Добавляет новый solid-слой, который становится трек-маттом для активного слоя.
// Новый слой перемещается непосредственно над активным слоем, а для активного слоя
// устанавливается тип трек-матта (ALPHA MATTE).
var add_track_matte_button = panel_layers_effects.add("iconbutton", undefined, File.decode(track_matte__imgString), {name: "add_track_matte_button", style: "toolbutton"});
add_track_matte_button.helpTip = "Add Track Matte Layer to the active layer";
add_track_matte_button.text = "ADD TRCK MTT";
add_track_matte_button.preferredSize.width = 140;
add_track_matte_button.preferredSize.height = 35;

// Вспомогательная функция для получения массива индексов слоёв
function getLayerIndices(layersArray) {
    var indices = [];
    for (var i = 0; i < layersArray.length; i++){
        indices.push(layersArray[i].index);
    }
    return indices;
}

add_track_matte_button.onClick = function() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    
    if (comp.selectedLayers.length === 0) {
        alert("Please select one or more layers.");
        return;
    }
    
    app.beginUndoGroup("Add Track Matte Layer");
    var solidColor = [1, 1, 1]; // белый цвет
    
    // Если выбрано несколько слоёв – объединяем их в пре-композицию
    if (comp.selectedLayers.length > 1) {
        // Используем имя первого выбранного слоя для именования
        var baseName = comp.selectedLayers[0].name;
        // Получаем индексы выбранных слоёв
        var indices = getLayerIndices(comp.selectedLayers);
        // Предварительное объединение выбранных слоёв в одну пре-композицию
        var precomp = comp.layers.precompose(indices, "Precomp (" + baseName + ")", true);
        
        // Создаём новый solid-слой для трек-матта с нужным именем
        var matteLayerName = "TRMT (" + baseName + ")";
        var matteLayer = comp.layers.addSolid(solidColor, matteLayerName, comp.width, comp.height, comp.pixelAspect, comp.duration);
        // Перемещаем matte-слой непосредственно над пре-композицией
        matteLayer.moveBefore(precomp);
        // Устанавливаем для пре-композиции тип трек-матта (ALPHA)
        precomp.trackMatteType = TrackMatteType.ALPHA;
    } else {
        // Если выбран только один слой
        var activeLayer = comp.selectedLayers[0];
        var matteLayerName = "TRMT (" + activeLayer.name + ")";
        var matteLayer = comp.layers.addSolid(solidColor, matteLayerName, comp.width, comp.height, comp.pixelAspect, comp.duration);
        // Перемещаем matte-слой непосредственно над выбранным слоем
        matteLayer.moveBefore(activeLayer);
        activeLayer.trackMatteType = TrackMatteType.ALPHA;
    }
    
    app.endUndoGroup();
};

// ========= Панель Library =========
var panel_library = tab_tools.add("panel", undefined, "Library and Effects");
panel_library.orientation = "row";
panel_library.alignChildren = ["left", "center"];
panel_library.spacing = 15;
panel_library.margins = [15, 15, 15, 15];

// --- Кнопка Remove Disabled Effects ---
// Перенесена в панель Library.
var remove_disabled_effects_button = panel_library.add("iconbutton", undefined, undefined, {name: "remove_disabled_effects_button", style: "toolbutton"});
remove_disabled_effects_button.helpTip = "Remove effects that are disabled on all layers in all compositions";
remove_disabled_effects_button.text = "RMV UNSD EFFECTS";
remove_disabled_effects_button.preferredSize.width = 145;
remove_disabled_effects_button.preferredSize.height = 35;

remove_disabled_effects_button.onClick = function(){
    app.beginUndoGroup("RMV UNSD EFFECTS");
    var comps = getAllCompositions();
    for (var i = 0; i < comps.length; i++){
        var comp = comps[i];
        for (var j = 1; j <= comp.numLayers; j++){
            var layer = comp.layer(j);
            var fx = layer.property("Effects");
            if (fx) {
                for (var k = fx.numProperties; k >= 1; k--){
                    var effect = fx.property(k);
                    if (!effect.enabled){
                        effect.remove();
                    }
                }
            }
        }
    }
    app.endUndoGroup();
    alert("Disabled effects removed.");
};

var remove_unused_button = panel_library.add("iconbutton", undefined, undefined, {name: "remove_unused_button", style: "toolbutton"});
remove_unused_button.helpTip = "Remove Unused Footage and Compositions";
remove_unused_button.text = "RMV FTG & CMPS";
remove_unused_button.preferredSize.width = 130;
remove_unused_button.preferredSize.height = 35;

remove_unused_button.onClick = function(){
    app.beginUndoGroup("Remove Unused Footage and Compositions");
    // Удаляем неиспользуемые материалы
    for (var i = app.project.numItems; i >= 1; i--){
        var item = app.project.item(i);
        if (item instanceof FootageItem && item.usedIn && item.usedIn.length === 0) {
            item.remove();
        }
    }
    // Удаляем неиспользуемые композиции: удаляем только те, которые пусты (numLayers === 0),
    // не являются активными и не используются (usedIn пустой)
    for (var i = app.project.numItems; i >= 1; i--){
        var item = app.project.item(i);
        if (item instanceof CompItem && item.usedIn && item.usedIn.length === 0 && item.numLayers === 0 && item !== app.project.activeItem) {
            item.remove();
        }
    }
    app.endUndoGroup();
    alert("Unused footage and compositions removed.");
};

// "Create + Unlink" group
var create_unlink_group = tab_layers.add("group", undefined, {name: "create_unlink_group"});
create_unlink_group.orientation   = "row";
create_unlink_group.alignChildren = ["left", "center"];
create_unlink_group.spacing       = 10;
create_unlink_group.margins       = [0, 0, 0, 0]; 

// Button: Create a New Layer Group
var create_group_layers_button = create_unlink_group.add(
    "iconbutton",
    undefined,
    File.decode(create_group_layers_button_imgString),
    { name: "create_group_layers_button", style: "toolbutton" }
);
create_group_layers_button.helpTip  = "Create a new Layer Group";
create_group_layers_button.text     = "CRT"; 
create_group_layers_button.preferredSize.width  = 75; 
create_group_layers_button.preferredSize.height = 35; 
create_group_layers_button.alignment = ["left", "center"];

// Button: Unlink Layer
var unlink_layer_button = create_unlink_group.add(
    "iconbutton",
    undefined,
    File.decode(unlink_layer_button_imgString),
    { name: "unlink_layer_button", style: "toolbutton" }
);
unlink_layer_button.helpTip = "Remove group prefix [XXX] from selected layers";
unlink_layer_button.text = "";
unlink_layer_button.preferredSize.width = 35;
unlink_layer_button.preferredSize.height = 35;
unlink_layer_button.alignment = ["left", "center"];

// Добавляем разделитель
var separator = create_unlink_group.add("panel", undefined, undefined, {borderStyle: "sunken"});
separator.preferredSize = [2, 35]; // Ширина 2 пикселя, высота как у кнопок


function unlinkSelectedLayersFromGroup() {
    var layers = getSelectedLayersInActiveComp();
    if (!layers) return;
    app.beginUndoGroup("Unlink Layers from Groups");
    for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];
        var newName = layer.name.replace(/\[.*?\]\s*/g, "");
        layer.name = newName;
    }
    app.endUndoGroup();
}

unlink_layer_button.onClick = function() {
    unlinkSelectedLayersFromGroup();
};

// ----- Новые кнопки для режима Solo -----

// Новая кнопка для режима Solo Track Matte
var solo_trackmatte_button = create_unlink_group.add("iconbutton", undefined, File.decode(trackmatte_imgString), { name: "solo_trackmatte_button", style: "toolbutton" });
solo_trackmatte_button.helpTip = "Solo Track Matte: show only layers involved in track matte (main layer and matte)";
solo_trackmatte_button.text = "";
solo_trackmatte_button.preferredSize.width = 35;
solo_trackmatte_button.preferredSize.height = 35;

// Кнопка Solo Shapes
var solo_shapes_button = create_unlink_group.add("iconbutton", undefined, File.decode(shapes_imgString), { name: "solo_shapes_button", style: "toolbutton" });
solo_shapes_button.helpTip = "Solo Shapes: show only shape layers";
solo_shapes_button.text = "";
solo_shapes_button.preferredSize.width = 35;
solo_shapes_button.preferredSize.height = 35;

// Кнопка Solo Text
var solo_text_button = create_unlink_group.add("iconbutton", undefined, File.decode(text_imgString), { name: "solo_text_button", style: "toolbutton" });
solo_text_button.helpTip = "Solo Text: show only text layers";
solo_text_button.text = "";
solo_text_button.preferredSize.width = 35;
solo_text_button.preferredSize.height = 35;

// Кнопка Solo Null Objects
var solo_null_button = create_unlink_group.add("iconbutton", undefined, File.decode(null_objects_imgString), { name: "solo_null_button", style: "toolbutton" });
solo_null_button.helpTip = "Solo Null Objects: show only null layers";
solo_null_button.text = "";
solo_null_button.preferredSize.width = 35;
solo_null_button.preferredSize.height = 35;

// Новая кнопка для режима Solo Adjustment Layers
var solo_adjust_button = create_unlink_group.add("iconbutton", undefined, File.decode(Adjust_imgString), { name: "solo_adjust_button", style: "toolbutton" });
solo_adjust_button.helpTip = "Solo Adjustment Layers: show only adjustment layers";
solo_adjust_button.text = "";
solo_adjust_button.preferredSize.width = 35;
solo_adjust_button.preferredSize.height = 35;

function updateSoloForComp(comp) {
    var compId = comp.id;
    var soloShapes = soloShapesStates[compId] || false;
    var soloText   = soloTextStates[compId] || false;
    var soloNull   = soloNullStates[compId] || false;
    
    // Если ни один режим не активен – снимаем shy со всех слоёв
    if (!soloShapes && !soloText && !soloNull) {
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        // Для каждого слоя: если он соответствует выбранному типу – оставляем shy = false,
        // иначе устанавливаем shy = true (то есть он будет скрыт в панели, если Hide активен)
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            var show = false;
            if (soloShapes && layer.matchName === "ADBE Vector Layer") {
                show = true;
            }
            if (soloText && layer.property("Source Text") !== null) {
                show = true;
            }
            if (soloNull && layer.nullLayer === true) {
                show = true;
            }
            layer.shy = !show;
        }
    }
    // Включаем Hide в композиции, если он ещё не активен
    comp.hideShyLayers = true;
}

solo_trackmatte_button.onClick = function() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloTrackMatteStates[compId] = !soloTrackMatteStates[compId];
    if (soloTrackMatteStates[compId]) {
        setButtonIcon(solo_trackmatte_button, trackmatte_select_imgString, "solo_trackmatte_select");
    } else {
        setButtonIcon(solo_trackmatte_button, trackmatte_imgString, "solo_trackmatte");
    }
    updateSoloTrackMatte(comp);
};

solo_shapes_button.onClick = function() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloShapesStates[compId] = !soloShapesStates[compId];
    if (soloShapesStates[compId]) {
        setButtonIcon(solo_shapes_button, shapes_select_imgString, "solo_shapes_select");
    } else {
        setButtonIcon(solo_shapes_button, shapes_imgString, "solo_shapes");
    }
    updateSoloForComp(comp);
};

solo_text_button.onClick = function() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloTextStates[compId] = !soloTextStates[compId];
    if (soloTextStates[compId]) {
        setButtonIcon(solo_text_button, text_select_imgString, "solo_text_select");
    } else {
        setButtonIcon(solo_text_button, text_imgString, "solo_text");
    }
    updateSoloForComp(comp);
};

solo_null_button.onClick = function() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloNullStates[compId] = !soloNullStates[compId];
    if (soloNullStates[compId]) {
        setButtonIcon(solo_null_button, null_object_select_imgString, "solo_null_select");
    } else {
        setButtonIcon(solo_null_button, null_objects_imgString, "solo_null");
    }
    updateSoloForComp(comp);
};

solo_adjust_button.onClick = function() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloAdjustStates[compId] = !soloAdjustStates[compId];
    if (soloAdjustStates[compId]) {
        setButtonIcon(solo_adjust_button, Adjust_select_imgString, "solo_adjust_select");
    } else {
        setButtonIcon(solo_adjust_button, Adjust_imgString, "solo_adjust");
    }
    updateSoloAdjust(comp);
};


function updateSoloAdjust(comp) {
    var compId = comp.id;
    var soloAdjust = soloAdjustStates[compId] || false;
    if (!soloAdjust) {
        // Если режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            // Если слой является Adjustment Layer (adjustmentLayer == true), показываем его, иначе скрываем
            layer.shy = !layer.adjustmentLayer;
        }
    }
    // Включаем режим Hide, чтобы скрытые слои не отображались в панели
    comp.hideShyLayers = true;
}


function updateSoloTrackMatte(comp) {
    var compId = comp.id;
    var soloTM = soloTrackMatteStates[compId] || false;
    if (!soloTM) {
        // Если режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
        return;
    }
    // Если активен режим solo для track matte, для каждого слоя проверяем:
    // 1. Является ли слой основным, т.е. его trackMatteType != NO_TRACK_MATTE
    // 2. Либо является ли слой matte-слоем: если для слоя с индексом i+1 задан trackMatteType (то есть, слой i используется как маска)
    for (var i = 1; i <= comp.numLayers; i++) {
        var layer = comp.layer(i);
        var isMain = false;
        var isMatte = false;
        try {
            if (layer.trackMatteType && layer.trackMatteType !== TrackMatteType.NO_TRACK_MATTE) {
                isMain = true;
            }
        } catch (e) {
            // Если слой не поддерживает trackMatteType – пропускаем
        }
        if (i < comp.numLayers) {
            var nextLayer = comp.layer(i + 1);
            try {
                if (nextLayer.trackMatteType && nextLayer.trackMatteType !== TrackMatteType.NO_TRACK_MATTE) {
                    isMatte = true;
                }
            } catch(e) {}
        }
        // Если слой участвует в track matte, делаем его видимым (shy = false), иначе скрываем (shy = true)
        layer.shy = !(isMain || isMatte);
    }
    // Включаем Hide режим в композиции, чтобы скрытые (shy) слои не отображались в панели
    comp.hideShyLayers = true;
}


function refreshSoloButtons() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) return;
    var compId = comp.id;
    if (soloShapesStates[compId]) {
        setButtonIcon(solo_shapes_button, shapes_select_imgString, "solo_shapes_select");
    } else {
        setButtonIcon(solo_shapes_button, shapes_imgString, "solo_shapes");
    }
    if (soloTextStates[compId]) {
        setButtonIcon(solo_text_button, text_select_imgString, "solo_text_select");
    } else {
        setButtonIcon(solo_text_button, text_imgString, "solo_text");
    }
    if (soloNullStates[compId]) {
        setButtonIcon(solo_null_button, null_object_select_imgString, "solo_null_select");
    } else {
        setButtonIcon(solo_null_button, null_objects_imgString, "solo_null");
    }
     // Добавляем обновление для solo_trackmatte_button:
     if (soloTrackMatteStates[compId]) {
        setButtonIcon(solo_trackmatte_button, trackmatte_select_imgString, "solo_trackmatte_select");
    } else {
        setButtonIcon(solo_trackmatte_button, trackmatte_imgString, "solo_trackmatte");
    }
    // Обновляем solo для Adjustment Layers
    if (soloAdjustStates[compId]) {
        setButtonIcon(solo_adjust_button, Adjust_select_imgString, "solo_adjust_select");
    } else {
        setButtonIcon(solo_adjust_button, Adjust_imgString, "solo_adjust");
    }
}



// Привязываем обновление при активации панели
palette.onActivate = function() {
    app.scheduleTask("refreshSoloButtons()", 10, false);
};
// --- "Панель" внутри Layers (удаляем её потом)
var layer_group_default = tab_layers.add("panel", undefined, undefined, {name: "layer_group_default"}); 


// (1) Create + Unlink (Effects)
var create_unlink_effects_group = tab_effects.add("group", undefined, {name: "create_unlink_effects_group"});
create_unlink_effects_group.orientation   = "row";
create_unlink_effects_group.alignChildren = ["left", "center"];
create_unlink_effects_group.spacing       = 10;
create_unlink_effects_group.margins       = [0, 0, 0, 0]; 

// (2) "Create a New Effects Group"
var create_group_effects_button = create_unlink_effects_group.add(
    "iconbutton",
    undefined,
    File.decode(create_group_layers_button_imgString),  
    {
        name: "create_group_effects_button",
        style: "toolbutton"
    }
);
create_group_effects_button.helpTip = "Create a new Effects Group";
create_group_effects_button.text    = "CRT";
create_group_effects_button.preferredSize.width  = 75;
create_group_effects_button.preferredSize.height = 35;
create_group_effects_button.alignment = ["left", "center"];

// (3) "Unlink Effects"
var unlink_effects_button = create_unlink_effects_group.add(
    "iconbutton",
    undefined,
    File.decode(unlink_effects_button_imgString),
    {
        name: "unlink_effects_button",
        style: "toolbutton"
    }
);
unlink_effects_button.helpTip              = "Remove [GroupPrefix] from selected effects";
unlink_effects_button.text                 = "";
unlink_effects_button.preferredSize.width  = 35;
unlink_effects_button.preferredSize.height = 35;
unlink_effects_button.alignment            = ["left", "center"];

// [4] Функция "unlinkSelectedLayersFromGroup" (дублируется — для удобства)
function unlinkSelectedLayersFromGroup() {
    var layers = getSelectedLayersInActiveComp();
    if (!layers) return;

    app.beginUndoGroup("Unlink Layers from Groups");

    for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];
        
        // (1) Удаляем любой префикс в квадратных скобках + пробел
        var newName = layer.name.replace(/\[.*?\]\s*/g, "");
        layer.name = newName;
        
        // (2) Возвращаем родной цвет (label)
        layer.label = getDefaultLabelForLayer(layer);
    }

    app.endUndoGroup();
}

// (5) Обработчик кнопки Unlink (Effects)
function unlinkSelectedEffectsFromGroup() {
    var layers = getSelectedLayersInActiveComp();
    if (!layers) return;

    app.beginUndoGroup("Unlink Effects from Groups");

    for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];
        var selectedProps = layer.selectedProperties;
        if (!selectedProps || selectedProps.length === 0) continue;

        for (var j = 0; j < selectedProps.length; j++) {
            var prop = selectedProps[j];
            if (
                prop.matchName !== "ADBE Effect Parade" &&
                prop.parentProperty &&
                prop.parentProperty.matchName === "ADBE Effect Parade"
            ) {
                var newName = prop.name.replace(/\[.*?\]\s*/g, "");
                prop.name = newName;
            }
        }
    }
    app.endUndoGroup();
}

unlink_effects_button.onClick = function() {
    unlinkSelectedEffectsFromGroup();
};
// Добавляем разделитель
var separator = create_unlink_effects_group.add("panel", undefined, undefined, {borderStyle: "sunken"});
separator.preferredSize = [2, 35]; // Ширина 2 пикселя, высота как у кнопок

// ===== Новый блок: кнопка Effects Manager =====
var effects_manager_button = create_unlink_effects_group.add(
    "iconbutton",
    undefined,
    File.decode(effect_manager_imgString),
    {
        name: "effects_manager_button",
        style: "toolbutton"
    }
);
effects_manager_button.helpTip = "Open Effects Manager";
effects_manager_button.text = "Ae Project Effects Manager";
effects_manager_button.preferredSize.width = 215;
effects_manager_button.preferredSize.height = 35;
effects_manager_button.alignment = ["left", "center"];

effects_manager_button.onClick = function() {
    openEffectsManager();
};

function openEffectsManager() {
    var win = new Window("dialog", "Effects Manager");
    win.orientation = "column";
    win.alignChildren = ["fill", "top"];
    win.spacing = 10;
    win.margins = 15;
    
    // Панель со списком эффектов
    var effectsPanel = win.add("panel", undefined, "All Effects");
    effectsPanel.orientation = "column";
    effectsPanel.alignChildren = ["left", "top"];
    effectsPanel.spacing = 10;
    effectsPanel.margins = 10;
    
    var effectsList = effectsPanel.add("listbox", undefined, undefined);
    effectsList.preferredSize.width = 430;
    effectsList.preferredSize.height = 350;
    
    // Группа для кнопок (расположены в один ряд)
    var btnGroup = win.add("group");
    btnGroup.orientation = "row";
    btnGroup.alignChildren = ["fill", "center"];
    btnGroup.spacing = 10;
    
    // Кнопка Disable Select Effect
    var disableEffectBtn = btnGroup.add(
        "iconbutton", 
        undefined, 
        File.decode(disable_effect_button_imgString), 
        {name: "disableEffectBtn", style: "toolbutton"}
    );
    disableEffectBtn.text = "Disable";
    disableEffectBtn.helpTip = "Disable the currently selected effect";
    disableEffectBtn.preferredSize.width = 100;
    disableEffectBtn.preferredSize.height = 35;
    
    // Кнопка Delete с иконкой
    var deleteEffectBtn = btnGroup.add(
        "iconbutton", 
        undefined, 
        File.decode(delete_group_layers_button_imgString), 
        {name: "deleteEffectBtn", style: "toolbutton"}
    );
    deleteEffectBtn.text = "Delete";
    deleteEffectBtn.helpTip = "Delete the selected effect";
    deleteEffectBtn.preferredSize.width = 80;
    deleteEffectBtn.preferredSize.height = 35;
    
    // Кнопка Add to Group с иконкой
    var addToGroupBtn = btnGroup.add(
        "iconbutton", 
        undefined, 
        File.decode(add_layer_button_imgString), 
        {name: "addToGroupBtn", style: "toolbutton"}
    );
    addToGroupBtn.text = "Add to Group Effects";
    addToGroupBtn.helpTip = "Add the selected effect to a group";
    addToGroupBtn.preferredSize.width = 155;
    addToGroupBtn.preferredSize.height = 35;
    
    // Кнопка Close с иконкой
    var closeBtn = btnGroup.add(
        "iconbutton", 
        undefined, 
        File.decode(close_button_imgString), 
        {name: "closeBtn", style: "toolbutton"}
    );
    closeBtn.text = "Close";
    closeBtn.helpTip = "Close the Effects Manager dialog";
    closeBtn.preferredSize.width = 90;
    closeBtn.preferredSize.height = 35;
    
    // Функция заполнения списка эффектов (группировка по префиксу и базовому имени)
    function fillEffectsList() {
        effectsList.removeAll();
        var allEffects = getAllEffectsInProject();
        var groups = {};
        for (var i = 0; i < allEffects.length; i++) {
            var eff = allEffects[i];
            var prefix = "";
            var baseName = "";
            // Проверяем наличие префикса вида "[XXX] " в начале имени эффекта
            var m = eff.name.match(/^\[([^\]]+)\]\s*(.*)/);
            if (m) {
                prefix = m[1];
                baseName = m[2];
            } else {
                prefix = "None";
                baseName = eff.name;
            }
            // Ключ группы: сочетание префикса и базового имени
            var key = "[" + prefix + "] " + baseName;
            if (!groups[key]) groups[key] = [];
            groups[key].push(eff);
        }
        for (var key in groups) {
            if (groups.hasOwnProperty(key)) {
                var groupArray = groups[key];
                var allDisabled = true;
                for (var j = 0; j < groupArray.length; j++) {
                    if (groupArray[j].effectProp.enabled) {
                        allDisabled = false;
                        break;
                    }
                }
                var count = groupArray.length;
                var itemLabel = key + " (" + count + ")" + (allDisabled ? " | Off" : "");
                var item = effectsList.add("item", itemLabel);
                item.__effectDataGroup = groupArray;
                item.__groupName = key;
            }
        }
    }
    
    fillEffectsList();
    
    // Обработчик кнопки Disable/Enable
    disableEffectBtn.onClick = function() {
        var selItem = effectsList.selection;
        if (!selItem) {
            alert("Select an effect group from the list first!");
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            alert("No effect data found!");
            return;
        }
        var anyEnabled = false;
        for (var i = 0; i < effGroup.length; i++) {
            if (effGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }
        var count = effGroup.length;
        if (anyEnabled) {
            // Выключаем эффекты
            for (var j = 0; j < effGroup.length; j++) {
                effGroup[j].effectProp.enabled = false;
                effGroup[j].isEnabled = false;
            }
            selItem.text = selItem.__groupName + " (" + count + ") | Off";
        } else {
            // Включаем эффекты
            for (var j = 0; j < effGroup.length; j++) {
                effGroup[j].effectProp.enabled = true;
                effGroup[j].isEnabled = true;
            }
            selItem.text = selItem.__groupName + " (" + count + ")";
        }
    };
    
    // Обработчик кнопки Delete (удаляет выбранный эффект(ы) из слоя)
    deleteEffectBtn.onClick = function() {
        var selItem = effectsList.selection;
        if (!selItem) {
            alert("Select an effect group from the list first!");
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            alert("No effect data found!");
            return;
        }
        app.beginUndoGroup("Delete Selected Effect(s)");
        for (var i = 0; i < effGroup.length; i++) {
            // Удаляем эффект из свойства
            effGroup[i].effectProp.remove();
        }
        app.endUndoGroup();
        fillEffectsList();
    };
    
    // Обработчик кнопки Add to Group
    addToGroupBtn.onClick = function() {
        var selItem = effectsList.selection;
        if (!selItem) {
            alert("Select an effect group from the list first!");
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            alert("No effect data found!");
            return;
        }
        // Открываем диалог с выпадающим списком групп эффектов
        var dlg = new Window("dialog", "Add to Group");
        dlg.orientation = "column";
        dlg.alignChildren = ["fill", "top"];
        dlg.spacing = 10;
        dlg.margins = 15;
        dlg.add("statictext", undefined, "Select Effect Group:");
        var groupDropdown = dlg.add("dropdownlist", undefined, []);
        if (typeof effectGroups !== "undefined" && effectGroups.length > 0) {
            for (var i = 0; i < effectGroups.length; i++) {
                groupDropdown.add("item", effectGroups[i].name + " [" + effectGroups[i].prefix + "]");
            }
            groupDropdown.selection = 0;
        } else {
            groupDropdown.add("item", "No groups available");
            groupDropdown.selection = 0;
        }
        var btnGroup = dlg.add("group");
        btnGroup.alignment = "center";
        var okBtn = btnGroup.add("button", undefined, "OK");
        var cancelBtn = btnGroup.add("button", undefined, "Cancel");
        okBtn.onClick = function() {
            if (typeof effectGroups !== "undefined" && effectGroups.length > 0) {
                var selIndex = groupDropdown.selection.index;
                var targetGroup = effectGroups[selIndex];
                for (var j = 0; j < effGroup.length; j++) {
                    var effectProp = effGroup[j].effectProp;
                    var baseName = effectProp.name.replace(/^\[[^\]]+\]\s*/, "");
                    effectProp.name = "[" + targetGroup.prefix + "] " + baseName;
                }
                dlg.close();
                fillEffectsList();
            } else {
                alert("No effect groups available to add.");
            }
        };
        cancelBtn.onClick = function() { dlg.close(); };
        dlg.center();
        dlg.show();
    };
    
    // Обновляем подсказку кнопки при изменении выбора в списке
    effectsList.onChange = function() {
        var selItem = effectsList.selection;
        if (!selItem) {
            disableEffectBtn.helpTip = "Disable/Enable";
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            disableEffectBtn.helpTip = "Disable/Enable";
            return;
        }
        var anyEnabled = false;
        for (var i = 0; i < effGroup.length; i++) {
            if (effGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }
        disableEffectBtn.helpTip = anyEnabled ? "Disable Select Effect" : "Enable Select Effect";
    };
    
    closeBtn.onClick = function() {
        win.close();
    };
    
    win.center();
    win.show();
}

// Вспомогательная функция для получения всех эффектов в проекте
function getAllEffectsInProject() {
    var allEffects = [];
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var effectProp = fx.property(e);
                // Не удаляем префикс – оставляем его для отображения группы
                allEffects.push({
                    name: effectProp.name,
                    effectProp: effectProp,
                    comp: comp,
                    layerIndex: l,
                    isEnabled: effectProp.enabled
                });
            }
        }
    }
    return allEffects;
}

// "Панель" внутри Effects (удаляем потом)
var effect_group_default = tab_effects.add("panel", undefined, undefined, {name: "effect_group_default"}); 
var view_effects_checkbox       = effect_group_default.add("checkbox", undefined, undefined, {name: "view_effects_checkbox"}); 
view_effects_checkbox.helpTip   = "Example: checkbox for showing/hiding effects";
var add_effect_button           = effect_group_default.add("iconbutton", undefined, File.decode(add_layer_button_imgString), {name: "add_effect_button", style: "toolbutton"}); 
add_effect_button.helpTip       = "Add effect";
var edit_group_effects_button   = effect_group_default.add("iconbutton", undefined, File.decode(edit_group_layers_button_imgString), {name: "edit_group_effects_button", style: "toolbutton"}); 
edit_group_effects_button.helpTip = "Edit group effects";
var delete_group_effects_button = effect_group_default.add("iconbutton", undefined, File.decode(delete_group_layers_button_imgString), {name: "delete_group_effects_button", style: "toolbutton"}); 
delete_group_effects_button.helpTip = "Delete group effects";

// Какую вкладку показывать при старте
tpanel1.selection = tab_layers; 

// Финальные настройки панели
palette.layout.layout(true);
palette.layout.resize();
palette.onResizing = palette.onResize = function () { this.layout.resize(); };

// 3-ий пункт: обновление при смене активной композиции
palette.onActivate = function() {
    refreshSoloButtons();
};

// Запускаем автообновление каждые 2000 мс (2 секунды)
$.global.refreshTaskId = app.scheduleTask("refreshSoloButtons()", 1000, true);


if (palette instanceof Window) {
    palette.onClose = function() {
        if ($.global.refreshTaskId) {
            app.cancelTask($.global.refreshTaskId);
        }
    };
}

if (palette instanceof Window) palette.show();



// При запуске — тихая проверка обновлений
checkForUpdatesQuietlyForHeadPanel(check_update_button);


// ======== Обработчик "About" / "Check for Updates" ========

check_update_button.onClick = function() {
    var dialog = new Window("dialog", "About | Group Matcher"); 
    dialog.orientation = "column"; 
    dialog.alignChildren = ["center","top"]; 
    dialog.spacing = 10; 
    dialog.margins = 16; 

    // Логотип
    var logo_image = dialog.add("image", undefined, File.decode(logo_about_imgString), {name: "logo"}); 
    logo_image.alignment = ["center","center"]; 

    // Текст текущей сборки
    var build_version = dialog.add("statictext", undefined, undefined, {name: "build_version"}); 
    build_version.text = "Build " + scriptVersion;
    build_version.helpTip = "Version information.";

    // Кнопки Telegram / Manual
    var group1 = dialog.add("group", undefined, {name: "group1"}); 
    group1.orientation = "row"; 
    group1.alignChildren = ["left","center"]; 
    group1.spacing = 10; 
    group1.margins = 0; 

    var telegram_button = group1.add("iconbutton", undefined, undefined, {name: "telegram_button"}); 
    telegram_button.text = "Telegram"; 
    telegram_button.helpTip = "Open Telegram channel.";
    telegram_button.onClick = function() {
        openURL("https://t.me/romlogunov_hub");
    };

    var manual_button = group1.add("iconbutton", undefined, undefined, {name: "manual_button"}); 
    manual_button.text = "Manual"; 
    manual_button.helpTip = "Open user manual.";
    manual_button.onClick = function() {
        openURL("https://romlogunov.notion.site/Manual-YO-Group-Matcher-122dc723a706801ca52edde6ac3920d6?pvs=74");
    };

    // Разделитель
    var divider_about = dialog.add("panel", undefined, undefined, {name: "divider_about"}); 
    divider_about.alignment = "fill"; 

    // Кнопка "Check For Updates"
    var check_updates = dialog.add("iconbutton", undefined, File.decode(updates_check_button_imgString), {name: "check_updates", style: "toolbutton"}); 
    check_updates.text = "Check For Updates"; 
    check_updates.preferredSize.width = 203; 
    check_updates.preferredSize.height = 39; 
    check_updates.helpTip = "Check for the latest updates.";

    // Статус обновлений
    var Status_update = dialog.add("statictext", undefined, undefined, {name: "Status_update"}); 
    Status_update.text = "Status Update..."; 
    Status_update.helpTip = "Current update status.";
    Status_update.alignment = ["fill","top"];

    // Привязываем проверку обновлений
    check_updates.onClick = function() {
        checkForUpdates(Status_update, check_updates);
    };

    // Кнопка Close
    var close_button = dialog.add("button", undefined, "Close", {name: "close_button"});
    close_button.helpTip = "Close the dialog.";
    close_button.onClick = function() {
        dialog.close();
    };

    // Обработчик закрытия окна через крестик
    dialog.onClose = function() {
        dialog.close();
    };

    dialog.show();
};


//
// ============= ICONS / FUNCTIONS FOR BUTTONS =============
//

var labelColorIcons = {
    0: none_color_label_button_imgString,
    1: red_color_label_button_imgString,
    2: yellow_color_label_button_imgString,
    3: aqua_color_label_button_imgString,
    4: pink_color_label_button_imgString,
    5: lavender_color_label_button_imgString,
    6: peach_color_label_button_imgString,
    7: sea_color_label_button_imgString,
    8: blue_color_label_button_imgString,
    9: green_color_label_button_imgString,
    10: purple_color_label_button_imgString,
    11: orange_color_label_button_imgString,
    12: brown_color_label_button_imgString,
    13: fuchsia_color_label_button_imgString,
    14: cyan_color_label_button_imgString,
    15: sandstone_color_label_button_imgString,
    16: dark_green_color_label_button_imgString
};

function setButtonIcon(button, imgString, prefix) {
    try {
        var decodedImgString = decodeURIComponent(imgString);
        var timestamp = new Date().getTime();
        var tempFile = new File(Folder.temp.fsName + "/temp_" + prefix + "_" + timestamp + ".png");
        
        if (!tempFile.open("w+b")) {
            throw new Error("Не удалось открыть файл для записи: " + tempFile.fsName);
        }
        tempFile.encoding = "BINARY";
        tempFile.write(decodedImgString);
        tempFile.close();
        
        button.image = tempFile;
        button.notify("onDraw");
    } catch (e) {
        alert("Ошибка при установке иконки: " + e.message);
    }
}

function setColorLabelButtonIcon(button, labelColorIndex) {
    var imgString = labelColorIcons[labelColorIndex] || default_color_label_button_imgString;
    setButtonIcon(button, imgString, "label_icon_" + labelColorIndex);
}

function setLabelButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "label_icon");
}

function setViewButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "view_icon");
}
function setGuideButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "guide_icon");
}
function setLockButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "lock_icon");
}
function setHideButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "hide_icon");
}
function setSoloButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "solo_icon");
}
function setViewButtonIconEffects(button, imgString) {
    setButtonIcon(button, imgString, "view_icon_effects");
}
function setSoloButtonIconEffects(button, imgString) {
    setButtonIcon(button, imgString, "solo_icon_effects");
}
function setCollapseTransformationsButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "collapse_transformations_icon");
}


function trim(str) {
    return str.replace(/^\s+|\s+$/g, '');
}

var layerGroups  = [];
var effectGroups = [];

// Сразу убираем временные дефолтные панели
tab_layers.remove(layer_group_default);
tab_effects.remove(effect_group_default);

//
// ФУНКЦИЯ: получить все композиции проекта
//
function getAllCompositions() {
    var comps = [];
    for (var i = 1; i <= app.project.numItems; i++) {
        if (app.project.item(i) instanceof CompItem) {
            comps.push(app.project.item(i));
        }
    }
    return comps;
}

//
// ФУНКЦИЯ: получить выбранные слои в активной композиции
//
function getSelectedLayersInActiveComp() {
    var activeComp = app.project.activeItem;
    if (!(activeComp instanceof CompItem)) {
        alert("Please ensure that the active item is a composition.");
        return null;
    }

    var selectedLayers = [];
    for (var l = 1; l <= activeComp.numLayers; l++) {
        var layer = activeComp.layer(l);
        if (layer.selected) {
            selectedLayers.push(layer);
        }
    }

    if (selectedLayers.length === 0) {
        alert("Please select layers in the active composition.");
        return null;
    }

    return selectedLayers;
}

function isEnglishLetter(ch) {
    return /^[A-Za-z]$/.test(ch);
}

function containsOnlyEnglishLetters(str) {
    return /^[A-Za-z0-9_\s]+$/.test(str);
}

//
// generateUniquePrefix
//
function generateUniquePrefix(groupName) {
    var vowels = "aeiouyAEIOUY";
    var prefix = "";
    var trailingDigits = groupName.match(/\d+$/);
    trailingDigits = trailingDigits ? trailingDigits[0] : "";
    var nameWithoutDigits = groupName.replace(/\d+$/, '');
    var nameParts = nameWithoutDigits.split('_');

    for (var p = 0; p < nameParts.length; p++) {
        var part = nameParts[p];
        for (var i = 0; i < part.length; i++) {
            var ch = part.charAt(i);
            if (vowels.indexOf(ch) === -1 && isEnglishLetter(ch)) {
                prefix += ch;
            }
        }
    }

    if (trailingDigits !== "") {
        prefix = prefix.substring(0, 3).toUpperCase() + trailingDigits;
    } else {
        prefix = prefix.substring(0, 4).toUpperCase();
    }

    var basePrefix = prefix;
    var suffix = 1;
    while (isPrefixUsed(prefix)) {
        prefix = basePrefix + suffix;
        suffix++;
    }
    return prefix;
}

function isPrefixUsed(prefix) {
    for (var i = 0; i < layerGroups.length; i++) {
        if (layerGroups[i].prefix === prefix) {
            return true;
        }
    }
    for (var j = 0; j < effectGroups.length; j++) {
        if (effectGroups[j].prefix === prefix) {
            return true;
        }
    }
    return false;
}

//
// ============= getDefaultLabelForLayer =============
//
function getDefaultLabelForLayer(layer) {
    if (layer.matchName === "ADBE Vector Layer") {
        return 11; // Teal
    }
    var isTextLayer = layer.property && layer.property("Source Text") !== null;
    if (isTextLayer) {
        return 1; // Text -> Red
    }
    if (
        layer instanceof AVLayer &&
        layer.source && layer.source.mainSource &&
        layer.source.mainSource.isSolid
    ) {
        return 1; // Solid -> Red
    }
    if (layer.nullLayer === true) {
        return 1; // Null -> Red
    }
    if (layer instanceof LightLayer) {
        return 6; // Light -> Peach
    }
    if (layer instanceof CameraLayer) {
        return 4; // Camera -> Pink
    }
    if (layer.adjustmentLayer === true) {
        return 5; // Adjustment -> Lavender
    }
    if (layer instanceof AVLayer && layer.source instanceof CompItem) {
        return 15; // Precomp -> Sandstone
    }
    return 9; // Default -> Green
}


function promptForAutoSave() {
    // Если нет ни одной группы (слоёв и эффектов)
    if ((layerGroups.length + effectGroups.length) === 0) {
        var response = confirm("This is the first group.\nDo you want to save the project settings now?");
        if (response) {
            // Вызов функции сохранения, которая откроет окно диалога сохранения
            saveData();
        }
    }
}

function autoSavePreset() {
    if (!autoSaveEnabled || presetFilePath === "") return;
    var file = new File(presetFilePath);
    if (file.open("w")) {
        try {
            var dataLines = [];
            dataLines.push("LayerGroups:");
            for (var i = 0; i < layerGroups.length; i++) {
                var lg = layerGroups[i];
                dataLines.push("GroupType: LayerGroup");
                dataLines.push("Name: " + lg.name);
                dataLines.push("Prefix: " + lg.prefix);
                dataLines.push("LabelColorIndex: " + lg.labelColorIndex);
                dataLines.push("DisableLabelColor: " + lg.disableLabelColor);
                dataLines.push("");
            }
            dataLines.push("EffectGroups:");
            for (var j = 0; j < effectGroups.length; j++) {
                var eg = effectGroups[j];
                dataLines.push("GroupType: EffectGroup");
                dataLines.push("Name: " + eg.name);
                dataLines.push("Prefix: " + eg.prefix);
                dataLines.push("");
            }
            var data = dataLines.join("\n");
            file.write(data);
            file.close();
            // Можно добавить console.log или $.writeln для отладки, но лучше тихо.
        } catch (e) {
            alert("Error auto-saving preset: " + e.toString());
        }
    }
}

//
// ===================== CREATE LAYER GROUP UI =====================
//
function createLayerGroupUI(groupName, prefix, labelColorIndex, disableLabelColor, guideCheckboxValue, lockCheckboxValue, disableVolumePresets) {

    // Если это первая группа (слоёв и эффектов)
    if ((layerGroups.length + effectGroups.length) === 0) {
        promptForAutoSave();
    }

    // Основная панель группы
    var groupPanel = tab_layers.add("panel", undefined, undefined, {name: "layer_group_" + prefix});
    groupPanel.text = groupName + " [" + prefix + "]";
    groupPanel.orientation = "row";
    groupPanel.alignChildren = ["center", "center"];
    groupPanel.spacing = 12;
    groupPanel.margins = [5, 15, 5, 10];
    groupPanel.alignment = ["fill", "top"];
    groupPanel.helpTip  = "Layer Group panel for " + groupName;

    // --- (A) Кнопка метки цвета
    var color_label_button = groupPanel.add("iconbutton", undefined, undefined, {name: "color_label_button_" + prefix, style: "toolbutton"});
    color_label_button.helpTip = "Color Label of this Group";
    color_label_button.preferredSize.width = 28;
    color_label_button.preferredSize.height = 28;
    setColorLabelButtonIcon(color_label_button, labelColorIndex);

    color_label_button.onClick = function() {
        showGroupCompositions(groupData);
    };

    // ---------------------
    // (B) КНОПКА VOLUME AUDIO (первая после цветовой)
    // ---------------------
    var volumeAudioButton = groupPanel.add("iconbutton", undefined, undefined, {
        name: "volume_audio_button_" + prefix,
        style: "toolbutton"
    });
    volumeAudioButton.helpTip = "Volume Audio (Off / Min / Normal / High)";
    volumeAudioButton.preferredSize.width  = 28;
    volumeAudioButton.preferredSize.height = 28;

    // Иконка по умолчанию (normal)
    setButtonIcon(volumeAudioButton, volume_normal_imgString, "volume_normal");

    // Проверяем, есть ли аудио в группе
    var hasAudio = groupHasAudio(prefix);
    if (!hasAudio) {
        volumeAudioButton.enabled = false;
        volumeAudioButton.helpTip = "No audio layers found in this group.";
    }

    // Четыре состояния (или два, если пресеты отключены)
var volumeStates = disableVolumePresets ? ["off", "on"] : ["off", "min", "normal", "high"];
var currentVolumeIndex = disableVolumePresets ? 0 : 2; // По умолчанию "off" или "normal"

volumeAudioButton.onClick = function() {
    if (!volumeAudioButton.enabled) return;

    // Используем значения из groupData
    groupData.currentVolumeIndex = (groupData.currentVolumeIndex + 1) % groupData.volumeStates.length;
    var nextState = groupData.volumeStates[groupData.currentVolumeIndex];

    // Меняем иконку
    switch (nextState) {
        case "off":
            setButtonIcon(volumeAudioButton, volume_off_imgString, "volume_off");
            break;
        case "on":
            setButtonIcon(volumeAudioButton, volume_on_imgString, "volume_on");
            break;
        case "min":
            setButtonIcon(volumeAudioButton, volume_min_imgString, "volume_min");
            break;
        case "normal":
            setButtonIcon(volumeAudioButton, volume_normal_imgString, "volume_normal");
            break;
        case "high":
            setButtonIcon(volumeAudioButton, volume_high_imgString, "volume_high");
            break;
    }

    // Применяем громкость
    app.beginUndoGroup("Volume " + nextState + " for group " + prefix);
    var comps = getAllCompositions();
    var foundAny = false;
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + prefix + "]") === 0) {
                if (layer instanceof AVLayer && layer.hasAudio) {
                    foundAny = true;
                    switch (nextState) {
                        case "off":
                            layer.audioEnabled = false;
                            break;
                        case "on":
                            layer.audioEnabled = true;
                            break;
                        case "min":
                            layer.audioEnabled = true;
                            var audioGroupMin = layer.property("ADBE Audio Group");
                            if (audioGroupMin) {
                                var audioLevelsMin = audioGroupMin.property("ADBE Audio Levels");
                                if (audioLevelsMin) {
                                    var curVal = audioLevelsMin.value;
                                    audioLevelsMin.setValue([curVal[0] - 11, curVal[1] - 11]);
                                }
                            }
                            break;
                        case "normal":
                            layer.audioEnabled = true;
                            var audioGroupNorm = layer.property("ADBE Audio Group");
                            if (audioGroupNorm) {
                                var audioLevelsNorm = audioGroupNorm.property("ADBE Audio Levels");
                                if (audioLevelsNorm) {
                                    audioLevelsNorm.setValue([0, 0]);
                                }
                            }
                            break;
                        case "high":
                            layer.audioEnabled = true;
                            var audioGroupHigh = layer.property("ADBE Audio Group");
                            if (audioGroupHigh) {
                                var audioLevelsHigh = audioGroupHigh.property("ADBE Audio Levels");
                                if (audioLevelsHigh) {
                                    audioLevelsHigh.setValue([3, 3]);
                                }
                            }
                            break;
                    }
                }
            }
        }
    }
    if (!foundAny) {
        alert("No audio layers found for group [" + prefix + "]");
    }
    app.endUndoGroup();
};  

    // --- (C) Кнопка View
    var view_button = groupPanel.add("iconbutton", undefined, undefined, {name: "view_button_" + prefix, style: "toolbutton"});
    view_button.helpTip = "Toggle visibility of layers in this group across all compositions";
    view_button.preferredSize.width = 28;
    view_button.preferredSize.height = 28;

    var viewState = true;
    setViewButtonIcon(view_button, view_button_on_imgString);

    view_button.onClick = function() {
        viewState = !viewState;
        if (viewState) {
            setViewButtonIcon(view_button, view_button_on_imgString);
        } else {
            setViewButtonIcon(view_button, view_button_off_imgString);
        }

        app.beginUndoGroup("Toggle View for " + groupName);
        var layersFound = false;
        var comps = getAllCompositions();

        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                if (layer.name.indexOf("[" + prefix + "]") === 0) {
                    layer.enabled = viewState;
                    layersFound = true;
                }
            }
        }
        if (!layersFound) {
            alert("Layers for group '" + groupName + "' not found in any composition.");
        }
        app.endUndoGroup();
    };

    // --- (D) Кнопка Solo
    var solo_button = groupPanel.add("iconbutton", undefined, undefined, {name: "solo_button_" + prefix, style: "toolbutton"});
    solo_button.helpTip = "Solo this group: show only layers in this group and hide all others";
    solo_button.preferredSize.width = 28;
    solo_button.preferredSize.height = 28;

    var soloState = false;
    setSoloButtonIcon(solo_button, solo_off_button_imgString);
    var preSoloLayerStates = [];

    solo_button.onClick = function() {
        soloState = !soloState;
        if (soloState) {
            setSoloButtonIcon(solo_button, solo_on_button_imgString);
        } else {
            setSoloButtonIcon(solo_button, solo_off_button_imgString);
        }

        app.beginUndoGroup("Solo Group " + groupName);
        var layersFound = false;
        var comps = getAllCompositions();

        if (soloState) {
            // Отключаем Solo у других групп
            for (var i = 0; i < layerGroups.length; i++) {
                if (layerGroups[i].soloButton !== solo_button && layerGroups[i].soloState) {
                    layerGroups[i].soloState = false;
                    setSoloButtonIcon(layerGroups[i].soloButton, solo_off_button_imgString);
                }
            }
            preSoloLayerStates = [];

            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    if (layer.name.indexOf("[" + prefix + "]") === 0) {
                        layer.enabled = true;
                        layer.shy     = false;
                        layersFound   = true;
                    } else {
                        preSoloLayerStates.push({
                            layer: layer,
                            enabled: layer.enabled,
                            shy: layer.shy
                        });
                        if (layer.enabled) {
                            layer.enabled = false;
                            layer.shy     = true;
                        } else {
                            layer.shy     = true;
                        }
                    }
                }
            }
        } else {
            // Восстанавливаем
            for (var k = 0; k < preSoloLayerStates.length; k++) {
                var storedState = preSoloLayerStates[k];
                var layer = storedState.layer;
                if (layer) {
                    layer.enabled = storedState.enabled;
                    layer.shy     = storedState.shy;
                }
            }
            preSoloLayerStates = [];

            // Включаем слои текущей группы
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    if (layer.name.indexOf("[" + prefix + "]") === 0) {
                        layer.enabled = true;
                        layer.shy     = false;
                    }
                }
            }
        }

        if (soloState && !layersFound) {
            alert("Layers for group '" + groupName + "' not found in any composition.");
        }
        app.endUndoGroup();
    };

    // --- (E) Кнопка Hide
    var hide_button = groupPanel.add("iconbutton", undefined, undefined, {name: "hide_button_" + prefix, style: "toolbutton"});
    hide_button.helpTip = "Toggle hide (Shy) for layers in this group without disabling them";
    hide_button.preferredSize.width = 28;
    hide_button.preferredSize.height = 28;

    var hideState = false;
    setHideButtonIcon(hide_button, hide_off_button_imgString);

    hide_button.onClick = function() {
        hideState = !hideState;
        setHideButtonIcon(hide_button, hideState ? hide_on_button_imgString : hide_off_button_imgString);

        app.beginUndoGroup("Toggle Hide for " + groupName);

        var layersFound = false;
        var comps = getAllCompositions();

        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            var foundInThisComp = false;

            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                if (layer.name.indexOf("[" + prefix + "]") === 0) {
                    layer.shy = hideState;
                    layersFound = true;
                    foundInThisComp = true;
                }
            }
            if (foundInThisComp) {
                comp.hideShyLayers = hideState;
            }
        }

        if (!layersFound) {
            alert("Layers for group '" + groupName + "' not found in any composition.");
        }

        app.endUndoGroup();
    };

    // --- Разделитель
    var divider1 = groupPanel.add("panel", undefined, undefined, {name: "divider1"});
    divider1.alignment = "fill";
    divider1.helpTip   = "Divider for layout";
    divider1.graphics.backgroundColor = divider1.graphics.newBrush(divider1.graphics.BrushType.SOLID_COLOR, [0.5, 0.5, 0.5, 1]);
    divider1.preferredSize.height = 1;

    // --- (F) Кнопка Add Layer
    var add_layer_button = groupPanel.add("iconbutton", undefined, File.decode(add_layer_button_imgString), {
        name: "add_layer_button_" + prefix,
        style: "toolbutton"
    });
    add_layer_button.helpTip = "Add selected layers to this group across all compositions";
    add_layer_button.text = "";
    add_layer_button.preferredSize.width  = 33;
    add_layer_button.preferredSize.height = 33;

    add_layer_button.onClick = function() {
        var layers = getSelectedLayersInActiveComp();
        if (!layers) return;

        app.beginUndoGroup("Add Layers to " + groupName);
        var layersFound = false;

        for (var i = 0; i < layers.length; i++) {
            var layer = layers[i];
            var newName = "[" + prefix + "] " + layer.name.replace(/^\[.*?\]\s*/, "");
            layer.name = newName;
            layersFound = true;

            // Цвет метки, если не отключен
            if (!disableLabelColor) {
                layer.label = groupData.labelColorIndex;
            }

            // Guide Layer
            if (guideCheckboxValue) {
                layer.guideLayer = true;
            }

            // Lock
            if (lockCheckboxValue) {
                layer.locked = true;
            }

            // Видимость
            layer.enabled = viewState;
        }

        if (!layersFound) {
            alert("Please select layers to add to " + groupName + ".");
        }

        app.endUndoGroup();

        // Повторно проверяем аудио
        var nowHasAudio = groupHasAudio(prefix);
        if (nowHasAudio) {
            volumeAudioButton.enabled = true;
            volumeAudioButton.helpTip = "Volume Audio (Off / Min / Normal / High)";
        } else {
            volumeAudioButton.enabled = false;
            volumeAudioButton.helpTip = "No audio layers found in this group.";
        }
    };

    // --- (G) Кнопка Edit
    var edit_group_layers_button = groupPanel.add("iconbutton", undefined, File.decode(edit_group_layers_button_imgString), {name: "edit_group_layers_button_" + prefix, style: "toolbutton"});
    edit_group_layers_button.helpTip = "Rename and settings this Group";
    edit_group_layers_button.preferredSize.width = 33;
    edit_group_layers_button.preferredSize.height = 33;
 
    // Edit Group
    edit_group_layers_button.onClick = function() {
    var dialog = new Window("dialog", "Settings Layer Group: " + groupName);
    dialog.orientation = "column";
    dialog.alignChildren = ["fill", "top"];
    dialog.spacing = 10;
    dialog.margins = 10;
    
    // Основной контейнер с двумя колонками
    var mainGroup = dialog.add("group");
    mainGroup.orientation = "row";
    mainGroup.alignChildren = ["fill", "top"];
    mainGroup.spacing = 10;
    
    // Левая колонка: Name & Prefix, Color Label, Audio Control
    var leftColumn = mainGroup.add("group");
    leftColumn.orientation = "column";
    leftColumn.alignChildren = ["fill", "top"];
    leftColumn.spacing = 10;
    
    // --- Панель: Name and Prefix ---
    var namePrefixPanel = leftColumn.add("panel", undefined, "Name and Prefix");
    namePrefixPanel.orientation = "column";
    namePrefixPanel.alignChildren = ["fill", "top"];
    namePrefixPanel.margins = [10, 15, 10, 10];
    
    var groupNameGroup = namePrefixPanel.add("group");
    groupNameGroup.add("statictext", undefined, "Group Name:");
    var groupNameInput = groupNameGroup.add("edittext", undefined, groupData.name);
    groupNameInput.characters = 15;
    
    var prefixGroup = namePrefixPanel.add("group");
    prefixGroup.add("statictext", undefined, "Prefix:");
    var prefixInput = prefixGroup.add("edittext", undefined, groupData.prefix);
    prefixInput.characters = 5;
    
    var autoPrefixGroup = namePrefixPanel.add("group");
    autoPrefixGroup.orientation = "row";
    autoPrefixGroup.alignChildren = ["left", "center"];
    autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
    var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
    autoPrefixCheckbox.value = false;
    prefixInput.enabled = !autoPrefixCheckbox.value;
    
    autoPrefixCheckbox.onClick = function() {
        prefixInput.enabled = !autoPrefixCheckbox.value;
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                alert("Auto-prefix generation is disabled for group names containing non-English characters or special symbols.");
            }
        }
    };
    
    groupNameInput.onChanging = function() {
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                prefixInput.text = "";
                alert("Auto-prefix generation is disabled for group names containing non-English characters or special symbols.");
            }
        }
    };
    
    // --- Панель: Color Label ---
    var colorLabelPanel = leftColumn.add("panel", undefined, "Color Label");
    colorLabelPanel.orientation = "column";
    colorLabelPanel.alignChildren = ["fill", "top"];
    colorLabelPanel.margins = [10, 15, 10, 10];
    
    var labelColorGroup = colorLabelPanel.add("group");
    labelColorGroup.add("statictext", undefined, "Label Color:");
    var labelColorDropdown = labelColorGroup.add("dropdownlist", undefined, [
        "None", "Red", "Yellow", "Aqua", "Pink", "Lavender", "Peach", "Sea Foam",
        "Blue", "Green", "Purple", "Orange", "Brown", "Fuchsia", "Cyan", "Sandstone"
    ]);
    labelColorDropdown.selection = groupData.labelColorIndex;
    labelColorDropdown.helpTip = "Select a label color for layers in this group";
    
    var disableLabelColorCheckbox = colorLabelPanel.add("checkbox", undefined, "Disable label color assignment");
    disableLabelColorCheckbox.value = groupData.disableLabelColor;
    labelColorDropdown.preferredSize.width = 130; // расширяем выпадающий список
    disableLabelColorCheckbox.helpTip = "Disable automatic label color assignment to layers in this group";
    labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
    disableLabelColorCheckbox.onClick = function() {
        labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
    };
    
    // --- Панель: Audio Control ---
    var audioControlPanel = leftColumn.add("panel", undefined, "Audio Control");
    audioControlPanel.orientation = "column";
    audioControlPanel.alignChildren = ["fill", "top"];
    audioControlPanel.margins = [10, 15, 10, 10];
    
    var audioControlGroup = audioControlPanel.add("group");
    audioControlGroup.orientation = "row";
    audioControlGroup.alignChildren = ["left", "center"];
    audioControlGroup.add("statictext", undefined, "Disable Volume Presets:");
    var disableVolumePresetsCheckboxEdit = audioControlGroup.add("checkbox", undefined, "");
    disableVolumePresetsCheckboxEdit.value = groupData.disableVolumePresets || false;
    
    // Правая колонка: Group Tools, Parameters
    var rightColumn = mainGroup.add("group");
    rightColumn.orientation = "column";
    rightColumn.alignChildren = ["fill", "top"];
    rightColumn.spacing = 10;
    rightColumn.preferredSize.width = 250; // ← Увеличиваем ширину правой панели
    
    // --- Панель: Group Tools ---
    var toolsgroupPanel = rightColumn.add("panel", undefined, "Group Tools");
    toolsgroupPanel.orientation = "column";
    toolsgroupPanel.alignChildren = ["fill", "top"];
    toolsgroupPanel.margins = [10, 15, 10, 10];
    
    // Pre-compose Tool
    var precomposeButton = toolsgroupPanel.add("iconbutton", undefined, undefined, {name: "precomposeButton", style: "toolbutton"});
    precomposeButton.text = "Pre-compose Tool (Beta)";
    precomposeButton.preferredSize.width  = 150; 
    precomposeButton.preferredSize.height = 30;
    precomposeButton.helpTip = "Pre-compose selected layers for this group (Beta)";
    
    // Rename Layers Tool
    var renamelayersButton = toolsgroupPanel.add("iconbutton", undefined, undefined, {name: "renamelayersButton", style: "toolbutton"});
    renamelayersButton.text = "Rename Layers (Beta)";
    renamelayersButton.preferredSize.width  = 150; 
    renamelayersButton.preferredSize.height = 30;
    renamelayersButton.helpTip = "Rename layers with this group";
    
    renamelayersButton.onClick = function() {
        var currentPrefix    = groupData.prefix;
        var currentGroupName = groupData.name;
        
        var renameDialog = new Window("dialog", "Rename Layers In Group");
        renameDialog.orientation = "column";
        renameDialog.alignChildren = ["fill", "top"];
        renameDialog.margins = 16;
        
        var fieldsGroup = renameDialog.add("group");
        fieldsGroup.orientation = "row";
        fieldsGroup.alignChildren = ["center", "center"];
        fieldsGroup.spacing = 10;
        
        fieldsGroup.add("statictext", undefined, "Prefix:");
        var prefixField = fieldsGroup.add("edittext", undefined, "[" + currentPrefix + "]");
        prefixField.preferredSize.width  = 50; 
        prefixField.enabled = false;
        
        fieldsGroup.add("statictext", undefined, "New Name:");
        var newNameField = fieldsGroup.add("edittext", undefined, "");
        newNameField.characters = 20;
        
        var useGroupNameCheckbox = renameDialog.add("checkbox", undefined, "Use Group Name for Rename");
        useGroupNameCheckbox.value = false;
        useGroupNameCheckbox.helpTip = "If enabled, the second field (New Name) will be replaced with group name.";
        useGroupNameCheckbox.onClick = function() {
            newNameField.text = useGroupNameCheckbox.value ? currentGroupName : "";
        };
        
        var renameButtonsGroup = renameDialog.add("group");
        renameButtonsGroup.alignment = "right";
        
        var okBtn = renameButtonsGroup.add("button", undefined, "OK");
        var cancelBtn = renameButtonsGroup.add("button", undefined, "Cancel");
        
        okBtn.onClick = function() {
            var newName = newNameField.text;
            if (!newName || newName.length === 0) {
                alert("Please enter a new name.");
                return;
            }
            app.beginUndoGroup("Rename Layers In Group");
            var comps = getAllCompositions();
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    var prefixSearch = "[" + currentPrefix + "]";
                    if (layer.name.indexOf(prefixSearch) === 0) {
                        layer.name = "[" + currentPrefix + "] " + newName;
                    }
                }
            }
            app.endUndoGroup();
            renameDialog.close();
        };
        
        cancelBtn.onClick = function() {
            renameDialog.close();
        };
        
        renameDialog.center();
        renameDialog.show();
    };
    
    // --- Панель: Parameters ---
    var parametersPanel = rightColumn.add("panel", undefined, "Parameters");
    parametersPanel.orientation = "column";
    parametersPanel.alignChildren = ["fill", "top"];
    parametersPanel.margins = [10, 19, 10, 17];
    
    // Создаём Pre-compose окно (диалог), вызываемый по кнопке precomposeButton
    var precompose_window = new Window("dialog");
    precompose_window.text = "Pre-compose Tool Group (Beta)";
    precompose_window.orientation = "column";
    precompose_window.alignChildren = ["left","top"];
    precompose_window.spacing = 10;
    precompose_window.margins = 16;
    
    var About = precompose_window.add("statictext", undefined, undefined, {name: "About"});
    About.text = "Pre-compose works only on active composition, not on all at the same time";
    About.graphics.foregroundColor = About.graphics.newPen(About.graphics.PenType.SOLID_COLOR, [0.5569, 0.7333, 0.9412], 1);
    About.justify = "center";
    About.alignment = ["center","top"];
    
    var group1 = precompose_window.add("group");
    group1.orientation = "row";
    group1.alignChildren = ["left","center"];
    group1.spacing = 10;
    group1.margins = 0;
    
    var name_layers_text = group1.add("statictext", undefined, "Name Layers:");
    var prefixField = group1.add('edittext');
    prefixField.enabled = false;
    prefixField.text = prefix;
    prefixField.preferredSize.width = 50;
    var name_pre_comps = group1.add('edittext');
    name_pre_comps.text = "Pre-Compose: " + groupName;
    name_pre_comps.preferredSize.width = 255;
    
    var Add_Prefix_array = ["None","Effects","Numbers"];
    var Add_Prefix = group1.add("dropdownlist", undefined, undefined, {items: Add_Prefix_array});
    Add_Prefix.enabled = false;
    Add_Prefix.selection = 0;
    
    var select_group = precompose_window.add("group");
    select_group.orientation = "column";
    select_group.alignChildren = ["left","top"];
    select_group.spacing = 10;
    select_group.margins = 0;
    
    var Leave_all = select_group.add("radiobutton");
    Leave_all.text = "Leave all attributes in composition (Safe Group)";
    
    var radiobutton1 = select_group.add("radiobutton");
    radiobutton1.text = "Move all attributes intro new composition (Safe Group)";
    radiobutton1.value = true;
    
    var apply_cancel_group = precompose_window.add("group");
    apply_cancel_group.orientation = "row";
    apply_cancel_group.alignChildren = ["right","center"];
    apply_cancel_group.spacing = 10;
    apply_cancel_group.margins = 0;
    apply_cancel_group.alignment = ["right","top"];
    
    var cancel_button = apply_cancel_group.add("button", undefined, "Cancel");
    var apply_button = apply_cancel_group.add("button", undefined, "Apply");
    
    cancel_button.onClick = function() {
        precompose_window.close();
    };
    
    apply_button.onClick = function() {
        app.beginUndoGroup("Custom Pre-Compose (by Group Prefix)");
        var activeComp = app.project.activeItem;
        if (!(activeComp && activeComp instanceof CompItem)) {
            alert("Open the composition before executing this script!");
            return;
        }
    
        var moveAllAttributes = (radiobutton1.value === true);
        var userPrefix = "";
        switch(Add_Prefix.selection.text) {
            case "None":    userPrefix = "";            break;
            case "Effects": userPrefix = prefixField.text;  break;
            case "Numbers": userPrefix = "01_";         break;
        }
        var userPrecompName = name_pre_comps.text;
        var groupPrefix = "[" + groupData.prefix + "]";
    
        var foundLayers = [];
        for (var i = 1; i <= activeComp.numLayers; i++) {
            var ly = activeComp.layer(i);
            if (ly.name.indexOf(groupPrefix) === 0) {
                foundLayers.push(ly);
            }
        }
        if (foundLayers.length === 0) {
            alert("Prefixed layers " + groupPrefix + " not found.");
            app.endUndoGroup();
            return;
        }
    
        var layerIndices = [];
        for (var n = 0; n < foundLayers.length; n++) {
            layerIndices.push(foundLayers[n].index);
        }
        layerIndices.sort(function(a, b) { return b - a; });
    
        try {
            for (var k = 0; k < layerIndices.length; k++) {
                var idx = layerIndices[k];
                var layer = activeComp.layer(idx);
                if (!layer || !layer.name) continue;
                var forbiddenChars = new RegExp("[\\\\/:*?\"<>|]", "g");
                var safeLayerName = layer.name.replace(forbiddenChars, "_");
                var precompName = "[" + groupData.prefix + "] " + userPrecompName + userPrefix;
                activeComp.layers.precompose([idx], precompName, moveAllAttributes);
            }
        } catch (err) {
            alert("Error in precompilation: " + err.toString());
        }
    
        app.endUndoGroup();
        precompose_window.close();
    };
    
    precomposeButton.onClick = function() {
        if (precompose_window.visible) {
            precompose_window.bringToFront();
        } else {
            precompose_window.show();
        }
    };
    
    // --- Кнопка Guide Layers (в Parameters) ---
    var guideLayerButton = parametersPanel.add("iconbutton", undefined, undefined, {name: "guide_layer_button", style: "toolbutton"});
    guideLayerButton.text = "Guide Layers";
    guideLayerButton.preferredSize.width = 150;
    guideLayerButton.preferredSize.height = 35;
    guideLayerButton.helpTip = "Toggle Guide Layer for this group";
    setGuideButtonIcon(guideLayerButton, groupData.guideCheckbox.value ? guide_on_imgString : guide_off_imgString);
    guideLayerButton.onClick = function() {
        groupData.guideCheckbox.value = !groupData.guideCheckbox.value;
        setGuideButtonIcon(guideLayerButton, groupData.guideCheckbox.value ? guide_on_imgString : guide_off_imgString);
    };
    
    // --- Кнопка Lock Layers (в Parameters) ---
    var lockLayerButton = parametersPanel.add("iconbutton", undefined, undefined, {name: "lock_layer_button", style: "toolbutton"});
    lockLayerButton.text = "Lock Layers";
    lockLayerButton.preferredSize.width = 150;
    lockLayerButton.preferredSize.height = 35;
    lockLayerButton.helpTip = "Toggle Lock Layers for this group";
    setLockButtonIcon(lockLayerButton, groupData.lockCheckbox.value ? lock_on_imgString : lock_off_imgString);
    lockLayerButton.onClick = function() {
        groupData.lockCheckbox.value = !groupData.lockCheckbox.value;
        setLockButtonIcon(lockLayerButton, groupData.lockCheckbox.value ? lock_on_imgString : lock_off_imgString);
    
        app.beginUndoGroup("Toggle Lock Layers for " + groupData.name);
        var comps = getAllCompositions();
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                if (layer.name.indexOf("[" + groupData.prefix + "]") === 0) {
                    layer.locked = groupData.lockCheckbox.value;
                }
            }
        }
        app.endUndoGroup();
    };
    
    // --- Кнопка Collapse Transformations (в Parameters) ---
    var collapse_transformationButton = parametersPanel.add("iconbutton", undefined, undefined, {name: "collapse_transformationButton", style: "toolbutton"});
    collapse_transformationButton.text = "Collapse Transformations";
    collapse_transformationButton.preferredSize.width = 150;
    collapse_transformationButton.preferredSize.height = 35;
    collapse_transformationButton.helpTip = "Toggle Collapse Transformations for all layers in this group";
    
    if (groupData.collapseTransformationsState) {
        setCollapseTransformationsButtonIcon(collapse_transformationButton, collapse_transformation_on_imgString);
    } else {
        setCollapseTransformationsButtonIcon(collapse_transformationButton, collapse_transformation_off_imgString);
    }
    
    collapse_transformationButton.onClick = function() {
        groupData.collapseTransformationsState = !groupData.collapseTransformationsState;
        if (groupData.collapseTransformationsState) {
            setCollapseTransformationsButtonIcon(collapse_transformationButton, collapse_transformation_on_imgString);
        } else {
            setCollapseTransformationsButtonIcon(collapse_transformationButton, collapse_transformation_off_imgString);
        }
    
        app.beginUndoGroup("Toggle Collapse Transformations for " + groupData.name);
        var comps = getAllCompositions();
        var layersFound = false;
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                if (layer.name.indexOf("[" + groupData.prefix + "]") === 0) {
                    if (layer instanceof AVLayer) {
                        layer.collapseTransformation = groupData.collapseTransformationsState;
                    }
                    layersFound = true;
                }
            }
        }
        if (!layersFound) {
            alert("Layers for group '" + groupData.name + "' not found in any composition.");
        }
        app.endUndoGroup();
    };
    
    // --- Кнопки OK / Cancel внизу окна ---
    var buttonsGroup = dialog.add("group");
    buttonsGroup.alignment = "center";
    var okButton = buttonsGroup.add("button", undefined, "OK");
    okButton.helpTip = "Confirm changes to the Layer Group";
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel");
    cancelButton.helpTip = "Cancel editing the Layer Group";
    
    okButton.onClick = function() {
        var newGroupName = trim(groupNameInput.text);
        var newPrefix = trim(prefixInput.text);
        var newLabelColorIndex = labelColorDropdown.selection ? labelColorDropdown.selection.index : 0;
        var newDisableLabelColor = disableLabelColorCheckbox.value;
        var newGuideLayer = groupData.guideCheckbox.value;
        var newLockLayers = groupData.lockCheckbox.value;
    
        if (newGroupName === "") {
            alert("Please enter a group name.");
            return;
        }
        if (newPrefix === "") {
            if (autoPrefixCheckbox.value) {
                newPrefix = generateUniquePrefix(newGroupName);
                prefixInput.text = newPrefix;
            } else {
                alert("Please enter a prefix.");
                return;
            }
        }
    
        app.beginUndoGroup("Edit Layer Group " + groupData.name);
    
        var comps = getAllCompositions();
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                if (layer.name.indexOf("[" + groupData.prefix + "]") === 0) {
                    var baseName = layer.name.replace("[" + groupData.prefix + "] ", "");
                    layer.name = "[" + newPrefix + "] " + baseName;
                    if (!newDisableLabelColor) {
                        layer.label = newLabelColorIndex;
                    }
                    layer.guideLayer = newGuideLayer;
                    layer.locked = newLockLayers;
                }
            }
        }
    
        // Обновляем объект groupData
        groupData.name = newGroupName;
        groupData.prefix = newPrefix;
        groupData.labelColorIndex = newLabelColorIndex;
        groupData.disableLabelColor = newDisableLabelColor;
        groupData.guideCheckbox.value = newGuideLayer;
        groupData.lockCheckbox.value = newLockLayers;
        groupData.disableVolumePresets = disableVolumePresetsCheckboxEdit.value;
        groupData.volumeStates = groupData.disableVolumePresets ? ["off", "on"] : ["off", "min", "normal", "high"];
        groupData.currentVolumeIndex = groupData.disableVolumePresets ? 0 : 2;
    
        groupPanel.text = newGroupName + " [" + newPrefix + "]";
        setColorLabelButtonIcon(groupData.colorLabelButton, newLabelColorIndex);
        setGuideButtonIcon(guideLayerButton, newGuideLayer ? guide_on_imgString : guide_off_imgString);
        setLockButtonIcon(lockLayerButton, newLockLayers ? lock_on_imgString : lock_off_imgString);
    
        palette.layout.layout(true);
        palette.layout.resize();
        if (autoSaveEnabled) {
            autoSavePreset();
        }
    
        app.endUndoGroup();
        dialog.close();
    };
    
    cancelButton.onClick = function() {
        dialog.close();
    };
    
    dialog.center();
    dialog.show();
};

// --- (H) Кнопка Delete
var delete_group_layers_button = groupPanel.add("iconbutton", undefined, File.decode(delete_group_layers_button_imgString), {
    name: "delete_group_layers_button_" + prefix,
    style: "toolbutton"
});
delete_group_layers_button.helpTip = "Delete this Layer Group";
delete_group_layers_button.preferredSize.width = 33;
delete_group_layers_button.preferredSize.height = 33;

delete_group_layers_button.onClick = function() {
    app.beginUndoGroup("Delete Layer Group " + groupName);
    var layersFound = false;
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = comp.numLayers; l >= 1; l--) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + prefix + "]") === 0) {
                var originalName = layer.name.replace("[" + prefix + "] ", "");
                layer.name = originalName;
                layersFound = true;
            }
        }
    }
    if (!layersFound) {
        alert("Layers for group '" + groupName + "' not found in any composition.");
    }
    tab_layers.remove(groupPanel);
    palette.layout.layout(true);
    palette.layout.resize();
    
    if (autoSaveEnabled) {
        autoSavePreset();
    }
    
    for (var j = 0; j < layerGroups.length; j++) {
        if (layerGroups[j].panel === groupPanel) {
            layerGroups.splice(j, 1);
            break;
        }
    }
    app.endUndoGroup();
};

// Общий объект данных группы
var groupData = {
    name: groupName,
    prefix: prefix,
    panel: groupPanel,
    colorLabelButton: color_label_button,
    volumeAudioButton: volumeAudioButton, // Новое
    // Сохраняем состояние переключения аудио:
    volumeStates: disableVolumePresets ? ["off", "on"] : ["off", "min", "normal", "high"],
    currentVolumeIndex: disableVolumePresets ? 0 : 2,
    viewButton: view_button,
    viewState: viewState,
    soloButton: solo_button,
    soloState: soloState,
    hideButton: hide_button,
    hideState: hideState,
    addButton: add_layer_button,
    editButton: edit_group_layers_button,
    deleteButton: delete_group_layers_button,
    labelColorIndex: labelColorIndex,
    disableLabelColor: disableLabelColor,
    guideCheckbox: { value: guideCheckboxValue },
    lockCheckbox: { value: lockCheckboxValue },
    collapseTransformationsState: false,
    disableVolumePresets: disableVolumePresets
};

layerGroups.push(groupData);

palette.layout.layout(true);
if (autoSaveEnabled) {
    autoSavePreset();
}
}

//
// "Create a New Layer Group" кнопка
//
create_group_layers_button.onClick = function() {
    var dialog = new Window("dialog", "Add New Layer Group");
    dialog.orientation = "column";
    dialog.alignChildren = ["fill", "top"];

    // Name + Prefix
    var nameAndPrefixPanel = dialog.add("panel", undefined, "Name and Prefix");
    nameAndPrefixPanel.orientation = "column";
    nameAndPrefixPanel.alignChildren = ["fill", "top"];

    var groupNameGroup = nameAndPrefixPanel.add("group");
    groupNameGroup.add("statictext", undefined, "Group Name:");
    var groupNameInput = groupNameGroup.add("edittext", undefined, "");
    groupNameInput.characters = 15;

    var prefixGroup = nameAndPrefixPanel.add("group");
    prefixGroup.add("statictext", undefined, "Prefix:");
    var prefixInput = prefixGroup.add("edittext", undefined, "");
    prefixInput.characters = 5;

    var autoPrefixGroup = nameAndPrefixPanel.add("group");
    autoPrefixGroup.orientation = "row";
    autoPrefixGroup.alignChildren = ["left", "center"];
    autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
    var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
    autoPrefixCheckbox.value = true;
    prefixInput.enabled = !autoPrefixCheckbox.value;

    autoPrefixCheckbox.onClick = function() {
        prefixInput.enabled = !autoPrefixCheckbox.value;
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                alert("Auto-prefix generation is disabled for group names containing non-English characters.");
            }
        }
    };

    groupNameInput.onChanging = function() {
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                prefixInput.text = "";
                alert("Auto-prefix generation is disabled for group names containing non-English characters.");
            }
        }
    };

    // Color Label
    var colorLabelPanel = dialog.add("panel", undefined, "Color Label");
    colorLabelPanel.orientation = "column";
    colorLabelPanel.alignChildren = ["fill", "top"];

    var labelColorGroup = colorLabelPanel.add("group");
    labelColorGroup.add("statictext", undefined, "Label Color:");
    var labelColorDropdown = labelColorGroup.add("dropdownlist", undefined, [
        "None", "Red", "Yellow", "Aqua", "Pink", "Lavender", "Peach", "Sea Foam",
        "Blue", "Green", "Purple", "Orange", "Brown", "Fuchsia", "Cyan", "Sandstone"
    ]);
    labelColorDropdown.selection = 0;
    labelColorDropdown.helpTip = "Select a label color for layers in this group";

    var disableLabelColorCheckbox = colorLabelPanel.add("checkbox", undefined, "Disable label color assignment");
    disableLabelColorCheckbox.value = false;
    disableLabelColorCheckbox.helpTip = "Disable automatic label color assignment to layers in this group";
    labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
    disableLabelColorCheckbox.onClick = function() {
        labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
    };

    // Volume Presets Checkbox
    var volumePresetsPanel = dialog.add("panel", undefined, "Audio Control");
    volumePresetsPanel.orientation = "column";
    volumePresetsPanel.alignChildren = ["fill", "top"];
    var volumePresetsCheckboxGroup = volumePresetsPanel.add("group");
    volumePresetsCheckboxGroup.orientation = "row";
    volumePresetsCheckboxGroup.alignChildren = ["left", "center"];
    volumePresetsCheckboxGroup.add("statictext", undefined, "Disable Volume Presets:");
    var disableVolumePresetsCheckbox = volumePresetsCheckboxGroup.add("checkbox", undefined, "");
    disableVolumePresetsCheckbox.value = false;
    disableVolumePresetsCheckbox.helpTip = "Disable advanced volume presets (only On/Off will be available)";

    // Buttons
    var buttonsGroup = dialog.add("group");
    buttonsGroup.alignment = "center";
    var okButton = buttonsGroup.add("button", undefined, "OK");
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel");

    okButton.onClick = function() {
        var groupName = groupNameInput.text;
        var prefix    = prefixInput.text;
        var labelColorIndex    = labelColorDropdown.selection ? labelColorDropdown.selection.index : 0;
        var disableLabelColor  = disableLabelColorCheckbox.value;
        var disableVolumePresets = disableVolumePresetsCheckbox.value; // Новое значение

        if (groupName === "") {
            alert("Please enter a group name.");
            return;
        }
        if (prefix === "") {
            if (autoPrefixCheckbox.value) {
                prefix = generateUniquePrefix(groupName);
                prefixInput.text = prefix;
            } else {
                alert("Please enter a prefix.");
                return;
            }
        }

        createLayerGroupUI(groupName, prefix, labelColorIndex, disableLabelColor, false, false, disableVolumePresets);
        dialog.close();
    };

    cancelButton.onClick = function() {
        dialog.close();
    };

    dialog.center();
    dialog.show();
};


/**
 * Проверяет, есть ли в проекте хотя бы один слой с [prefix] и audio
 */
function groupHasAudio(prefix) {
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + prefix + "]") === 0) {
                if (layer instanceof AVLayer && layer.hasAudio) {
                    return true;
                }
            }
        }
    }
    return false;
}



/**
 * Возвращает все композиции из текущего проекта.
 * @returns {CompItem[]} Массив композиций.
 */
function getAllCompositions() {
    // Заглушка: вернёт все композиции в текущем проекте.
    // В реальном скрипте можете добавить фильтры, проверки и т.п.
    var result = [];
    for (var i = 1; i <= app.project.numItems; i++) {
        var item = app.project.item(i);
        if (item instanceof CompItem) {
            result.push(item);
        }
    }
    return result;
}

/**
 * Возвращает список эффектов по проекту (уникальные).
 * При этом в начало списка добавляется "None".
 * @returns {String[]} Массив уникальных имён эффектов, включая "None".
 */
function getAllUniqueEffectsInProject_WithNone() {
    var effectNamesSet = {};
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                // Убираем префикс [XXX], если он есть, чтобы получить "чистое" имя эффекта
                var baseName = eff.name.replace(/^\[[^\]]+\]\s*/, "");
                effectNamesSet[baseName] = true;
            }
        }
    }

    var resultArray = [];
    for (var nm in effectNamesSet) {
        if (effectNamesSet.hasOwnProperty(nm)) {
            resultArray.push(nm);
        }
    }
    resultArray.sort();

    // Добавляем пункт "None" в начало
    resultArray.unshift("None");
    return resultArray;
}


/*******************************************************************************************************
 * [2] ОСНОВНОЙ МОДУЛЬ (ПОЛУЧЕНИЕ ДАННЫХ, СОРТИРОВКА, СОЗДАНИЕ UI, ОБРАБОТКА СОБЫТИЙ)
 ******************************************************************************************************/

/**
 * Основная функция, которую вы вызываете.
 * @param {Object} groupData Параметры группы:
 *                          {name: "...", prefix: "..."}
 */
function showGroupCompositions(groupData) {
    var groupName   = groupData.name;    // напр. "MyGroup"
    var groupPrefix = groupData.prefix;  // напр. "LR"

    /****************************************
     * (A) Сбор данных о композициях и эффектах
     ****************************************/
    var comps = getAllCompositions();
    var compsWithGroup         = []; 
    var allEffectsFromAllComps = []; 

    // 1) Сканируем проект, собираем все comps, где есть слои с [groupPrefix]
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        var layerCount       = 0;
        var layerNamesArray  = [];
        var layerEffectsArray = [];

        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);

            // Проверяем, начинается ли имя слоя с "[<prefix>]"
            if (layer.name.indexOf("[" + groupPrefix + "]") === 0) {
                layerCount++;
                layerNamesArray.push(layer.name);

                // Эффекты этого слоя
                var effectGroup = layer.property("ADBE Effect Parade");
                var effectNames = [];
                if (effectGroup && effectGroup.numProperties > 0) {
                    for (var e = 1; e <= effectGroup.numProperties; e++) {
                        var effectProp = effectGroup.property(e);
                        if (effectProp) {
                            effectNames.push(effectProp.name);

                            // Сохраняем в общий массив (для списка All Effects)
                            allEffectsFromAllComps.push({
                                name:       effectProp.name,
                                comp:       comp,
                                layerIndex: l, // 1-based
                                effectProp: effectProp,
                                isEnabled:  effectProp.enabled
                            });
                        }
                    }
                }
                layerEffectsArray.push(effectNames);
            }
        }

        // Если в этой компе были слои с группой prefix
        if (layerCount > 0) {
            compsWithGroup.push({
                comp:          comp,
                layerCount:    layerCount,
                layerNames:    layerNamesArray,
                layerEffects:  layerEffectsArray
            });
        }
    }

    // Если ни одной композиции не найдено, завершаем
    if (compsWithGroup.length === 0) {
        alert("No compositions containing the group '" + groupName + "'");
        return;
    }

    /****************************************
     * (A2) Создаём основной диалог (UI)
     ****************************************/
    var dialog = new Window("dialog"); 
    dialog.text = ("Group Viewer: " + groupData.name);
    dialog.orientation = "column"; 
    dialog.alignChildren = ["left","top"]; 
    dialog.spacing = 10; 
    dialog.margins = 16; 

    // ------------------------------------------------------------------------
    //  ГОЛОВНОЙ БЛОК (head_group) + сортировка (sort_group) + кнопка (close_group)
    // ------------------------------------------------------------------------
    var head_group = dialog.add("group"); 
    head_group.orientation = "row"; 
    head_group.alignChildren = ["left","fill"]; 
    head_group.spacing = 192; 

    // (1) Группа сортировки
    var sort_group = head_group.add("group"); 
    sort_group.orientation = "row"; 
    sort_group.alignChildren = ["center","center"]; 
    sort_group.spacing = 18; 

    sort_group.add("statictext", undefined, "Sort by layer count:");
    var Sort_array = ["Ascending","Descending"]; 
    var Sort = sort_group.add("dropdownlist", undefined, undefined, {items: Sort_array}); 
    Sort.selection = 0; // Ascending

    // (2) Группа закрытия окна
    var close_group = head_group.add("group"); 
    close_group.orientation = "row"; 
    close_group.alignChildren = ["left","fill"]; 
    close_group.spacing = 10; 
    close_group.margins = [300,0,0,0]; 

    var close_button = close_group.add(
        "iconbutton",
        undefined,
        File.decode(close_button_imgString),
        {style: "toolbutton"}
    ); 
    close_button.text = "Close"; 
    close_button.preferredSize.width = 98; 

    // ------------------------------------------------------------------------
    //  ОСНОВНОЙ БЛОК (main_group) с тремя панелями:
    //     1) ПАНЕЛЬ All Effects (слева)
    //     2) ПАНЕЛЬ Compositions (по центру)
    //     3) ПАНЕЛЬ Effects and Layers (справа)
    // ------------------------------------------------------------------------
    var main_group = dialog.add("group"); 
    main_group.orientation = "row"; 
    main_group.alignChildren = ["left","center"]; 
    main_group.spacing = 13; 
    main_group.margins = [0,0,0,8]; 

    /****************************************
     * ПАНЕЛЬ: ALL EFFECTS (слева)
     ****************************************/
    var All_Effects_panel = main_group.add("panel"); 
    All_Effects_panel.text = "All Effects Group"; 
    All_Effects_panel.orientation = "column"; 
    All_Effects_panel.alignChildren = ["left","top"]; 
    All_Effects_panel.spacing = 10; 
    All_Effects_panel.margins = 10; 
    All_Effects_panel.alignment = ["left","top"]; 

    var All_effects = All_Effects_panel.add("group"); 
    All_effects.orientation = "column"; 
    All_effects.alignChildren = ["left","top"]; 
    All_effects.spacing = 10; 
    All_effects.margins = [0,0,0,0]; 

    var All_Effects_list = All_effects.add("listbox", undefined, undefined); 
    All_Effects_list.preferredSize.width  = 200; 
    All_Effects_list.preferredSize.height = 329; 

    var disable_effect_button = All_effects.add(
        "iconbutton",
        undefined,
        File.decode(disable_effect_button_imgString),
        {style: "toolbutton"}
    ); 
    disable_effect_button.text = "Disable Select Effect"; 
    disable_effect_button.preferredSize.width  = 193; 
    disable_effect_button.preferredSize.height = 39; 
    disable_effect_button.alignment = ["fill","top"]; 

    /****************************************
     * ПАНЕЛЬ: COMPOSITIONS (по центру)
     ****************************************/
    var compositions_panel = main_group.add("panel"); 
    compositions_panel.text = "Compositions Group"; 
    compositions_panel.orientation = "column"; 
    compositions_panel.alignChildren = ["left","top"]; 
    compositions_panel.spacing = 10; 
    compositions_panel.margins = 10; 
    compositions_panel.alignment = ["left","top"]; 

    var compositions_group = compositions_panel.add("group"); 
    compositions_group.orientation = "column"; 
    compositions_group.alignChildren = ["left","top"]; 
    compositions_group.spacing = 10; 
    compositions_group.margins = [0,0,0,0]; 

    var compositions_list = compositions_group.add("listbox", undefined, undefined); 
    compositions_list.preferredSize.width  = 246; 
    compositions_list.preferredSize.height = 328; 

    var open_selected_comp_button = compositions_group.add(
        "iconbutton",
        undefined,
        File.decode(open_selected_comp_button_imgString),
        {style: "toolbutton"}
    ); 
    open_selected_comp_button.text = "Open Selected Compositions"; 
    open_selected_comp_button.preferredSize.width  = 240; 
    open_selected_comp_button.preferredSize.height = 39; 
    open_selected_comp_button.alignment = ["center","top"]; 

    /****************************************
     * ПАНЕЛЬ: EFFECTS AND LAYERS (справа)
     ****************************************/
    var Effects_and_Layers_Group = main_group.add("panel"); 
    Effects_and_Layers_Group.text = "Effects and Layers"; 
    Effects_and_Layers_Group.orientation = "column"; 
    Effects_and_Layers_Group.alignChildren = ["left","top"]; 
    Effects_and_Layers_Group.spacing = 10; 
    Effects_and_Layers_Group.margins = 10; 
    Effects_and_Layers_Group.alignment = ["left","top"]; 

    var Effects_and_layers_group = Effects_and_Layers_Group.add("group"); 
    Effects_and_layers_group.orientation = "column"; 
    Effects_and_layers_group.alignChildren = ["left","top"]; 
    Effects_and_layers_group.spacing = 10; 
    Effects_and_layers_group.margins = [0,0,0,0]; 

    var layers_text = Effects_and_layers_group.add("statictext", undefined, "Layers"); 
    var layers_list = Effects_and_layers_group.add("listbox", undefined, undefined); 
    layers_list.preferredSize.width  = 250; 
    layers_list.preferredSize.height = 136; 

    var Effects_text = Effects_and_layers_group.add("statictext", undefined, "Effects"); 
    var effects_layer_list = Effects_and_layers_group.add("listbox", undefined, undefined); 
    effects_layer_list.preferredSize.width  = 250; 
    effects_layer_list.preferredSize.height = 130; 

    // Кнопки FFX (import/export)
    var ffx_button = Effects_and_layers_group.add("group"); 
    ffx_button.orientation = "row"; 
    ffx_button.alignChildren = ["center","center"]; 
    ffx_button.spacing = 10; 

    var import_ffx = ffx_button.add("iconbutton", undefined, File.decode(import_ffx_imgString), {style: "toolbutton"});
    import_ffx.text = "Import FFX";
    import_ffx.preferredSize.width  = 120;
    import_ffx.preferredSize.height = 39;
    import_ffx.enabled = false; // по умолчанию отключена

    var export_ffx = ffx_button.add("iconbutton", undefined, File.decode(export_ffx_imgString), {style: "toolbutton"});
    export_ffx.text = "Export FFX";
    export_ffx.preferredSize.width  = 120;
    export_ffx.preferredSize.height = 40;
    export_ffx.enabled = false; // по умолчанию отключена

    /****************************************
     * (B1) Функции сортировки и заполнения
     ****************************************/

    /**
     * Сортирует массив compsWithGroup по количеству слоёв (возр/убыв).
     * @param {Array} compsArray массив объектов {comp, layerCount, ...}
     * @param {String} order "Ascending" или "Descending".
     */
    function sortCompositions(compsArray, order) {
        compsArray.sort(function(a, b) {
            if (order === "Descending") {
                return b.layerCount - a.layerCount;
            } else {
                return a.layerCount - b.layerCount;
            }
        });
    }

    /**
     * Заполнение списка «Compositions» (с учётом текущего массива compsWithGroup).
     */
    function fillCompositionsList() {
        compositions_list.removeAll();
        for (var i = 0; i < compsWithGroup.length; i++) {
            var compName   = compsWithGroup[i].comp.name;
            var layerCount = compsWithGroup[i].layerCount;
            var txt        = compName + " [" + layerCount + " layer" + (layerCount !== 1 ? "s" : "") + "]";
            compositions_list.add("item", txt);
        }
    }

    /**
     * Группируем одинаковые эффекты, чтобы выводить в списке All_Effects_list одной строкой.
     */
    function fillAllEffectsList() {
        All_Effects_list.removeAll();

        var effectGroups = {}; // ключ = имя эффекта, значение = массив объектов effObj

        for (var i = 0; i < allEffectsFromAllComps.length; i++) {
            var effObj  = allEffectsFromAllComps[i];
            var effName = effObj.name;

            if (!effectGroups[effName]) {
                effectGroups[effName] = [];
            }
            effectGroups[effName].push(effObj);
        }

        for (var groupName in effectGroups) {
            if (effectGroups.hasOwnProperty(groupName)) {
                var groupArray = effectGroups[groupName];

                // Проверяем, выключены ли все эффекты (allDisabled)
                var allDisabled = true;
                for (var k = 0; k < groupArray.length; k++) {
                    if (groupArray[k].isEnabled) {
                        allDisabled = false;
                        break;
                    }
                }

                var count = groupArray.length;
                var itemLabel = groupName + " (" + count + ")" + (allDisabled ? " | Off" : "");
                var newItem   = All_Effects_list.add("item", itemLabel);

                newItem.__effectDataGroup = groupArray;
                newItem.__groupName       = groupName;
            }
        }
    }

    // Первоначальная инициализация (сортируем + выводим)
    sortCompositions(compsWithGroup, Sort.selection.text);
    fillCompositionsList();
    fillAllEffectsList();

    /****************************************
     * (C) ОБРАБОТЧИКИ СОБЫТИЙ UI
     ****************************************/

    // (C1) Обработчик: сортировка композиций (DropDown "Ascending"/"Descending")
    Sort.onChange = function() {
        sortCompositions(compsWithGroup, Sort.selection.text);
        fillCompositionsList();
        layers_list.removeAll();
        effects_layer_list.removeAll();
    };

    // (C2) Обработчик: кнопка «Disable Select Effect» (переключает On/Off у выбранной группы эффектов)
    disable_effect_button.onClick = function() {
        var selItem = All_Effects_list.selection;
        if (!selItem) {
            alert("Select an effect group from 'All Effects' first!");
            return;
        }

        var effDataGroup = selItem.__effectDataGroup;
        if (!effDataGroup || effDataGroup.length === 0) {
            alert("No effect data group found!");
            return;
        }

        // Проверяем, есть ли хотя бы один включённый эффект
        var anyEnabled = false;
        for (var i = 0; i < effDataGroup.length; i++) {
            if (effDataGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }

        var count = effDataGroup.length;
        if (anyEnabled) {
            // Выключаем все
            for (var j = 0; j < effDataGroup.length; j++) {
                effDataGroup[j].effectProp.enabled = false;
                effDataGroup[j].isEnabled = false;
            }
            selItem.text = selItem.__groupName + " (" + count + ") | Off";
            disable_effect_button.text = "Enable Select Effect";
        } else {
            // Включаем все
            for (var j = 0; j < effDataGroup.length; j++) {
                effDataGroup[j].effectProp.enabled = true;
                effDataGroup[j].isEnabled = true;
            }
            selItem.text = selItem.__groupName + " (" + count + ")";
            disable_effect_button.text = "Disable Select Effect";
        }
    };

    // При смене выделения в списке «All Effects» — меняем надпись кнопки disable_effect_button
    All_Effects_list.onChange = function() {
        var selItem = All_Effects_list.selection;
        if (!selItem) {
            disable_effect_button.text = "Disable / Enable";
            return;
        }
        var effDataGroup = selItem.__effectDataGroup;
        if (!effDataGroup || effDataGroup.length === 0) {
            disable_effect_button.text = "Disable / Enable";
            return;
        }

        // Проверяем, есть ли включённый
        var anyEnabled = false;
        for (var i = 0; i < effDataGroup.length; i++) {
            if (effDataGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }

        disable_effect_button.text = anyEnabled ? "Disable Select Effect" : "Enable Select Effect";
    };

    // (C3) Обработка выбора композиции — заполнить список слоёв
    compositions_list.onChange = function() {
        layers_list.removeAll();
        effects_layer_list.removeAll();

        var selItem = compositions_list.selection;
        if (!selItem) return;

        // Из строки "CompName [5 layers]" берём CompName
        var compName = selItem.text.split(" [")[0];

        var foundItem = null;
        for (var i = 0; i < compsWithGroup.length; i++) {
            if (compsWithGroup[i].comp.name === compName) {
                foundItem = compsWithGroup[i];
                break;
            }
        }
        if (!foundItem) return;

        // Заполняем список слоёв
        for (var l = 0; l < foundItem.layerNames.length; l++) {
            layers_list.add("item", foundItem.layerNames[l]);
        }
    };

    // (C4) Обработка выбора слоя — заполняем список «Effects»
    layers_list.onChange = function() {
        effects_layer_list.removeAll();

        var compSel  = compositions_list.selection;
        var layerSel = layers_list.selection;
        if (!compSel || !layerSel) return;

        var compName = compSel.text.split(" [")[0];
        var foundItem = null;
        for (var i = 0; i < compsWithGroup.length; i++) {
            if (compsWithGroup[i].comp.name === compName) {
                foundItem = compsWithGroup[i];
                break;
            }
        }
        if (!foundItem) return;

        var layerIndexInArray = layerSel.index; 
        var effectNamesForLayer = foundItem.layerEffects[layerIndexInArray];
        if (!effectNamesForLayer) return;

        for (var e = 0; e < effectNamesForLayer.length; e++) {
            effects_layer_list.add("item", effectNamesForLayer[e]);
        }
    };

    // Кнопка "Open Selected Composition"
    open_selected_comp_button.onClick = function() {
        var sel = compositions_list.selection;
        if (!sel) {
            alert("Select a composition first!");
            return;
        }
        var compName = sel.text.split(" [")[0];
        for (var i = 0; i < compsWithGroup.length; i++) {
            var compObj = compsWithGroup[i].comp;
            if (compObj && compObj.name === compName) {
                compObj.openInViewer();
                break;
            }
        }
    };

    // (D3) Кнопка закрытия основного окна
    close_button.onClick = function() {
        dialog.close();
    };

    // Показываем диалог
    dialog.center();
    dialog.show();
}


//
// ===================== CREATE EFFECT GROUP UI =====================
//

// Убираем в конце эффекта любые пробел + число (например "Curves 2" -> "Curves")
function unifyEffectBaseName(baseName) {
    // Удаляем конечные пробел + цифра (например, "Curves 2" => "Curves")
    // Если вам нужно более гибкое правило, корректируйте эту регулярку.
    return baseName.replace(/\s+\d+$/, "");
}

// Собираем статистику эффектов по префиксу группы
function getEffectCountsByBaseName(prefix) {
    var comps = getAllCompositions();
    var prefixString = "[" + prefix + "]";
    var prefixLength = prefixString.length;
    var result = {}; // формат: { baseName: count }

    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                // Проверяем, начинается ли имя эффекта с [prefix]
                if (eff.name.indexOf(prefixString) === 0) {
                    // baseName без префикса [CRVS] и пробела
                    var baseName = eff.name.substring(prefixLength + 1); 
                    baseName = unifyEffectBaseName(baseName);
                    
                    if (!result[baseName]) {
                        result[baseName] = 0;
                    }
                    result[baseName]++;
                }
            }
        }
    }
    return result;
}

// Обновляем заголовок панели группы с учётом до 3 уникальных имён эффектов и общего количества
function updateEffectGroupPanelTitle(groupData) {
    var groupName = groupData.name;
    var prefix    = groupData.prefix;
    var countsMap = getEffectCountsByBaseName(prefix);
    var baseNames = [];

    for (var nm in countsMap) {
        if (countsMap.hasOwnProperty(nm)) {
            baseNames.push(nm);
        }
    }
    baseNames.sort();

    // Если вообще нет эффектов с таким префиксом, просто показываем "GroupName [PRFX]"
    if (baseNames.length === 0) {
        groupData.panel.text = groupName + " [" + prefix + "]";
        return;
    }

    // Берём первые 3 эффекта
    var top3 = baseNames.slice(0, 3);
    var top3String = top3.join(", ");

    // Считаем общее количество эффектов (сумма значений в countsMap)
    var totalCount = 0;
    for (var k in countsMap) {
        if (countsMap.hasOwnProperty(k)) {
            totalCount += countsMap[k];
        }
    }

    // Формируем итоговую надпись
    // Пример: "Curves [CRVS] | Curves, Levels, Hue (7)"
    groupData.panel.text = groupName + " [" + prefix + "] | " + top3String + " (" + totalCount + ")";
}

function createEffectGroupUI(groupName, prefix, effectName) {
    var groupPanel = tab_effects.add("panel", undefined, undefined, {name: "effect_group_" + prefix});
    groupPanel.text = groupName + " [" + prefix + "]"; // Изначально
    groupPanel.orientation = "row";
    groupPanel.alignChildren = ["center", "center"];
    groupPanel.spacing = 12;
    groupPanel.margins = [5, 15, 5, 10];
    groupPanel.alignment = ["fill", "top"];
    groupPanel.helpTip   = "Effect Group panel for " + groupName;

    // VIEW
    var view_button = groupPanel.add("iconbutton", undefined, undefined, {name: "view_button_" + prefix, style: "toolbutton"});
    view_button.helpTip = "Toggle visibility of effects in this group across all compositions";
    view_button.preferredSize.width  = 28;
    view_button.preferredSize.height = 28;
    var viewState = true;
    setViewButtonIconEffects(view_button, view_button_fx_on_imgString);

    // SOLO
    var solo_button = groupPanel.add("iconbutton", undefined, undefined, {name: "solo_button_" + prefix, style: "toolbutton"});
    solo_button.helpTip = "Toggle solo mode for this effects group";
    solo_button.preferredSize.width  = 28;
    solo_button.preferredSize.height = 28;
    var soloState = false;
    setSoloButtonIconEffects(solo_button, solo_off_button_imgString);

    // Разделитель
    var divider1 = groupPanel.add("panel", undefined, undefined, {name: "divider1"});
    divider1.alignment = "fill";
    divider1.helpTip   = "Divider for layout";
    divider1.graphics.backgroundColor = divider1.graphics.newBrush(
        divider1.graphics.BrushType.SOLID_COLOR, [0.5, 0.5, 0.5, 1]
    );
    divider1.preferredSize.height = 1;

    // "Add Effect"
    var add_effect_button = groupPanel.add(
        "iconbutton",
        undefined,
        File.decode(add_layer_button_imgString),
        {name: "add_effect_button_" + prefix, style: "toolbutton"}
    );
    add_effect_button.helpTip = "Add selected effects to this group across all compositions";
    add_effect_button.text = "Add Effect";
    add_effect_button.preferredSize.width  = 130;
    add_effect_button.preferredSize.height = 33;

    // "Edit"
    var edit_group_effects_button = groupPanel.add(
        "iconbutton",
        undefined,
        File.decode(edit_group_layers_button_imgString),
        {name: "edit_group_effects_button_" + prefix, style: "toolbutton"}
    );
    edit_group_effects_button.helpTip = "Rename and settings this Group";
    edit_group_effects_button.text    = "";
    edit_group_effects_button.preferredSize.width  = 33;
    edit_group_effects_button.preferredSize.height = 33;

    // "Delete"
    var delete_group_effects_button = groupPanel.add(
        "iconbutton",
        undefined,
        File.decode(delete_group_layers_button_imgString),
        {name: "delete_group_effects_button_" + prefix, style: "toolbutton"}
    );
    delete_group_effects_button.helpTip = "Delete this Effects Group";
    delete_group_effects_button.text    = "";
    delete_group_effects_button.preferredSize.width  = 33;
    delete_group_effects_button.preferredSize.height = 33;

    // Собираем все данные
    var groupData = {
        name:        groupName,
        prefix:      prefix,
        effectName:  effectName,
        panel:       groupPanel,
        viewButton:  view_button,
        viewState:   viewState,
        soloButton:  solo_button,
        soloState:   soloState,
        addButton:   add_effect_button,
        deleteButton:delete_group_effects_button,
        editButton:  edit_group_effects_button
    };
    effectGroups.push(groupData);

    // VIEW onClick
    view_button.onClick = function() {
        groupData.viewState = !groupData.viewState;
        if (groupData.viewState) {
            setViewButtonIconEffects(view_button, view_button_fx_on_imgString);
        } else {
            setViewButtonIconEffects(view_button, view_button_fx_off_imgString);
        }
        app.beginUndoGroup("Toggle View for " + groupName);

        var comps = getAllCompositions();
        var effectsFound = false;
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                var fx = layer.property("Effects");
                if (!fx) continue;
                for (var i = 1; i <= fx.numProperties; i++) {
                    var effect = fx.property(i);
                    if (effect.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        effect.enabled = groupData.viewState;
                        effectsFound = true;
                    }
                }
            }
        }
        if (!effectsFound) {
            alert("Effects for group '" + groupName + "' not found in any composition.");
        }

        app.endUndoGroup();
    };

    // SOLO onClick
    solo_button.onClick = function() {
        groupData.soloState = !groupData.soloState;
        if (groupData.soloState) {
            setSoloButtonIconEffects(solo_button, solo_on_button_imgString);
        } else {
            setSoloButtonIconEffects(solo_button, solo_off_button_imgString);
        }
        app.beginUndoGroup("Toggle Solo for " + groupName);

        var comps = getAllCompositions();
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                var effects = layer.property("Effects");
                if (!effects) continue;

                // Проверяем, есть ли в слое эффект из этой группы
                var hasGroupEffect = false;
                for (var e = 1; e <= effects.numProperties; e++) {
                    var eff = effects.property(e);
                    if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        hasGroupEffect = true;
                        break;
                    }
                }
                if (hasGroupEffect) {
                    // Переключаем enable
                    for (var e = 1; e <= effects.numProperties; e++) {
                        var eff = effects.property(e);
                        if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                            eff.enabled = groupData.viewState;
                        } else {
                            eff.enabled = !groupData.soloState;
                        }
                    }
                }
            }
        }
        app.endUndoGroup();
        // Названия эффектов не менялись, если нужно — можно обновить:
        // updateEffectGroupPanelTitle(groupData);
    };

    // ADD EFFECT onClick
    add_effect_button.onClick = function() {
        var layers = getSelectedLayersInActiveComp();
        if (!layers) return;

        app.beginUndoGroup("Add Effects to " + groupName);
        var effectsFound = false;

        for (var j = 0; j < layers.length; j++) {
            var layer = layers[j];
            var selectedProps = layer.selectedProperties;
            if (selectedProps.length === 0) continue;

            for (var i = 0; i < selectedProps.length; i++) {
                var effect = selectedProps[i];
                if (
                    effect.matchName !== "ADBE Effect Parade" &&
                    effect.parentProperty.matchName === "ADBE Effect Parade"
                ) {
                    var baseName = effect.name.replace(/^\[[^\]]+\]\s*/, "");
                    effect.name = "[" + groupData.prefix + "] " + baseName;
                    effectsFound = true;
                }
            }
        }
        if (!effectsFound) {
            alert("Please select effects to add to " + groupName + ".");
        }
        app.endUndoGroup();
        updateEffectGroupPanelTitle(groupData);
    };

    // EDIT onClick
    edit_group_effects_button.onClick = function() {
        var dialog = new Window("dialog", "Settings Effect Group: " + groupData.name);
        dialog.orientation = "column";
        dialog.alignChildren = ["fill", "top"];

        var namePrefixPanel = dialog.add("panel", undefined, "Name and Prefix");
        namePrefixPanel.orientation = "column";
        namePrefixPanel.alignChildren = ["fill", "top"];
        namePrefixPanel.margins = [10, 15, 10, 10];

        var groupNameGroup = namePrefixPanel.add("group");
        groupNameGroup.add("statictext", undefined, "Group Name:");
        var groupNameInput = groupNameGroup.add("edittext", undefined, groupData.name);
        groupNameInput.characters = 15;

        var prefixGroup = namePrefixPanel.add("group");
        prefixGroup.add("statictext", undefined, "Prefix:");
        var prefixInput = prefixGroup.add("edittext", undefined, groupData.prefix);
        prefixInput.characters = 5;

        var autoPrefixGroup = namePrefixPanel.add("group");
        autoPrefixGroup.orientation = "row";
        autoPrefixGroup.alignChildren = ["left", "center"];
        autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
        var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
        autoPrefixCheckbox.value = false;
        prefixInput.enabled = !autoPrefixCheckbox.value;

        autoPrefixCheckbox.onClick = function() {
            prefixInput.enabled = !autoPrefixCheckbox.value;
            if (autoPrefixCheckbox.value) {
                if (containsOnlyEnglishLetters(groupNameInput.text)) {
                    prefixInput.text = generateUniquePrefix(groupNameInput.text);
                } else {
                    autoPrefixCheckbox.value = false;
                    prefixInput.enabled = true;
                    alert("Auto-prefix generation is disabled for invalid characters.");
                }
            }
        };

        groupNameInput.onChanging = function() {
            if (autoPrefixCheckbox.value) {
                if (containsOnlyEnglishLetters(groupNameInput.text)) {
                    prefixInput.text = generateUniquePrefix(groupNameInput.text);
                } else {
                    autoPrefixCheckbox.value = false;
                    prefixInput.enabled = true;
                    prefixInput.text = "";
                }
            }
        };

        if (groupData.effectName && groupData.effectName !== "") {
            var updateButton = dialog.add("button", undefined, "Update Group Effects");
            updateButton.helpTip = "Re-scan the project for '" + groupData.effectName + "' and prefix them.";

            updateButton.onClick = function() {
                addAllEffectsOfThisTypeToGroup(groupData.prefix, groupData.effectName);
                alert("All '" + groupData.effectName + "' have been updated with [" + groupData.prefix + "].");
            };
        } else {
            var infoText = dialog.add("statictext", undefined, "(No effect is tracked in this group.)");
            infoText.graphics.foregroundColor = infoText.graphics.foregroundColor = infoText.graphics.newPen(
                infoText.graphics.PenType.SOLID_COLOR,
                [0.5569, 0.7333, 0.9412], // RGB для #8EBBF0
                1                         // непрозрачность 100%
            );
        }

        var buttonsGroup = dialog.add("group");
        buttonsGroup.alignment = "center";
        var okButton = buttonsGroup.add("button", undefined, "OK");
        var cancelButton = buttonsGroup.add("button", undefined, "Cancel");

        okButton.onClick = function() {
            var newGroupName = groupNameInput.text;
            var newPrefix    = prefixInput.text;
            if (!newGroupName || !newPrefix) {
                alert("Please enter both a group name and prefix.");
                return;
            }
            app.beginUndoGroup("Settings Effect Group " + groupData.name);

            var comps = getAllCompositions();
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    var fx = layer.property("Effects");
                    if (!fx) continue;
                    for (var e = 1; e <= fx.numProperties; e++) {
                        var eff = fx.property(e);
                        if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                            var baseName = eff.name.replace("[" + groupData.prefix + "] ", "");
                            eff.name = "[" + newPrefix + "] " + baseName;
                        }
                    }
                }
            }

            groupData.name   = newGroupName;
            groupData.prefix = newPrefix;
            updateEffectGroupPanelTitle(groupData);
            palette.layout.layout(true);
            palette.layout.resize();
            app.endUndoGroup();
            dialog.close();
        };

        cancelButton.onClick = function() {
            dialog.close();
        };

        dialog.center();
        dialog.show();
    };

    // DELETE onClick
    delete_group_effects_button.onClick = function() {
        app.beginUndoGroup("Delete Effect Group " + groupName);
        var effectsFound = false;

        var comps = getAllCompositions();
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                var fx = layer.property("Effects");
                if (!fx) continue;
                for (var i = fx.numProperties; i >= 1; i--) {
                    var eff = fx.property(i);
                    if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        var originalName = eff.name.replace("[" + groupData.prefix + "] ", "");
                        eff.name = originalName;
                        effectsFound = true;
                    }
                }
            }
        }

        if (!effectsFound) {
            alert("Effects for group '" + groupName + "' not found in any composition.");
        }

        tab_effects.remove(groupPanel);
        palette.layout.layout(true);
        palette.layout.resize();

        for (var j = 0; j < effectGroups.length; j++) {
            if (effectGroups[j].panel === groupPanel) {
                effectGroups.splice(j, 1);
                break;
            }
        }
        app.endUndoGroup();
    };
    updateEffectGroupPanelTitle(groupData);
    palette.layout.layout(true);
    palette.layout.resize();
    
    if (autoSaveEnabled) {
        autoSavePreset();
    }
}

//
// "Create a New Effects Group" кнопка
//
create_group_effects_button.onClick = function() {
    var dialog = new Window("dialog", "Add New Effects Group");
    dialog.orientation = "column";
    dialog.alignChildren = ["fill", "top"];

    var projectEffects = getAllUniqueEffectsInProject_WithNone(); 
    if (projectEffects.length === 0) {
        alert("No effects in the project! The list is empty.");
        return;
    }

    var nameAndPrefixPanel = dialog.add("panel", undefined, "Name and Prefix");
    nameAndPrefixPanel.orientation = "column";
    nameAndPrefixPanel.alignChildren = ["fill", "top"];

    var groupNameGroup = nameAndPrefixPanel.add("group");
    groupNameGroup.add("statictext", undefined, "Group Name:");
    var groupNameInput = groupNameGroup.add("edittext", undefined, "");
    groupNameInput.characters = 15;

    var prefixGroup = nameAndPrefixPanel.add("group");
    prefixGroup.add("statictext", undefined, "Prefix:");
    var prefixInput = prefixGroup.add("edittext", undefined, "");
    prefixInput.characters = 5;

    var autoPrefixGroup = nameAndPrefixPanel.add("group");
    autoPrefixGroup.orientation = "row";
    autoPrefixGroup.alignChildren = ["left", "center"];
    autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
    var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
    autoPrefixCheckbox.value = true;
    prefixInput.enabled = !autoPrefixCheckbox.value;

    autoPrefixCheckbox.onClick = function() {
        prefixInput.enabled = !autoPrefixCheckbox.value;
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                alert("Auto-prefix disabled: non-English characters.");
            }
        }
    };

    groupNameInput.onChanging = function() {
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                prefixInput.text = "";
            }
        }
    };

    var effectSelectPanel = dialog.add("panel", undefined, "Select an Effect from Project (optional)");
    effectSelectPanel.orientation = "column";
    effectSelectPanel.alignChildren = ["fill", "top"];
    effectSelectPanel.margins = [10, 15, 10, 10];

    var ddGroup = effectSelectPanel.add("group");
    ddGroup.add("statictext", undefined, "Effect Name:");
    var effectDropdown = ddGroup.add("dropdownlist", undefined, projectEffects);
    effectDropdown.selection = 0; 
    effectDropdown.preferredSize.width  = 120;

    effectDropdown.onChange = function() {
        var chosenEffect = effectDropdown.selection ? effectDropdown.selection.text : "";
        if (chosenEffect && chosenEffect !== "None") {
            if (groupNameInput.text === "") {
                groupNameInput.text = chosenEffect;
            } 
        }
    };

    var buttonsGroup = dialog.add("group");
    buttonsGroup.alignment = "center";
    var okButton = buttonsGroup.add("button", undefined, "OK");
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel");

    okButton.onClick = function() {
        var groupName   = groupNameInput.text;
        var prefix      = prefixInput.text;
        var chosenEffect = effectDropdown.selection ? effectDropdown.selection.text : "";

        if (!groupName) {
            alert("Please enter a group name.");
            return;
        }
        if (!prefix) {
            if (autoPrefixCheckbox.value) {
                prefix = generateUniquePrefix(groupName);
                prefixInput.text = prefix;
            } else {
                alert("Please enter a prefix.");
                return;
            }
        }

        var finalEffectName = (chosenEffect === "None") ? "" : chosenEffect;
        createEffectGroupUI(groupName, prefix, finalEffectName);

        if (finalEffectName !== "") {
            addAllEffectsOfThisTypeToGroup(prefix, finalEffectName);
        }
        dialog.close();
    };
    

    cancelButton.onClick = function() {
        dialog.close();
    };

    dialog.center();
    dialog.show();
    
};

function getAllUniqueEffectsInProject_WithNone() {
    var effectNamesSet = {};
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                var baseName = eff.name.replace(/^\[[^\]]+\]\s*/, "");
                effectNamesSet[baseName] = true;
            }
        }
    }
    var resultArray = [];
    for (var nm in effectNamesSet) {
        if (effectNamesSet.hasOwnProperty(nm)) {
            resultArray.push(nm);
        }
    }
    resultArray.sort();
    resultArray.unshift("None");
    return resultArray;
}

function addAllEffectsOfThisTypeToGroup(prefix, effectName) {
    app.beginUndoGroup("Add All Effects of " + effectName + " -> " + prefix);
    var comps = getAllCompositions();
    var countAdded = 0;
    var prefixRegex = /^\[[^\]]+\]\s*/;

    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;

            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                var baseName = eff.name.replace(prefixRegex, "");
                if (baseName === effectName) {
                    if (prefixRegex.test(eff.name)) {
                        // Уже какой-то [префикс], пропускаем
                        continue;
                    }
                    eff.name = "[" + prefix + "] " + baseName;
                    countAdded++;
                }
            }
        }
    }
    app.endUndoGroup();
    $.writeln("Added prefix [" + prefix + "] to " + countAdded + " \"" + effectName + "\" effects.");
}


//
// ================== SAVE / LOAD PRESETS ==================
//

save_my_presets_button.onClick = function() {
    saveData();
};

load_my_presets_button.onClick = function() {
    loadData();
};

function saveData() {
    var saveWindow = new Window("dialog", "Save Presets and Settings Project");
    saveWindow.orientation = "column";
    saveWindow.alignChildren = ["fill", "top"];
    saveWindow.spacing = 10;
    saveWindow.margins = 15;
    saveWindow.helpTip = "Save the current Layer/Effect groups to a .pgm file";

    var pathGroup = saveWindow.add("group");
    pathGroup.orientation = "row";
    pathGroup.add("statictext", undefined, "Save path:");
    var pathEdit = pathGroup.add("edittext", undefined, "");
    pathEdit.size = [300, 25];
    var browseButton = pathGroup.add("button", undefined, "Browse");
    browseButton.onClick = function() {
        var folder = Folder.selectDialog("Please select a folder for saving");
        if (folder) {
            pathEdit.text = folder.fsName;
        }
    };

    var fileGroup = saveWindow.add("group");
    fileGroup.orientation = "row";
    fileGroup.add("statictext", undefined, "Preset Name:");
    var fileEdit = fileGroup.add("edittext", undefined, "My_Preset_Project.pgm");
    fileEdit.size = [285, 25];

    var buttonsGroup = saveWindow.add("group");
    buttonsGroup.orientation = "row";

    var exportButton = buttonsGroup.add("button", undefined, "Export", {name: "ok"});
    exportButton.onClick = function() {
        var savePath = pathEdit.text;
        var fileName = fileEdit.text;
        if (savePath === "" || fileName === "") {
            alert("Please specify the path and file name.");
            return;
        }

        var fullPath = savePath + "/" + fileName;
        var file = new File(fullPath);
        if (file.open("w")) {
            try {
                var dataLines = [];
                dataLines.push("LayerGroups:");
                for (var i = 0; i < layerGroups.length; i++) {
                    var lg = layerGroups[i];
                    dataLines.push("GroupType: LayerGroup");
                    dataLines.push("Name: " + lg.name);
                    dataLines.push("Prefix: " + lg.prefix);
                    dataLines.push("LabelColorIndex: " + lg.labelColorIndex);
                    dataLines.push("DisableLabelColor: " + lg.disableLabelColor);
                    dataLines.push("");
                }

                dataLines.push("EffectGroups:");
                for (var j = 0; j < effectGroups.length; j++) {
                    var eg = effectGroups[j];
                    dataLines.push("GroupType: EffectGroup");
                    dataLines.push("Name: " + eg.name);
                    dataLines.push("Prefix: " + eg.prefix);
                    dataLines.push("");
                }

                var data = dataLines.join("\n");
                file.write(data);
                file.close();
                alert("Preset successfully saved.");
                presetFilePath = fullPath; // Запоминаем путь к файлу
                autoSaveEnabled = true;    // Включаем авто-сохранение
                saveWindow.close();

            } catch (e) {
                alert("Error saving the preset: " + e.toString());
            }
        } else {
            alert("Failed to save the Preset.");
        }
    };

    var cancelButton = buttonsGroup.add("button", undefined, "Cancel", {name: "cancel"});
    cancelButton.onClick = function() {
        saveWindow.close();
    };

    saveWindow.center();
    saveWindow.show();
}

function loadData() {
    // Создаём диалог импорта
    var importWindow = new Window("dialog", "Load Preset and Settings Project");
    importWindow.orientation = "column";
    importWindow.alignChildren = ["fill", "top"];
    importWindow.spacing = 10;
    importWindow.margins = 15;

    // Группа для выбора .pgm файла
    var fileGroup = importWindow.add("group");
    fileGroup.orientation = "row";
    fileGroup.alignChildren = ["left", "center"];
    fileGroup.add("statictext", undefined, "Preset to import:");
    var fileEdit = fileGroup.add("edittext", undefined, "");
    fileEdit.size = [300, 25];
    fileEdit.helpTip = "Select the .pgm file with previously saved settings";
    
    var browseButton = fileGroup.add("button", undefined, "Browse");
    browseButton.helpTip = "Click to find .pgm file";

    browseButton.onClick = function() {
        var file = File.openDialog("Please select a file to import", "*.pgm");
        if (file) {
            fileEdit.text = file.fsName;
        }
    };

    // Группа кнопок (Import/Cancel)
    var buttonsGroup = importWindow.add("group");
    buttonsGroup.orientation = "row";
    buttonsGroup.alignChildren = ["fill", "center"];

    // Кнопка Import
    var importButton = buttonsGroup.add("button", undefined, "Import", {name: "ok"});
    importButton.helpTip = "Load the selected .pgm preset";

    importButton.onClick = function() {
        var filePath = fileEdit.text;

        if (filePath === "") {
            alert("Please select a file to import.");
            return;
        }

        var file = new File(filePath);
        if (file.exists && file.open("r")) {
            try {
                var content = file.read();
                file.close();

                // Разделяем содержимое файла по строкам
                var lines = content.split(/\r\n|\n|\r/);
                var currentSection = "";
                var currentGroup = {};

                // Начинаем группу Undo для очистки и импорта
                app.beginUndoGroup("Import Preset and Reset Groups");

                // Сохраняем копии текущих групп, чтобы безопасно очистить
                var layerGroupsCopy = layerGroups.slice();
                var effectGroupsCopy = effectGroups.slice();

                //--------------------------------------------------------
                // (1) Полная очистка существующих групп слоёв
                //--------------------------------------------------------
                for (var i = layerGroupsCopy.length - 1; i >= 0; i--) {
                    var lg = layerGroupsCopy[i];

                    // Сброс префиксов слоёв
                    var comps = getAllCompositions();
                    for (var c = 0; c < comps.length; c++) {
                        var comp = comps[c];
                        for (var l = comp.numLayers; l >= 1; l--) {
                            var layer = comp.layer(l);
                            if (layer.name.indexOf("[" + lg.prefix + "]") === 0) {
                                var originalName = layer.name.replace("[" + lg.prefix + "] ", "");
                                layer.name = originalName;
                            }
                        }
                    }

                    // Удаление UI панели группы слоёв
                    if (lg.panel && lg.panel.parent === tab_layers) {
                        try {
                            tab_layers.remove(lg.panel);
                        } catch (removeError) {
                            alert("Failed to remove layer group panel for '" + lg.name + "': " + removeError.toString());
                        }
                    }
                    // Удаляем из массива layerGroups позже (ниже), а пока просто удалили панели
                }
                // Полностью обнуляем массив
                layerGroups = [];

                //--------------------------------------------------------
                // (2) Полная очистка существующих групп эффектов
                //--------------------------------------------------------
                for (var k = effectGroupsCopy.length - 1; k >= 0; k--) {
                    var eg = effectGroupsCopy[k];

                    // Сброс префиксов эффектов
                    var comps = getAllCompositions();
                    for (var c = 0; c < comps.length; c++) {
                        var comp = comps[c];
                        for (var l = 1; l <= comp.numLayers; l++) {
                            var layer = comp.layer(l);
                            if (layer.property("Effects")) {
                                for (var e = layer.property("Effects").numProperties; e >= 1; e--) {
                                    var effect = layer.property("Effects").property(e);
                                    if (effect.name.indexOf("[" + eg.prefix + "]") === 0) {
                                        var originalName = effect.name.replace("[" + eg.prefix + "] ", "");
                                        effect.name = originalName;
                                    }
                                }
                            }
                        }
                    }

                    // Удаление UI панели группы эффектов
                    if (eg.panel && eg.panel.parent === tab_effects) {
                        try {
                            tab_effects.remove(eg.panel);
                        } catch (removeError) {
                            alert("Failed to remove effect group panel for '" + eg.name + "': " + removeError.toString());
                        }
                    }
                }
                // Обнуляем массив
                effectGroups = [];

                // Обновляем интерфейс после удаления групп
                palette.layout.layout(true);
                palette.layout.resize();

                //--------------------------------------------------------
                // (3) Разбор файла и создание новых групп
                //--------------------------------------------------------
                for (var i = 0; i < lines.length; i++) {
                    var line = trim(lines[i]);
                    if (line === "LayerGroups:") {
                        currentSection = "LayerGroups";
                        continue;
                    } else if (line === "EffectGroups:") {
                        currentSection = "EffectGroups";
                        continue;
                    }

                    // --- (A) Если читаем секцию LayerGroups ---
                    if (currentSection === "LayerGroups") {
                        if (line.indexOf("GroupType:") === 0) {
                            currentGroup = {};
                            currentGroup.type = trim(line.split(":")[1]);
                        } else if (line.indexOf("Name:") === 0) {
                            currentGroup.name = trim(line.split(":")[1]);
                        } else if (line.indexOf("Prefix:") === 0) {
                            currentGroup.prefix = trim(line.split(":")[1]);
                        } else if (line.indexOf("LabelColorIndex:") === 0) {
                            currentGroup.labelColorIndex = parseInt(trim(line.split(":")[1]), 10);
                        } else if (line.indexOf("DisableLabelColor:") === 0) {
                            currentGroup.disableLabelColor = (trim(line.split(":")[1]).toLowerCase() === "true");
                        }

                        // Если собраны все поля для LayerGroup
                        if (
                            currentGroup.name && 
                            currentGroup.prefix && 
                            typeof currentGroup.labelColorIndex !== 'undefined' && 
                            typeof currentGroup.disableLabelColor !== 'undefined' && 
                            currentGroup.type === "LayerGroup"
                        ) {
                            // Проверяем уникальность префикса сразу в layerGroups и effectGroups
                            if (isPrefixUsedAcrossAll(currentGroup.prefix)) {
                                // Генерируем новый уникальный префикс
                                currentGroup.prefix = generateUniquePrefix(currentGroup.name);
                                alert(
                                    "Prefix for group '" + currentGroup.name + 
                                    "' was already in use. A new unique prefix '" + 
                                    currentGroup.prefix + "' has been generated."
                                );
                            }

                            // Создаём группу
                            createLayerGroupUI(
                                currentGroup.name,
                                currentGroup.prefix,
                                currentGroup.labelColorIndex,
                                currentGroup.disableLabelColor,
                                false, // guideCheckboxValue
                                false  // lockCheckboxValue
                            );
                            // Сброс объекта
                            currentGroup = {};
                        }
                    }
                    // --- (B) Если читаем секцию EffectGroups ---
                    else if (currentSection === "EffectGroups") {
                        if (line.indexOf("GroupType:") === 0) {
                            currentGroup = {};
                            currentGroup.type = trim(line.split(":")[1]);
                        } else if (line.indexOf("Name:") === 0) {
                            currentGroup.name = trim(line.split(":")[1]);
                        } else if (line.indexOf("Prefix:") === 0) {
                            currentGroup.prefix = trim(line.split(":")[1]);
                        }

                        // Если собраны все поля для EffectGroup
                        if (
                            currentGroup.name && 
                            currentGroup.prefix && 
                            currentGroup.type === "EffectGroup"
                        ) {
                            // Проверяем уникальность префикса сразу в layerGroups и effectGroups
                            if (isPrefixUsedAcrossAll(currentGroup.prefix)) {
                                currentGroup.prefix = generateUniquePrefix(currentGroup.name);
                                alert(
                                    "Prefix for effect group '" + currentGroup.name + 
                                    "' was already in use. A new unique prefix '" + 
                                    currentGroup.prefix + "' has been generated."
                                );
                            }

                            // Создаём группу
                            createEffectGroupUI(
                                currentGroup.name,
                                currentGroup.prefix
                            );
                            currentGroup = {};
                        }
                    }
                }

                // После импорта заново перерисовываем окно
                palette.layout.layout(true);
                palette.layout.resize();

                alert("Preset successfully loaded and all existing groups have been cleared.");
                app.endUndoGroup();
                importWindow.close();

            } catch (e) {
                alert("Error reading the preset: " + e.toString());
                app.endUndoGroup();
            }
        } else {
            alert("The file does not exist or cannot be opened.");
        }
    };

    // Кнопка Cancel
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel", {name: "cancel"});
    cancelButton.helpTip = "Cancel the upload and close the window";
    cancelButton.onClick = function() {
        importWindow.close();
    };

    importWindow.center();
    importWindow.show();
}

/**
 * Вспомогательная функция trim: убирает пробелы слева и справа строки
 */
function trim(str) {
    return str.replace(/^\s+|\s+$/g, '');
}

/**
 * ВАЖНО: Исправленная функция проверки занятости префикса:
 * Теперь учитывает и массив layerGroups, и массив effectGroups,
 * чтобы не допускать конфликтов.
 */
function isPrefixUsedAcrossAll(prefix) {
    // Сначала проверяем в layerGroups
    for (var i = 0; i < layerGroups.length; i++) {
        if (layerGroups[i].prefix === prefix) {
            return true;
        }
    }
    // Затем в effectGroups
    for (var j = 0; j < effectGroups.length; j++) {
        if (effectGroups[j].prefix === prefix) {
            return true;
        }
    }
    return false;
}