var scriptVersion = "3.8.7";

var soloAnimStates = soloAnimStates || {};
var soloShapesStates = {};
var soloTextStates = {};
var soloNullStates = {};
var soloTrackMatteStates = {};
var soloAdjustStates = {};
var soloMaskStates = {};

var autoSaveEnabled = false;
var presetFilePath = "";
var modes        = ["view", "tools", "mode"]; 
var currentIcon  = 0;  // 0=view, 1=tools, 2=mode
var layerGroups  = [];
var EffectGroups = [];
var currentMode = modes[0]


var switch_tools_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%5B%00%00%00%20%08%06%00%00%00%7D%C3%93%04%C2%9B%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%055IDATx%01%C3%AD%C2%99%3Bl%1CU%14%C2%86%C3%8F%C2%9Du%C3%BC%C2%B6%C2%B0%0B%C3%AC%C3%98%C3%95F%20%14%C3%89%0F%C3%AC%08%01%5Dv%0B%04%14(%0E%C2%A2%C2%A1s%1AD*%12%C3%B1%C2%90%C3%92%60%C2%BB%C3%A3e%25(U*%C2%9C%12%1AoDc%C2%A0%C3%88%C3%92%C2%A5%40%C3%8A%C3%A2%C2%87%C3%A4.%1B!%C2%A1%C3%85%C2%95%0D~%C3%9B%C2%BB%C3%83%C3%BF%C2%AFgV%C3%AB%C3%B5%C3%8C%C2%BDwf%1D!%C2%A1%C3%B9%C2%A4%C3%91x%C3%AF%C3%9C%C2%B9%C3%A7%C2%9C%C3%BF%C2%9E9s%C3%A7Z%24!!!!!!!%C3%A1%C2%BFDE%C3%A9%3C%0E*%C2%95%C3%8A%15%C3%97u%C3%87%C2%95R%C3%A3%5E%C3%B3%06~%17q~%C2%90J%C2%A5%C3%B2%C2%85B%C2%A1(g%C3%88%C3%A4%C3%B8%C3%AD%5E%C3%87%C2%A9L%C2%89%C2%B8%C2%97%5D%C2%B7f%13%C2%B8E%C3%B8%C3%B0%C2%A0Rqr%C2%B9%C3%82%C3%8D%C2%A2%C2%9C!%08%C2%B3%17qN!%C2%AE%C3%8Buq%0A%C3%A3%C3%84%C3%AF_%1D%C3%87%C2%99%C2%8F%13%C2%A7%C2%95%C3%980%C2%9E.%C2%97%C3%8B%C2%B7%C3%B1%C3%A7%C2%A4q%40%C2%A5f%C2%96%C2%96%C2%96f%C2%A5I%3C%C2%91%C2%A7%11%C3%A0%0DS_%C3%98%C2%9C%C2%87%C3%A8%C2%B3%C3%8D%C2%8A%C3%AE%C2%89%C3%BC%C2%91g%C2%B3%C3%97%C3%90%7D%1E%C3%895%1BEt%C2%A3%C3%98%C3%8Cf%08%C3%BD%C3%90%C3%82x%3DE8%C2%92%C2%8D%C2%9B%C3%A5%10%3A%C2%ADT%056%C3%9D%C2%B4%C3%BD%5D%C2%AA%C3%A8%C2%BAN6%C2%AE%C3%A0L%C2%A8%C2%A3%C2%A3%C2%A3%C2%85%C3%BAL%C2%B6%006%C3%9Dk%2B%2B%2By%C2%9B%C3%8E%C3%8A%C3%A0%40%1C%C2%A1k%C2%8E%C3%84%11%3C%C2%9E%C3%905P%C3%92R%13Q%05%C3%B7%C2%9E%5C%C3%86%C2%99%C2%96%18%40%C3%B0%C2%AC%C2%8D%C3%A0%C2%8E%C3%A8%1DX%C2%90xB%13%C3%9E%C3%BF%C2%9DD%C2%A4%09%C2%A1I%2F%C3%AFg%09%C2%8Ar%13%C3%BC%C2%9C%C2%96%C2%98B%13%3C%0D%0B%2CA%C2%A6~%C3%8E%C2%B3r%C3%80%233%3A%3A%3Ae%C3%9By%C3%B2%C3%92%C3%9C%C2%8D%26%C2%84%C3%B6p%C3%93%C2%8Esd%C2%AC%C3%B3%3E%C2%9E%7FS%C3%92%1C%C2%BD%C3%9E%3BMK%60%19%C3%B1%C2%B2%C3%BAIc%7BKK%C2%8B%C2%B4%C2%B7%C2%B7%C3%8B%C3%A1%C3%A1%C2%A1%C3%AC%C3%AF%C3%AF%C3%97%C3%9A%C2%BB%C2%BB%C2%BB%C2%AB%C3%A7%C2%AD%C2%AD%C2%AD%C2%A0%C3%A1%C3%B2%C3%8B%C3%8B%C3%8BY%C2%B1%C3%A0%C3%AA%C3%84%C3%9C%C2%93%20%C2%B1_%C3%8B%C2%BE(%C3%A9%C2%97%C2%9E%3F%C3%95%7F%C3%BD%C3%8F%C2%BF%C3%A5%C3%A1%C2%8F%C2%ABAC%C2%B1%C2%9C%5C%409%C3%99%10%03ccc%C2%8F%C2%B9%C2%BA%C2%AAokkk%C2%93s%C3%A7%C3%8E%09%5E%C2%96%C2%B2%C2%B3%C2%B3Skomm%C2%AD%1E%C2%8D%C3%AD%3E(%C2%9B%7D(%C2%9B%C2%A16%5B%C2%82%1A!t%26%C2%A4%5D%C2%BA%C2%BA%C2%BAX%C2%A3d%7D%7D%C3%BDx%00L%00%C3%9B%C3%B0r%09%13%3B%C3%83%C3%893%C3%95%C3%AE%C3%B7%5E%C3%B9%3AS.%07g%C3%B5%C2%AB%C2%99%17%24%C3%BB%C3%8E%C3%88%C2%A9%C3%B6%C2%95%C3%9F%C3%BE%08%13%1B%C2%8F%C3%B4%11%05%C3%8C%C2%8B%06%2F%C2%A9N%C2%BD%10%C2%99P%3C%C3%88%C3%9E%C3%9E%5EU%5C%C3%92%C3%93%C3%93S%C2%8D%C2%97%3A%04%C2%89%C3%8D%C3%A5%22Nw%C3%82%C3%AC%C2%85%C2%95%C2%91%2BA%C2%8D%14%C3%B9%C3%A0%C3%A0%C2%805%C2%AA%3A%C3%83%C2%BEcdwwW%C3%82%08%C2%9B%C2%BC%C2%93%C2%8EJh%C2%9F%C2%BB%C3%93%3F%C3%89%C2%BB%C2%97%C3%A6%C3%A4%C3%AE%C3%8C%C2%A2%C3%B7%7B%C2%B1%C3%BA%C3%BB%C3%B3%0F~%08%1DO9%C3%8A%C2%B8L%0D%12%C2%BA%C2%91%C3%8E%C3%8E%C3%8E%C3%AA%C2%99%22%C3%B3%C3%90%01%7D%5E%C3%96%5D%0F%13%3B%C2%B4%C3%98%C3%BB%C3%A5%C2%83%C2%8FZ%C3%BD%C2%B9%C2%BE%C2%AC4%C2%82%C3%89I%C2%8B%01%7C%C2%B0%18%C3%BBD%01%C3%B5%C3%B19c%1F%C3%832%C2%8F%C3%89%C3%A5%C2%8B%C3%8D3%7F%C3%B3%C3%90%C2%90%C3%96%5Dt%24%22%C3%8C%60%1A%C3%AC%C3%A8%C3%A8%60%C2%8D%C2%AA%C3%8E6K%08%1F%C2%AD%C3%BF%1B%2C%15%7C%C2%8A%19%2B%0F%26%C2%94_R%C3%A2%10%26vh%C2%91%C2%A7%C3%90%7CA%C3%92%09%C3%96j%C2%A2%2B!%C2%A6%C3%B1j(%C2%8B%3E%11%40%C3%BEmZt%C3%93%C3%9Ad%C3%89d%C2%BC%C2%AC%C3%95%C3%84%22N-%C2%81bC%C3%88%C2%A7%C2%BA%C2%9B%C3%B8%C3%92%20%C2%9Cm%C2%A2%2B!%04%C3%99P%10%03%C2%AE(c%C2%9F(%C2%A8%C2%8Ay%3C%1B%C2%BF%C3%BC%C3%AC%C3%A6%C2%93K%C3%B1%C2%B56%C2%95%C3%BA%5Dw%C3%9D%09q%22%C2%A7%C2%BB%C2%89b%C3%BB%C2%B5%C3%8B%C2%A2%C2%84lX%7D%C3%8EbCI%C3%8E%C2%90%C2%8A8yS%1F%C2%94%40%C2%8A%C2%AD%C3%8D%C3%AE%C3%AD%C3%AD%C3%AD%13g%C2%ADM%C2%83n%C2%A1%C2%9F%C3%ABX%C3%AC%C3%B3%C3%B35%13v%C2%9D%C3%B5%C2%9APtC%1D%C2%9B%C3%87%3A%C3%BB%C2%9AXpu%C3%A2%1B%C2%AD%C3%8D%C2%AE%C2%9E%C2%B6%C3%AA%C2%B1%C3%BD%C3%8F~%C3%B5%C3%90%C2%90_x%C3%BC%C2%89%C3%95%C3%9A%1E%C3%AB%C3%AC%19%C3%840%5D%C3%9F%C2%86%5D%C2%BDj6%07%C3%85%C3%A6%C3%87%C3%9D%C2%98%60%C3%A8_%C3%84%06%C3%9C%05%C2%9D%C2%AD%C3%90%17%24%0Ciw%C3%AEh%C2%8C%C2%87Nh8%C2%B0%C3%81%C2%9D1%C2%B1%C3%84u%2B7u%C3%97)0%3Fd%0CBc%C2%9C%C2%94%C3%95%C3%A4%12%08%C3%8Bu%C3%B1%C2%89%C3%ACfLa%C2%B1%C3%B9q%C2%9F%C2%B6%C3%A9%1A%C3%A3L%C2%85%5D%C3%80GK%C2%B1%C2%BF%C2%BF%C2%BF%0F%C2%82%C2%BD.1%C2%81%C2%B3%C2%B7%C2%90%C3%95%C2%8B%C2%B6%C3%BD%C3%97J%C2%BF%C2%94.%C2%9E%7Fs%13I%C3%B5%C2%96%C3%84%C2%84A%C3%A7%0A%1F%5B%C2%97%C2%A4R%C2%A9%C2%B4700%C3%B0%C2%97Xl%1Fkl~%C2%8BR%C3%B9%C2%85%C2%A9_Jw%11%C2%82%2F%C3%82%11%3E%1AQ%C2%B6%1D%7D%07fWWW%C2%8D%0E4%C2%B2V%C3%BA%C3%B9%C3%91%C3%85%C3%B3o%60%C2%8EUF%22r%2C%C3%B4%C2%A73%12%11%C3%84Y%40b%C3%85%C2%B2%09%C3%AEC%C3%A8%0Fm%3A%C2%A6L%1D%C3%A0H.%C2%8A%23%2C%1D%C3%88%C3%A8%C3%AB%10%C3%BA%C2%8E%C3%84%04%19%C2%9E%C3%B72%C2%9COU%C2%BB%C3%B9%0E%C3%85%C3%BF%16%C3%9D%C2%82%C3%90%C2%91'%C3%97%07q%C3%A6%C2%91XO%C2%BD%0F%1D%C2%AB%5DC%2F%C2%A3%C2%AD%C2%84%26F%C2%B1%7DG%C2%86%C2%86%C2%86%C3%AEc%C3%B0%3E%C3%AFk%C3%B0%C2%94%00%14%19%C3%97%C2%BFD%C2%8D~%1F%C2%A5%C3%A3%C2%914%C3%89q%C2%86%C2%BF%C3%BD%C2%BDRn%1FFg%C3%B0%01%02%C2%A8%0D%C2%BC%C3%A2%C3%AF%C2%B1F%C2%A3tX%C2%97%C2%AB0%C2%98%C3%A1%C2%83%C2%83%C2%83%C3%B8W%5Be%13%C2%B5%3C%1Dd%C3%93%C2%8B%C3%B3%1EV2%C3%97%C3%B1B%C2%9C%C2%97%08D%C3%BA%1F%C2%A4%C3%8F%C3%88%C3%88H%06Fk%02%C3%A0%23'%C2%BF%C2%B6%C2%B6V%C2%94g%C3%88%C3%A4%C3%B8W%C3%888%0A%C2%A0%3C%01%C3%8A%C2%85%5C%C3%A1%C2%B33%5D%C2%9B72%3C%3C%3C%5E%2F%3A%C3%97%C3%A5%C3%98%0D%2C%C3%AAv%C3%B6%12%12%12%12%12%12%12%22%C3%B2%2FCG%C2%AF%04%C3%B7j%2F%C2%AD%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var switch_mode_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%5B%00%00%00!%08%06%00%00%00%C2%B6%C2%8F%C3%97%3E%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%04TIDATx%01%C3%AD%C2%99%C3%81R%C3%93%40%18%C3%87%C2%BF%0D%C2%95%C3%B4%C3%96v%C2%86%C2%83%C3%87%C3%B2%00%60%C3%B1%09%C2%8AG%2F%C2%A2%2F%20%3C%C2%81zC%2Fm%0F%C2%8E%5E%1C%C3%8B%13X_%40%C3%BB%06%C3%A4%C2%A4G%0B%0C%C2%A37%C3%A2%C3%89%19%C2%86%C2%A1%05%06(%C3%906%C3%BE%C2%BFm%C3%A3%60Iv7)%12%C3%86%C3%89o%26%C2%B3%C3%89f%C2%93%7F%C3%B7%C2%9F%2F_v%C2%B7D))))))))I%22(%22%C2%A5R)%C2%8F%C2%A2%3C%18%0C%C2%8A(y%C2%BFcYV%0B8%C3%B4%C2%8FHB%C2%93%C2%AA%C3%AD%3Cu%C2%A9%04%C2%87J%C3%A4ASP%07%C2%B5.%C3%B6%5B%C3%B4%C2%B6%C3%A0R%0C%C2%8C%C3%8DF%C2%87%C3%8B%C3%BD~%C2%BF%C2%82%C3%9D%C2%B2%C2%A2Ycjj%C2%AA%06%13%5C%C2%BA%06%0C4%C3%99%C2%80%C3%A6uj%C3%92j%C2%BBH%C3%82zF%C3%A4-K%C2%93%C2%83qp%C2%BE%06%C3%93%1D%C2%8A%C2%80%C3%96l%C2%8E*DT%C3%85%C3%B3%C2%BC%C3%A7d%C2%88%10%C2%A2%C2%BA%C2%B9%C2%B9Y%C2%A3%C2%98%24%C2%A1)yu%C3%B0%C2%8C%3C%C2%AF%C2%AA0y%5C%C2%B4N%C3%B6%C2%A0F%C3%95B%C3%87%C2%A8%C2%B9%C3%AA%24w%C2%BA%C3%97%C3%AB%C2%AD%C2%A3%23%25%C2%8AH%C3%9C%C3%8E'%C2%A1)Y%3D%C3%80%1B%04%C2%A3%23%C2%8B%22%C2%AD%C3%98%C3%9E%C2%A2%C2%89%C3%A1%C2%96%C3%AA%24%5E%C3%A1%C3%B7q%3A%C3%8D%20*%C2%AB%C3%B3%C3%B3%C3%B3%C3%86%C2%91%C2%99%C2%A4fl%C2%A3%C2%A5(rzW%7C6i%1A%1A%C3%99sss%C3%8B(%3E%C3%90dt%C2%90O%17L%C3%B3i%12%C2%9A2G%C2%93%C3%98%C2%A1I%11%C3%9E%0BzS%C2%A8%C2%AB%C2%9A%C2%A8%22%C2%BBr%C2%A5%C2%B1e%11%3A%22%C3%8B%C3%8Bp%1Do%01%C3%A4G%1F8S%02%C3%9B%C3%BA%C2%BA%C3%A3%C3%9B%C3%B8%C3%AF%C3%B05%C2%91%C3%AF%23D%C2%B7uE3%C2%9F%15T%C3%8C%0BY%06%C3%95%C3%B3v%15%C2%A1%C3%ADg%60d%C2%8FF%01%C3%AB%C3%A3%C3%B5%C3%93%C3%93%C3%93T(%14%C3%B8U%C2%A7%C2%BD%C2%BD%3DY%C3%87%C2%9D%C2%9E%C2%99%C2%99%C3%A1W%C2%98vww%C2%83n%C3%87%C2%916%C2%8BHS%C3%A6%C2%B40M%26%C2%97%C3%8BQ6%C2%9B%C2%BDR%7FqqA%C3%BB%C3%BB%C3%BB%C2%B15%C2%87%C3%83%3B%C3%91%1E%C2%AFn%3C%C2%B6%C3%A9%C3%A9%C3%BD%0Cu%C2%BA%1E%15%5E%C2%9F%C3%BC%C2%A9%C3%BF%C3%B0%C3%84%C2%A6%C3%A5%C2%85%0C%C2%B9%1D%C2%8Ff%C3%9F%C2%9D%04%C3%9C%10%C2%B9%5B1B%09%0C%0DD%C3%86RP%C3%BD%C3%B9%C3%B9%C2%B94%C3%BAr%24%C3%B3%03%60%C3%8E%C3%8E%C3%8E(%04%C2%8E%C3%AE2i%08%C3%93dNOO%C3%A9%C3%B0%C3%B0%C2%90%C2%BA%C3%9D%C2%AE%3C%C3%A6%C2%92%C2%8F%C2%8F%C2%8F%C2%8FC5%C3%B1%C2%91%C3%95%C3%A7%7D%1EG%2B%C3%A0H.%C3%8F%0E%C3%BB%C3%89%C3%91%C3%8CFkXR%C2%9D%0C4%1BQz%2F%C3%AC%02%C2%BF%C3%83%C2%B6m%C3%BFU%C2%B2!a%C3%A0%C2%83W%24%0D*M~%C3%88%7C%7F.%2F%1F%2B%1E0%C2%A7%18%C2%BD%C3%99Bm6Gve%C3%B1%C2%8E%C3%9C%C3%B7M%C3%97PT%C2%9DT%C2%8EF%C2%82%C3%B0%3B%C3%AC%C2%9B%C3%8C%C2%91%C3%8D%C3%91%C3%AE%C3%97%C2%87%606n%C2%BD%5E%C3%B4%C2%9A%C2%9A%C3%B1t%C3%AB%C3%97%40%C2%9A%5C%C2%BA%2B%C2%A8%C3%B2%C3%A0%0E9%3B%7D%C2%A4%C2%90%C2%81%C3%A2%0A%C2%91S%C3%9D%2F%C2%96%C3%99l.%C2%9B%C3%8C%C2%86%23je%C3%AE%C3%BC%1FY%C3%BB%C3%9A%C2%93%C3%A5%C3%BB%C2%876%C3%92%C2%88E%1F%C2%BF%C3%B5h%12%02%C3%8D%C2%86%C2%81%3FU%17%C3%B9%C2%A9%C2%84%3F%5C%C2%8C*%C2%850H%11-%C3%92%C2%A0%C3%93%C2%8C%C2%8A%C2%89%26%C3%B1Z%C2%87%02N%23%1C%C3%8D%1C%C3%9D%C2%BC%C3%9F%C3%90%C2%9A%C3%AD%1D%C2%A8%C3%8E%C2%86%C3%A5lGu%C2%91%C2%9F28%C2%AA%0DR%08%7FLM%3An%C3%92%C3%86%18%23%C3%8D%2C5uMj%C3%AB%C3%83%C2%B7%C2%B6%C3%B9%C2%BDO%06(%C3%AF%17%C3%B8y%C3%85%0Fm%C3%B2L%C2%8EB%C3%B2%1E%C2%9B%7Btt%24%C3%87%C2%B9l%C2%B6%06%C3%87d%C2%82%C2%81%7B5Fc%C3%B2%C3%90%3C%C3%8A%C3%A9%C2%8AG%20%18i%C3%90uh%C3%8A)%C3%B6j%C3%87%C2%A1%C2%B1%C2%85%C2%AE%C3%A6%C2%8Fanv%C3%9B%039%C3%8C%5B%C3%B9t%26%23%C2%9CY%C3%BB%C2%A2L%C2%99%C2%8E%C3%AAd%C3%A8%0C%12%C3%93%C3%9E*%22%3C%C3%8A%C2%84%24%C2%8C%C2%95%C2%AD%C2%AD%C2%AD%C2%86I%C3%83%2441%C2%83%2C%C3%83%C2%86u%C2%9A%18%C3%91%C2%A0%C2%B7%C2%B9%15U%C2%8B%C3%90%0F%24%22%C2%AD%C2%8E4%C3%A1%C3%92d4%C2%8C%3B%C2%9D%C2%90%C3%A6p%12%C3%A2%7D%C2%A4%C3%89p1S%C3%90.%C2%80%C2%85%C2%9A%C3%8D%C2%B3%2Ft~%C2%91%C2%86k%C3%86%C2%91a%C3%93%C2%90%C2%8E%5ED%C2%B9%C2%865%C2%91J%1E%C3%9F%C2%A4%C2%A6%24K%C3%8F%C3%A5%C3%AA%5D%2CQ%C3%BE%C2%ADr%C3%A6%C3%A8%C3%AA%C2%9A*%C2%87~%C2%9C%C3%B7xQ'F%C2%B49xP%0B%C3%9A%C3%A9r%00%C3%9B%C3%9B%C3%9B%C2%AD%C2%9B%C3%96%C2%94%C2%B9%C2%9B%C2%97I597%00%17%0BP%C2%8B%C2%A6%C3%BF%C3%9C%18%C3%BDS%C2%83u%C2%8B%22%22%C2%AE%C2%8A%C3%9D%C2%A7%C3%8A%C2%9B%09%C3%81%C2%91Y%C2%83au%C2%9A%C2%90%244%25%C2%AB%C3%AD%C3%A5%C3%91%C2%A2R1%C2%B4%0DG%C2%B3%C3%A7%C2%AD%C3%A1%C2%8D%C2%A8%C2%9B%C3%BEq0%C2%BC%2C%02%23%03%C3%8A%C3%98%7D%C2%84-%C2%8F%C2%8E%C3%A6%C3%B1A%C3%AB%60%C3%9B%C3%80q3%C2%93%C3%89%C2%B4bE%C3%96-%C3%93%C2%94%C2%BCl%2Fa%C2%86Y%C2%86E%C3%B7%C3%A0R%1E%C3%BB%C3%90%C3%80%C3%9B%26%06%1BdS%23%C2%8A%C3%89))))))))%C2%B7%C2%83%C3%9F%07%3CJ%C3%93%C2%8AV%C2%BD%40%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var switch_view_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%5B%00%00%00!%08%06%00%00%00%C2%B6%C2%8F%C3%97%3E%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%05)IDATx%01%C3%AD%C2%991l%1BU%18%C3%87%C2%BF%C3%A7s%C3%A2%C3%98%0E%C2%89%C2%91Pp%C2%98%C2%9C%01%C2%A9BrhX%C3%88%C3%A80%C2%B0%C3%90%C2%B4%C3%8EF%C2%A78%C2%88%C3%85eH%C2%BA!%C2%96%3A%0B%C2%A2S%C3%92%C2%A5a%C2%A2%17%16%C3%98pJ%C3%8A%C2%80%40%C2%B8%12R%C2%8B%C2%84%C3%80%C3%84%19%C2%82%18%C3%A2.%C3%88%C2%89%C2%A2%C3%A0%C2%8A%C3%98q%12%C3%9B%C2%8F%C3%AF%C2%BB%C2%9C%23%C2%A7%C2%B9%7B%C3%AF%C3%9D%5DBU%C3%A9~%C2%92u%C2%BE%C2%BB%C3%AF%C3%9Ew%C3%AF%7F%C3%9F%C3%BB%C3%9Ew%C3%AF%00%7C%7C%7C%7C%7C%7C%7C%7C%C2%9E'%0C%1C%C2%92%C2%BE%C2%97%C2%895%1Bp%C2%B9%0D%C2%90%C2%A0%7D-%00U%C3%9E%C2%86%C3%AAjV%2F%C3%80%05r%19%C2%A1M%C3%97%C2%A1r%C2%B1X%2C%C3%80%05b%C3%A5%13%7F%C3%A8%C2%B6X%05%17(%C2%8B%7De)%C2%93b%C2%8C%C3%8FB%1BR%C2%9CA%C3%8C%C2%A2%C2%A12n%0A%1A%C2%B0%C3%B9%7CV%2F%C3%839%C2%80%7DM%C2%B4Z%C2%ADY%C3%BC%C2%9B%C3%81_%C3%8C%C3%82%C2%84%3A%C2%9D%C3%974m%1E%05(%C3%839%C2%80%3Ec%C3%ADv%7B%C2%96s%3Eg%C3%A3%C2%93%C3%90%C3%9D%C3%B8T%12%7B%C3%B2%C3%B3%C3%A9%05%C3%8EaN%C3%85%C3%B6Xt6%C3%BFmV%C3%97%C3%81%03%C2%A3%C2%A3%C2%A3%C3%94%C3%A1%1C%C3%98w%C3%B8%C2%B4_%C3%86rkkk%C3%B3%C3%A0%01%C3%B49%C2%8D%3E%17%2F%C3%8A%C2%A7T%C3%AC%C3%89%C2%BB%C3%93%C3%9F%60%24%C2%A7%C3%811%3C%C2%B7%C2%9A%C3%BD%C3%92U%C3%A7%C2%B1%C3%93%C2%B7L%C2%A1%C2%9D%C2%B2X*%C2%95n%C2%82%0B%C3%9C%C3%BAD%C3%81%C2%8B%C2%81%40%60B%25%C2%B5h%C2%A2%C2%93FD%1F%0Fa%17%C2%B0%C3%94%C3%AB%C3%AF%C2%8D%3D%C3%BD%C3%ABA%C3%B1%C2%B1%C2%93%C2%AB%3C%08M%C2%8C%C3%87%C3%A3q%C3%98%C3%9A%C3%9Az%C3%A8%C3%A4%22s%14%7D%06%C3%AE%C2%88%C3%A3%C2%B5%C3%B1%C3%AD%C3%AD%C3%AD%15%C2%99%C2%A1mdO.e2%1C%C3%B8%3D%C3%B0%02%C2%83j%C2%90%C2%B31%C3%95%1Cn%C3%A6%C3%A8M%C3%B0%08v~b%7D%7D%C2%BD%C2%A0bk%C3%BA%C3%BC%1D%14S%C2%87%C2%80)%1CUy%C2%91A%C3%80%C3%BE%14%C2%BF%05%5E%C3%A1%10k%C2%82Z%C2%AE'%C2%B0%C3%93%C3%9E%1E%C2%AE%09%0Em%C3%A5%7BG%C2%9Fd%C3%ABUhbAf%60%19%C3%99Ty%C2%A0R%3F%3D%7B%3C%C3%B9%C3%9A%25%C3%B8%C3%B4%C3%AA%C3%87P%C3%BA%7B%03%3E%C2%B9%7F%3C%C3%AA%C2%A2%C2%BD%11%C3%B8%C3%BA%C2%83%C2%BBP%3B%C2%AC%C3%83%C3%BB_%C3%9C%C2%B0%C3%B2P%0D%C2%86%C3%98H~F%17%C3%A64QT%0F%0E%0EB__%C3%9F%C2%99%C3%A3GGG%C2%B0%C2%BB%C2%BBk%C3%99%1EV%0B%23*%C3%95B2%C2%99%C3%BC%07%C2%9E%11%C2%BB%C3%A3%0FG%08%60z89%3E00%00%C3%A1p%C2%98%1E%10%C3%AC%C3%AC%C3%AC%C2%9CiK6%C2%A2%C3%AC%22%C3%9BrB%24%C2%91k%07uC%C3%B4W_z%C3%8586%3E%C3%B2%C2%96%C2%B1%7D%C2%BC%C3%B9%C2%9BuK%14%C3%9D%C2%8DS%C2%B5%C2%AA%25%C3%98%C2%81%C2%94%C3%9D%C2%B9F%C2%A3%01%C2%B5Z%0D%0E%0E%0E%C2%8C%7D%C3%9A%C3%92%C3%BE%C3%BE%C3%BE%C2%BEm%7BX%C2%BEI'u%7C%C3%80)%10D5%C2%8E%10%C3%A8%C3%AD%C3%AD%3D%C3%B9o%C3%B5%C3%80%C2%BB%C3%81%C2%89R%C3%A8%C3%93Zl%C3%86%C3%9F%C2%B4%C2%BB%60%C2%A5%C3%B4%C2%BD%C2%B1%7D%C3%9B%14%C2%B9%23%C3%B6%23%3B%C2%B1%C2%81%C2%9E%C2%B8%5Cl%C3%AC%C2%8C%C2%AD%0D%C2%89%C2%BB%C2%B7%C2%B7wJl%C3%9A%17%C2%89%C2%8DQf%C3%9B%C2%87%0E%C3%B8%40%C2%A4%C3%B7%15%C2%8DF%C2%8D-%09M%C2%82%C2%8B%40%C2%9F%09%C3%91%C3%B9%008d%1D%C2%A3%C2%9B%18O%1C%C2%8B%C2%9C%1C%C2%BEd%C2%A4%C2%90_%C3%8A%C3%B6b3%C2%A6%C2%94%13%C3%8F%23o%3AE%C3%A8%C2%93%C3%92%14E6F%C2%AC!z%C2%B3%C3%994R%C2%88%C2%80A%C3%91I%C3%87bS*%C3%99%C3%BEw%C3%87H%25%24x4%14%C2%B1O!%2F8%C2%94%C2%AA%08%C3%8A%C3%A18%07%40%C2%BD%5E%07%2FX%C2%8A%C3%8D8%7B%22%C2%BA%C3%A8%C2%87%3F%7F6%C2%B6s%C3%AF%7Chl%1FI%C3%84f%1C%C2%8A%20G%C3%85F%19%1C%C3%B2Od68%C3%AC%C3%8B%C2%92%C3%B3pxxx%C2%92%C2%B7%3BiL%C3%80S%C3%91I%C3%AB%C3%88%C2%96%C2%88%C3%93I%25T%C2%89P%C2%94%C2%8BR%08%C2%A11%C2%B9%C2%90%C2%98%3F%C3%8FUll%C2%AF%20%C2%B3%C3%81h%C2%95%C3%9At%C2%A2%C2%9B%26ilSf.%C2%AC%C2%B3-3~z!%13k%C2%85%C3%B8%26%17%C3%A4%C3%9A%C2%AB%C3%89w%C2%8D%14Bb%C3%BFhF%C2%BA%25%C3%B8%C3%A0Vo%2C%C2%8F%C2%81%02VeX7%C3%81%60%C3%90%C2%98%C2%A8(%C3%82(%C2%9F%C3%9A%C2%81Q%5D%C3%865%C2%8B%11P%C3%B3I%25n%C2%AA%C3%BBX(%14%C2%82%C2%9E%C2%9E%1Ec%02%C2%A6%1C%C3%9D%C3%9F%C3%9F%7F%C3%B2%3F%12%C2%89%186V)EVnZFv%C3%BE%C2%A6%5E%C3%A5%C2%8C%C3%9D%01%01%C3%B7%C2%B1*%C3%B9%C3%AA%C3%97%C2%BCXh0%3A.l%C3%87%C2%89-MPT%C2%85%C2%88%C2%84%260%02%C2%97A%11L%15g%C3%96o%3A%C3%95Ng2%C3%AC%C3%BEO%22%C3%9B%C3%A4n%5DV%C3%97%C3%9BN%C2%90%C3%81%06%2C%C2%9A%C3%8B%C2%A6%C3%AEa%C2%AC%C3%A0d%C3%B5%0F%C2%A31G%0B%3B%C3%A0%01%C2%8Aj%7C%C2%B1%C3%88%C2%A9%C3%9A%C2%9B%2F!%05%C3%B0%00%C3%B9%C2%A4%25W%C2%99%C2%9D%C2%AD%C3%98%14%C3%9DZ%C2%9BM%C3%A1%C3%A4%C3%A6v%C2%A1%C2%BC%1C%C3%A40%03%0E%C3%812k%C2%8An%1E%5C%40%C3%97%C3%91%0A%1C8%04%C2%85%C3%B2%C3%A2%C2%B3J%C3%B7%C2%AC%C3%B2%C2%B6*%2C%C3%BD%C3%B2%1F%C3%A9E%C2%8D%C2%B3%09%C3%87%11%C2%8E%13%22~D%C2%98p%C3%B3%11%C2%81n%C2%9A%04s%C3%9A%C3%B9%C2%8E%C3%90n%3E%22%C3%90%C3%B2%C2%A8K%C2%9FU%C3%93%C2%A7%C3%92h%C3%94d%06%1B%C3%9F%15%2Bo%5C%19%5B%C3%A1%C3%80%5E%06%10%C2%BF%09%1A%C2%A3%C2%80%C2%B1%C3%9B%C2%AB%C3%99%C3%A5%C3%AB%1B%0F%C3%9C%7D%3A%22*%C2%95Juxxx%19so%18%3B4.%C2%B2%C2%A5%0Ec%C3%9E%C2%BD%C2%8D%C3%919%C2%83%7D%C2%AE%C2%80%07%C2%9F%C2%B84%7Bghh%C2%88%C2%A1%C2%80%09%C2%90%C2%BFd%C3%91%C3%97%C2%9A%C3%AB%C3%A8s%03%14q%C3%B4%0D2%C2%BD%C2%94I%C2%B48%C2%A4y%00%C2%AE%C3%91%C3%8D%60%19j%C3%9CP%C2%80a%C3%8Ek%C3%83%1FZ%18t%C3%99%C2%82%C2%93S%C3%8C%05%C2%AA%14%C3%BE%C2%BD%C2%86%C3%82%26%C3%80%14%01%05.%C3%A2%C3%BEC%14Fw%C3%BBMP%C3%A03%C2%86%3E%C3%93%C3%BF%C2%A7O%1F%1F%1F%1F%1F%1F%1F%C2%9F%C2%8B%C3%A7%3FG%C2%89p%10%C2%86%1E%13%C2%A9%00%00%00%00IEND%C2%AEB%60%C2%82"; 

// LAYER_GROUP Color Label
var none_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8BIDATx%01%C3%A5%C2%91%C2%BB%0D%021%10D%C3%B7S%00%17%3A%C2%A4%C2%84%C3%85r%01W%02mP%05%C2%94B%09W%02%0DX2%1D%5C%C3%A8%C3%90)%C2%89%C3%8DX%02%01%C2%92E%03%C3%B7%C2%82%C2%95%C3%87%C2%A3%C3%9D%C3%A41%C2%BD%08!%C3%8C%C2%B5Vc%C3%A65%C3%86%C2%B8%C3%B4%3F%C3%AE%C3%83%7B%7Fn%C2%AD%5D%C3%A8%C3%83%C2%8A%7CP3%C3%9B%23%2C%C3%B4%C3%8B%24%22%0FQU%C2%A3%01%C3%984%C3%81%C2%98h%C3%8CN%C3%A8%0F%C2%9B)a%C3%A26*%60%C3%A7%C2%AE9%C3%A7%C3%A2%C2%9C%C3%83%C2%9B%C3%A7%C2%AF%C2%AE%5B9%C3%B1%3B%C3%81%C3%8E%11%26%0C%C2%97%0A%C3%A25%C2%A5T%C2%9E%C3%8C%C2%8B%2F%C2%BB%C2%834%C2%88%C2%8E%00%00%00%00IEND%C2%AEB%60%C2%82";
var red_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%95IDATx%01%C3%A5%C3%8C%C2%B1%09%02A%10%C2%85%C3%A1y3%C3%91%05%C3%A2U%20%C2%82%0D%C2%AC%05(%0B%1A%18%C2%AA%C2%A1%1DX%C2%85%C2%96b%C3%A4E%C3%825%20l%0Bv%C2%B0%25lz%2C%C2%BB%C2%A3%C2%A2%C2%A2%C3%82b%03~%C3%99%C3%8C%0F%0F%C3%B4%C3%94%C3%8C%C2%AD%C3%95%C2%9C%0CA%C3%BC%C3%A6%C3%AC%C3%9A%C3%BB%0F%C2%8F0%C3%9D%C2%A9%C3%AA%C2%9E%C3%9E%7C%C3%95%C2%93%C2%B14%0B%3B%C3%94%C2%94%5B%C3%BAV%C3%87%C2%8E%3A%C3%96x%C2%9B*%60%C2%A8ae%C2%AA%C2%A9%C2%AC%C3%8F%C3%B4%C3%83%C3%9FD%C2%8E%C3%A2JA%09%179y%1F%C3%96%C2%A3%01%40%C2%B0%1F%C3%8D%23%C3%89%16%C2%AF%C3%AB8%C2%9B%2C%150%C3%88%1A%C2%AA%2C%C2%87%C2%95s%C3%A1%0A9%0D%2F%C3%AE%C2%8A%C3%BA%2C-%00%00%00%00IEND%C2%AEB%60%C2%82";
var yellow_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%86IDATx%01%C3%A5%C2%91%C2%BB%0D%C3%82%40%10Dg%C3%AF%12%C2%AA%C2%B0%C3%8E%09%12%5D%C2%98N%C2%AE%04(%C2%81J%C3%98%12(%C2%81%12%C3%88%10%220%C2%88%06pn%C3%9Fz%C3%AC%C3%88%3F%C2%B9%01%3Fm%C2%B0%C2%AB%C2%9DIf%04%C2%A4%7C%C3%86%C3%A0%3D%C2%AE0%14%3C%3F%10%5C%C2%B2%C2%BD%C2%AAt%C3%8F%C3%AF%2B%C2%96%5C%02%06H%C3%82%C3%91%C3%BF%C3%9E%C2%B1%C2%A0%C3%A3%C2%84)%C2%8Ec6v%0C%08%0E%2Bl%C3%A6)%0D%C2%83%5E%C3%80%12*W%C3%AF%C3%B00%C3%8C%05b%C2%B8%C2%B9%3C%C3%97%7Fb%03%C2%AC%C3%A9%C3%9E%3B(d%C3%9E%C3%A7%C3%AC%C2%A0%C3%9A%02%C2%B5%C2%9D%26%5B%C3%84n%C3%8E%C3%A6%00%00%00%00IEND%C2%AEB%60%C2%82";
var aqua_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%92IDATx%01%C3%A5%C3%8C%C3%81%09%021%10%C2%85%C3%A17Y%C2%83zrK%C2%B0%C2%84%04%04%C3%99%C2%9B%25%C2%98%C2%8A%C3%94%0E%2C%C3%81%0E%C2%B2v%C3%A0%C3%89%20%C3%AB%C3%85%0ER%C3%82%5E%15%C2%B2O%17%14Q%C2%82%0D%C3%B8%1D%06f~%18%C3%81%C2%93o%C3%82%02%C2%89%06%C2%83%22%C2%BA%C3%99%C2%BC%C3%AEo%C3%92%C2%8F%7DsZ%C2%91%C3%9D%1Ao%C2%91zd%0B%1F%C3%82%14%C3%82%1A%C2%9FJ%C2%A4%C3%9BUA%3F%5E%C3%A5P%C2%8CB'e%C2%AE%C2%89%C2%92%C2%89%C3%82%0F%C3%BF%13%13%0E%C2%B9%40%C3%B0%C2%A2%5CUE%12%C2%9B%C2%AF%16%C2%A1e%2B%C2%AF%C3%8D%C2%9F%C2%8FK%241%20%5B%0C%C3%87%3Bgm%7B%07%C2%86%3A-5%C2%8E%C2%98%C2%BF%C2%90%00%00%00%00IEND%C2%AEB%60%C2%82";
var pink_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%93IDATx%01%C3%A5%C2%91%C2%B1%0D%C3%82%40%0CE%C2%BF%C2%9D%5CMF8F%C3%88%060%010%010%11b!%C2%AED%C2%8A%C2%90%C2%8E%01%40w%23%C2%A4EA61PD(b%C2%81%C2%BC%C3%86O%C3%BF%C2%95%26%7CI!V%40%C3%A7%01%C3%97%C3%8E%C2%97u%C2%B6%C2%8D%3F%C3%A1%C2%B2%15%C3%AD%C2%92(%C2%A2%C3%9D%7Bh%0E%C2%B6S%0Ag%2FZ%C3%84%C3%9E%2B%0CP%C3%85%C2%9E%C2%9F(%C3%BDoxC%C2%B2f%12%C3%B5%18%C2%81%C3%813%C3%86%1F%26%13%0B%C3%86u%2C(!%C2%93%C3%89%C3%AD%C3%94%C2%84%5E%16%C2%83%C3%962%C2%B9%C2%BA4%2B%C3%88mD%1E%3B%25%5E%C2%91%223%C3%A3h%3F%7D%01%C2%AAp2%C3%B7%7B%5E%C2%BF%C3%B9%00%00%00%00IEND%C2%AEB%60%C2%82";
var lavender_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8FIDATx%01%C3%A5%C2%911%0E%C2%82%40%10E%C3%A7%C2%AF%C2%81%C2%B5%C2%93%23x%04(%C3%AD8%C2%82%C2%94%C2%9CF%C2%BD%09%1D%05%0D%C3%9E%C3%80%C2%8E%C3%98y%C2%84%3D%02%C2%AD%C2%89%3B%C3%A3%10%20%C2%84d%C3%83%05x%C3%9D%C2%9F%C2%97%C2%A9%1Eh%C2%A2i%C2%BA%C2%9C%C2%99r%C2%80%C2%9C%C3%B7%C3%B4*%C3%8B%C2%8B%C3%83(%C3%9E7f%C2%B9%C3%93%C2%82%C2%8Bc%C2%9B%1D%C3%AA%C2%BA%3B%C3%ABhiM%C3%A2%C3%BD%C3%AFk%C2%94%C2%94%02%C2%88Hj%00NBR%C2%9FN%C2%866%C3%98%C2%8D%C2%8C%C2%A2c%1B%12Z%C3%A8i%C2%8A%22%C3%AB%C2%B5%C3%88c%C2%AD%C3%B0%C2%B1%C3%96V%C2%98%C3%A7P%07%C2%90%C2%AB%08zmY%0D%C2%B7%3F%03%3D.%C3%BE%C2%AB%C2%AC0J%00%00%00%00IEND%C2%AEB%60%C2%82";
var peach_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%81IDATx%01%C3%A5%C2%91%C2%B1%0D%C3%82%40%10%04w%C2%8FF%C3%9E%C2%8D%20%7F%23Ht%00%25P%09%08%02RJ%40%02%C2%89%C2%94%0E%C3%BEK%C2%80%C2%98%C3%87%C3%8B%C2%BDH%10%C2%B6%C3%9C%C2%80'%C2%BB%C2%9B%C2%BBh%08'%C3%9D%C2%8E%C2%81%C2%A5l%01%C2%B5%20%C2%B2%3Al%C2%9A%C3%B9b%C3%87*%C3%B3u%C2%9F%20%04%C3%BC%200%C3%8E%C3%92%C3%A5%C3%90%C3%BA%C3%85%0A%7F%C2%98%2F%0DR%C3%80%00%12%C2%83a%C2%84%C3%A9H2%0F%09%C2%A9%7B%1AJ%C2%B9%C3%97%12%7D%C3%8D%C2%935q%C3%B9%C3%90%C3%AB%1D%7D8%7F_%3C%19%C2%B1%C2%AE%C3%89%3E%C3%A9N%2B%5D%C3%B9%C2%82%16Z%00%00%00%00IEND%C2%AEB%60%C2%82";
var sea_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8DIDATx%01%C3%A5%C3%90%C2%BD%11%C2%82%40%10%C2%86%C3%A1%C3%BD%C3%B6L%C2%88%C2%A4%04K8B%C2%8DL!%C2%92%C2%8A%C3%94%0E%2C%C3%81%12%18%03I%C2%8D4%C2%B6%C2%83%2B%C2%81%C2%8C%C2%BF%C2%81%C3%A5%C2%98%C2%81a%60nh%C2%807%C3%9B%7D%C2%B2%0F4%C2%94%C3%BE%C3%923%1A%C3%91-%C2%93%C2%89NQ%C3%92%C3%BF0%C3%80%C2%95%C2%A4%C2%BD%C3%91%C2%94)%C2%BC*P%16%0E%16%12%C2%9A%C3%A7%C3%AFjU%C2%B2H%C2%AD%C3%89%C2%9Df%C2%88%C3%B2%C2%9D%04%C3%AC%C2%99V%C3%9A%0E2%7F%5C%20%24%7F%0E%C2%8F%C2%A1%C2%B1%C3%83%C3%9F%17f%00~%60%C2%BC%C3%9E%C3%9F%C3%97%C3%85%C3%AE%C2%AC%01d%C2%B9W%3E%C3%A3%20%C3%8E%3Ao%2F.%18%C2%81%C3%84%C2%A4z%00%00%00%00IEND%C2%AEB%60%C2%82";
var blue_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8CIDATx%01%C3%A5%C2%91%C2%BB%0D%C3%82%40%10Dw%C3%B6%5C%00%25%C2%98%04%C3%9A%C3%80%C3%BD%C2%80%049HFP%00%12%C3%A4P%C2%82K%C2%A0%0F%C2%90L%09G~%C3%9Cp%C3%A7%C3%80%C3%B2On%C3%80%2F%5B%C2%BD%C2%99M%06%12%C3%98%C3%A6e%C3%AA%C2%9C%C2%BB%C2%83L%09X%11%7F%C2%BC%C2%9D%C2%97%05%C2%A2%C3%9C%1C%C3%9E%25%C2%83%C2%906%C2%99Y%C3%AF_%C2%ABX%C3%AE%08%01%20%0A%C3%9FkT%C3%84O*%23LFR%C3%95%0E%09%C3%92%7F5I%C3%8C%13%C3%A0%C2%A7%C3%97R%14z%C3%89%C3%A7%C3%96%C2%98_V%07%20%C2%96%C2%94%C3%9D%C3%B5%C2%B4x%C2%B4%C3%92a%C3%97Y%C3%B3%C3%BE%03H%C3%9D0vv%C2%A8%C3%B6%C3%AC%00%00%00%00IEND%C2%AEB%60%C2%82";
var green_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%89IDATx%01%C3%A5%C2%91%C3%81%0D%C2%82%40%10E%C3%BF%C2%9FmdK%C2%81%1E4%C3%B1db%C2%A2%C2%89G-%C3%81%3A%3CH%C3%B4%C3%A0%C3%81%0B%25X%C2%82%1DH%09p_%18f%03%07%20%C2%84%06x%C2%A7%C3%89%C3%BF%C2%939%C3%8C%23%C2%8C%C3%B3%7B%C3%A7C%08%0F(%12%C2%82%C2%85E%C2%B7%C3%BB%C3%BE%C2%931%C2%96%C2%A7%C3%A7%C3%B6%C2%AFP%C2%8F!D%C3%AA%C2%8E%C2%AFMb%C3%A3%05%13%C3%AC%02%C2%A4Qz%C3%8C%C2%A0T%2FX%605%C2%A5P%C2%8B%C3%99%C2%A6A%25f%C3%A3%C3%97%C2%9B%18A2%C2%97%C3%AC%C2%90%C2%97%C2%AEv%C2%A9%C3%BD%C3%B9%1BC%C3%AD%16%C2%AFQY%0B8R'j%C3%8E%26%22%C2%95%00%00%00%00IEND%C2%AEB%60%C2%82";
var purple_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%9DIDATx%01%C3%A5%C2%91%C2%B1%09%02A%14D%C3%A7%C3%AF%C3%8A%C2%A1%20x%C2%B1%C2%91%25%C2%ACh%60%C2%B8%05%18%C3%98%C2%82%C2%91X%C2%84%C2%B8p%3Dx%C2%98Y%C3%82%25%C3%A6%C3%9B%C2%80%C2%81%1D%5C%60%01%C2%9B%C3%AA%C3%81%C3%BF%C2%AE%C3%A8%09%C3%82b%03%C3%B7%C2%B2%C2%997%C3%99%10%3E%14%C3%B3%C3%92%0A%C3%84%C2%90%C3%A8zw%C3%99T%C2%AF%C2%8E%C3%9E%C3%A2%C2%B8%17%C2%B0k%C2%87%C2%B1%C2%AD%C2%B9%C3%A9O%C2%B5%5B%C2%94%13b%C2%A9%C3%B0K%0E%C3%B5%C2%B8%2B%C3%9D%C2%88A%12e%C2%94%08%C3%A5I%05%C2%8C%14%C3%BE%C3%90%19%C3%89%19%7CJ%C2%B0%C3%A0%C2%AA%C3%BD%C3%AD%1C%C3%ACxI%C3%B1%1E%C3%BB5%C3%B1%C2%95%C2%AC%C2%87-%C2%B5%C2%B9%C2%98%1DVLd%08%12x889%C2%BF%0EO%C2%83%C2%AD-9l%C3%BA%C3%A2%C2%B1%00%00%00%00IEND%C2%AEB%60%C2%82";
var orange_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8DIDATx%01%C3%A5%C2%91%C2%B1%0D%C3%820%14D%C3%AF~%16%60%04%C3%93%40%1B%24%06%C2%80q%C2%A0%22%23%C2%B0%04)%C3%83%08%19%C2%81%11%C3%9C%C2%83dF0%25%12%C3%B1a%1A%14%C2%A2%C2%88%05%C3%B2%C2%BA%C2%AFw%C3%BA%C3%85%1D%C2%91%09u%C3%A9%5E%60%23%C3%81%11%C2%88%09%3A.%C3%B7%C2%BE%C3%A5G%C3%9EN%C2%AB%20%C3%80%C2%A1%0F%C2%B5-%C2%AE%C3%B5z%03%C3%A8%C2%80%01%C2%A4%C3%81%C2%94%C2%92%C3%83%08%C2%82%C2%9C%C3%A1%0F%C2%93%C2%91F%C3%861%C2%91%C2%80%C2%87%15%C3%8F%C3%AE%C2%92K%C2%BF%0F%25%C2%A1%C3%96%C3%A6%C2%95%C2%8F%5D%5E%C3%A0%1B%10%C3%B2'U%C2%8B%C2%9D%3F%C3%BF%C2%A4CS%C3%8E%C3%BA%C3%B7%1B%C3%BE%3C%2FJ%C3%A5zi3%00%00%00%00IEND%C2%AEB%60%C2%82";
var brown_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%89IDATx%01%C3%A5%C2%91%C2%BD%0D%C3%82P%10%C2%83%C3%ADK%C3%83%18o%032B%C3%A8%40b%18hPZ%3A%24%1A6%20%23%C2%A4B%C2%94%C2%8C%C3%B06%20%23%40GC%C3%8C!%24%C2%94%3Fe%C2%81%7C%C3%8D%C3%A9l_s%26%C2%9C%7C%C2%99%06Qg%01%C2%99%C2%AF%C2%95%C3%88%C3%BD%C3%B1%12%0B~%C3%8D%C3%9Dj~%C3%B7%11%C3%90%C3%80%C3%84E%C2%92%C2%AF%C3%93L%C3%82%06%5D%C2%8C%C2%B0w%C3%9D%C2%BE%C3%B8%23%04%C3%83%08%C2%931%C2%93%1A%C3%95%C2%A0%23%3C%C3%AD5C%C3%B4%C3%AF%C3%B7%02%C2%AE%C2%95v*%C3%A3%C2%83%C3%9E%00%C3%81%C3%9BO%C2%A4%07%C2%B9%3D%5Cc%C3%B1%01e%C3%AC%24j%C3%A1%14j%60%00%00%00%00IEND%C2%AEB%60%C2%82";
var fuchsia_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%86IDATx%01%C3%A5%C2%91%C2%B1%0D%C3%82P%10C%C3%AD%C3%8B%1E%C3%A8%C2%B3%00%12%1B%24%1BA%C2%81%C2%94%C2%96%C2%9A%C2%86%0D%60%04F%60%04%24%C2%90(%13%C3%84%02P%C3%B3%C3%B3%C3%8D%C2%85%0A%25Q%16%C3%88%C2%AB%C3%AE%C3%B4%C3%AC%C3%8A%C2%84S%C2%95%C3%B7%C2%905%C3%B1%C3%A0g%0E%C2%B0%06%C3%92v%C2%B6%5B%1C%C3%99%C3%8A%C3%87%C3%A6V%11%0A%C3%B8%C2%83B%C2%91%3D%C3%8Bk%0Ea%C2%85.%24L%C2%8D%05%0C%C2%A2%60%18a2%C2%92J%C3%B5%C2%90%10%C3%B4%C2%B6%18%C3%A3Ed%2F%C3%A0%C2%8B%C2%9Cl%C2%BE_%C2%BE%C2%92%7D%0A%C3%BF%C3%8F%C2%BF%C2%86%07%25%C2%AE%C3%9B%C3%89%C2%BE%10%08%2C_%C3%A3%0CDy%00%00%00%00IEND%C2%AEB%60%C2%82";
var cyan_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%94IDATx%01%C3%A5%C2%91%C2%B1%0D%C3%82%40%10%04%C3%B7%0E%119%C3%80%25P%C3%82%C3%93%01%25%40%08%22%C3%A0%2B%01%3A%C2%A0%03%C2%83%00A%C3%B8%25%C3%90%02%1D%7C%09N%08%00%C3%9B%C3%8B%C2%83%40%08%C3%AB%C3%A5%06%3C%C3%89%C3%A9v%C2%82%0DV%C3%B0a%C2%96%C3%AD%C2%86%C2%84%18%C2%81%C3%BA%C2%BD%C2%9D%C2%BAW%26o%C2%B1%3D%2CH.%C3%B1%C3%83w%C2%99%0C%3A%C3%B3%C3%AC%C3%98%2FQ9%C3%BC%C2%93%C2%96%C2%B8%C3%9F%C2%B4%40a%10E%C2%8C%C2%86%C2%8E4%C2%AA%04%3DE%03%C2%AD%C2%91%0F%C3%A89%26H%C2%B9%C3%A8%C3%89N%C2%BC%C2%90%C2%AB%C2%9A%C3%B3%15t-%C3%9F%2F%C3%AC9%0A%C3%87%C2%84M%C3%B3%2B%C2%92%C2%8D%C2%B3%C3%A3%C3%BC%09%C3%A7%C2%92%2B%C2%8C%C3%96%08%C2%BFj%00%00%00%00IEND%C2%AEB%60%C2%82";
var sandstone_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%9AIDATx%01%C3%A5%C3%91%C2%B1%09%C3%82%40%14%C3%86%C3%B1%C3%AF%C2%BD%40%24%C2%A40%23d%C2%84%C2%B8AF%C2%B0%15%2BK%C2%B1%C2%B2%13%11%3C%1BW%C2%B86%20%C2%926n%C3%A0%08%C2%8Ep%23%C2%A4%C3%B5%C3%8C%C3%9D%C3%93%C2%80%22%C3%8A%C3%A1%02%C3%BE%C2%BA%C3%B7%C3%BE%C3%A5Gx%3A%C3%A8M%09%C3%AFK%06%0Cs%7C%C2%9E%C3%8C%C2%95%C2%A1%3E%1C%C3%B5z%2B%02%C2%857%C2%93%26%C3%B1(%C2%AA%C2%B5%C3%8A%C2%BD%C2%B8%06%C2%9F2%7BsW%C3%AE%C2%A4%2B%10%40%C2%8C%C2%82Y%7C%C2%86%20%1A2~%C3%B8%C2%9Bhm%C3%9C%04%C2%8B%C3%B8%13%C3%8F%C2%96%C2%AA%7D%2C%C2%B2%C3%BBJ%C2%974%19T%C3%B4%C2%BAj%C2%BD%C3%8A%C2%9DDc%12i%C2%A7%C2%8B%7D%C3%95%C3%BF%C3%AE%7D%C3%A61%C2%9F%C2%A8%C2%89%C2%B9%C3%AA%00%00%00%00IEND%C2%AEB%60%C2%82";
var dark_green_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8EIDATx%01%C3%A5%C2%91%C3%81%0D%C2%82%40%10E%C3%BF%2C%C3%B1%2C%17%C3%AF%C3%AB%C3%85x%C3%94%06%C3%8C%C2%96%60%2BV%C2%A0%C2%A5X%C2%82v%40%09%1E%3DN%09%7B%04%0E%C3%80%1F%02%01%02%C2%A1%01%5E2%C3%99%C3%8C%C3%BF%3B%C2%99d%C2%BE%C2%A0%C3%A3%1C%7C%C3%A0c%C2%A5%C2%AC%C3%AC%C2%9F%C2%A9%C2%8A%19%C2%A7%C2%9B%7F%C2%8A%C3%A0%C2%85%01-%04%C3%97%C2%84%13%C2%9E%C3%8D%07S%C3%92%C2%9D%C2%A0p%15p%C3%81%025u%C3%A7%C3%B8k%C3%89%C3%A4%C2%BE%C2%BD%C3%83%0A%C2%9B1%C3%B3%C3%B9%5D%5Bx%C2%BEo%125%C3%A6%C2%87cj%C3%A9%C2%84%C2%91%C3%B1%2B%05%0F%C3%A9%05K%C2%87%C3%8D%C2%9DFd%C2%96o%C3%93%1A%C2%A1%C2%94%1Fj%C3%A6%C2%A0%C3%B4%C2%85%00%00%00%00IEND%C2%AEB%60%C2%82";

//icons for layers and Effects Group
var view_button_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01oIDATx%01%C3%A5SK%C2%8E%C2%82%40%10m0%26%26%C2%BA%C3%80%C2%85%C2%BF%C3%84d%C3%A4%06%C3%A3%0D%C3%B0%06z%02%C2%99%13%C3%8C%C3%9C%409%C2%81%C3%83%09%C3%B4%06r%C2%83%C3%A1%06%C3%8C%0D%60V%04%C3%98%C3%B4%06%12%16%C3%80%C2%BC%22%C2%B6i%09%24%C2%B3%1E%2B1%C3%9D%C3%B5%C2%AA%C3%AA%C3%B9%C3%AA%01%C2%8C%C3%BD%C3%9BP%C2%BA%0AI%C2%92%18eY%1A%C2%B8%C2%BE%C3%9C%C2%A0%1FUU%C3%9D%C3%89d%C3%A2%C3%BE%C2%89(%C2%8E%C3%A3w%1C%C3%87%C2%AA%C2%AA4%C3%96%1E%C2%81%C2%A2(%C3%96t%3A%C2%BD%C2%B4%12%C3%B9%C2%BE%C2%AF%C2%8DF%C2%A33Tl%05%062%1BC.0%0E5%26%C2%A0%C2%BD4%C3%ABdY%C3%B6%C2%A6%C3%AB%3A%C2%A7D%15%C3%A8p8%C2%BC%C3%8A%24%20X%C3%8F%C3%A7%C3%B3%0F%C2%9CA%C2%AF%C3%97%C3%A3%C2%B3%C3%99%C3%8C%24L%22%C3%9A%C3%92%C2%8CHj%C2%A2(%C2%8A%0E%C3%B8wC%22%C2%B9%40%C3%BA7%C3%96%3C%01%C3%B7%C3%A8%07%C3%8FN%C2%84%C2%91JI%C2%B1%C2%81%C3%99c%3D%13%C2%86%C3%A1%0A%C2%B2%7Dy_%C3%A4%C2%9B%3C%C3%8Fy%C2%BF%C3%9F%C3%B7%1E%7C%C2%80%22%0C%C2%AFp%C2%BDJ0%C3%87%C2%8A%C2%BA%3A%18%0C8%1A%C2%B8%3C%C2%80%15%C2%BB%C2%8C%C2%A6%1Ao%40%1A84u%3C%1E%C3%B3%C2%A2(l%C2%B9B%C2%92%C2%97%C3%8Bes%0D%C2%9BV%C2%83_%C3%BB%06%C2%91%C2%B5X%2C%C2%82%C3%BBS%C2%83%1F_%0D%C2%9F%C3%967%C2%9F%5E)%17w%C3%B2K%C3%AAq%C2%81oj%3B%04%08%3Fv8%1CI%C2%81%C2%87%C3%813%C2%9A5%C3%B2E%18%2F%C3%AA%C3%B0%C3%91I%C3%93tw'm%C3%88d0%C3%9FD%C3%93%01%C3%97%15k%09%C3%B2%13%3EYx5%3E%1Fp%C3%96%11%204%40h0%C3%A9%13%01%C2%81%0B%3F%5C%C3%B6%5C%C3%B1%0BY.%C2%BA%C3%B0%C3%A0%24%C2%9B6%00%00%00%00IEND%C2%AEB%60%C2%82";
var view_button_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%02%12IDATx%01%C3%8D%C2%93%3Dh%13a%18%C3%87%2F%C2%97%3B%3F%C2%88%C2%93%20%C2%88PpR%10Lb%0C(H%C2%9D%C3%84((%C3%89%25%10%C2%97*%0E%C2%82%60q(%22%C2%AD%19lP(%C2%B4u%10q%10D7Q%03%C3%B9%12%C2%82%20J%16%C3%85%C2%B6%C2%A4%19%12h%C2%A1c%C2%97%C3%92%C2%A1M%C2%A1%14%C2%92%C3%8B%25%C3%A9%C3%AFM%C3%AF-%C3%97%C2%AF%C2%A1t%C3%A9%03%0F%C3%8F%C3%A7%C3%BB%7F%C2%BE%C3%AE%14%C3%A5%C2%B0%C2%91K*%C2%99L%C3%A6V%C2%A7%C3%93%C3%A9%C2%ADV%C2%AB%C3%83%C3%89d%C3%92R%C3%B6I%C3%9A%26%C2%A2%C3%8Bu%05%C2%91%C3%B0%C3%BB%C3%BDn%C3%A4P.%C2%97%C2%BB%C3%98j%C2%B5r%C3%A8%3D%C3%84%C2%84o%01%C3%BE%05%7F%C2%8EF%C2%A3%7F%C3%B7%C3%ACH%10%C2%8F%C3%9F%C2%B7%C3%9B%C3%AD~%3A%7B%1B%C2%8B%C3%85%06%C2%B0%1Fa%7F%C3%9C%C2%A5%C2%81%2F%1E%C2%8F%C3%A7q(%14Z%C3%9B%01T(%14N%C3%97%C3%AB%C3%B5%02%C3%95%03%C3%82%06lD%C2%8C%19%08%04.Y%C2%96u%06%C3%BF%5D%40%1F%20u%3B%3E%C2%890(%C2%B8%C2%B0%09%C3%84N4%C2%AF%C3%97%3B%C2%81z%C3%99%1Es%C2%8DD%C2%8F%C2%AA%C2%AA%C2%A3%C2%91HdH%16K%C2%A7%C3%93%C3%97%C2%88%C3%BDA%3Dj%C2%BB~%C2%BA%C3%9D%C3%AE%7B%C3%A1pxU%15%C2%96%C3%8F%C3%A7%7B%25A%04Q%C3%B9%1Bb%149%C3%88%11%C3%86%C2%A5%C2%9F%C3%AA%C3%BF%10%C3%9F%1D%23%C3%9E6M%C3%B3I%C2%B78%7B%C3%A8%C3%A1%C3%81%0C%C3%BA%09%19%C2%A5J%C2%98q%C2%96%C2%A8.%C2%97%C3%BA%C2%AER%C2%A9%3C%13%C3%97%24%C3%9F%20%3F%C3%A3%00%5B%26%C3%BF%C2%ACJ%C2%B2%C2%89%C2%B1%C3%A5%C3%9C%C2%8CuD%C3%97%C3%B5%15%C2%87%C3%AB%C2%A9%C3%9D%C2%B5%C2%88%C3%8D%C3%83MG%C3%8Cj4%1A%C2%BA%C3%8A%7C%C2%8B%C2%80%C2%8Dm%03%C2%BA%5E.%C2%97gQ%3F8%7C%2F%18s%C3%8C0%C2%8Ci%C3%B2%07%1C%C3%A9%C3%A3%C3%B1x%7C%C2%B9%C2%BB%C3%ACb%C2%B1x%C2%ACV%C2%AB%C3%A5Qo%C3%9AA%C2%93%C3%A4%5E%1EM1%C3%8A%05%C3%86lj%C2%9A%C3%B6%C2%90%C2%91%12%C3%B2%C2%9At%C3%98%C2%87%C3%9E%C3%877u%C2%A3%C2%BB%23%09%C2%9BJ%C2%A5N%C2%92%C3%BC%1F%C3%B5%C2%9Cl%02%C3%BE%C3%84%C3%A3%1F%C3%AC%C3%A08%C3%B2%0E%C3%A0%C3%B7E%40%5E%C2%B3T*%C3%A9%C3%81%60%C2%B0%C2%B9%05%C3%88%06%3BE%C3%920%C3%9C%C2%AF%C3%ACMm%C2%81%05%C2%BF%C2%A1%C2%9B%C3%A7%C3%92%C3%A9%C3%9A-3%C2%9F%C3%8F%C2%9F%C3%A7%C3%B7%18T6%3E%09%C3%99%C3%A1%1C%1D%C3%BD%C3%86%C3%BF%C2%95%C3%8E%C3%85%C3%A5%12%C3%98%2F%19%C3%BF%C2%B5r%10%C3%8Af%C2%B3%23%7C%C2%A0W%C2%95CK%C3%AB%160%C3%B1%C2%AA%5E%C2%B1%C3%8Ex%00%00%00%00IEND%C2%AEB%60%C2%82";
var hide_on_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%B3IDATx%01%C3%8DSKK%C2%95A%18~%C3%9E%C2%999%7C'%C2%A2%5D%C2%84%C3%8BV%16%C3%ADB%10*%C2%A2%C2%B4SQB%C3%902%C3%A8%07dx!%C3%A2%C2%B4h%C2%97%C3%9B6%C2%9Dc%17%C2%A2%40%10DW%C2%82%20%C2%A2%C2%A0~%5E%10%C2%BCl%C3%A4%C2%A0%C3%A0B%C2%BC%2CDW*%C3%A2%05%C2%BF%C3%B9f%5E_%15%C3%84%C2%83z%C2%BC%C2%80%C3%A0%C2%B3%C2%99%C2%99w%C3%A6y%C3%9E%C3%AB%00W%05t%C2%9C%C3%B1g7%17%C2%B3%C3%B1%15%C3%B0%C3%BCH%5E%C3%9C%02c%05%C3%84%C2%A3%3A6%C3%8D%1F%C2%9F%C3%93LA%C2%91_!%17y%C3%B0of%C3%BF%16'%C3%BBmv%C3%9B%C3%AA%C3%AB%C2%A7W4wD%24%C3%9B%C3%8F%C3%B7%C3%89%C2%B9N%C2%86x%3E%1D%C3%B3%0A%C2%AE%C2%A2%C2%AA%3C%C2%98%3C%10%C3%B9%13%C3%B2m%0B%3F%06%C3%A6%C2%9B8%3BV%C3%99%C2%BA%C3%87%C2%B5%2F%C2%83%09bf%C2%AA%0F%C3%BD%14%C3%80%C3%858%3F%C2%86n%C2%90NQv%20*E%C2%ACFpA(%C3%A3K%C3%94%C3%B2Rb%5C%C2%B2%C3%8A%C3%A1B%C3%A0%C2%9C_OL%C3%AE%C3%95%24%C3%9B%23%C3%91%C2%90%1A%C3%86%09-%3F%C2%9E%C2%8F%C2%88%C2%8C%C2%BE%5B%C3%BD%C2%84fU%C2%B6%C2%83%03%09*%C2%BDk%C2%96%C3%8E%2C%C2%9CM%C2%81V%C2%A0%C2%A0%C3%98%C2%B9tC%C3%88IE%C3%89%C3%B8%C2%8B%C3%B8%7Fa%3D%C2%A7%C2%8C%C2%8E%1E%10%C2%A1%C2%BD%20_%C2%A1u%5BG%25%22T%25%C2%A7%C3%8A%C2%B5%C3%98%C2%BE3%C2%8A%C3%8C%3F%C3%AB%C2%A2%C2%B6%C3%8F%C2%A9%20%C2%B7%C2%9FZ%C2%ACA4'b%C3%BFeb%C3%9F0%C2%A1T%C3%8C%C3%9DB%1A%C2%94%C3%B5%03%C2%BC%5BL%C2%97_%C2%9B%C2%95%C3%BD%C3%9F%1F%C2%BD%3CnHO%C3%A7%C3%95%20%C3%93c%1F%12%C3%91%10%3C%C3%9E%C3%97%C2%A4LS%7Dh%C2%9F%C3%8A%04%C2%84D%5CV%5D%C2%96%C3%A8%C3%8B%C3%B4%C3%9A%3Ab%C2%AAM%40%C3%9F%C2%AB%7CF%07%C2%A9%C2%9B%C2%BCHI~%08%C3%90X%C2%B4%C2%AC%5B%C2%B0_%24%3E%7C%C2%AF%C3%BDV%C3%86%C2%A9%C3%A4%C2%9D%0D%C2%B6y%C2%BC%C2%82%C3%9D%C3%B8%C3%9E%C3%85%C3%97%C2%83%C3%80%C3%97aS%7D%C2%AByMk%C2%B8L%C3%AC%00%C2%83%C2%BF%C2%A9%C2%8C%C2%AD%C3%BE%C3%9Dw%00%00%00%00IEND%C2%AEB%60%C2%82";
var hide_off_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%13%00%00%00%11%08%06%00%00%00%3F%C2%98%C2%97%C3%87%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%A0IDATx%01%C3%95%C2%93%3FH%02a%14%C3%80%C3%AFT%C2%A4%1C2*(%C2%9A%1A%C2%A2%02%C3%A1%08%C2%A2%C2%A0%C2%A5%10%C2%A2%C2%86%C3%88%3F'HCK%C3%90%1EA%05%C2%81Ca%11%244%14%C2%B9%C2%B4%C2%95%04%09%C2%9EN%C2%AD%11%05%C2%B5%C3%9E%12HCC%C2%83%0D%11%C3%98%C2%9F%23%C3%A2%C3%94~%17(G*jS%3Dx%C2%BCw%C3%AF%7B%C3%AFw%C3%9F%7B%C3%9F%C3%B7%09%C3%82_%15%C2%B1VB2%C2%99l%C2%B5%C3%9B%C3%ADM%C2%BA%C2%AE%C2%BF%7B%C2%BD%C3%9E%C3%97%C2%86a%C2%8A%C2%A2%C2%B4%17%0A%C2%85uQ%14e%3E%C2%BBMK%C3%8F%C3%84%C2%8E%C2%ACV%C3%AB%C2%9E%C3%87%C3%A3%C2%B9%C2%AF%09%034K%C3%81%3E%C2%B0%0E%C2%A1%C2%8A%C2%B0%C3%B6%C2%88%09%07%02%C2%81hUX*%C2%95Z%22q%07%C2%B5%09%C3%B5IH%C2%96%C3%A5%C2%AD2%18%C2%B3%19%01r%C2%8Dk%11%C3%AA%C2%97O%C2%9B%C3%8D6I%C3%8B%17B%C2%B1%10%C2%88%C2%98%C3%8F%C3%A7%0F%1B%04%19b%C3%A7%60%0Eb%C2%B1XK%09%C2%96H%24%06%C2%99%C2%93%24%C3%BCN%5C%0E%C2%87%C3%83e8%C3%9F%C2%B3aWw%16%C2%8B%C3%A5%06w%00%C3%A8%09%C2%B6%C2%8FX%0F~o%C2%85%C3%A2%0Cz%C3%8BZ%C2%9A%C2%8E%C3%A6%C3%B0%C2%9FhU-%C3%AD%2C%18%0C%C2%BE%01%5B%C3%85mF%C2%B3%C2%AA%C2%AAN%C2%910N%C3%81%C2%99%C2%99B%C3%B1%15q%C2%89%C2%A1O%C3%A0%3F%102%C3%9A%5BafZ%09f%C2%88%C3%8F%C3%A7%C2%BB%C3%84%C2%84IZ%C2%93%24)%C3%8A%C3%8E4%C2%BF%C3%9F%3F%C3%8D%C2%9D%1A%06%C2%BA%40%7C%14%C3%88%189%1A%C3%97'%C2%82%C3%9D%26%C2%B6AL)2%C3%8A%C3%AE%19%C2%A7%C2%BAHR%08%C3%95%00%1Dc%C3%8F%C3%99%C3%B5%07%C2%B6-%C2%97%C3%8B%0D%C2%912%0F%C2%BC%15%C2%8D%C3%B0%C2%B3Msm%C3%85%17%10%C2%8F%C3%87%C3%BBig%19w%06%C3%AD4%C2%B5%C2%99%C3%85%C2%9C%C2%B2%C2%B6%C3%8B%C3%93J%C3%BF%C2%AC%C2%AB%C3%B56EN%C2%BA%C3%8B%C3%98%15%C2%80%17%C2%A7%C3%93%C2%99q%C2%BB%C3%9D%C2%BA%C3%B0%C3%AF%C3%A4%0BCc%C2%A9%C2%84%C2%B8%05%C3%A9%C3%A2%00%00%00%00IEND%C2%AEB%60%C2%82";
var solo_on_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0B%08%06%00%00%00O%C2%85%C2%BCb%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%3EIDATx%01%C2%BD%C3%8EA%0D%00%20%0C%04%C3%81%3B%C3%92%0AA%5B%C3%AB%03%C2%B0%C2%80%20%C2%94%C2%91%14%0F%C3%B7%60%C3%BE%C2%9B%2C%23%C2%A2%200%C2%92%0B%3Fq%C2%9F%2B%C2%AD6%C2%88%C3%BE%C2%872f%C3%A6%C2%84%C3%80%C2%AAj%40%60%C3%AE%C3%9E!x%C3%BE%C3%81%0Be4%0Ee%C3%8E%00%00%00%00IEND%C2%AEB%60%C2%82";
var solo_off_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0B%08%06%00%00%00O%C2%85%C2%BCb%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00AIDATx%01%C2%BD%C3%8EA%0D%C3%800%0CCQ%7B%0A%C2%90%0D%C3%A96%40%09%C2%A5BI%5B%0A%C3%BF%C3%90'%C3%B9%C3%B8%25%C2%BB%C2%AAZ%40t%C3%B7%C2%AF%C2%93%C2%BC%C2%AE%0E%01%C2%B1v%0B%C2%B8%04%C3%A1%10sf~%02%C3%82%C3%B6%2B%60%C2%87%C2%8F%C2%80%09%C2%875%0C%C3%95%10%C2%B0%C3%9Aj%00%00%00%00IEND%C2%AEB%60%C2%82";
var edit_group_effects_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%0C%08%06%00%00%00Vu%5C%C3%A7%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%A9IDATx%01%C2%9DQ%C3%9D%0D%C2%83%20%10%16%C3%92%C3%84W%C2%BB%C2%81%C3%9D%C2%A0%1B%147%C2%B0%1B%C3%88%08%5D%40P%07%C2%B1%23%C2%B8%C2%81%C2%8E%607%60%04%C3%9FM%C2%B4%C3%9F%11%20%C3%844%7D%C2%90%C3%A4%C3%A0%C3%AE%C2%BE%C3%BB%C3%BB%0E%C2%96%1CN%C3%934%1A%C2%8F%22%C2%9D1%C3%B6%C2%AE%C3%ABZ%C3%868%C2%A7Kk%C2%9Dw%5DW%C2%BA%C2%A0%C2%87%07%C3%B7%7D%C2%BF%C3%93%0BLP%C2%8C%C3%85%C3%A9j%C3%9B%C2%B6%07XA%5D%20%C3%99%C2%A1%C2%A9%C3%B5%C2%A1%C3%90%C2%84n%05Cf%05%C2%A3%C2%8F%23%60%0F%C2%AECy%C3%B0K%1Ai%C2%82%C2%98h%C2%8C%17*%3DI%C2%A0%17Q%C2%BC%C3%99%C2%B6m%C3%A6%C3%A8%608%C3%A7%C2%81X%C2%9A%C2%A6%C2%83%C3%97%C2%81MQ!%09%C3%9B%26%C3%A4%C3%88%0C%23%C2%AD%C3%AB%1A%C3%86%C3%B0%C2%8Bp%C3%A3%C3%B4%14K%1C%04%C2%8C%C3%B1%07%C2%87%C3%85q%C3%88b%0E~K%23%40%C2%91%C3%BC%3FF)u%C2%B3%C3%BF%C2%80%C2%91%24%11%C2%84%C2%83%C3%91%C3%BA%C2%A2%C2%A0%19%C3%BE%2B%24%2C%C3%A0%C3%A2%C3%88%19%C2%BF)%00%1F%3C%C3%82%C2%8D0%C2%A3%08%C3%BD%C3%83%C2%90%C2%9C%3D_T(wN%C3%93%C2%8C%C2%B7%00%00%00%00%00IEND%C2%AEB%60%C2%82";
var guide_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%ABIDATx%01%C2%BD%C2%92%C3%9B%0D%C3%820%0CE%C2%AF%2B%06%C3%A8%08%1D%C2%A1%1B%C3%80%26%C2%8C%C3%80%0A%C2%AC%C3%902%01%C2%83%10%C3%84%06l%C3%90%C2%8E%C2%90%7FJ%C2%8C%C2%9D%C3%84%C2%A2j%11H%7C%C3%84%C2%92%C2%AD%1C%3B%C3%B2C6%C2%90%C2%A5w%C3%8F%C2%A1%C2%BB%3C%C2%8E%C3%86'7%5DU%C2%8D5%C3%96%C2%BBi0%C2%AE%C3%B0%C2%A7%C2%90VJOn%C3%84xq%C3%B9%C3%8C%C2%B5%18Q%1A%3F%C3%B1%C2%869%C2%9Cc%06%C2%A2%03%01%C3%B7%C3%80%C3%A1%C2%96%C2%B8%C3%9Ak%22%C2%8BWD%5B%06Zc%C2%94%C2%9F%C3%91%C2%B2J%1B%3B%C3%AD%C2%9F%C3%80c%C3%A66~%C2%90%C3%B6%13S%C2%A3s%1A%C3%8F%2Bz%C3%BC%C2%96z%C3%A5)7%C2%A3Uy%C2%AF%C2%83%C3%A7%C3%AB%C3%80z%1D%C3%9C%C3%85%C3%B8%C2%97%03X%C3%B2%C3%A2%20J%C3%8F%C3%B8%02%C3%A1%7F%C2%8D%C3%9F%C2%A9%24R!%00%00%00%00IEND%C2%AEB%60%C2%82";
var guide_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%92IDATx%01%C3%85%C2%92%5D%0D%C2%800%0C%C2%84%3B%C2%82%00%24%20%01%07%C3%A0%04%09X%C3%80%02%12%10%C2%B0Y%208%C2%98%03%C2%90%C2%80%C2%83%C2%B1%C2%92k%C2%B2%C2%8C%C2%BF%C2%84%C2%87%C3%91%C2%A4i%C2%BEm%C2%B9%C3%AE%C3%92%12!%C2%8C1%C2%8B%C3%96%C2%BA%0Fx%C3%A2%14%C3%A6%3B~%23%C2%9C%C3%91%C3%87P%C2%81J%C3%A9sCr%14%C3%88%C3%B5%C2%8As%C3%A7%C3%9Cx((%C3%95%C3%B9b%3D%C3%8F%C3%A0%C2%96E%C2%82%C3%BB%C3%9A%C2%97J%C2%98%C3%A8%0F%C2%8F%C2%A2%C3%9A%C3%A0%C3%BF%2B%C2%B8B%C2%B5%C2%A8%25%3C%C3%9A%C2%B8%C3%A3F%C3%AFQ%C2%9CN%C3%92y%C2%94.7%C3%A3%C2%A0%C2%8Bq%0C%07%3F%2C%40%C3%8C%C3%B1B%24%C3%B6%C2%B8%03%3A%C3%BDy%C2%9BY.~%C2%94%00%00%00%00IEND%C2%AEB%60%C2%82";
var lock_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%10%08%06%00%00%00%22a%C2%9E%07%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%ACIDATx%01%C2%95R%C3%91M%C3%830%14%C2%BC%C2%B3%C3%83%7FF%08%13%00%13Ta%11%C3%A0%C2%93%2F%C3%88%060%01%02!%C3%B1%09Y%C2%840B7hF%C3%887%C3%849%C3%BC%C3%94%C2%A6r%C2%95%C2%AAMO%C2%B2t%C3%8F%C3%AF%C3%AE9g%C2%87H%C3%B0%C3%91%C2%A8%C3%A8%15%3E%05%5C%C3%862w%C3%84%C2%97%C2%87%7F%C2%BE%2F%C3%99%C2%8E%1A%C2%A6%C3%A2%3F%0D%0D%C2%A0%5CR%0D*'%C3%BC%C3%82z%C2%81%C3%AE%C2%AA*%C3%99%19%C3%8FF%C3%83%C3%AF%C3%90%3F%C2%92%2C%02%C3%BDyu%C2%BD%C2%9E%C3%B8%12%C2%87x%C2%85%C2%95%C2%8B%C2%BDX%3E%C3%99%C2%9E%1B%0D%C2%8E%C2%BC%C2%88%C3%87%C3%BDT%C3%89%C3%B1%C3%86%09.co%C2%B1%C3%95%C3%A1(%C3%94%C2%A5%15%C3%9F%1B%C3%9DH%C3%A1v%13%C3%94B-w%C3%A4%C3%A9%3E%C3%B1%C3%8A%C2%B7%C3%AF%5E%C2%98%C2%8Fn%C3%86'%C3%AD%20%3F%C3%95%C2%B0%2F4%5B%C2%BBZ%5B%C3%86%C2%8F%1A%C2%A4%C2%A1%C2%B6%C3%AB%C2%B4e%7C2n%1A%C2%9A%C3%AD%19%5Dil%C3%B3%C3%B2E%C3%9A%C3%8D0%C2%81%C3%BD%22a%C2%85%C3%B9%19%0E%C3%83%0C%C3%9D)%C2%86%C2%8C%C3%84%5D%7C%C3%8E%C2%879b%09%C3%B5%3FiJ_%C2%A3%C3%B5j%0F%16%00%00%00%00IEND%C2%AEB%60%C2%82";
var lock_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%10%08%06%00%00%00%22a%C2%9E%07%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%B9IDATx%01%C2%95Q%C3%AD%11%C2%820%0Cm%7B%0C%C3%80%06%C3%A2%06%3A%C2%82%1B%08%0C%C2%80n%C2%80%13%C2%88%1B%C3%88%04%C3%A0%00%C2%80L%C2%A0%1B%C3%88%08l%C2%A0%C3%BE%C3%A7%C3%83%C2%97%C2%B3%C3%A5z%08%C2%9C%C2%BC%C2%BB%5C%C3%924y%7DI9%C3%93%C2%90e%C2%99%C3%95%C2%B6m%C2%84pEg%C3%8E%C3%B9%15%C3%AEd%C3%9Bv%C2%A9jx%C2%AF%C3%B8F1%C3%BCE6x%C3%92%C2%AF%C3%91%C3%B4%C2%A2%C3%98P%0D(%C3%B2%C3%A1L%C2%BAt%1C%C2%A7%C2%94%241%C3%B2%C2%8F%C2%A6i%C3%A8.%C2%A0%C2%9C%C3%90%25%C3%A12%C3%94%C2%9F%C2%A7%18%04w%C3%98J%C3%A5%C2%BA%17%C3%80%C3%AA%C2%B3%01%C2%80%C3%A4%0D%C2%B7%C3%A8f%C3%88%C3%B3%C3%9C%C2%AB%C2%AAj%0B%16%C2%93%0DC%C2%B1%17%C2%90%16%1Au%5D%C2%9FQL%03%C2%95%23%0D%C2%85%C3%B4%C2%96%10%22%22I%26iw%5D7%60%13H%C2%92%24%00%C3%B1Q%C2%B0%C2%990%C3%BA%09%C3%BD%3F%C3%80%C2%B8%C3%91%C2%B7F%C3%B8y%01%C2%83%C3%ADH%2F%C2%99%C2%8C%C3%99d%03%06%C2%8B%C3%99w%01%C2%A5%C2%8C%C2%A7%25I%09K6%C2%82%C3%99C%C3%B34M%C2%9F%C3%B0S%C3%BF%C2%A0%60%C3%81L%C2%81M%C3%AC%C3%BF(%C2%A6%C2%8D%15%C2%B0%C3%83%07%3A%C3%B2g%C2%8BJEv8%00%00%00%00IEND%C2%AEB%60%C2%82";
var view_button_fx_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%8DR%0B%C2%91%C3%820%10MR%04T%02%C3%A7%C3%A0%C3%8E%01%C2%A7%C3%A0%C2%AE%C2%AD%01%1C%14%14P%1C%C2%80%02%40%40%C2%A7S%05T%02(%00%09%18h%C3%8B%7B%C3%8C%26%C2%B3%C3%BCy3%C2%9D%C3%AC%C2%BE%C3%ACK%C3%9Enj%C2%8DB%5D%C3%97y%C3%9B%C2%B6%05%C3%82%C3%98s%C3%96%C3%9A%C2%AF%24I%C2%8E%C2%BAn%C3%A0%C2%83%C2%AA%C2%AAb%11%C2%B0p%C2%ADjN%C3%A6%06A%04%C3%81%C3%889%17%C3%B7%7D%3FM%C3%93ta%5E%C3%80%C3%B9%20%C2%8A%C2%A2%C2%BF%0B%C3%A1%5Cc%C3%9E%C3%80%C3%92%16%7B%C3%80%0D%5B%C2%AE%C2%B0%C3%B6%C2%A3%0Bt%3F%C2%A8%1D%5E%0EFq%C2%85%C3%AF%C2%80x(%C3%A2%C2%83%C3%BE%C3%8A%C2%B2%2CD0c%C3%9Eu%C3%9Dx%C2%80%C2%93%C3%A7H%C3%B6%C3%A0s%C2%ACsm%0F%C3%B9%0C%C3%BB9%04%08%C3%BB%C2%82%C3%BBY%C2%96%15VNY%C2%81%18%C3%93%1A%C3%AC%C3%AC%C2%94%C2%9D%C2%91%C3%986%5E%10%06%01%C3%A2%1B%C3%8BI%0B%04a%C3%9Cp%10%26%C3%AAd%10%14%5D%09%C3%98%C2%B4%C3%9C%C3%920G%2F%C2%93%20%12%01%C2%B1%7F%208%C3%A2%C3%8D~)dow%22%C2%90%C2%8D'q*%7B%C3%99%C2%80Kdo%C2%8A%7C%C3%A9G%C3%8Ew%C3%A2h%C3%BE%1F%C3%BDc%C3%8F%C3%A0%C3%94%10%3E%12%10gup%C2%AC%C2%BD%C3%A7%C3%BASp%00%00%00%00IEND%C2%AEB%60%C2%82";
var view_button_fx_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01AIDATx%01%C2%8D%C2%92%C3%8BM%C3%83%40%10%C2%86g6N%C3%8E.%01%3AH%3A%C2%88%C2%95%02%C2%80%0ErEB%04W%10%C2%A7%02%C2%88%C2%8C%C3%841PA*%40%C3%AB%12H%05%C2%A4%C2%84%1C8%20%C3%AC%C3%9D%C2%9F%C2%99%0Dv%16%C3%84k%24%C3%8B%C3%A3%C2%99%C3%BD%C3%A6%C3%B1%C2%AF%C2%99%22%2B%C2%AD%C2%9B%01(%C3%84M%C3%9B%C2%98%C3%A3%C3%9Eq%C2%9E%C3%B16%3E%C2%97%C2%B4%C3%8E%C2%B5E%0A8%05%C3%88%C2%80%C3%AE%0F%10%C3%AD%C3%A8%C2%8BuP%C3%A2%C3%9C%18F%3A%C3%80%C3%A7%17%C2%93%C3%81%0D%C3%BDb%C2%A6u%C2%B8G'%C2%A1%C2%B2%C2%A1%C2%8A%C3%BE0%5E%C3%89X%C2%AF%C2%B2C%0Do%C2%89%C2%90%C3%B6%C2%B97%C2%8A%0F%C2%9CG%C3%BB%C3%9CY%1C%C2%85N%2Fp%C3%AB%1A%C3%AEY%00%0D%C2%A4%C3%AA%C3%87%C3%8F%C3%B2%C2%B1.%C3%B4%C2%A0%C2%884%C3%97%C3%AF7%C3%9FL%13b%2C%C3%A0i%C3%83%C3%8C%C2%AA%C3%9C%C3%82%C3%84%C3%A3%C2%81%C3%A7%24q%01%C2%A0%C2%AAj~6%C3%A9%17%C2%AC%C2%B9%5B%C3%9B%C2%AC%3Ch%C3%AA%C3%98%C2%8F%C3%B2l%C3%B0%C3%942%C2%A5%C2%AD%C3%87%00%C3%9B%C3%80%7F%00%C2%9D%10%C2%92%18%C3%8Ak%17%03%C3%BB%24%3A%C2%B9%C2%BDI%3AEM%C2%B8%1F%C3%82PZ~%02ti%07c%C2%89%C3%B7%C3%A3%1A%C3%9F%5CuPB%C3%8D0T%0261%C2%A0j2%C3%B1%C3%B62K2)X%C3%A9%C3%8E%1D%04%C2%8F%00%19%C3%83U%1B%C2%AC%C2%BD%5C4%C3%BCC%C3%83%C3%A6%2C%C3%A4%C3%98%C3%A7%C2%B2%C3%93%C2%B2%C2%95%C2%9CK%C3%9B%C2%AC%01%3A%C3%BD%C3%AE%1F%C3%BB%C3%89%C3%8CA%C2%84%C3%BF%01j%C3%AF%C2%83%C2%BD%C2%BA%C2%93!%C3%A8%C2%BFM%00%00%00%00IEND%C2%AEB%60%C2%82";
var collapse_transformation_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%40IDATx%01%C2%B5S%C3%8Bm%C2%83%40%10%5D%3E%C3%A2L%09%C2%B8%03%C2%A7%C2%82%40%05%C3%8E%1D%C2%81%C2%A0%C2%82l%07V*H%5C%01%09%1Fq%C2%A4%04%C2%93%0AB%3Ap%09D%C3%A2%C2%84%C3%B8%C3%A4-Z%C2%AC%C2%B5Ya_%3C%C3%92hwgv%C3%9E%C2%BCy%0B%C2%84%C3%9C%C2%B0(%C2%8A%C2%AC%C2%B5%C2%BC%C2%BA%C2%96L%C2%92%C3%846%0C%C3%83%C2%BE%1B%C2%A0(%0AS%3C%C2%8F%C3%A3%C2%B8%C2%85%3F%C2%8B%C2%B1%3C%C3%8F%C2%AD%2C%C3%8B%C2%B6R%C2%80%C2%A6i(%C2%BA%C3%AE%C3%A7%C2%B3%C2%A2(%C2%AC%C3%98%16%18%C2%BDv%5DG%5D%C3%97%C2%AD%C3%8EwD%00%C3%8Ckj%C2%9A%C3%B6%C2%A3%C2%AA*%19%C2%86%C3%A1%0D%C3%AB%1E%0C%2C%C2%A4%1C%C3%B8%C2%B4%C3%AF%C3%BB%C3%9E%09%C3%83%C3%B0%24%05%C2%98%C3%A7%C3%86r%24%12%03%40%C3%A8%C3%BB%C3%BE%C2%A7%18%5B%C2%88%C2%88%C2%AE5%C2%96J%06%C2%80%C2%91N%C2%8B%18%C2%A7%1D%20%C2%B9%C3%83%C2%99%C2%89c%C2%92%C3%9BV%C3%82%C2%BF%C2%A1%C3%87%C3%87y%04%C3%B6%C3%9E%C2%BA%C2%AE3%00%1BTw%00%C2%B4%24%C2%85%070%C2%AC%C3%9A%C2%B6-g%1D%16%1A%C2%B0g%C2%82PG.%C3%9E%C2%B59%C2%9E%C3%A7%C2%95b%60%C2%A1%01%C2%8Ag%C3%A5%0F%C3%B0%C2%9A%C2%87%C2%BF%C2%A6n%C2%8A%C3%B2~%7D%C3%BF%02%20%C2%8E%C3%A3%00%C3%8Fg%C3%B3N%14%05L%C3%8C%1A%C3%BB%00%C3%B3n%C2%903q%C2%87%C2%8A5%C2%BA%C2%84%C3%81%13%C3%A6%C2%9B%3A%C2%83%C3%89%2F%C3%BC%C2%8F%C3%AD%C3%B9%C3%8C%1B%C3%96%C2%84%C3%9Ck%C3%B8%26%5E%C3%924%C2%A5kwV%7F%26%C3%90.%C3%81%C2%A0%22%C2%8F%C2%B4%7F%C3%9A%C2%A4%C2%96h-9%C2%8E%C2%B6%00%00%00%00IEND%C2%AEB%60%C2%82";
var collapse_transformation_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%0F%08%06%00%00%00%C3%ADsO%2F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%017IDATx%01%C2%8DR%C3%8BQ%C3%830%10%C3%9D%C2%95%C2%93%19%C2%8E%C2%94%10%3Ap%3A%C2%B0%C2%A1%00%C3%92%C2%81%C3%93%00%13%C2%A7%02%C2%86%0A%3Cv%26%C3%831%C3%90%01%0D%04%C2%B9%03%C3%9C%01.%C3%81%07N%C2%B6%C2%A4E%C2%8B1%C3%84N%C3%BCy%17i%C2%A5%C3%9D%C3%B7%C2%B4%C3%BB%040%C2%80%C2%83%C2%A4k%18%C2%81%18%C2%BA%C3%BC%C3%92%C3%9A%C2%8BFHZ%04%C3%8F%C2%92%16%C2%A71%3Ap%3F%03%C3%ADM%26(%C2%8DZ'G%C2%B5nb%22t%C2%8D!%C2%AF%C2%89wR%3F%C3%AE%C2%A4Z%C2%B5DN%03~%C2%AEC%C3%BAS%20%C2%BC!%C2%98X%C2%93%C3%B8%C2%B0%09)%20%3D%11%C2%89%03%02%C3%A5%0F%C2%B73%C2%BF%C2%97%C2%80%C2%91%C3%882%04%12%11%5C%C2%80F%C3%A7f%C3%ABc%C3%9E%C3%9B%02%C3%83aEh'%C3%BD*%C2%A5Wp%0E%C3%BCy6%C3%A8%15%12%04%04%C3%A0%C3%9A%C2%B3%11%C3%AB0G%C2%A2L%09%C2%8A%C2%B7%C3%BE%3C%C3%BDk%C2%81%C2%89x%C3%A2%3C4D%0C%C2%BAD%08%C2%98%11%C3%AAW%5E%15%C3%8C2%C3%9BJQ%C2%9Fw%C3%80VVv%C2%90%C2%97%C2%945%C2%8AeS%C3%98%C3%A0l%06%15%19i%C2%97%C2%82%C2%88%C3%A2%C2%A6%C2%B0%C3%9E%C3%93B%18%15v%C3%B3%5B%04%C3%96%C3%A7%C2%8D%C2%B5%2C%C2%B3%C3%93%5En%C3%AE%C3%A6%C2%9C%5C%C3%988%C3%A5%3D%3B%C2%80(%C2%82%C2%BD%2C%5D%C3%A8C%C3%94%C3%B9%C2%89%C3%B1%7B%C3%B9%C2%92%C3%88%C3%BF%C2%8FU%C2%8BT%1ELEr%2C%C3%83hHq%0C%C3%BB%09%C3%85%C3%9F%C2%9D%C2%AF%C2%90%C2%84%C2%A7%C2%88%C2%9A%1E%00%00%00%00IEND%C2%AEB%60%C2%82";
var layer_3d_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01gIDATx%01u%C2%92%C3%81m%C3%82%40%10Eg%C3%96%C3%AB(G%C2%97%60%3A%20%1D%C3%84%C3%90%40R%01%C3%A1%C2%98%03%20*%C2%80%0E%10%10)GH%23%18*%08%1D%40%09%3EFaw'%C3%B37%40%2C%C2%8B%C3%B8bi%C3%B6%C3%8F%C3%8C%C3%BB%7F%C2%97%17%C2%A5%C2%9F%C2%91%C3%90%13%C3%A9%C3%A7%C3%99%14%C3%A3%C2%82%C2%8F%C3%94%C3%B8%C2%96%1BW%0Aq%C3%8E%2C%C3%BBAa%C2%9F-%1AD%C3%82%07%C2%9B(%C2%AE%C2%A2%C2%A8%3C%3DJ%C3%A0%7C%C3%98%C2%B5%C3%AB%C3%98%C3%854%C3%97%C2%91%C2%B9%C2%88%C2%99%C3%8DJ%C3%89y%C2%B1%C3%B1%07%C3%A6%C3%90%1F%14%C3%A9%C3%B6%5D%0BN%C3%BCJ%C2%88%C3%9A%C2%AA%C2%8C%03R%C3%9D%C3%BE%C2%AA%C3%9B!N%C3%84%1F%3C'-%C2%83%C2%A2%23%C2%BB_%C2%96~r%C3%92%C3%A2%2Ff%C3%B2%00T!%C2%BFC%C3%AD%C2%ADt%2BP%C2%A4%C3%9A%00%7C%C2%86%C3%A82%25%C3%A2%09%C2%8D%2FX%11S%C2%8C6%08%C3%BC%14%C2%A0A%C3%9D%C3%96%0D%0B%C3%8B%C2%9C%C3%89L%14y%C3%82%24G%11j%C2%AB%C3%9F9%C2%B3%C3%A9%C3%A9%C3%A9Ug%C3%AAM%C2%81%C3%AC%1AX%C2%B1A%C3%93%02%C3%A6%C2%A8%C2%9BN%C2%9Bi%C2%9Af%01%C3%8CAdG%2C%C3%9B%5B%C3%B1%C3%97%C3%B14)%3E%26%12JM%C2%B0%C3%B8%0E.%16%C3%BF%C3%92%C2%94L%C3%83%C2%BA%0E%60%5C%C2%9C%C3%A30%C3%96p%2B%23%C2%A7%C2%A9z%C3%AAa%C2%80z%C3%88%C3%B4%3C%C3%93%C2%A4%C2%B6%C2%8E%C2%93%3E%C3%84%18%0A%7C%03vK%C2%9C%01e%C3%94%C2%B9%7B%C3%81%3D%C3%80%C2%93%C2%8A%C3%B71%C2%B1%C2%8E%C2%AD%C2%BD%12%C3%89%C3%8F%C2%9B%C3%BC%C2%A7%C2%AEo%C2%9F%C3%AF%C2%A7u%C3%8B%07%1E%C3%80%C2%B9%C2%A1%C2%82%C3%86%3A%5Dw%C2%AF%188%1C%C3%BEc%1C%0F%00%C3%BF%2Fm%C3%92%C2%A1%C3%95%0F%03%C3%98%C3%88R%C2%93%3C%C2%97q%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var layer_3d_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%019IDATx%01m%C2%92%C2%8DQ%C2%83%40%10%C2%85%C3%83%C2%91%02%C2%B0%03%C3%92A%C3%92%01%C2%A9%20%C3%9A%01%C2%A9%40-%C2%80%C2%9F%40%03%C2%A4%C2%82h%05%C3%86%0A%C3%84%0A%C2%8C%15H%094%00%C3%B8%C2%BD%C3%8C%C2%9Ds%C2%83%C2%B9%C2%99%C2%9B%5Dv%C3%9F%C3%AE%C2%BD%7DKP%C2%96el%C2%8C9M%C3%93%14%07A%C3%90%C3%A6y%C2%BE_%C3%8CN%5D%C3%97%C3%898%C2%8E'%C3%9C%1E%C3%8C%C3%AB2%0C%C3%83%C2%98%40B%C3%91%C2%9E%C3%9B%0BD%C2%A3%C2%88F)%C3%B13~7%0C%C3%83%C2%85%C3%B0%C2%81%C2%82%04%C2%BB3%C2%AE%1B%C3%89%17%C3%AEY%5DI~%C3%91%C2%A0%C3%80%C3%BETU%C2%A5%17%22%C3%A5%C2%89%C2%B5%C3%82%06%C2%B6%20%C2%96%C2%B54%C3%97%C3%9C%23%C2%9F%C2%8D%C3%80%14%C2%BEa5B%C3%83%C2%8B%C3%87k%C3%8C%7B)%05%C2%A0%C2%AE%1DE%5B%C3%91%C2%B2%C3%B3%14%C3%90%2C%C3%A5%17Eq%C3%85%2Fg3%C2%8B%C3%BB%C2%B7%C2%A5%25%3A%12%60%C3%81w%C2%83%C3%BF%C3%A4%40%C3%86%C2%AF%20%C3%99%C3%93-%05%C2%B0%C3%A2%C3%9EKM%C3%AC%06%C3%BB%C3%AE%C3%A3%C3%8C%C3%A2%C3%86%C2%B1%C3%94%C2%A4%C3%A4'~%3F%C3%8F%C3%BB%C3%B44K%22%C2%B5%C2%A0tpAoG%C3%9D%1F%23%17%C2%84%C3%96J*%3A%C2%B5%C2%A4%C2%92%05FNMv%C2%AA%7D%C3%AE%C3%9CK%C2%B1Gkc%C2%95%7C%C3%A4v4%7CvJ%C3%9A%C2%A5%C3%87%01%C3%8EZ%C3%8B%C2%B4B%C3%A87%C3%9A%C3%8Eg%C2%B0l%3E%1C%C3%86Pt%C3%A1%C3%89%3B)F%C3%A2%C3%9F%7F%C2%A7%C2%93eYk%15%15%C3%A6%C3%A1%17%C2%82%3A%C3%8E%3D%C3%99%C2%A3%C2%BB%0A%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var motion_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%0D%08%06%00%00%00%C2%9D)%C2%8FB%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%ADIDATx%01%C2%95R%C3%9B%0D%02!%10%C3%A4%C2%B6%01)%C2%81%12(%C3%A1J%C2%B8%12%C2%B4%02%C2%B4%03%1E%C3%A1%C2%9F%16%C2%AC%C3%80%12%C3%8E%0E%C3%94%0E%2C%C3%A1%1A%00%1C%C2%92%C3%A3C%25%C2%97c%C2%92%0D%1Bvf%C2%99%2C%C3%8BX%03%C3%8E%C2%B9%091%C2%B6jT%13%C2%AD57%C3%86%3CJ%C2%9EsV)%C2%A5y%15%2B%C3%94%C3%84%C2%97%00%17%12%07G%C3%88%C3%9F%C2%8E%10O%C3%830%C3%8C%2B%C2%87%C2%91%C3%B7%5E%12%C2%91b%C3%9B%10%10%C3%9D%C2%8A%0B%C3%82%C3%93%C2%9C%C3%AD%C2%83%40%C3%A3%23%C2%B1%0E%C3%80%C3%9E%C3%98%25%C2%80%C2%ADC%C2%97%C2%A0%C2%A0%C3%97%C3%92%C2%8Bb%C2%8CK%C2%87%20%10F%C3%B5%C3%84%C2%A4%C2%AE%3B%C3%88%17p%C3%9F%C3%B5%C3%A3%C3%AE%1B%C3%9C%05%C3%A4%138%C3%A1%C2%AFRW%C3%80Z%7B%C3%86%C2%9A%C2%84%C2%96%C3%BA%03%C2%97%15J%C2%BEJ%17%3B%2F%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var motion_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%0D%08%06%00%00%00%C2%9D)%C2%8FB%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%8EIDATx%01%C2%95%C2%91%C3%81%0D%C2%82%40%10E%C3%BF_%09gK%C2%A0%04K%60%C2%B5%02%3B%C3%90%C2%A31%C3%81X%C2%81v%C2%A0%C2%84%18%C2%8Fb%05%C3%86%02%0C-P%C2%82%25pV%C3%98q%C2%91%C2%AC%07b%02%C3%BC%C3%8B%C3%BE%C3%8D%C3%8C%C3%BB%C2%B3%C2%9B!Z%3Ae%C2%AF%C2%89%C2%81%0A%3C%C2%8C%C3%B2%C2%95%C3%A6%C2%B3%5D%C2%A73%C3%89%C2%A3%C2%BC%09p%17H%40r%07%C3%81%C3%92%C3%95%C2%A2%C2%99%C2%97%3A%C2%AF%C3%8E%C2%99%04%C2%B5%11r%C3%92N%C2%ABa%1ByI%C2%B2j%C3%B7%03J17tHD%C3%B6I%C3%B6%0E%C2%BF%C2%80%7D%C3%86%18%7D%24%C3%BCNQ%C3%A8)%1B%1C%0E%02j%1D%C3%AC%7F%07%01VEo%C2%80%60%C2%BE%C3%95%C3%AC%0F%08%25%C2%AEO%05Vqg3%C3%8C5%C3%92%C3%8D%C3%B2T%C2%A4%C3%BDc3%12%C3%85%C3%9Ff%C2%91x3%C3%B5%17%C3%AE%C3%AE9SR%C3%8D-Ux%C2%A8B%1A%C2%A4T%26_k%3Fm%07%7C%003%C3%92C%C3%8Dd%C3%A1%C3%82K%00%00%00%00IEND%C2%AEB%60%C2%82"; 

///
var edit_group_layers_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0C%08%06%00%00%00R%C2%80%C2%8C%C3%9A%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%01IDATx%01%C2%95%C2%92%C2%BB%C2%8D%C3%82%40%10%C2%86w%C3%97W%C2%80%C3%93%C2%8B%C3%8E%25p%15%C3%9C%C3%9A%0D%C3%9C%5DF%C3%A8%C2%94%08%11%11Y%C2%AC%C2%9D8DT%00t%40%07%C2%86%0E%5C%02%25%10%3B%C2%B0%C3%B9%C3%86%C3%82%02Y%C3%A65%C3%92%C2%AF%C3%99%C3%99%C2%9D%7F%C2%9E%C2%AB%C2%9Ds%C2%BE1%26n%C2%9A%C3%86W%17%C3%A1%5Cr%C2%BFS%0F%C3%A4%03%C3%BC%C3%A1%C2%B8%C2%BC%C2%BD%C3%94Z%C2%AB%2C%C3%8Bf%C3%A8%C2%B2OH%C2%92d%2F%C3%9A%C3%B0%18%0CE%C2%94%60u%5D%17%7D%C2%A4i%C3%AAZ%C2%A2zSH%C3%B4%C3%95%C2%95%C3%BAHNd%5E%C2%A1%C2%BB~G%C3%98%C3%813%C2%A2%C2%90%C2%BE%19%C3%92%11X%C3%8F%C3%B3~%C3%A8%2F%C3%AD%1E%C2%BD0%0C-%C3%9A%0E%C2%944%C2%81x%C2%8C%C2%A2(%C3%86%C2%9Cs%1Es%C3%B6%C3%B1%C3%BF%2C%C2%8A%C2%A2%C2%BC%C3%9B%23%C2%83%C2%90%C3%B2%C2%AC%0C%09%1C%40%08d%03%0By%C2%BFK%C2%A4%C2%BC%13%C3%98%5CM%C2%B7G%1F%C3%80%C2%B6%C3%ADQ%C3%8A%C2%91%C2%BD%C3%B5%25%C3%8F%C3%B3%C2%A0%C2%AA%C2%AA%C2%B8%C2%8Dn%C3%8C%C2%9A%C2%BDJ%C3%96%C3%9F.%C2%90%C2%BE%C2%84%C2%B3%03Ie%C3%B9%C3%B2%C2%9BF%10%C2%A7%C2%90%C2%A4%C3%AC%7Fl%19V%C2%A9%5E%11%1C%032%C3%86%C2%B7wg%C3%9D%10%C2%8C%C2%B3%C2%86%C2%A2%C2%86%16%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var settings_effects_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%13IDATx%01%C2%A5R%C3%8D%C2%AD%C2%82%40%10%C3%9E%5D%5E%01%C2%96%C2%80%1Dh%07%C3%8B%C3%AD%1D%C3%9F%C3%AB%40K%C2%B0%01X%20%C2%84%C2%ABV%C3%A0%C3%95%12%C2%BC%C2%B9%25%C3%98%01%C3%9B%C2%81x%C2%84%03%C3%B8%C2%8D%0E%09%C2%AE%C2%98%C2%988%C3%892%7F%C3%9F%C3%8C%7C3A%C2%8A%09)%C3%8B2%24%C3%9D4Mm%C2%8C%C2%A9%C3%BD%C2%BC%C3%B2%03y%C2%9E%C3%AB%C2%B6m%2BzR%C3%8A%0B%C2%8A%C3%B4d%11%123%02%C2%93%C3%9D%C3%B7%C3%BD%C3%A2%09%C2%A0TH%C2%BA(%C2%8A%05%C3%A1%C3%88%C2%96%C3%B4%C3%89%C2%B2l%0F%C3%B0%0A%26Q%C2%99%C2%89Wqx!%26o%C3%A38%C3%9EHT%C2%93S%C2%BD%03%C3%BAA4%C2%8F%C2%88%C2%9E%C3%B6%C3%81H%C3%8C%C2%93%24%C2%99%C2%93%C3%A6%C3%A2'%C2%BA%C2%81%C2%B5%C3%B6%C2%AC%C2%B5%C2%BEb%C3%9A%C3%AF%C2%9D%C2%AF%C2%94)%0A%C2%8Ed%23Ws%C3%AE%C2%8F%C2%A7%C3%BC%23w%C2%B8%1F%22%08%C2%82%5E%7C%20%C3%83Qh%C2%A7%15%3A%C3%AD%3Dz%11%C3%A2%C2%8E%C3%B7%3D%C2%8Dw%C2%83%C2%BF%C3%BE%C3%B19%C2%8B%C3%87%C2%95%C2%AA4M%C2%9D%C2%988D%C3%97uV%C2%A1%C2%9B%C2%85%C2%BD%C3%A3%C3%98y%5C%C3%8C%C2%BA%1E%1A%C2%83%C3%81%C2%8E%18(v%0C%C3%9E%12K.%C2%A1%C3%97%C3%A3%C3%8E%C2%98%C2%BA%C3%A1KFp%0D%C3%85%C2%88%C2%9E%C3%A0%C3%BFk%C2%98%C3%A2%3C%3A%C2%8E1V%7C%237%20%C3%82%C2%87%C3%8B%C3%9E%C3%93%C2%902%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var add_layer_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0D%08%06%00%00%00%C2%99%C3%9C_%7F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%A3IDATx%01%C2%9DQ%C3%9B%11%C2%820%10L%18%18~-%C3%81%0E%C2%A4%04%C3%AD%C3%80%12%C2%B4%02%C2%B1%01%C2%92%40%03Z%01%C2%96%C2%A0%15%18%3B%C2%A0%03SB~%C2%81%01%C3%9C88%22%04t%C3%9C%C2%9F%C3%8B%C3%9E%C3%9D%5E%C3%AEAI%07%C2%9C%C3%B3%C3%80q%1C%C2%86%C3%A7%C2%8C%C2%8CC%C3%95u%C2%BDw%C2%BB%1EJi%C3%984%C3%8D%C2%9A%7C%01%C2%8A%C3%9F%C2%9E%C3%82%24I%C2%96UUe%C3%BD%04%14%C2%92%C2%A8%C2%BE%C2%85%C2%BD%0F%C3%84ho%C2%8E%C3%A0%C3%95%C3%B7%7Dk%7B%C2%88%2B%C2%9B%C3%9F%C2%B59%C3%B1%C3%83%19F%C3%83%C2%AA%C2%96%C2%9F%C2%8C%C3%85%18%01L0*%04.%C2%9E%C3%A7%C3%89%3C%C3%8F%C2%B5!x%0Bc%C3%8B%C2%B2%C3%9C%C2%B5b%C2%BB%10%C3%81%C2%B4(%0A%C2%B3%04%09%C2%BA%C3%82%7B8%23%C3%B9%13%C2%93B%C3%93V%1C%C3%87%C3%A9%2FB%C3%95%C3%A33%C2%887%7D%11%C2%AE%C2%90%7D%C3%8C%C3%88%18%C3%83%C3%B6%C2%B9%24%C3%93%C3%90%C3%88y%0B%C2%B1%C2%80P%08%C2%A1%C3%87%C2%B2q%12%1DE%C3%91%C3%A1%C3%85%5Ds%60%08%C2%8E%08%2C%C3%884T%C2%97%3C%00%06%C3%87_E%C3%8D.%C3%B2%0B%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var delete_group_layers_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0B%00%00%00%0F%08%06%00%00%002%3D50%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%BFIDATx%01%C2%95Q%C2%B9%0A%C3%82%40%10%C3%9D%5Ds%C2%98%C3%82%03K%C2%B1%C3%90%C2%9F%C2%B0%C3%96%C3%96%C3%92J%2Bm%C3%BC%00%3B%C2%AB%10b%C2%A1%C2%85Uj%05Q%C3%B0%2B%04%1B%5B%05%C3%AD%C2%B4%C3%B0%00%0B%C3%8B%C2%B4!%C3%87%C3%BA%22%09%24%C2%A2H%06vwv%C3%9E%7B3%C2%B3%C2%B3%C2%84%240%C2%AAiZ%C2%8D1V%0E%C3%AEi%C3%8E%C3%B9%08g%C3%BE%0DR%3A%C3%86q%0A%7CS%C3%80%C3%96%05%C2%A1%C3%B3-%13%C3%A2%C2%83%C2%88%7F%23%C2%89%C3%9A%C3%B07%5D%C3%977%C3%BF%C2%88%C2%9E%C3%A7%C3%B5%C2%85%C2%A0D%C2%8D%C3%BC%C2%B7%3C%C2%8B%C2%95%C2%A1t%05%C3%A16%C2%B8%C3%9E%C3%A1%0F%C3%BD%C2%A4!%1E%23%03%C3%9C%2B%C2%8A%C3%92%C2%80hj%C3%9Bv%C3%9Dq%C2%9C%25%C3%82%C3%8F%C2%AFd%C3%98%C3%84%C2%B2%C2%AC%C2%B6%C2%AA%C2%AA%3DY%C2%96%05Q%14%C3%97%C2%88%15%7F%C2%91%C2%AFx%C3%88%C3%9A0%C2%8C%C2%AC%24IOT%3AG%C3%81%C3%8F6%C2%BA%C3%B8%C2%A0%C2%8Ci%C2%9A%17%C2%B4%C3%91%C2%84%C2%A0%C2%85%C3%B0%23%C3%84%C2%85%C2%98%C2%92%C2%B19%049%C2%B8%05%C3%97ugX%3B%C3%B8%C2%A5O2%C3%B7%C2%87%01b%25%C2%A2MaU%23%C2%89x%C3%98%C3%86%02%13%C3%A0%C3%A4%C2%B7%1D%C3%B1%C2%96%03Ib%2FC%1Cf%C2%AA%07%0A%3E%C2%AF%00%00%00%00IEND%C2%AEB%60%C2%82"; 

//Setting Panel Icons
var create_group_layers_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0C%08%06%00%00%00%C2%BDB%C3%A7%C3%A4%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8FIDATx%01%C2%A5R%5B%0D%C2%800%0C%C3%AC%08%02%C2%900%098%00%098%00%14%C2%81%03%C2%90%02J%40%02%0E%C3%8A5t%C2%84%0F%1E%C3%9B%C2%B8%C3%A4%C2%B2%C2%B5%C3%A9u%C2%BBu%C3%84%C3%8C%1D%C3%BBc%013r%C3%A0p%C2%94N%C2%9B%C3%90%0F%C2%A4%C2%BA%C2%8E%C3%A0%C3%BCQ%2B%C3%97%C3%AD%C3%AE%C3%84%C2%B31f%7CS%C2%AAW%0B%C2%AE%C3%97%C2%A4%C2%A0%C2%A1%08%04y%C3%86!%C2%95%C2%BCx%C2%94%C2%98%0E%C3%9F%C3%96%05%C2%A9%C2%8FBm%0D%C2%97%C2%98%C2%B1%C2%AC%5Eb%60%02%5B%C2%B0%04k%C3%9D%C2%9F%C3%A2%C3%A2h%C3%B6%C2%88M%C2%A6%C2%A15%C3%B59%19%24z%C3%8F%C2%9Fee%5C%60%C3%AE%3A%C3%AE%C2%94s%C3%80%C3%BFf%C3%B8%C2%8C%C2%8A%00%00%00%00IEND%C2%AEB%60%C2%82";
var save_my_presets_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%0D%08%06%00%00%00%C2%9D)%C2%8FB%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%89IDATx%01%C2%BDRA%0D%C2%800%0Cl%09%02%C2%900%09%C3%A0%C2%809%40%12N%C3%80%01%12%C2%90%00%0E%C3%80I%C2%B9%25e%C3%802%60%7C%C2%B8%C3%A4%C2%B2%C2%AD%C2%BD%5E%C2%9B%C2%A5D%11%C2%88%C2%88%01%0BJ%05%C3%84%23%C3%98%C3%86r%19%7D%C3%84%C3%8F%05%C2%98%C2%BB%09%C3%9E%26%C2%8C%C2%B1%06V%C3%A5%04%C3%8E%C2%A0%C3%91%C2%B3V%5D%05%C2%96%C2%BB%C2%8B%C3%BF%11u%5C%C3%A4%C2%80%C2%BB%1B%C3%8D%C3%B5%60w%19%C2%89%C2%99%5D%17%7B%C3%AAh5%C3%A6%C2%91S%00'%C2%80%C2%93%3D%19%C3%90c%C3%81%C2%9D%C3%90%03n%C2%83%C2%A4%C2%A3e%C3%9D%C2%99%1A%7C%C3%9D%1Dt%C3%AE7%C3%BD%C2%B5%C2%80%C2%B8%C3%A5%07%06%00%00%00%00%00IEND%C2%AEB%60%C2%82";
var load_my_presets_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0A%00%00%00%0D%08%06%00%00%00%C2%907%C3%BF%05%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%A7IDATx%01%C2%85Q%C3%9B%0D%C2%830%0Ct%22%C3%BE%C3%8B%08%C3%AD%06%C3%99%C2%A0%C3%AA%08%C3%9D%C2%80%0DJ'%C2%A9%C2%BAA%C2%BBA7H7%C2%80%11%18!%1B%C2%843r%C2%90%09%01N%3A%C3%85%C3%8A%C2%9D%7Dy%18%02b%C2%8Cg%C3%8A%60%C2%8C%19%16%1B0%C2%BDb%19%1DXk%C2%A3%07%5B%C2%9E%C2%AA%C3%98%C3%A6%C3%A6J%C3%BCAGA%0CR%3A%C2%90%07%C3%9D%2C%1D%C2%83%C3%8D%C2%9F-%C3%A3%0F%C2%BC%08%C2%9F%C3%A0%C2%A9%C3%8A%1D%C2%88qr%C3%AB%5E%1F%C3%83%16L%5E%C3%8E%C3%A5%C2%B4f%C2%95%C2%A9%16S%C2%82%C3%97%C3%AF%3BG%23*%40%C2%B8%C2%A3l%C2%B8%0F%C3%BC%C3%B2K%60%C2%8FV%C3%91%10%C3%BE%C2%A5ZO%C2%BC%C2%A6N%20%5D%C2%A2I%C3%9A%C3%94%C3%88%C2%BF%C2%80%C3%B5A%C3%BBx%C2%8FX%C2%98%7C%C2%88%C2%BC%3BF*%00%00%00%00IEND%C2%AEB%60%C2%82";
var unlink_layer_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%10%08%06%00%00%00%C3%B01%C2%94_%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C3%B2IDATx%01%C3%8DQ1h%14A%14%C3%BD%7Fv6wI%40%12H%23%C2%A2D%14-%02%C2%A2%C2%85%C2%95%C2%88%C2%B9S!%60%C2%95%C3%8AJ%0B%11%C3%84%C3%88%C2%8A%C2%B9N%1B%C2%B7%C3%91J%C2%B9%C3%8B%C3%A5%1Am%C2%84%C3%98%06%0CV%11%C3%8Dm%10%C3%81BAc%C2%91%C3%86%C3%82%C2%A0%C2%82%C3%98%24WhLvw%C3%BEs%C3%A6%C2%8E%C2%8D9E%C3%82%C2%A5%C3%8A%C2%83%C3%99%C3%BD%C3%B3g%C3%A6%C3%8D%C2%9B%C3%B7%C2%88v%0Ax%C3%B3%24%C2%8C%C2%A0%07%C2%84%C3%B6x%C2%AA%C3%95%C2%BFZ%C3%A0%25%C3%B7%7F%14%C2%A1o%C2%8D%C2%A8%C3%8F%C3%95%C2%A2%C3%88%5C%3BE_%C3%ADQd%C3%A7TVLF%C3%A9%C3%B9~%C2%98o%C3%82f)%C2%81%C3%B9%C3%A4%C3%86d%C2%94%0C%C2%BB%C2%B5%1F%C2%94%1E%C3%8Dz%C3%86%C2%98%C3%8F%C3%95%C3%88%7C%C2%9Fx%C2%91%C2%8C%C2%B4%C2%91T%C3%AA8%2CBSDxLH%0F%C3%BA%C3%AC%C3%ADw%23%25%C3%BD%C3%9E%C2%AD%07%05%7F%3E%C3%AB%C2%91%C2%98!%C2%80%C2%9E%C2%B0R%C3%93%C3%95%C3%A7%C3%B11%C2%B7%C2%AE%5B%1F%C2%B9%08%C3%A6%C3%85%C2%A0%C2%A8K-U%C3%A66%0B%06%7D%5B%C3%97%C3%A6%C3%92%C3%A6mF%0C%09%C3%89%C3%82%C3%B53%C2%B9%C2%8A%C2%9D%5E%C2%A9%C3%8E%C2%99a%C3%B1%C3%88)%7D%C3%97%24%01S%2F%20~%26OD%C3%BA%15%C3%B3%20%C3%BD%05%C3%85%5E%C3%A3%C2%8F%C2%9BhX%C3%AB%C2%BA7%C2%94(R%C3%93%C2%86%10%C3%94%C3%A6Q%C2%B2%C2%A6U%C2%98%C3%B9%06%C3%BD%07%0F%C3%9E%C3%82%C2%8F%1B2%06%C3%82q%C3%BB%C2%AC%C3%B1%C2%B6tjuS%12%C2%A6%3B%04%C3%A47.c%14%C2%9C%1F%C3%8E%60%C2%80%C2%A3M%5C%C3%ABLr3(v%C2%95%C3%9BH%1C%C3%8A%C2%B3%C3%98%C3%ADu%C2%A5%C2%87%C2%98%5B%7Dg%C3%ACx%C2%81%1Be%1B%C2%B1%C2%B6%0957!I%3C%C2%BF%7Bq%C3%AC%24%C2%AF%C3%90vp%C3%BF%19%C3%B6N%C2%BC%C3%82%3EW%C2%87!%C3%B4%C2%BD%C2%A7%18%C3%B8G%C3%89V%C2%A8%C3%96%C3%93%19%2BrH%C3%A7VO%C3%84q%C3%BE%C2%96Mdt%C3%A5%C2%A5w%40wB%C3%92%13%7B%C2%97~%C3%B9%C3%A6M%C2%B2%C3%96%C3%B3%C3%91%C2%A6%C3%B3%C2%93%C2%8D%C2%9C%0BC%C2%9D%C2%AANH.%C2%8F%C3%B0%C2%B2%C2%8D%C3%B2%C2%83%25%C3%98e%C3%A3%5D%C2%8E%C2%B5%C3%BF%C3%85%C3%B5%3B%22%C2%B1%C3%8Fyhc-Z%C3%A3G%C2%AD%C3%83%C3%B9%1C%C3%A4%C3%B5%C3%94%02z%3B%22!%C2%8Ff%09r6(%C3%A8%C2%99u%24%C2%A7E%C3%A1%C3%AE%C2%85%23%C2%B4%C3%BA%1B%C3%A0%C3%82%C3%9B%C3%96%C2%A4%03%C2%AB%C2%B4%00%00%00%00IEND%C2%AEB%60%C2%82";
var unlink_effects_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%10%08%06%00%00%00%C3%B01%C2%94_%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C3%B2IDATx%01%C3%8DQ1h%14A%14%C3%BD%7Fv6wI%40%12H%23%C2%A2D%14-%02%C2%A2%C2%85%C2%95%C2%88%C2%B9S!%60%C2%95%C3%8AJ%0B%11%C3%84%C3%88%C2%8A%C2%B9N%1B%C2%B7%C3%91J%C2%B9%C3%8B%C3%A5%1Am%C2%84%C3%98%06%0CV%11%C3%8Dm%10%C3%81BAc%C2%91%C3%86%C3%82%C2%A0%C2%82%C3%98%24WhLvw%C3%BEs%C3%A6%C2%8E%C2%8D9E%C3%82%C2%A5%C3%8A%C2%83%C3%99%C3%BD%C3%B3g%C3%A6%C3%8D%C2%9B%C3%B7%C2%88v%0Ax%C3%B3%24%C2%8C%C2%A0%07%C2%84%C3%B6x%C2%AA%C3%95%C2%BFZ%C3%A0%25%C3%B7%7F%14%C2%A1o%C2%8D%C2%A8%C3%8F%C3%95%C2%A2%C3%88%5C%3BE_%C3%ADQd%C3%A7TVLF%C3%A9%C3%B9~%C2%98o%C3%82f)%C2%81%C3%B9%C3%A4%C3%86d%C2%94%0C%C2%BB%C2%B5%1F%C2%94%1E%C3%8Dz%C3%86%C2%98%C3%8F%C3%95%C3%88%7C%C2%9Fx%C2%91%C2%8C%C2%B4%C2%91T%C3%AA8%2CBSDxLH%0F%C3%BA%C3%AC%C3%ADw%23%25%C3%BD%C3%9E%C2%AD%07%05%7F%3E%C3%AB%C2%91%C2%98!%C2%80%C2%9E%C2%B0R%C3%93%C3%95%C3%A7%C3%B11%C2%B7%C2%AE%5B%1F%C2%B9%08%C3%A6%C3%85%C2%A0%C2%A8K-U%C3%A66%0B%06%7D%5B%C3%97%C3%A6%C3%92%C3%A6mF%0C%09%C3%89%C3%82%C3%B53%C2%B9%C2%8A%C2%9D%5E%C2%A9%C3%8E%C2%99a%C3%B1%C3%88)%7D%C3%97%24%01S%2F%20~%26OD%C3%BA%15%C3%B3%20%C3%BD%05%C3%85%5E%C3%A3%C2%8F%C2%9BhX%C3%AB%C2%BA7%C2%94(R%C3%93%C2%86%10%C3%94%C3%A6Q%C2%B2%C2%A6U%C2%98%C3%B9%06%C3%BD%07%0F%C3%9E%C3%82%C2%8F%1B2%06%C3%82q%C3%BB%C2%AC%C3%B1%C2%B6tjuS%12%C2%A6%3B%04%C3%A47.c%14%C2%9C%1F%C3%8E%60%C2%80%C2%A3M%5C%C3%ABLr3(v%C2%95%C3%9BH%1C%C3%8A%C2%B3%C3%98%C3%ADu%C2%A5%C2%87%C2%98%5B%7Dg%C3%ACx%C2%81%1Be%1B%C2%B1%C2%B6%0957!I%3C%C2%BF%7Bq%C3%AC%24%C2%AF%C3%90vp%C3%BF%19%C3%B6N%C2%BC%C3%82%3EW%C2%87!%C3%B4%C2%BD%C2%A7%18%C3%B8G%C3%89V%C2%A8%C3%96%C3%93%19%2BrH%C3%A7VO%C3%84q%C3%BE%C2%96Mdt%C3%A5%C2%A5w%40wB%C3%92%13%7B%C2%97~%C3%B9%C3%A6M%C2%B2%C3%96%C3%B3%C3%91%C2%A6%C3%B3%C2%93%C2%8D%C2%9C%0BC%C2%9D%C2%AANH.%C2%8F%C3%B0%C2%B2%C2%8D%C3%B2%C2%83%25%C3%98e%C3%A3%5D%C2%8E%C2%B5%C3%BF%C3%85%C3%B5%3B%22%C2%B1%C3%8Fyhc-Z%C3%A3G%C2%AD%C3%83%C3%B9%1C%C3%A4%C3%B5%C3%94%02z%3B%22!%C2%8Ff%09r6(%C3%A8%C2%99u%24%C2%A7E%C3%A1%C3%AE%C2%85%23%C2%B4%C3%BA%1B%C3%A0%C3%82%C3%9B%C3%96%C2%A4%03%C2%AB%C2%B4%00%00%00%00IEND%C2%AEB%60%C2%82";

//Head Panel
var logo_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%7C%00%00%00%19%08%06%00%00%00%C3%B3'JW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%04%C3%B9IDATx%01%C3%ADXKn%1BG%10%C2%ADfhXI%14%C2%84A%0E%C3%A0%C3%91%0D%C3%A8%13x%C2%B6Y%C2%85%3E%01%C3%A9%13%C2%88%5Cf%C3%85%C3%91%09(%C2%9D%C2%80%14%C2%9C%20%08%C2%90%C2%804%C2%90%C2%AC%C3%89%C2%AC%C2%B2%14O%C3%A0%C2%99%C2%AC%C2%82%2C%022%C2%AB%C3%88%C2%B6%C3%A4N%C3%95%C3%8Ck%C2%B1%C3%94%C2%9C%19R0%0C%C3%88p%3F%C2%A0%C3%94%C2%BF%C3%AA%C3%97%C3%95%C3%95%C3%93%C3%95%25%12%05%04%04%04%04%04%04%04%04%04%04%C3%9C%2F%18%C3%9D%C2%B0%C3%96F%C2%95%C2%8A%C3%86d%C2%94%C3%98%16%C3%91e%C3%AB%C2%80%C3%9B%C2%97%C2%84%3F%07%07kJ%C3%8C%C2%9A%02%3E%084%5C%C2%85%0F%3B%C3%A5%C2%A2N%C2%88%1E%5E%C3%B6%C3%8D%03%C2%93%C2%BEj%C2%9A%C2%97%C2%A6a%5E%C3%92C%C3%AE%C2%BF%C2%BE%C3%AC%C2%94%113_%C3%8C2%16%5E%C2%96%0B%C3%94%23%C2%BAG%60%7BZ%2CsH%5C%C2%A13%C3%85x%C2%87%C3%9E%03%C3%A0%C2%A7%C3%B7%C3%86%C3%AF%C2%A3%C2%81E%23.D%C3%A4%C2%A6%C2%9E%C2%B1%C3%8CJ%C2%B5%3Fc9%C3%8CKcY%C3%A8%C3%90H%7D%C3%A1%C2%AB1_%C2%97%C2%8B9K%0F%C2%9C%C2%84%C2%BA%1C%7C%C2%9B%C3%AE%0F8bQ%0C%C3%99r8%C3%9B%C3%9AC%7F%0C%C3%9D%C2%9D%C3%A09%13%5B%20%C2%A2%C3%BD%10%C3%9D%C2%85%C3%BF%5D%C3%91%C3%B0%C3%9Ag%1C%C2%BA%C3%BB%5C%3E%2B%C3%95%3Ed%C3%B5%C3%8FY%C3%B8%C2%A0%C2%8D%1C%C3%B6%C2%A1%C2%99%C3%90w%C2%9FfZ%05%1B%C2%9D%C2%B0H%C3%BF%11%C3%B3%3D%16%C3%A1%C3%BA%C2%80%C2%8AM%C2%8D%C2%A0%C3%97%C3%82%C3%97%1D%C2%A1%C3%9EQ%1Cy%C3%9B%C2%8D%7B%C3%BC%C2%B1%C3%BEh4%0F%C3%9Amw%5B%C3%91%2F%3C%C3%BB8%C2%B3%5B%C2%A2%C3%97-ST%C3%B6u%C2%B4%7D%C2%B0%C3%AB%11%C2%9A%C3%AD%12%3B%C2%B7%C3%A6%C2%94%C3%B0%C3%B6%C3%8A%C2%A2%C2%8D%C3%9Ag%C2%A7%C3%8A'j~%C3%BD~%C3%A1t%C2%8B%C3%90%2B%13%C2%8F%C2%AD%C2%87%5C%C3%B1%C2%A7W%C2%89%C3%B9%C3%B1%C2%B5%C2%A5%1F%5E%5B%C3%B3%C2%9C%C3%8B%C3%AF%C3%9F%C2%8C%C3%A8%C3%B9%7F%C2%B1%C3%87%C3%95%C3%87%C2%94%5E%C3%89%3A2%C2%96(%C3%A3%05%23%C2%BD%06%C3%96%5E%C2%A9%C2%A5W%C2%88%18%C3%9A%C3%8E%C2%B1%C3%A2%C3%AC%C2%A1%2FA%3B%C2%85%C2%8C%14GjK%22%C2%8B%C3%A2K5G%C3%85X%0F%C3%BDm%C3%8F%3E%C3%81%10cs%C2%AF%7F%C2%BC%C3%87%1Cg%C3%BF%C3%90%C3%93%19)%5B%C3%9A%C3%8A%0E%7F%C2%BE%C2%B3s%C2%AEtb%C3%9Aq%C3%A0%C2%AD%12%C2%83n!W%C3%BC%C3%ADzh~%C2%BD%C2%B24%C3%A3%C3%83%C2%9E%C2%BE%C2%B1%C3%A6%17.%7F%C2%BE%C3%AAz%5C%13Li%C3%AFX%C3%93%1D%C3%B8%0A%C2%9B%C2%8E%C3%ADm'%C2%B7%C3%95FW%C2%B0q%C3%9F%03%17%C2%9CB%C3%9F%7D%C2%80s%C2%AA%3E%C3%B01%1Cv%C2%A1%C3%86%C3%86%C2%8E%17e%0F%C3%BD%C3%B2%C2%A6%C2%BB%C2%8B%C3%A1r%00k7%C2%91j%C3%AA%C2%9C%C2%8Ev%C3%8Bn%3EBw%13%2F%C3%94%C2%9C%C2%9E%C3%9As%0CI%C3%9D%C2%B8%C3%9AS%C2%AA%7C4Qk%C2%B8%3D8%5B%C3%B3u%C2%AB%C3%BC%C3%9E%C2%94%3F%1Cr%C3%97%C2%AC%24a7%C2%A2%3A4%1A%C3%A7%C2%B6y%C3%B5%C2%BB9h%C3%8C%C3%A9-%7F%03%C3%97%1C%C2%B6%C2%BFi%C2%9E%7BZ_%C2%A2%5C%2B%C3%A7%C2%A5%1E%C3%B7%C2%91%C2%AA%C3%8B32%C2%81%5E%C2%82%C2%BE%01%C3%B7-%C3%91w%C3%82%C2%85%1Cp%C2%8F%C2%AAr%C2%8Bm%C2%AC%C3%B14%09%C3%A4%C3%A0%C2%BF%C3%A52wN%C3%BE%C3%9FF9%5E%C2%B0HT%C2%88YgA%C3%85%C2%BB*%7D%C2%B7%C3%B4y%C3%AC)%C3%AC%C2%8Ah%C2%93%C3%B7%08%C2%84%7B%C3%81%C3%BD%C3%BF%C2%A2%C2%9D%C3%81%C2%AF%1D%C3%A8%0D%C3%80%2Bs%C2%9F%C2%82_%C3%A3L%C2%8D%C2%8BO%C3%A5%06Gj%C2%9DS%C2%B7%0E%C2%8B%C3%A8u%C3%811A%C3%BF%C2%82%C3%A7'%C2%B4%03MU%C2%8F%C2%A8%C3%A6%C3%80%C3%B1%C2%85%2F%C2%8Dy%C2%B0%C2%B0%7F%5Cq%C3%96%C3%96%C2%B0%C3%B6%C3%AD%26%04*%C3%BC%C2%A9%C3%B82%C3%94%25%11%C2%94%C2%AFN%1C_w%C3%B3%23%C2%94%C2%99%C3%AAs%C3%B5%C2%BB%245%C3%AB%0A%C2%9B%C3%AA8%26T8y%C2%A8%C2%9C%3C%C3%B0%C3%A7%C3%B0%C3%981%17%09%C3%BA%C3%B7%C3%B9w%C2%B4%C3%AD%C3%9B%C2%84%C2%8Fn%02%3E%C3%B2%C3%87%3DD(%C3%BB%10%C2%8DGtG4%C2%B1%C2%A8%18%3F%C3%9FC_n%C3%9BR%126%7B%C3%8DN%C2%B4%C2%9F%C2%BC(%C3%91%C2%91%5Bx%0CYH%07o%C3%B0%14%C3%AB%C2%B8%C3%B0_%C2%B5%C2%B9%C2%9B%C3%9B%22%C3%AB%C2%A8%C2%BA%3F%C3%A7%2B%C2%AAG%1EJ%C3%A5%C2%86%C2%A1%C3%AD%1C%C2%93UM%C3%80m%3C%C2%87%C3%9D%11%157tfU.%C2%82%0FA%C3%B6%22%7B%C2%94%1B%C2%9B!*%0D%C2%A9%1A%C2%99%C2%B3I%C3%B1H%C2%BDM5%C3%B6(%C2%B8%3D%0C%C2%9C%1F5%C3%AC%1D%C3%BF%C3%95mx%C3%86d%2C%12%C3%9AOjgI%C2%86%C3%BE%05%C2%87%C3%B5%C3%87%C3%9B%3F%C2%B8%20%2C%C3%89au%C3%B0%0E%C2%BA%C3%8CrJ%C2%85%23%C3%8F%C3%94A%C3%B8p!%7B%C3%A8%C3%9ED%C3%9A8s%C2%86%C2%9B!s%C2%9F%C3%A0%C3%AD%C3%ABP%C2%B9%C2%B3%5B%C2%8A%C3%83%C2%85%C2%BE%C2%ACf%5D%7F%C3%BD%C2%88%C3%A5%C2%BC%C2%82W%C2%B0%C3%86aK%C2%BB%5B%C3%81%C3%A5%C3%9E%C3%92%19l%3Ev%C3%AF%3E%15O%C3%94%3E%17L%C2%B0P%C3%B3%23%C3%A9%C2%B0E%C2%82%C2%97%C3%9A%5D%C3%89Y%15%C3%94%C3%83%C2%9F%C2%A0%C3%9D%C2%B2%C3%A5%C3%88%C3%87%C3%8D%C3%9F%C3%BC%C2%80%C3%BFU%C3%BDe%C2%81oZ2%7F%C2%A2tb%C3%8D%C2%A9%C3%BA%C2%93%C2%92y%7D5%C3%9E%C3%B7%C3%86F%C2%9E%C3%AD)d%C2%AEt%24%C3%A9kW%C3%98)%C3%90I%C2%A0%C2%9B%17%C2%A1%C3%AD%C2%92%C2%AA%1E%C3%9A%17%C2%8As%C2%A5%C3%9A%C2%B1%C2%B7%C2%AF%1B%5Ep%C3%B8IqR%C3%86%C3%AF%C3%B9%C3%80qv%C3%ACv%C2%96%3E%C3%B7%C3%B6%C2%B0%C3%97%07d%C3%9C%24*~M%C3%8B%C2%A8xo%C2%9FP%C3%89%0F%11%C2%8C%C2%93%3C1%C3%B8%C2%877%C3%B2%C2%B5y%C2%B6%C2%8B%1CNv%C2%8E%5E%C3%A8%C2%84%C3%89%C2%AA%C2%B0%C3%A6'R%C2%B0G%C3%86%C3%B2%1B%C3%A2%C3%9FL%C3%85%C3%ABn%C3%A4%0D%C2%8F-%12D%C2%894G%C2%B6%C2%88%00%C2%A5%1CU6%60%C3%AD%C2%96J%1A%C2%A5-%C2%B2t%1C%C2%8A7%C2%83%C3%B8%C3%A3%C3%8E%C3%BE%C2%B5J%C3%84%C3%B4%C2%9E%C2%96%3B%C3%B8%C2%A3%1A%C3%8E%16%C3%AC%5Dx%7BX%3B%C3%8E%C2%9D%C2%B0%C2%9B%7F%1Dv!%C3%89'%C2%AC%C3%AE%C3%97O%C2%A4%1A%C3%98GJ%01%1F%07%C3%82%C2%81%07%04%04%04%04%04%04%04%04%7C%C3%B0%C3%B8%1F%C3%97Yf.%C3%8A%C3%89c!%00%00%00%00IEND%C2%AEB%60%C2%82";
var logo_about_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%7C%00%00%00%19%08%06%00%00%00%C3%B3'JW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%04%C3%B9IDATx%01%C3%ADXKn%1BG%10%C2%ADfhXI%14%C2%84A%0E%C3%A0%C3%91%0D%C3%A8%13x%C2%B6Y%C2%85%3E%01%C3%A9%13%C2%88%5Cf%C3%85%C3%91%09(%C2%9D%C2%80%14%C2%9C%20%08%C2%90%C2%804%C2%90%C2%AC%C3%89%C2%AC%C2%B2%14O%C3%A0%C2%99%C2%AC%C2%82%2C%022%C2%AB%C3%88%C2%B6%C3%A4N%C3%95%C3%8Ck%C2%B1%C3%94%C2%9C%19R0%0C%C3%88p%3F%C2%A0%C3%94%C2%BF%C3%AA%C3%97%C3%95%C3%95%C3%93%C3%95%25%12%05%04%04%04%04%04%04%04%04%04%04%C3%9C%2F%18%C3%9D%C2%B0%C3%96F%C2%95%C2%8A%C3%86d%C2%94%C3%98%16%C3%91e%C3%AB%C2%80%C3%9B%C2%97%C2%84%3F%07%07kJ%C3%8C%C2%9A%02%3E%084%5C%C2%85%0F%3B%C3%A5%C2%A2N%C2%88%1E%5E%C3%B6%C3%8D%03%C2%93%C2%BEj%C2%9A%C2%97%C2%A6a%5E%C3%92C%C3%AE%C2%BF%C2%BE%C3%AC%C2%94%113_%C3%8C2%16%5E%C2%96%0B%C3%94%23%C2%BAG%60%7BZ%2CsH%5C%C2%A13%C3%85x%C2%87%C3%9E%03%C3%A0%C2%A7%C3%B7%C3%86%C3%AF%C2%A3%C2%81E%23.D%C3%A4%C2%A6%C2%9E%C2%B1%C3%8CJ%C2%B5%3Fc9%C3%8CKcY%C3%A8%C3%90H%7D%C3%A1%C2%AB1_%C2%97%C2%8B9K%0F%C2%9C%C2%84%C2%BA%1C%7C%C2%9B%C3%AE%0F8bQ%0C%C3%99r8%C3%9B%C3%9AC%7F%0C%C3%9D%C2%9D%C3%A09%13%5B%20%C2%A2%C3%BD%10%C3%9D%C2%85%C3%BF%5D%C3%91%C3%B0%C3%9Ag%1C%C2%BA%C3%BB%5C%3E%2B%C3%95%3Ed%C3%B5%C3%8FY%C3%B8%C2%A0%C2%8D%1C%C3%B6%C2%A1%C2%99%C3%90w%C2%9FfZ%05%1B%C2%9D%C2%B0H%C3%BF%11%C3%B3%3D%16%C3%A1%C3%BA%C2%80%C2%8AM%C2%8D%C2%A0%C3%97%C3%82%C3%97%1D%C2%A1%C3%9EQ%1Cy%C3%9B%C2%8D%7B%C3%BC%C2%B1%C3%BEh4%0F%C3%9Amw%5B%C3%91%2F%3C%C3%BB8%C2%B3%5B%C2%A2%C3%97-ST%C3%B6u%C2%B4%7D%C2%B0%C3%AB%11%C2%9A%C3%AD%12%3B%C2%B7%C3%A6%C2%94%C3%B0%C3%B6%C3%8A%C2%A2%C2%8D%C3%9Ag%C2%A7%C3%8A'j~%C3%BD~%C3%A1t%C2%8B%C3%90%2B%13%C2%8F%C2%AD%C2%87%5C%C3%B1%C2%A7W%C2%89%C3%B9%C3%B1%C2%B5%C2%A5%1F%5E%5B%C3%B3%C2%9C%C3%8B%C3%AF%C3%9F%C2%8C%C3%A8%C3%B9%7F%C2%B1%C3%87%C3%95%C3%87%C2%94%5E%C3%89%3A2%C2%96(%C3%A3%05%23%C2%BD%06%C3%96%5E%C2%A9%C2%A5W%C2%88%18%C3%9A%C3%8E%C2%B1%C3%A2%C3%AC%C2%A1%2FA%3B%C2%85%C2%8C%14GjK%22%C2%8B%C3%A2K5G%C3%85X%0F%C3%BDm%C3%8F%3E%C3%81%10cs%C2%AF%7F%C2%BC%C3%87%1Cg%C3%BF%C3%90%C3%93%19)%5B%C3%9A%C3%8A%0E%7F%C2%BE%C2%B3s%C2%AEtb%C3%9Aq%C3%A0%C2%AD%12%C2%83n!W%C3%BC%C3%ADzh~%C2%BD%C2%B24%C3%A3%C3%83%C2%9E%C2%BE%C2%B1%C3%A6%17.%7F%C2%BE%C3%AAz%5C%13Li%C3%AFX%C3%93%1D%C3%B8%0A%C2%9B%C2%8E%C3%ADm'%C2%B7%C3%95FW%C2%B0q%C3%9F%03%17%C2%9CB%C3%9F%7D%C2%80s%C2%AA%3E%C3%B01%1Cv%C2%A1%C3%86%C3%86%C2%8E%17e%0F%C3%BD%C3%B2%C2%A6%C2%BB%C2%8B%C3%A1r%00k7%C2%91j%C3%AA%C2%9C%C2%8Ev%C3%8Bn%3EBw%13%2F%C3%94%C2%9C%C2%9E%C3%9As%0CI%C3%9D%C2%B8%C3%9AS%C2%AA%7C4Qk%C2%B8%3D8%5B%C3%B3u%C2%AB%C3%BC%C3%9E%C2%94%3F%1Cr%C3%97%C2%AC%24a7%C2%A2%3A4%1A%C3%A7%C2%B6y%C3%B5%C2%BB9h%C3%8C%C3%A9-%7F%03%C3%97%1C%C2%B6%C2%BFi%C2%9E%7BZ_%C2%A2%5C%2B%C3%A7%C2%A5%1E%C3%B7%C2%91%C2%AA%C3%8B32%C2%81%5E%C2%82%C2%BE%01%C3%B7-%C3%91w%C3%82%C2%85%1Cp%C2%8F%C2%AAr%C2%8Bm%C2%AC%C3%B14%09%C3%A4%C3%A0%C2%BF%C3%A52wN%C3%BE%C3%9FF9%5E%C2%B0HT%C2%88YgA%C3%85%C2%BB*%7D%C2%B7%C3%B4y%C3%AC)%C3%AC%C2%8Ah%C2%93%C3%B7%08%C2%84%7B%C3%81%C3%BD%C3%BF%C2%A2%C2%9D%C3%81%C2%AF%1D%C3%A8%0D%C3%80%2Bs%C2%9F%C2%82_%C3%A3L%C2%8D%C2%8BO%C3%A5%06Gj%C2%9DS%C2%B7%0E%C2%8B%C3%A8u%C3%811A%C3%BF%C2%82%C3%A7'%C2%B4%03MU%C2%8F%C2%A8%C3%A6%C3%80%C3%B1%C2%85%2F%C2%8Dy%C2%B0%C2%B0%7F%5Cq%C3%96%C3%96%C2%B0%C3%B6%C3%AD%26%04*%C3%BC%C2%A9%C3%B82%C3%94%25%11%C2%94%C2%AFN%1C_w%C3%B3%23%C2%94%C2%99%C3%AAs%C3%B5%C2%BB%245%C3%AB%0A%C2%9B%C3%AA8%26T8y%C2%A8%C2%9C%3C%C3%B0%C3%A7%C3%B0%C3%981%17%09%C3%BA%C3%B7%C3%B9w%C2%B4%C3%AD%C3%9B%C2%84%C2%8Fn%02%3E%C3%B2%C3%87%3DD(%C3%BB%10%C2%8DGtG4%C2%B1%C2%A8%18%3F%C3%9FC_n%C3%9BR%126%7B%C3%8DN%C2%B4%C2%9F%C2%BC(%C3%91%C2%91%5Bx%0CYH%07o%C3%B0%14%C3%AB%C2%B8%C3%B0_%C2%B5%C2%B9%C2%9B%C3%9B%22%C3%AB%C2%A8%C2%BA%3F%C3%A7%2B%C2%AAG%1EJ%C3%A5%C2%86%C2%A1%C3%AD%1C%C2%93UM%C3%80m%3C%C2%87%C3%9D%11%157tfU.%C2%82%0FA%C3%B6%22%7B%C2%94%1B%C2%9B!*%0D%C2%A9%1A%C2%99%C2%B3I%C3%B1H%C2%BDM5%C3%B6(%C2%B8%3D%0C%C2%9C%1F5%C3%AC%1D%C3%BF%C3%95mx%C3%86d%2C%12%C3%9AOjgI%C2%86%C3%BE%05%C2%87%C3%B5%C3%87%C3%9B%3F%C2%B8%20%2C%C3%89au%C3%B0%0E%C2%BA%C3%8CrJ%C2%85%23%C3%8F%C3%94A%C3%B8p!%7B%C3%A8%C3%9ED%C3%9A8s%C2%86%C2%9B!s%C2%9F%C3%A0%C3%AD%C3%ABP%C2%B9%C2%B3%5B%C2%8A%C3%83%C2%85%C2%BE%C2%ACf%5D%7F%C3%BD%C2%88%C3%A5%C2%BC%C2%82W%C2%B0%C3%86aK%C2%BB%5B%C3%81%C3%A5%C3%9E%C3%92%19l%3Ev%C3%AF%3E%15O%C3%94%3E%17L%C2%B0P%C3%B3%23%C3%A9%C2%B0E%C2%82%C2%97%C3%9A%5D%C3%89Y%15%C3%94%C3%83%C2%9F%C2%A0%C3%9D%C2%B2%C3%A5%C3%88%C3%87%C3%8D%C3%9F%C3%BC%C2%80%C3%BFU%C3%BDe%C2%81oZ2%7F%C2%A2tb%C3%8D%C2%A9%C3%BA%C2%93%C2%92y%7D5%C3%9E%C3%B7%C3%86F%C2%9E%C3%AD)d%C2%AEt%24%C3%A9kW%C3%98)%C3%90I%C2%A0%C2%9B%17%C2%A1%C3%AD%C2%92%C2%AA%1E%C3%9A%17%C2%8As%C2%A5%C3%9A%C2%B1%C2%B7%C2%AF%1B%5Ep%C3%B8IqR%C3%86%C3%AF%C3%B9%C3%80qv%C3%ACv%C2%96%3E%C3%B7%C3%B6%C2%B0%C3%97%07d%C3%9C%24*~M%C3%8B%C2%A8xo%C2%9FP%C3%89%0F%11%C2%8C%C2%93%3C1%C3%B8%C2%877%C3%B2%C2%B5y%C2%B6%C2%8B%1CNv%C2%8E%5E%C3%A8%C2%84%C3%89%C2%AA%C2%B0%C3%A6'R%C2%B0G%C3%86%C3%B2%1B%C3%A2%C3%9FL%C3%85%C3%ABn%C3%A4%0D%C2%8F-%12D%C2%894G%C2%B6%C2%88%00%C2%A5%1CU6%60%C3%AD%C2%96J%1A%C2%A5-%C2%B2t%1C%C2%8A7%C2%83%C3%B8%C3%A3%C3%8E%C3%BE%C2%B5J%C3%84%C3%B4%C2%9E%C2%96%3B%C3%B8%C2%A3%1A%C3%8E%16%C3%AC%5Dx%7BX%3B%C3%8E%C2%9D%C2%B0%C2%9B%7F%1Dv!%C3%89'%C2%AC%C3%AE%C3%97O%C2%A4%1A%C3%98GJ%01%1F%07%C3%82%C2%81%07%04%04%04%04%04%04%04%04%7C%C3%B0%C3%B8%1F%C3%97Yf.%C3%8A%C3%89c!%00%00%00%00IEND%C2%AEB%60%C2%82";
var push_update_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%12%08%06%00%00%00%C2%BD%C3%B95T%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%90IDATx%01%C3%95%C2%92A%12%C2%820%0CE%C3%9B%C3%A2%C2%B0%C2%95%1B%C2%88%1B%C2%86%C2%9D%1C%C3%81%23p%03%C3%B1%04%C3%A8M8%C2%927PW0t%C3%91%2B%C2%B0n%C2%A7%C2%AD%C3%A9%C2%8C%0B%C2%A4%C2%B4UgX%C3%B07M%C3%92%C3%A4M%C2%92%09B%C2%AB%11c%2C%0D%C3%A5%10%C3%9Fg%C3%9F%C3%B7%15%C3%A7%C2%9C%C2%99%C3%B7%2F%08%C2%A5%C3%B4%C2%A8%C2%B5%C2%AE%C3%9F%C3%AE%09%40%C2%85%2B%17%C2%A3%C3%B9%0Ej%004%C3%938%C3%84%C2%AEy%C2%9E7AH%C3%9B%C2%B6)!%C3%A4%0Ef%C2%82l%0Dq%1C%C3%AFA%C3%838h%C2%8D%03%C2%80%C3%82%010J%C2%84%10%C2%A5U3%C2%93%C3%A8%C2%9C%C3%9D%08FJ%C2%BF%C2%81%C3%BC%C2%AC%C3%85%20%07_%01%C3%86x%C3%A7%C2%85t%5Dw%C2%81%C2%A7%C3%B4A%60'%C3%95%C3%B4%C3%B86%1FDBnR%C3%8A3%0A(%C2%8A%C2%A2%C3%87%C3%98%C3%87%C2%BEd%C3%A8%C2%AC%01%C3%B0%C3%96%C3%98Y%C2%969%C3%A1%C3%9E%C3%85B%C3%AB%C3%A6%C2%A8%0A%C2%A5%C3%94%13%C2%ADB%2Fu%C3%ACH%C2%81%04k%07%C2%95%00%00%00%00IEND%C2%AEB%60%C2%82";
var push_update_new_update_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%12%08%06%00%00%00%C2%BD%C3%B95T%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%81IDATx%01%C3%95%C2%93%C2%B1N%C3%82%60%10%C3%87%C2%AF%C2%ADL%C2%A4%C2%B1%0C%24%C3%92%04%C2%84%C2%A51a%C3%B0%5Bdn%C3%A4%01%60pS%C2%92%C3%BA%04%C3%A8%C3%A2Z%1F%C2%80A%13%06FM%7C%C2%80%C3%BA%02%C2%85A%16MHI%20%25%C2%90%002%18%02%03%04%07%16h%C2%BD%C3%8F%C3%81%C2%B4%C3%94%C2%96%C2%B8%C3%89%7F%C3%B8%C3%AE%C2%BE%C3%8B%C3%A5w%C3%97%C3%BB%C2%AE%00%C3%BFE%C3%8C%C2%B6%C2%84%C3%81%60%C2%90L%C2%A5RCB%C2%88%60YV%C3%91%C2%B6%C3%AD%24%C3%830%C3%AF%2C%C3%8B%3E%18%C2%861%C2%A49%5C%10%C2%A0%C3%9B%C3%AD*%C3%AB%C3%B5%C2%BA%C2%9A%C3%8DfA%C3%97%C3%B5JN%14%C3%B3%17%C3%B18%C3%A1C!%C3%99%5C%2C%C3%B2%C2%A2(%3E%C2%8F%C3%87%C3%A3%C2%B9%2F%C2%A4%C3%97%C3%AB%C3%89XUE%C3%B7%C2%A0%5C.%C3%8Bg%3C%2F%C3%9CH%12%1C%C3%B1%3C%C2%9CF%C2%A3%C2%80%20%C3%A1e%3A%25%C2%93%C3%89%C3%A4%C2%91%C3%B5%C3%A9%C2%A0%C2%88%C2%ADW%C3%91%25%C3%B4%C3%9En%C2%B7%C3%A1%3C%C2%91p%C3%A5%C3%A4b1jdzx%20%C2%A6i%26%C2%B1%C2%83%5Bg%2C%1C%0E%7B%0A%7D%C2%AEV%C3%94%C3%8C%7F%C2%85%C3%A0%C3%80hu%C3%81%19%C3%8Bd2P%C3%A9%C3%B7%5DyO%C2%A3%115%1A%3D%C3%B6%C3%80%2B%C2%B2%19P%14%05TU%05%C2%BD%5E%C2%87%C2%93H%04%3E%C2%96Kx%C2%9B%C3%8Dj%1C%C3%87%5D%C3%BBA%3C%C2%A2%C2%9FS*%C2%95%C2%BEg%C3%93h4%C2%B4WM%C2%BBo%C2%B5Z%C2%B5%C2%9F%C3%AE%C3%A1%0FJ%C2%A7%C3%93P(%14%C2%9AN%C2%80%1F%C3%A4%18%02%C2%84%C2%8Bv%C2%B8%19sA%3A%C2%9D%C3%8E%15%C2%9A%7C%00%03%C3%B0%C3%A5%14%C2%BA%C2%84%C3%8E%C2%98k%26%C3%B825%C3%9C%C3%90K%C3%98%22%1C%C2%A8%C3%A1%C2%BC%07%C3%BE%3B%C3%98%C3%99%1D%C2%82%C3%B7%C2%A9%2FI%C2%92%2F%3Cp%C2%B0%C3%98%3A%5D%26%C2%82%C3%9B%C3%9B%C2%84%C2%9D%C3%90%17%C3%B2k%C2%89%C2%B2%07%C2%A9%C3%A4F%00%00%00%00IEND%C2%AEB%60%C2%82";
var settings_window_button_panel_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%0F%08%06%00%00%00%C3%ADsO%2F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%8CIDATx%01%C2%95S%C2%81%0D%C2%820%10%7C%C2%8C%030%02%1B8%C2%82l%C2%A0%1B%C2%88%1B%C3%A8%06l%C3%A0%08%C2%B8%C2%81%3AA%C3%83%04%C2%B8A%C3%99%C2%A0n%C3%B0%5E%0DM%C3%8A%C3%9B%C2%AFr%C3%89%05%C3%8A%C3%9D%C3%BF_%3F%C2%81(%01fny%C2%8E%3B)X)%C3%9F%C2%B7%C3%A2%C2%BC%C2%A1%1C0a%0F%1A%C2%B0%01k%C3%90%C3%B27%C2%82%C3%A6%7D%C2%A7%C2%B8%C2%B8R%0Arp%C2%BE.4%C2%B8d%C2%8C6%C2%A3%C2%99%C3%90%60H%C2%88C%C2%980%25%C2%BC*)%C3%8A%600B%C2%AC%12%7Br%22Y%15%C2%8Bu%2C*%C2%8B%C2%8E%C2%874r%C2%89%C3%BF%24%C2%B0%C3%89%04%C3%BC%7B%07%25%C3%98%25%3C.4hY%C2%87%C3%A5%C3%B9%C3%9Dct%14Mp%C2%BC%1C%C2%9F%C2%84%C3%AB%C2%A2(%5E8%C2%9C%C3%B1%C2%BE%03%7Bp%04%7D%C3%B7R%C2%AC%C3%A18%3D%0F%C3%A0%03u%23i%40%C3%83%C2%9B%C2%BC%C2%8A%C3%A6%C3%95~%C2%A6%5E%C2%9C%C2%9F%C2%8A%C2%8F%C3%9E%1F%1E'%C2%BD%C2%90%C3%A4%C3%AD%C3%AB%00%00%00%00IEND%C2%AEB%60%C2%82";

// ABOUT ICONS
var update_ready_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0E%08%06%00%00%00%C3%B0%C2%8AF%C3%AF%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%90IDATx%01%C3%9D%C2%91%C3%8D%0D%C3%820%0C%C2%85%C3%BDZ%C3%A0%C3%8C%08e%04%26%C2%80%C2%88E%60%00%C3%BE%26%00%26%40%C3%80%C2%81%2B%1B0%01%C2%84%11%C3%98%C2%80%C2%8E%C3%90%3Bm%1F%C2%B1P%11%C2%94%C2%B6R%C3%85%C2%8D'E%C2%91c%7FN%C3%B2%0C)%C3%91%C3%8E%C3%9E%C3%BB%24%C2%ACPF%C2%93A%C3%A3PT%C3%A3%C3%89%0F%C3%BA%17xo%19%14%15%C2%AA%C2%81%C3%B93%C2%BC%07k%C3%8B%C2%B6%C3%8F%C3%A4%06A(%C3%A0%C2%8A%C2%94%C2%A3%C2%BA%C3%AD%C2%AE%C3%A8%C2%B9%7D%C2%98%20%C3%AD%C3%8EM%C3%AB%C3%BA%C2%827%C2%A7%C3%BB%12%C3%80%22%C2%81%C3%9F%C2%99%1B%C2%84Y%C3%ACr%C2%91%5Bm%C3%91F%C3%82%C2%80%C3%A4j%3Ah.%15%C3%9A%C2%9Ecj%C3%BC%C3%B5l-%C3%90%C3%84%13T%7D%C2%82%C2%95%7F%C3%8E5%C2%902%C2%B0%14%C3%8E%1A%004e%60%25%C2%AC%1A%C2%9B%C3%A6%C2%A5*%C3%9F%C2%800R%C3%93%C2%BD4%C2%9E9%C2%B3%22%C2%A9!%C2%B8%C3%B1%04%3ES%C2%AB%C3%86%C3%94%C3%80%C3%82%04%C2%9Ey%00%C2%92%C3%9E_%0F%C3%86gw%C3%91%00%00%00%00IEND%C2%AEB%60%C2%82";
var updates_check_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%5BIDATx%01%7D%C2%92%C3%91Q%C3%82%40%10%C2%86%C3%BF%C2%BD%04%C2%9E)%01%2B0%25%24%C3%92%00V%00%C2%AF%3E%60%C2%A4%02%C2%A0%02%40t%7C%C3%95%0E%C3%92%00%13%C2%A9%C3%80X%C2%81%C2%B1%C2%83%3C%C2%9B%C3%9C%C2%AD%C2%BB%C3%889a%06%C3%98%C2%99%C3%8C%C3%A4%C3%AE%C3%BE%C3%AFn%C3%AF%C3%BF%C2%8F%C3%90%C2%AA%C2%97%C2%9C%C3%BB%16.eF%C3%8C%40%C2%8F%C3%80%25%11%15%01%C3%8C%C3%BA.%C2%A1R5%C2%9B%C3%9C%C3%8E%C3%88%03%3A%60%C3%A6%C2%B9%C3%BCV%C3%84x%C2%97%C2%85%C2%8A%09%7D%C2%81c%5D%17X%C3%97%C2%A0%1Aj%03%C3%B2%C2%AD%C2%9D%09%C3%A7%C3%93%C2%84*%C2%BF%C3%99RN7%5C%C2%8B%C3%90%C2%8C%C3%BC%1CiK5%C3%9B%2F%01%16%C3%A9%C2%A03%C3%B7m6%C2%B0%C3%91%24%093%1D%3F%C3%A5%3Crl_%3Dd%2C%C3%ACL%C3%98%C3%92%03Z%0D%C2%9A%C2%BE%C3%9Cky%0A%C3%90%0A%1Dc%08%C3%A2%0Cg*%00v%01%05WG%C2%90%7C%3Dv%C3%BC%7D%0A%C2%90%C3%BB%C3%B4%C2%BCkZ%C3%8F%C3%B9Oda%22%C2%A3n)%C3%98%167%08%0B%C2%86%C3%9B%05%C3%AC%3E%1E%C2%B7%C3%8D%C3%B8%7F%C3%9E%C3%91%10%C3%92%C2%B6%11%C3%BB%0A%C2%B1s%C3%94%C2%86%C3%94%C2%BD%C3%B4%C2%A6%3B%C2%B6do%C3%85%C3%AB%C2%99%C2%9E%C2%B8w%C2%8D%C3%84ABF%C2%9B%C2%BC%C2%8E%C2%99)%07%C2%BB%C3%A9%C3%BD%C2%A0%C2%BB%C3%82%C2%99%C2%92X%24t%5E%11qb%26IG%C2%82to%20%C2%B3%C3%94%C2%BC.%01%C2%9A%C3%A3%C2%9F%C3%BEP%C3%ABm-%C2%BBP%C2%AA%C3%B6K%C3%8F%C2%99%03%7F%1A%C3%90%C2%B5%08%23%7D%15%0AH%2C%0F%C3%BB6%C2%8Fw%C2%ACc8J%C3%A5%C3%B9%C3%84%07s*%C2%BD%C2%B3D%C2%B2%C3%90%13%C2%BC%C3%AE%17%C3%A5-%C3%80%0B%C2%A9%C3%A0Y%C2%B6%00%00%00%00IEND%C2%AEB%60%C2%82";

//WITH Groups
var close_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%88IDATx%01%C2%8D%C2%92%C3%8B%0D%C3%83%20%0C%C2%861%13d%C2%93v%C2%84f%C2%8EHi%C3%98%C2%A0%C2%9D%C2%A4%C3%AA%04%C2%A4y%C2%9C3BV%C3%88(%C2%BDp%02AM%14*%C2%8BB%1AK%60%C2%84%C3%BDa%C3%BB%17%C2%8C%C2%A1M%C3%93T%C2%8C%C3%A3xf%7F%C2%AC%C3%AF%C3%BB%C2%8B%C3%B7%C3%9CoJ%C2%A9%C3%99Z%3B%C3%AF%C2%81%C3%830%5C%C3%91%C3%8D%C3%A8%1F%2B%C2%84%C3%80%13%5D%C2%91%03%3D%C3%A0%C2%9Ck%C3%B1%C3%B8%C3%96Z%C2%BF%20%04%C2%BA%C2%AEk%00%40%C3%BA%00%C3%A7%C2%BC%C2%AC%C2%AAj%C2%89%01cL)%C2%84X%C2%80%C2%BE%18%C2%83%C2%98%7C%C2%8A%01%C2%9F%07q%2B%14%C3%B4-%C3%87%C3%80W%08ju%5D%C2%B7%08%C2%B5%1B%C3%80%C2%B0%C3%92%C2%9D%02%C3%89Jt%C2%86P%C2%89%C3%8E%C3%B8S)%1E%1A%C3%8F%C2%82%25T%C2%85%1C%10ZJ%C2%A9%0A%7B%40NU%C2%BE%0D%7B%C3%8B%01A%1C%C3%92j%C2%B3%5EJ)%0B%5C%C2%87%C3%BF%C3%9E%07%C3%AB%C2%9A%C2%B5%C2%B8%C3%9C%7C%0B%C3%A1%00%00%00%00IEND%C2%AEB%60%C2%82";
var open_selected_comp_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%B3IDATx%01%C2%95%C2%92%C3%A1%0D%C2%820%10%C2%85%5B%C3%92%01%C2%BA%C2%818%02%1B%C3%A8%08%C3%BC%26%C2%A4%C2%B2%C2%81%1B%C2%80%230%01%1A%18%C3%80%11%18%C2%81%0D%60%C2%84%0E%40%C3%80w%0AZ%C2%A4%C2%80%C2%BE%C2%84p%C3%A9%C3%B5%C2%BB%C3%B6%5D%C2%8F%C2%B3AY%C2%96%C2%B9%C3%8C%C2%90%C2%94R%C3%BB%C2%BE%C2%AFm%C2%B9(%C2%8A%1ANAQ%14u%C3%9F%C3%B7%C2%93%24%C2%A9m%C3%9B%C2%BD%10%C3%A2%C2%8406%C3%97%1D%C3%87%C3%B1%04%05%03%C2%94%C3%A2%C2%BB%1B%C2%90%C2%A6%C3%8A%08%C2%93%3C%C3%8FK%C3%BC%C2%A9%C2%80%C2%A2%5C%C3%97uR%18U%C2%AA%20%08Jf%11%C3%A7%7C%C2%87%C3%A2%04%C3%9DF%C3%98a%1B%C2%82%0D%05%C3%A8%C2%8AS.%C2%B8E2%C2%AE%C2%8B_!%C2%A5%C3%94%13%C3%82%C2%B5S%14h%C3%84%3F%10)%0C%C3%83%C3%B3%C3%A2%C2%89K%10%C2%9EE%C2%A2%C3%8B5%C3%BAq%C2%9Cy%C2%A4%C2%A4%0D%1A%24%C3%A9%C2%A3%C2%AE%C3%8E%40%3C%C2%81%C2%86%07%C3%8F%02Md%C3%AD*%C3%A0%C2%8Am%C3%A8%C3%AD%11%C3%87%C2%BB%C3%A8%C3%98am3%C2%BC%C2%B9%C3%98%C3%B7%01%C3%B1%C3%80%25%7C%C3%91X%C3%85k%C3%A0%00%C2%91%C2%95%C3%97%C2%AC%C2%92%C2%BE%07yE4%C2%8A%C3%BA%01%C3%9Bd%C2%94%C3%A1S%C2%A4%C2%B5%C3%98%00%00%00%00IEND%C2%AEB%60%C2%82";
var disable_effect_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01oIDATx%01%C3%A5SK%C2%8E%C2%82%40%10m0%26%26%C2%BA%C3%80%C2%85%C2%BF%C3%84d%C3%A4%06%C3%A3%0D%C3%B0%06z%02%C2%99%13%C3%8C%C3%9C%409%C2%81%C3%83%09%C3%B4%06r%C2%83%C3%A1%06%C3%8C%0D%60V%04%C3%98%C3%B4%06%12%16%C3%80%C2%BC%22%C2%B6i%09%24%C2%B3%1E%2B1%C3%9D%C3%B5%C2%AA%C3%AA%C3%B9%C3%AA%01%C2%8C%C3%BD%C3%9BP%C2%BA%0AI%C2%92%18eY%1A%C2%B8%C2%BE%C3%9C%C2%A0%1FUU%C3%9D%C3%89d%C3%A2%C3%BE%C2%89(%C2%8E%C3%A3w%1C%C3%87%C2%AA%C2%AA4%C3%96%1E%C2%81%C2%A2(%C3%96t%3A%C2%BD%C2%B4%12%C3%B9%C2%BE%C2%AF%C2%8DF%C2%A33Tl%05%062%1BC.0%0E5%26%C2%A0%C2%BD4%C3%ABdY%C3%B6%C2%A6%C3%AB%3A%C2%A7D%15%C3%A8p8%C2%BC%C3%8A%24%20X%C3%8F%C3%A7%C3%B3%0F%C2%9CA%C2%AF%C3%97%C3%A3%C2%B3%C3%99%C3%8C%24L%22%C3%9A%C3%92%C2%8CHj%C2%A2(%C2%8A%0E%C3%B8wC%22%C2%B9%40%C3%BA7%C3%96%3C%01%C3%B7%C3%A8%07%C3%8FN%C2%84%C2%91JI%C2%B1%C2%81%C3%99c%3D%13%C2%86%C3%A1%0A%C2%B2%7Dy_%C3%A4%C2%9B%3C%C3%8Fy%C2%BF%C3%9F%C3%B7%1E%7C%C2%80%22%0C%C2%AFp%C2%BDJ0%C3%87%C2%8A%C2%BA%3A%18%0C8%1A%C2%B8%3C%C2%80%15%C2%BB%C2%8C%C2%A6%1Ao%40%1A84u%3C%1E%C3%B3%C2%A2(l%C2%B9B%C2%92%C2%97%C3%8Bes%0D%C2%9BV%C2%83_%C3%BB%06%C2%91%C2%B5X%2C%C2%82%C3%BBS%C2%83%1F_%0D%C2%9F%C3%967%C2%9F%5E)%17w%C3%B2K%C3%AAq%C2%81oj%3B%04%08%3Fv8%1CI%C2%81%C2%87%C3%813%C2%9A5%C3%B2E%18%2F%C3%AA%C3%B0%C3%91I%C3%93tw'm%C3%88d0%C3%9FD%C3%93%01%C3%97%15k%09%C3%B2%13%3EYx5%3E%1Fp%C3%96%11%204%40h0%C3%A9%13%01%C2%81%0B%3F%5C%C3%B6%5C%C3%B1%0BY.%C2%BA%C3%B0%C3%A0%24%C2%9B6%00%00%00%00IEND%C2%AEB%60%C2%82";
var import_ffx_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%8DR%0B%C2%91%C3%820%10MR%04T%02%C3%A7%C3%A0%C3%8E%01%C2%A7%C3%A0%C2%AE%C2%AD%01%1C%14%14P%1C%C2%80%02%40%40%C2%A7S%05T%02(%00%09%18h%C3%8B%7B%C3%8C%26%C2%B3%C3%BCy3%C2%9D%C3%AC%C2%BE%C3%ACK%C3%9Enj%C2%8DB%5D%C3%97y%C3%9B%C2%B6%05%C3%82%C3%98s%C3%96%C3%9A%C2%AF%24I%C2%8E%C2%BAn%C3%A0%C2%83%C2%AA%C2%AAb%11%C2%B0p%C2%ADjN%C3%A6%06A%04%C3%81%C3%889%17%C3%B7%7D%3FM%C3%93ta%5E%C3%80%C3%B9%20%C2%8A%C2%A2%C2%BF%0B%C3%A1%5Cc%C3%9E%C3%80%C3%92%16%7B%C3%80%0D%5B%C2%AE%C2%B0%C3%B6%C2%A3%0Bt%3F%C2%A8%1D%5E%0EFq%C2%85%C3%AF%C2%80x(%C3%A2%C2%83%C3%BE%C3%8A%C2%B2%2CD0c%C3%9Eu%C3%9Dx%C2%80%C2%93%C3%A7H%C3%B6%C3%A0s%C2%ACsm%0F%C3%B9%0C%C3%BB9%04%08%C3%BB%C2%82%C3%BBY%C2%96%15VNY%C2%81%18%C3%93%1A%C3%AC%C3%AC%C2%94%C2%9D%C2%91%C3%986%5E%10%06%01%C3%A2%1B%C3%8BI%0B%04a%C3%9Cp%10%26%C3%AAd%10%14%5D%09%C3%98%C2%B4%C3%9C%C3%920G%2F%C2%93%20%12%01%C2%B1%7F%208%C3%A2%C3%8D~)dow%22%C2%90%C2%8D'q*%7B%C3%99%C2%80Kdo%C2%8A%7C%C3%A9G%C3%8Ew%C3%A2h%C3%BE%1F%C3%BDc%C3%8F%C3%A0%C3%94%10%3E%12%10gup%C2%AC%C2%BD%C3%A7%C3%BASp%00%00%00%00IEND%C2%AEB%60%C2%82";
var export_ffx_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%8DR%0B%C2%91%C3%820%10MR%04T%02%C3%A7%C3%A0%C3%8E%01%C2%A7%C3%A0%C2%AE%C2%AD%01%1C%14%14P%1C%C2%80%02%40%40%C2%A7S%05T%02(%00%09%18h%C3%8B%7B%C3%8C%26%C2%B3%C3%BCy3%C2%9D%C3%AC%C2%BE%C3%ACK%C3%9Enj%C2%8DB%5D%C3%97y%C3%9B%C2%B6%05%C3%82%C3%98s%C3%96%C3%9A%C2%AF%24I%C2%8E%C2%BAn%C3%A0%C2%83%C2%AA%C2%AAb%11%C2%B0p%C2%ADjN%C3%A6%06A%04%C3%81%C3%889%17%C3%B7%7D%3FM%C3%93ta%5E%C3%80%C3%B9%20%C2%8A%C2%A2%C2%BF%0B%C3%A1%5Cc%C3%9E%C3%80%C3%92%16%7B%C3%80%0D%5B%C2%AE%C2%B0%C3%B6%C2%A3%0Bt%3F%C2%A8%1D%5E%0EFq%C2%85%C3%AF%C2%80x(%C3%A2%C2%83%C3%BE%C3%8A%C2%B2%2CD0c%C3%9Eu%C3%9Dx%C2%80%C2%93%C3%A7H%C3%B6%C3%A0s%C2%ACsm%0F%C3%B9%0C%C3%BB9%04%08%C3%BB%C2%82%C3%BBY%C2%96%15VNY%C2%81%18%C3%93%1A%C3%AC%C3%AC%C2%94%C2%9D%C2%91%C3%986%5E%10%06%01%C3%A2%1B%C3%8BI%0B%04a%C3%9Cp%10%26%C3%AAd%10%14%5D%09%C3%98%C2%B4%C3%9C%C3%920G%2F%C2%93%20%12%01%C2%B1%7F%208%C3%A2%C3%8D~)dow%22%C2%90%C2%8D'q*%7B%C3%99%C2%80Kdo%C2%8A%7C%C3%A9G%C3%8Ew%C3%A2h%C3%BE%1F%C3%BDc%C3%8F%C3%A0%C3%94%10%3E%12%10gup%C2%AC%C2%BD%C3%A7%C3%BASp%00%00%00%00IEND%C2%AEB%60%C2%82";

//Volume
var volume_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%81IDATx%01%C2%A5T%C3%8Bq%C3%820%10%C2%95M%C3%A0%C3%84%C3%81%C3%A9%C2%80T%10%C3%92%01T%10rf%20v%05I%07%C2%98%0A%C2%92T%C3%A0%C2%84%C3%8Fpt%09%C3%90A%C3%9CA%C3%A8%20%3A%00%07%C3%BC%C3%8B%7B%1E%C2%99%18%C2%90a%18vF%C3%9E%C2%95%C2%B5z%C3%BB%C3%9Ez%C3%87B%C3%80%7C%C3%9F%C2%B7%C3%84%15fz%C2%9Eg%C2%ADV%C2%AB%C3%9F%C3%B1x%3C8%C2%95%C2%88%C2%BC%C3%A6d2%C3%B9%1E%C2%8DF%C3%B6%11%C2%88%C3%A38%12%C3%BE%0B%C3%8B%3D%04%C2%9A%C3%8Df%C2%8D%C3%A9t%C3%9A%C3%8C%C3%B7I%C2%92X%C2%86ax%00%C3%B3%C2%8A%C3%ACM%3Ez%C2%BD%C2%9E%C2%AD%03%C2%8A%C3%A3%C3%98%C3%87%C3%859c%14%0B%C3%BA%C3%BD%C3%BE%1D%C3%82a%C2%9A%C2%A6%C3%B6z%C2%BD~%C3%9B%03)%03%0A%C3%83%C3%90%C3%89%C3%8F%C3%B3%C3%8A%C3%88s%C3%A1%3E%08%C2%84%C2%BC%C3%8E%1E%08%C2%B4%C2%BE%C3%82-%C2%B1d%0E%C3%84%C3%AAQ%14%C2%B5y%C2%BE%C3%99l%3A%C2%94%C3%81%18%C3%AF%5C%C2%95%C3%B7%C3%82%C2%BD%C3%81%07.%C2%B4%C3%A0%C3%A6%C3%A2%C3%98%5CT%1E2%40olH%23H%1B%C3%AF%16%C2%B8%C3%B3N%C2%90z%C2%BD~k%C2%8A%C3%93%C2%B6%C2%93%C2%B6%C3%9Dn%03U%3D%C2%93%009Kz)%C2%A5u%0EDh%C2%A4%C3%89%C3%A2a%C2%ADV%C2%B3n%18%C2%98%C2%A6)A%C3%B5%1C%C2%90P%C3%92%02u%C3%A7%1ElD%C2%B7%C3%9B%0D2%26%0C%C3%A0%C2%9Ep%C3%A0p%C3%A5T%0B%C2%A6%C2%9B%C2%A3%16%C3%96%C2%82%C2%81%C2%A1%2B%C2%8B%C3%A9lT*%C2%959%06%C2%AB%C3%81%3D%18%18%00%C3%B8D%C3%B8%2CT%C2%B39%C3%81%C2%90%C2%92%11%C3%90%C2%82%14%C2%81%18%C2%AB!%13%C2%87%40ynic%C3%91%C3%88%25%26%C2%B6%C2%8D%C3%B5%C2%A0%00%C3%B8U%1E%C3%85%7F%C2%8Fv%C3%92J%C2%99%C3%A8%C2%98U%C2%AB%C3%95%01%C3%BA%C3%85%C3%BE%C3%98%3AF%17%1B%C2%A5a%C3%8A%7F%C3%84%C2%B5%C3%86%C3%9F%08%C3%BD%1Fh~%C3%98%C2%80%C2%B2%C3%87%15r%00%00%00%00IEND%C2%AEB%60%C2%82";
var volume_min_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01dIDATx%01%C3%8D%C2%93%5DN%C2%83%40%10%C3%87w%11%C3%9F%C3%94%C3%A0%0D%C3%B0%04%5E%01%C2%BC%C2%80%C3%B6%00%040%3E%C3%B8%C3%88%0DZNP%7D%C3%97T%03%09%C2%8F%C3%A8%09%C2%96%1B%C3%B4%08r%03%C2%89%C2%85%C3%B8%C3%80%C3%878%C2%83%2C%C3%81*M%C3%93%C3%B8%C3%90I%C2%96%C3%BD%0F%C3%8B%C3%BCvgg%60%C3%AC%1F%C2%8Co%C3%BBa%14EzUU%0B%C2%94%C2%BEeY%C3%89pM%C3%99%14%C3%A8%C2%81%C3%90n%3F%C2%85N%1A%01%3A%00%C2%90%16a%18%C3%8E%C2%B7%C2%82P%C3%B0%C2%AA%C2%80eY%C3%81%C2%92%7C%C3%9A%C2%BD%C2%AEk%13%C3%A53%C3%82%C2%BC!H%19%03%C2%945%08%06LGW%C2%93%C3%A9%C2%B8%C2%AE%C2%9B%22%C3%8C%C2%91%C2%A0%20%08%0CZSe%C3%A0%C3%B5%C2%87p%C2%A4F%C3%80%C2%B4%03%C3%B4%C2%86%C3%A98%18%04%08%C3%B1Q%7B%C2%AA%C2%AA%5E%C3%A2%C3%AB)%C2%8E%C2%A4%3D%C3%89%C3%8DJ%18%C2%9C%C3%83B%C2%8Eu%C3%80%C3%80f%C2%B4%3B%C2%9E(C%C3%BD%C2%8A%C3%83%C2%88%C3%A3X%C3%9Bx%C2%B1%23ftsJ%C2%8F%2C%C3%8Bv%C2%82%C3%BC%C2%B2%5D%20I7%C2%9F%C3%93%C2%83.%C2%BB%C2%85%3C%1C%C2%9B%09%03%3E%01%C3%A0.%0Dl%C3%81%C3%B4%C2%AF%C3%A8%C2%A6i%C3%9AF%C2%A3J%C2%B1%C3%AF%C2%B4Z%60_%C2%9D%C3%87%13%C3%B3Ej%C3%A7%5D%24%07%C2%87%7D%C2%89%5B%C3%83%C2%8A%C3%9Cu%17J%C2%9Az%C2%84J%C3%AF%C2%93%3F%C3%9A%C3%B6%08%C3%92%5B%10mptqF3U%C2%A2(%C2%8A9%C3%B6%C2%88C%C2%A7%C2%B2m%7BF%C3%AFG%C3%AF%C3%A4%C3%A9%C3%94L%C3%AB%C2%92%C2%9B%0A%C3%A3%13%C3%B2%C2%B1%C2%B4Wy%C2%9E%C2%BF%11%00%C3%9D%7B%09%C3%B8%C2%91%C3%8E%18h%C2%90N%C2%8A%0D%C2%96%10%60%C3%BD%07%C3%9C%1F%C3%BB%02%C2%9C%C3%90%C2%B6%C3%A3%C3%85(%C3%A1%C2%9A%00%00%00%00IEND%C2%AEB%60%C2%82";
var volume_normal_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01pIDATx%01%C3%8D%C2%93%C3%81m%C3%820%14%C2%86%C3%AD%C3%84%C2%BD3B%3AAW%C2%88%C2%BB%40%C3%8B%00(%C3%A4%C3%98%03%15%C2%9D%C2%A0d%02%C3%9Ar%C3%A8%C2%91V%20q%C2%A4%C2%9D%C3%80%C3%99%C2%80%11%C2%9A%11%22%15.%25%C2%B6%C3%BB%C2%BF%C2%80Q%1A%11%04R%0F%3C%C3%A9%25%C3%BFs%C3%AC%C3%8F~~%2F%C2%8C%C3%BD%C2%83%C3%B1c'%C3%8Ef%C2%B3%C2%A0(%C2%8A1d%C3%92%C3%A9t%C3%92%C3%AA7%C3%AF%C3%90%C3%82%C2%B1%C2%B2%C2%ADWe%03%C3%92%00%04%C3%96%C2%96ZM%C2%A7%C3%93%C3%A1Q%10Z%C3%BCm%C3%8Dbm%C3%B5%C2%82b%C3%9A%5Dk-!%C3%9F%01%C3%ABWA%C2%BC%09%C2%B0%C2%B6F1%C2%B69%C3%85%C3%BD%C2%B5%C3%A04v'yF%C3%B1d2y%C3%83%2B%C2%82K%C2%82%0B%C2%B7%C3%B0E%15%5D%C2%A7%01xt%00g%3F%C2%A6%C3%A8%C2%8E%C2%94%C2%B6%3D%C3%A9'H%C2%AD%2F%C2%84%C2%B8%C3%810%C3%A6%C2%B1%C2%B4Lg%C2%A4%C3%96!%C2%B3l%C2%BC%C3%B3%1A%C3%80%19%C3%92%18%C3%90%C3%9C8%C2%8Es%C2%84%C2%9F%C3%B0p%3E%C2%9F%C2%B7%0E%5E%C3%AC%3E3%C2%86%C2%85%5B%C2%99%C3%91%23%C3%8F%C3%B3%C3%93!%C3%BB%C3%ACd%C2%88%C3%A7%C2%B1t%2B%C2%AF%C3%A8%C2%81%C3%94%C2%B2%12%C3%92%C2%93%17)%C3%A7%C2%AC%C2%8DZ%C3%85%C2%A5%C2%B3M%15%C3%AA%C2%86%3BIh.5%1E%C3%82%10%5E%02w%C3%95%C3%A9I%C3%B1%C3%A1%C3%B4P%C3%99%C3%94%C2%AF%C2%94%C2%98%C3%8Cx%C3%A2%C3%A9Ar%C2%BAPj%3C%C3%AA%C2%91%16%3C%C2%A1%C2%B8%C2%B1%C3%AD%01%0A6%20%C3%AA%13%C3%BF%C2%92%C3%9ET%C2%89%C3%95j5%C3%84%C2%89%C2%BA%C3%86%C2%98%24%C2%8A%C2%A2A%C2%99b%13%04%C2%BBf%C2%9A%7B%C3%92%C3%A7%C2%BAM1%1A%C3%ACv%C2%B9%5C~%11%00%C3%A1%C2%B3%03%C3%BCI%C2%A7%09%C3%A44R%C3%88%C3%90%60)%01%C3%AA%3F%C3%A0%C3%B9%C3%98%2FN%10%C2%B5%00~%2B%C3%BBG%00%00%00%00IEND%C2%AEB%60%C2%82";
var volume_high_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01tIDATx%01%C3%8D%C2%93KN%C3%830%10%C2%86%C3%87q%C3%83%C2%82U%C2%8E%C2%90.%C2%8Bx%C2%88%1B%C2%94%13%007%08%07H%1F'h%7B%C2%82%00EbYq%038A%7C%C2%83.%C2%90%C2%9Ae%7B%C2%84J%15%C2%A8%22%C3%B6%0Cc%C2%97%04%C2%A8%C2%9A%0AX%C2%A0%C2%8E%14ylg%C2%BE%C3%BC%C3%B3%C3%9B%01%C3%B8%C3%8F%C2%A0%C3%AC%3E%C3%94%C2%93a%C2%9Ag%C3%83%C3%A6%C3%BA%C2%9E%C2%B7%C2%B5p%3A%0Al%C2%B1%C3%8D%C2%B5%C3%96%C2%A1%00%0A%05Rj%26w%C3%89%C2%8F%20%C2%B6%18_%17c%C2%83%C3%B9%C3%98%C3%8E%C3%BD%C2%A3Xy%C3%82%C2%9C!%C3%91%03%11v%C2%BE%C2%82%C2%BCJ%00%C3%A6)%01%C2%84%3C%0D%C2%8A5%C3%91%C3%A8%C3%8E%C3%B6%0E%C3%9B%11%C2%92p%C2%A0%C3%BCy%C3%95Z%C2%AD(%C3%94%C3%99mT%C3%A4%0C%C3%A8%7D%00%C3%8A%C3%90%C3%B8%16%C2%99lH%C2%B2%11%0F%C3%BC%5Cw%C2%8C%2F%C3%8F%C2%85%C2%84%1Eo)%C2%A7%C3%84%C2%99%C2%850*%C2%9Eu%40%C2%A9%10%C2%A9o%C2%BF.N%C2%BBs%04z%02%C2%A2%26M%C2%93%60%C2%AB%C2%B1%1B%C3%83%C3%83%C2%A6%1D%C2%84%C2%80%C2%99%C2%9B%2F%C3%A1%0F%C2%90M%5C%C3%B8m%C2%A0%C2%A7%C2%9C%12%C3%B0N%C3%9C%C3%88f%3B%C2%88%C3%9F%C2%88%15%18q%C3%89%C3%A9%C2%95%7DJ%C2%A9k%C3%81%C2%9E%0C%C3%ACQ%C2%BB%C2%BB%C3%83~pO%0EX%C2%9EN%C3%AD8~%2C_%C3%8E%12%C2%85%20S%C2%A2O%C2%83k%C3%BBx-%C3%AA%C3%9D%C2%B9%C3%8D%0D%C3%AA%C2%84%C2%A5%04d%60%C2%B0RU%11%0C%0A%C2%91djsy%C3%90%C2%AA%C2%BB5%C2%BE%C3%81f%C2%B9H%C3%B8%04%C2%A3%C2%95%C2%AAv%C3%9F%C2%AEWz%C3%A2z%C3%A5%1BjH%C3%9A6%C2%81%C3%BF%C2%9B%0B%C3%B3%C2%B2%C2%98%3A%00%C3%91M%01%C3%B8%C3%96N%15%C2%A8%C3%88%C2%91%3C%C2%86%C2%A2%22%04%06%C2%B4%14%C3%ACd%C2%BC%03%C3%88%C2%92%C3%83%C2%98%C2%8E%C2%B6%C2%B4%C3%B4%00%00%00%00IEND%C2%AEB%60%C2%82";
var volume_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%AAIDATx%01%C2%BD%C2%93%C3%9F%11%C2%820%0C%C3%86S%C3%BE%C2%BC3%02%1B%C3%A8%08%C2%B8%C2%81n%C3%A0%26%C3%82%04%C2%BA%C2%81n%C3%A0%082%C2%82%1B%C3%88%06%C2%BEC%C2%B9%C2%98%C2%94%C2%90%2B'%C2%9E%C3%80%03%C3%9F%5D%C2%AF%C2%A5%C3%A9%C3%B7k%C3%92%16%C2%805%C2%85%C2%88)Z%C3%BB%C3%80%C2%A6%C3%89%C3%A6%C3%B8%C3%98%C2%98%C2%B0%C3%99%C2%8D%C3%89%C2%8Cm%C3%BB%22%10R%7F%C2%9E%0AH%C3%85%C3%B4%1E%C3%8C%C3%95%C3%B5m%12%C3%88%03%20%C2%B7~N%C3%A3%3DHJ3%1A%C2%B0%C3%B6%C2%A8%14cN%C3%A0%C2%99L%14%192%C3%A4%10%04h%C3%82%C2%B0%C3%A02%C2%816%C2%A1%C3%90%C2%93b%3B%C3%90ze%C3%97%C2%B1%26kr%7Fw%C3%8D%C2%86%C2%80%01%C3%8CW%26%C3%99V%C3%B2%C2%BD%08%C3%B2%C2%A5%25%C2%90%12%C2%BAL6%5Dg%C2%AA%C3%88%0D%C3%A2%C2%B8%C2%A4%C3%BA%0E%C2%9C%C2%9A%2C%18%1C%C2%AC%0A%C2%B1pk9%C3%96%C2%B6%C2%99%02%C3%87%C3%B4%C3%A3%C2%8A%13%C2%8D%5B%7B%C3%B7%0F%C3%B9%3F%C2%A8%C2%BB%C3%8A~.!%C3%B3U%009L%C2%91%C2%BC%C3%90%C2%AD%C3%AC%C2%BE%C3%A7%C3%97%2B%C2%80%0B%2C%11%C3%83%5C%19s%7F%C3%80U%C3%B5%01%1DW%02k%3D%C2%BA%C2%9Ao%00%00%00%00IEND%C2%AEB%60%C2%82";

//Solo icons
var shapes_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%11%08%06%00%00%00%C3%90Z%C3%BC%C3%B9%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%012IDATx%01%C2%AD%C2%93%C3%8BM%C3%840%10%C2%86m'%C3%8A9t%C3%A0t%10*%00*%60%C2%A9%00%3A%609%C3%A6%C2%90%C2%87%14E9%02%1D%C2%B0%15%40%07%C3%90%01%C2%A1%03%C2%97%C2%B0%C3%97%1C%C2%92%C3%B0O%C3%A4%C2%ACV%2B%3FvW%3B%C2%923~%C3%BC%C3%BEf%C3%ACq%18%C2%BB%C2%90%C3%B1%C3%BDAUU%C2%B1%10b5M%C2%93%C2%A41%C3%BA%5D%C2%9E%C3%A7_'%C2%81%00I9%C3%A7%C2%9F%C3%A8%C3%8A%03%C2%8D%02%C3%B8%0E%C3%AB%C3%8A%0B%C2%82H%02%C3%B2%C2%8Bnl%C3%91%11%C3%AC%1A%C2%BA%C2%AD%0D%24%C3%A6%C2%8F%10%C2%A5%03BF%C2%81%C3%96%C2%8Eu%16%C3%92%07%C3%91V%C3%8Cc%00%C3%9D%C2%90%C2%AF%C3%ABz%C3%96%0E%C3%83%C3%90%C3%AD%1F7%C3%94%3E%C3%B6%C2%81%C2%96%02%C3%80%3F%C2%A3%C3%9D%02%C2%AC0L%C2%96u%C2%A1%C2%BD%C3%B2%C2%81%C3%B4F%02-Ae%C3%9B%C2%B6%C3%B2%10%C2%B4a~%C3%9BPQ%C3%A0S%C3%93%C2%A2%C3%90Q%C3%9E%3CYuEQ%7C%04A%C3%B0h%13%C3%8C%20*%2B%C2%BD%15Sf%C2%98%7F%C3%97%C3%AF(%1D%C3%87%C2%B1r%C2%824L%C2%95e%C3%B9%C2%84M%09mD%7B%40%C2%BB%C3%82%C3%BC%C2%9A2%C3%81%1D%7D3%C2%87q%C3%93d%C3%934%14%5D%C3%AAJ%C3%9DS%C2%95L%C2%BA(%C2%8A%C2%92%2C%C3%8B%14%C3%B5C%C2%93%00o%C3%A4%C3%95%C2%B6%C3%99f%C3%822%C2%BFeGX%C3%9F%C3%B7%3B%C2%9D1%23%1C%C3%AB%05w%C3%B2%C3%A7%60P%11~%5C%C3%BF%C3%9E%C3%99%C3%B6%0F%23%16%C2%8Dx%01%2B%C2%8E%C3%A8%00%00%00%00IEND%C2%AEB%60%C2%82";
var shapes_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%09IDATx%01%C3%8D%C2%92%C3%91%0D%C3%82%20%10%C2%86%C2%8F%C3%86D%1F%1D%C2%A1%C2%9D%40%C3%9D%407%C3%B1%C3%91%C2%A8%C2%89u%C2%83v%02%C3%B5%C3%85%C3%B8%C2%A6N%C2%A0n%C3%90%11%C3%9C%00%C3%9D%C2%A0%C3%8F%26%05%7F%2C5%C3%98%C2%B4%3D%1F%C3%BB'p%C3%80%C3%81ww%00Q%C3%9B%24%C3%9C%C3%89%C3%BC%C2%A9WZQ%C2%88%C2%A1o%C2%9Dw%C2%98%C3%9D%3E%10%C2%A7%C2%BFAs%C2%A9%C2%8F%C2%9AhZ%C2%B3)%02%2CfA3%C2%A9%C2%A7%18%1C%C2%9B6%22%C3%88%C3%A4%10%C2%88%C2%A4%C3%8E%C3%AF%C3%99nE%C2%BC%C3%82%26g%C3%87F%1B%12%23d%3C0%16Wp%C2%A1%C3%BC%0E%C2%AFn%C2%B9%C2%9E%C2%B5)%C3%B1Jm%C3%90%C2%BE%09%C2%8C%16%C2%85R%C3%B7%C3%8B%C2%A0%3BG%11%C3%9Ew%C2%8F%C2%9B%C3%BD%2F%08%C3%B4%C2%98%C3%A1%C2%A4JQ%C2%BC%C2%94z%C3%AC%1Ev%C3%B5%01%C2%99%C3%97h%C2%80%C2%A5%C3%B0%C2%AD%7B%C2%B0Y%C3%83%C3%8B%16%C2%A5%19X%C2%84%03%01%C3%92%3Bc%C2%9A%C2%98%26%14%C3%AD%C2%B06%02%C3%A4%C3%BA%22%C3%9A%C2%90%C3%BD%C2%A8U%12%C3%84%C3%88%C2%94c3%C3%B1%C3%8B%C2%BE.%02o%03%C3%B10%C3%A3N%C3%95%C3%A1%C2%85%C3%94%1Bd2F%C3%B3%C2%B3%C2%9A%3B)%C2%AB%12%C2%A4%C3%B2%C2%97a%C3%BF%C2%96%2B%C2%AFf%C3%BDF%C2%BC%C2%92%C2%A2%C2%ACv%C3%AA%0D%C2%95%3FO%C3%B1%C2%AC)%C3%99O%00%00%00%00IEND%C2%AEB%60%C2%82";
var text_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%92IDATx%01%C3%9DS%C2%BB%0D%C2%830%14%C2%B4%11%12%C2%ADG%08%1B%C2%91%09%C2%A2L%C2%90%C2%A4%C2%A42%C2%88%C2%822%2Bx%04F%20%1Bd%C2%83x%04Z%C2%BB%C2%B0s%2F%22R%3EFq%C3%A1%02%C3%A5%24s%C3%A8%1E%1C%C2%BE%C2%B3%60lm%C3%A0t%C3%A9%C2%BA%C2%AE%C3%B2%C3%9E%C2%8B%C2%98%17%C2%9CsC%C3%934%C3%93%C2%A7%C2%9E%C3%8F%C3%833h%13cT%14%C3%85%08%C3%BA2%C3%8AX%22%3Cv%C2%84X%C3%BB7%C3%B7%2C%3B%40%C2%AB%C3%A8%C3%8B%C3%A0%C3%AD%C3%AB%C2%AC%C2%AEk%1D2%C3%A2!%C2%B1m%5B%05%C3%9Aai)e%C2%89N%04%22-vH%C3%A69%C2%8B%00%C3%A7%C3%BCh%C2%AD%C2%95K%C3%B3%C2%BE%C3%AF%C3%8B%C2%B4%1D%C3%BD%02z%1A%40%C2%9A%C3%AE%C2%B1%3B%3Aa%C2%8Ay%C2%81%C2%AEH3%C3%86LQF%C3%A8%C3%A8%0A%C2%A2E%C3%BDQD%01%C3%83%1B%C3%BAS%C3%8Fg%C2%92E%C3%BBc%C2%A3%60%C3%99%C3%B3i%C2%8C%2C%C3%B0Oav%02%09%C2%B0f%C2%AB%C3%86%1D3%C2%B1O%15%C3%A90%C3%94%C2%B8%00%00%00%00IEND%C2%AEB%60%C2%82";
var text_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%11%08%06%00%00%00%C3%90Z%C3%BC%C3%B9%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%88IDATx%01%C3%9D%C2%92Q%0E%011%10%C2%86%C3%BF%C3%99H%3CI%1C%C2%A1n%C3%A0%0AN%C3%80%0Dp%04Y%09%1E%C2%BD%C3%A0%C2%85%C3%AC%11%1C%C3%81%0D8%C2%82%1B%C3%A8%11%C3%AA%C2%8D%07%C3%86t5%C2%8BMW%C2%9A%C3%B0%C2%B0%C3%99%3F%C3%AD%C2%B4%C2%9Di%C2%BFi%C2%A6%05%C3%8A%26%C2%B2%C2%86W%C3%A3%C2%BDX%15t%C2%82o%1D%C2%9A%25%3A%C3%AF%C2%AE%C2%B9%C2%A8%12%C2%A3%C3%B0%C2%83%1C(%3A%0AL%C2%BF%C2%A5U%2F0%1D%3EN%5C%C2%9B%C3%86%07%22%C2%9F%C2%93%C2%97%C3%B1V%22%7D%C2%99j%C2%9A%C2%AE%5B%08%C2%BF%C3%91w%C3%B1%22%C3%AE!B%C2%B7p%C3%83%C2%A51%0A%02%C2%81%C2%A8-%C2%B8Aa%C2%BCn%C3%A6a%C2%A0%C3%A8n%C3%80%C2%A4%C3%9DJ%3D%C3%A1%10%1F%C2%B2z%05%C2%81h%C2%B2Id%C2%B0%5D%C2%BEJ%7CJa%C2%8C%C2%9D%C3%94o%C2%98%C3%A5%C3%82%C2%9FTa%C2%90%C2%BF%C3%98%C2%94%C2%BE%C2%86v%3D%1F%14%1F%C3%9BvF%C2%A9%C3%B5%00%C2%BC%7B1%C2%AE%C2%9C%C3%BA%0F%C2%BA%00%00%00%00IEND%C2%AEB%60%C2%82";
var null_objects_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%1FIDATx%01%C3%9DS%C3%81%C2%91%C2%830%0C%C2%94%C3%A1%0AH%09)!%1D%60*%C2%B8%C3%AB%20)%C3%A3%5E%60C%23I%25q%09%C2%94%C3%A0%12%C2%B8%02%C3%80%C2%B7%3Bc%C3%8F%18%C2%87%C2%BB%17%C2%AFhF%C2%A0Y-%C2%8B%2C%C3%89%22%07%C2%98J%C3%818%C2%8E%3A%C3%85%C3%8B%C2%B2xc%C2%8C%2F%C3%89%C3%80%C3%8Eu%5D%C2%9F3%C3%9E%04l%C2%AERr%5D%C3%97gr%C2%A5%C3%94m%C3%B7%C2%8F%C3%80s%1E%C2%A0%0B%C3%B1%C2%8F%C2%9C%C3%94%C3%B7%C2%BD%1A%C2%86%C3%A1%19B%C3%A8%C2%AD%C2%B5%C3%BD%1FB%C2%AE%C3%AB%C2%BA%16%C3%B9%C2%90%C2%B0%C2%8DH%14%C2%A0%C3%BA%03%C3%AF%C3%BB%5E%25%C3%80%3F%23OJ%C2%91%19nY%01%C2%88w%C2%94%C3%BA%C3%80%11%C2%9D%C2%BC%C3%B6D%C2%AA%C2%AA%02-%C3%9C%C3%88%C2%87%C3%BB%C2%92%23%2C%11D-%C3%BF%18%07%C2%90%1F%C2%85V%C3%89%01%C3%B6f%225%1Fh%C3%A6%C2%A9m%C3%9Bo%C2%84%1A%C3%9D%C2%97%C2%A6i~%C2%9Cs%C2%BE%24%C2%B3%C3%A9%C2%98%C3%9E%15%C3%A1%05%7C%C2%A5%C2%B5%C3%B6%C3%A0%C3%8Di%C3%84'8%C3%87%C3%AB0%C2%BE%2F%0Aa%0A%2F%7FD%C3%AE%C3%8A%7C%C3%A4q%19%1D%C3%9Co%C2%8E%C3%83M%04a%C3%A2%1E%C3%A4%C3%AB%C2%9D%C2%9C8%C3%B3%C3%A4%C3%A5%C3%9Fm6%C2%96%C3%B3%C2%8F%C2%9Bhq%05LY%09%C3%B2%26%5E%C2%89%C2%B0'2%23%C2%99%C2%AB%7B%C3%99%C2%B1x%15%5C%06Mr%C2%94%C3%BD%025%C3%93%C3%80Yy%3FjR%00%00%00%00IEND%C2%AEB%60%C2%82";
var null_object_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%1AIDATx%01%C3%9DS1%C2%B2%C2%820%10%C3%9D(%C2%85%C2%A5G%C2%A0t%06%0A%C2%8E%C3%B09%C3%81%C3%B7%06r%13%C3%B0%26x%12s%04%0A%C3%AC9%C2%82%C2%85%C2%85%053%C3%AB%C3%9B52%C3%84%C3%84%C2%B1%C2%A1rg%12vv%1F%2F%2F%C3%89%0B%C3%91%02a%5E%09%C3%A7%C3%B9%C3%9FTM%C2%92%C3%81t%C3%9D%C3%B0%0E%C3%A6%C2%A2Hi%1C%C3%93%19%C2%AE%03%C3%AE%C2%BA%C3%92%C3%A6n%C2%97%12%C3%B3y%1A%C3%A3X%C3%85V%C3%94%C2%BA%C2%8F%2B%C2%94%C3%8B%C2%93u%C2%B9%18(%12%40%C3%8DYV%07%24%C3%8C2%5B%C3%A0J%C3%B4y%12%C3%A4a%C2%B2%C3%AC%C2%8C%C2%8F%C2%B0%C2%9F%C3%88%C2%986BRa%C3%BEw8%C3%B2I6%C2%9B%2B%C2%A4%1DE%01F%0B%C2%82%C2%93%C3%A9%7B%1Bp%C3%A4%C2%B9%10%C2%89%C2%82%0A%C2%98%23%C3%BE%19%C3%82%C2%85%20%C3%91%3B%C3%A0HH%7F%C2%BE%15%C2%89%15-%10%C2%BFH%02'nq%60%C2%8DV%C2%98%0F%C2%9F%0EW%C3%AB%C3%A8%C2%BB%C2%BCQ%C2%93%C3%92%C3%AB%C2%8A%C3%AF%C3%B7-%C2%AD%C3%975%C2%AE%C3%8D%02%C2%B4%17S%C3%A9u%06%2C%200f%C2%8F%C3%8C%C2%AA%1D%C2%92%C3%84%22%1F%7C%C3%87%C3%B6%7D%C3%A9%1C%5B9c%C3%85%C2%88%C2%BE%3A%C2%96%C3%95%C3%9A0%12%08%1B%0A%C2%B7%C3%93%C2%B8'%C3%A1%C3%B9d%C3%AE%C3%98r%C2%AA%C3%86%C2%9C%C3%B8%C2%AC%C2%B7n%0B%C3%8F%C2%B8%C3%9D%3AZ*%1E%C3%8A%C2%93%C2%A08%C2%B1%C3%A4%C2%8E'%00%00%00%00IEND%C2%AEB%60%C2%82";
var trackmatte_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%09IDATx%01%C3%8D%C2%92%C3%9F%0D%C2%820%10%C3%86%C2%AF%C3%84%C3%B0%C3%8C%088%C2%81%C2%BA%01N%C2%A0N%20n%C2%80%0BP%C3%9E%18C6%10'%C3%90%0D%C3%84%0D%18%C2%81WB%02~%C2%A75%C2%A9%14%C2%A5%C2%8F%5Cr%C3%A9%C2%BF%C2%AF%C2%BF%C2%BB%5E%C2%8Fh*%26%C2%866%C2%93%24%C3%B1%1C%C3%87%091%5D%C3%80%7Dx%05%C2%BF%C3%84q%C2%9CYA%00X%0A!%C3%8E%C3%AA%C3%B2%5B%24%C3%84%C2%AD%C3%AB%C2%BA%C3%97%1A%C3%A3%1A%C2%9A%C3%B2'%04%C2%87%3E.%C3%9C1%C3%B5%C3%B4%7D%C3%97u%C3%A7u%5D3%2C%C3%82r%0F%C3%90J%079%C2%BA%18O8%C3%B5%01Z%C2%80RJ%19qVJG%06%C2%84%C2%B3%40%C2%84%C2%80F%C2%ACm%C3%9B%23%C3%AB%C3%924%C3%B5%0D%08%C3%A8%5B%C2%B20%C3%B5%C2%8C%C2%A2i%C2%9A%C3%80%C2%80%C2%80%C3%AE%C2%91%C2%A5%C3%A1I%C3%95%C2%A7%C3%90%7DHI%C2%96%C3%86%01%19d%408E%1B%00%C3%97%0E%C3%83%12%C2%B5%C3%89%0D%08%0E%0B%C2%AE%C3%BC%18%04%C2%B5%C2%93%C2%AC%C3%93%C2%BFx%C2%A6%0B%40%3F%0C%C3%B5%C2%89%0A%C3%82%5D%2C%C3%B9g%C2%B8%C3%A1%C3%B4%C2%B3%C2%A1%C2%8E%C3%A5%C2%86%C2%BB%C3%92w%C3%87%C3%A6%C3%AA%C3%BB%C2%B9%C2%A0%3B%C3%8E%C3%BA%2FD%C2%83%C2%85%C2%88%C2%BCQY%C2%95%C3%B0%072%C3%8D%C2%B0_%C3%91d%C3%AD%09%C3%A5nx%3F%C2%8C%C2%B3%C3%85T%00%00%00%00IEND%C2%AEB%60%C2%82";
var trackmatte_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%B6IDATx%01%C3%8D%C2%92%C3%81%0D%C3%820%0CE%1D%26%C3%88%08%C3%9E%C2%80%C2%8E%C3%80%060B7%C2%82%0D%C3%A8%06%15%13d%05%C2%98%C2%A0%C3%99%C2%80n%60~%C2%84%0FiH%C2%83%C3%A1%C3%94%2F%3DYr%C3%93%C3%97%C3%8A%0E%C3%91V%C3%A2jM%11%C3%B1(%3D%C3%98%03%063%C2%B89%C3%A7%06%C2%B2%04%C2%82%0EL%C2%B2L%C3%90%5E%C2%82%C2%BF%09%18%3C%C3%A53%C2%AC%5C%C3%B49%C2%B7%24A%C3%AA%C3%A1%C3%AC%C3%8C%C2%98%C3%8E%C2%B5%C3%BEB%0C%12.%7B%C2%BB%C3%8Cs%22C0%C3%9C%C2%88r%07%C2%87%C2%9A%C3%84%C2%93%3Di%5B%5C%C2%93D%C2%B2%C3%87%C2%ABh%19%5D%C3%AD_3)E%C3%81%20%C2%B9%C2%AEn'%C3%BB%C3%8A%C3%9A%3D%C3%B1%C3%A0%2C%3F%5C%C2%B8%C2%A9%C2%90%C2%8C*O%C3%BD%C2%AE%7C%C3%875d%3D%C3%8A%C2%91%C3%9EC%C2%8C%C3%A0%01%06%C2%ACx%C2%A6%C3%8D%C3%A6%05%7C%C2%959%C3%B2%C2%BA%C2%AB'%1C%00%00%00%00IEND%C2%AEB%60%C2%82";
var Adjust_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%015IDATx%01%C3%8D%C2%93%C3%A1q%C3%820%0C%C2%85%C3%AD%5C%07%60%C2%83%C2%A6%13%C2%B4%23x%03%C3%98%C2%80f%C2%830A%C3%9C%C3%8B%00%C2%B0A%C3%9B%09J'%20%23%C2%94%09H7%C2%80%01%C2%92%C3%B4Sc8%C3%85%09%C3%BC%C3%86w%C3%AF%C3%ACHO%C3%8F%C2%92%C2%AC%18s%2F%C3%8BN%19%C2%BD%C3%B7%C2%B3%24I%5E9%3E%C2%83%14%1C%C3%81w%C3%9B%C2%B6%15%C2%BE%3A%C3%A6'%13%02%0Bk%C3%AD%C2%A1%C3%AB%C2%BA%C2%82%C3%8F%19%C2%BB%13%C2%BB%7Cc%C3%9F%C2%89%C3%BF%C2%A6H%10%C3%B8%22%C3%A0%13%3Cq%C3%B3*%08%C2%BC%04J*%C3%BEX%C3%88*%01!%C3%ACD%C2%80%C2%B3W%C2%B6%03%C2%A5%C3%A5M%C3%93%C2%9C%C3%BE%03%C2%ACuls%C2%B9%04%C2%BF%C2%94i%1E%C2%94%C2%A0%0B%C2%81%3EN%C2%97%C2%8C6%04%0FK%C3%A8%7B%C2%B6%19%C2%88%60%C2%9C%C2%B3Ufz%C2%BDqs%C2%AD%C2%B8K%C3%937%C3%9D%C3%84%C2%99H%13%C3%B7WD%0A%C2%9D%09%3C)%C2%AB%1A%C2%89%C3%A0%C3%B8%C3%85%C3%B18%C2%A5%C2%80%5D%1A%7CT%C2%A6%25%C3%BC%C3%93%253E%C3%BC%C3%81%C2%B1%C2%90%19%C2%89E%C2%B0%C2%AF%C3%81%C2%BB%C2%82%C2%83%C2%BF%1D%C2%89%C3%90%C2%BC%0F%C3%93%C3%97%5B%C3%84%22%C3%B2%3A%04e%01%C3%92%C3%8CZ%06o%24%22%C3%8F%C3%85%0D%19%C3%88%C3%8B%C2%B2%1C%08%11%C2%90%C2%ABl%C3%A4%C2%BC%C3%92%C2%93%3B%1A%C3%BB0pk%5D%C2%A2%C2%A4%C2%AE%267%C2%83%C2%B3%C3%951%C3%97%C3%BE%C2%9D%C2%94%C3%8D%C2%85g%C2%97%1E%C3%95%60%2F%25%C2%9F%07%C3%AC%3E%C3%97%1F~%C3%9F%C2%BBU%C3%80%C3%99y%C2%AE%00%00%00%00IEND%C2%AEB%60%C2%82";
var Adjust_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%84IDATx%01%C3%8D%C2%92%C3%81m%C3%82%40%10E%C3%A7%C2%AF%03%C2%96%C2%95%0B%1D%04N%C2%88%13)%01%0E%11G%C2%A0%C2%82%C2%84%0EB%05%40%05P%02T%009E%C2%91%22A%09%C3%A1%14q%C2%82t%00%12%C2%91%C3%A5%60v2kb%C3%A3%C3%98%16gF%C3%B2a%C2%BFw%C3%9F%C3%BC%C3%BD%3BD%C3%97R%C3%88%12%C3%A7k.%C3%B8%C2%9E%C3%BB%C3%84%40%C2%95%C2%98%C2%8A%20l%C2%99%C3%B9%25G%C2%B4%C2%A8W%C2%9CMr%C2%BFJ%0Ao%2B%C2%AF%C3%A5%C3%BF%C2%B8k%C3%81%C3%B7%40%5C%10%C2%A9%16%C2%B4%C2%92%C3%B5%0147%C3%BF%2FB%C3%8C%06%C2%B0%C2%9E2%C3%93d%C2%9FwJ%C2%BEF%C3%97%C3%A8%C3%A2%C3%A2%C3%BEoK%C3%91%C3%BCO%C2%82%C2%A2%C3%AB%C3%8C%3F%C3%9D%C2%A2%C3%A9%C3%84%C2%AC'%C2%8D%C3%8Am%C3%9Fh%C2%AF%C2%A2Y%C2%A0%C2%B5Rx%C3%96G%C3%9E%05%40%C3%925(%C2%AB%C2%99%C3%8B%C3%9B%C2%A5z%09%5B%C2%A3%C3%9D%C2%84%C2%90%C2%83%C2%B1-%15%02%C3%A2%C2%A55%C2%8F%C3%82v0%C3%A6%C3%85%C2%AA'%C2%99%C3%89r%C3%B4%0F%02%C2%A0)A.(%C2%A3%C3%A4%C3%8C%40%18%C2%9B%C2%98%C3%BFG%05%C2%AB%1A.%23%08K%C2%88%C2%ACy%C2%99%05%C2%81%C2%84%C2%9A%26%C3%ABE%1A%C3%82%C3%B4%05%C2%A5%C3%AE2!%C3%84%5D%C3%A6%C3%93%C3%BDC'%C3%92p%C2%97%C2%82(%C3%B0%C2%87%C2%B8%C3%A9%C3%89%C2%8Ct%C3%83%C3%80%C3%8E.1LN%C2%94%5C%C2%BF%13%C2%9D%C2%8Dh%C2%B67%C2%96%08%C3%89%3F%C2%B8)%C3%AB%C3%A6u%C2%84%C3%941%1F%14L%C2%98%C2%9B%C2%A3%0C%C3%9E%C3%99X%C2%AC%C3%9EW%C3%9F-%C3%8Dj*%19%C3%B4%1F%C3%8A%C3%8E%20%7Cbs%08%C2%90%C3%8C%18%C2%85%C3%80%19T%C2%BBQ%C2%B6g%C2%99%C2%90%18hx%C2%B2%2CWd%C2%B4d%C3%ACg%04%5D3%C2%9A%26%C2%AB%13%07dBL%05%0Edn%C2%A0%C2%B8%19t%C2%878a%5E%C3%AEmg%C3%9CN%C3%A4u%5D%C3%B5%0B%C3%BE%04%C2%AF%C3%80%7D%C3%A6%C2%90%C3%BB%00%00%00%00IEND%C2%AEB%60%C2%82";
var solo_anim_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%B0IDATx%01%C3%9D%C2%92%C3%AD%0D%C2%820%10%C2%86%C3%9B%C3%86%01%1C%017%60%04%C3%98%C3%80%0D%C2%84%09%C2%8C%0B%20%C2%85%01t%03%1D%C2%81%0D%C3%AC%08l%20%230%01%C3%B8%C2%9E%C2%96Z%C3%A0H%C3%B8%C3%8D%25M%C3%AF%C2%A3yz_BlJ%C3%A4%C2%9AGeY%1E%C3%BB%C2%BE%C3%9Fs%C2%B1%C2%AE%C3%AB%C2%AA%C2%9D%C3%AF%C3%88%C3%B3%3CPJ%C3%9D%10H%C2%A1%C2%B7%C3%9E%C3%83%10%C3%97%C2%95a48%C2%95%C3%B4%01R%C3%8A%17%C3%94%00%C2%A7%C3%86%C3%8F%C2%B1%0F%C3%92Z%C2%BFm%C3%AC_%C2%86%C2%94i%C2%96eO%C3%85%00HB%C2%B2%C3%A1w%25%00%C2%9AN%C2%B3%20%00)%C2%8A%01%08%0E%C2%84%C3%9B%C3%806%1E4%1Et%C2%B4%40%3D%18%C2%80%03Q%C2%8F%06%03%C2%BD%C3%91%C2%B6%0C%03h%C3%A3%20%C3%94D%C3%B1k%10'5%C3%A2%17%C3%AF%C3%87%C2%93%C3%8D%22%02%24r~%22%C3%9A%C3%94%C2%A6%C2%A0Qsq'%C2%B0%13%0F%C3%A8%C2%A654v%0A%C2%9AM%07%25%C2%8CFL%C3%99%14E%C3%B1%C2%85%C2%8E%C2%96miO%C2%B0lg%C3%B8%C3%AEb.-%60%C2%87U%1Bk%C3%AB%0F%16%C3%82FlK%3E%C3%96K%C2%8A%0EH%7B%10A%00%00%00%00IEND%C2%AEB%60%C2%82";
var solo_anim_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0AIDATx%01%C3%9D%C2%92%C2%B1%C2%91%C3%820%10E%C2%BF%C3%A4%C2%9B%C2%BB%0B%C2%8F%C2%99%23_%3A%C2%A0%04%C3%93%01%C2%84%C2%8E%C3%80%150T%C3%80P%01t%00%C2%99%C2%81%04%3A%C3%80%25%C3%90%01%C3%8A%C2%81%C2%81%C2%94%C3%80%16kc%C2%84%C2%B0%C3%8C%0C1%1BH%C2%BBZ%C3%8D%C3%93%C3%AA%C3%AF%02%1Fe%C3%A2%C2%9DK%C2%8B%03%C2%B5S%C3%A0%C2%AF*%C3%B7%C3%ABa%C3%BDe%1FD'%22%C2%99%60%C3%BC%C3%AD!%C3%AC%C3%94%C3%94%C3%B9~%C2%9Ej4%C2%85%C3%80%C2%B0%C2%A2%04%C3%85%C3%ABZ%C3%98%00%C2%91b%03%0D%C3%A2%C3%A4%C3%B6G%C2%A2e%C2%83%C3%A6G%C3%9A%C3%A59%C3%8B4%10%06%C3%BFj%26%1D%C3%80-%C3%9B%C2%BCp%C2%BC%3A%C2%91%C3%B9%C2%82N%11%C2%96%C2%AB%C3%88%00%C2%99%2B%1D%C3%80%C3%A3%C2%99'PPW1o%C2%B1Is%C2%A5w_%C2%8A%04S%07%60%C2%83X%23%13j%C2%8C%0A7%0EjJ%19%C2%88f%11%0B%C2%81%5C%C3%8B%C2%B4%C3%B100%C2%A1%40%C2%B7p%C3%BDhO%C2%BE%C2%81d%C3%84%C2%BC%C2%B42%C2%A8%24nt%C2%A0%1Eo%3D%0Bh%C2%BA%C2%95%0B%C3%AB%C2%80*%C2%BAS%C3%91b%C2%BF%00%3F%0F%C3%9B%C2%AB9Y%1E%C2%A9%C3%8F%C2%B32%C2%81kg%C3%BEn%C3%A3%C2%AD%C2%89e%C2%B8%C2%8F%C3%A4%C2%85%C3%B8%C3%9E%C2%A3c%1FbW%C2%BC(q%C3%86H%7D%23%C2%9B%00%00%00%00IEND%C2%AEB%60%C2%82";
var solo_mask_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01yIDATx%01%C2%95RMN%C3%82P%10%C2%9E%16KH%C3%98p%04%1A%2F%007%C2%80%1B%C3%98%13%C2%98.Q%09t%C2%A7B%C3%82%23%01%C3%A3%0E%C2%88%20K%C2%BC%C2%81x%02%C3%B0%04p%C2%83Wn%C3%80%C3%8A%05%7F%C3%8Fo%00%C3%89%C2%B3%C3%90*%C2%93L%C3%9A7%C3%9F7%C3%BFC%14!%C3%9D%C2%8Al%C3%B5%1Ee-%C2%8Ac%C2%9C2%C3%B6%C2%85L%C2%AF%C2%97%C3%B4%C2%8E%C3%9F%C3%8C%C2%96%C2%A4hh%C3%86%C3%89%2B%08%C3%9B%C3%BF3%C3%80KU%C3%A6%C3%A00%C3%80o%3A%00%C3%B91%C2%8B%C3%B2%C3%81%20%C2%A6%C3%BE%C3%A8Ug%258%C2%8FN8%C2%B3pU%C2%B2%C3%BB%20%C3%8BG%15%0C%C2%84L%7D%C2%ADh%C2%A0%14%5D%C3%91%3F%04Y%C3%9B7M%C3%9B%C3%9B%06h%C3%81%C3%99Z%C3%92%24%24k%C2%94%C3%B8K%C2%8B%C2%B2%C2%A6'%C3%AC9%1E%C2%9Ds%3C%C2%95As%C2%A8%C3%8B%C2%BE%C2%87!%C3%B6%C3%AF1%C3%B9Xh%C3%BF%C2%BALckr%0A%C3%8F%C2%BBa%1E%C2%86%C3%88%06%00y%C3%83%C2%A0ahf%C2%B5%C3%A9%24%C2%B1%C2%89D%C2%82%C3%A6%3F6C%C3%9B9aM%0E%C2%AF%09%C2%AB%14%C3%98F%C3%B0%C2%80%C2%BC%C2%BB%C2%A6%C3%9D%C3%9E%C3%B3G%C3%80%C2%A7%C2%8B8%C2%B9%26%3B%C2%A0%C2%9F%0F%102%0C%C3%A0%C3%B22%C3%85%C2%86-%60s%60%C3%B3YA%C3%8E%C2%B2%C3%B3kev%C2%BDZ%C3%91%04X%0A%C3%BA%C3%B9k%06%C3%BA%01%C3%A1%2Bn%C2%9F%C3%AC%3A%C3%8F%C2%85%C3%8BuA%C3%A4%C2%B3%06V%C3%9E%07t%C2%80O%C2%B7-%C3%A85%C3%AA%C2%83%04%C3%B0%C2%B6%C2%B0%C3%88K%10%C2%A5P%19%07%C3%8E%C2%81%3DN%5E%C2%90%C3%A3%C3%AE6GG%01%C2%B4j%C3%9A%C3%88R%C3%9A%C2%B7%C3%80%C2%92V%C3%86%C2%A6%5El%5C%C2%8A%20%C3%B7d%00%16%C2%94%5C%06ZS%C2%BB%C2%A7%C2%83%C2%B9%C2%8C%C3%A9%5C%C3%A1%C2%96X%C2%A38%C3%9F%C3%B7%C3%80%C2%A7R%C3%A6%C3%89%C3%BB%5C%00%00%00%00IEND%C2%AEB%60%C2%82";
var solo_mask_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%10%08%06%00%00%00%C3%89V%25%04%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%60IDATx%01%C2%95R%C2%BBR%C2%83%40%14e%C2%A1%C2%B1Lk%C2%97%C3%92R%3B%C2%BB%40h%C2%B4%0B_%60%C3%BC%02%C3%87%C3%92%02X%1E%3D%C3%A6%0B%C3%A2'%24%C2%9D%1Dkg%17%3E!%C2%A5%25%C2%96%16%C2%80%C3%A7%C3%84e%06%054%C3%9E%C2%99%C2%9D%C3%9D%C2%B9%C3%B7%C2%9C%C2%BD%C3%A7%3E%C2%841bR%C3%8A%C2%A9i%C2%9AY%5D%C3%97%2B%C2%BC%C3%95%10%C3%86%1Ar%26Ib%C3%A3%C3%8Aq%C3%8E%C2%85%10K%C3%97u%C2%8D%3C%C3%8F_~%C3%A2%C3%84%001D6%C3%99%03%0A%C2%B1%C2%81%C3%BF%1E*%C3%B6%3D2%C2%9C%13%C3%88%5C7M%C2%B30%C3%86m%C2%8F%C2%B8%C3%93~%60i%22%C3%A5Q%C3%A6%C2%A5%C3%B1%C2%BBMX%C3%86%7C%3E%C3%BF%40%19%C2%AF%02%C3%84%25%1C%19%03%C3%86%C3%BF%2C%C2%B2%C2%94R%C2%85%C3%A38%C2%A7Gd%C3%ADZ%01%C3%B9%0F%07%C3%99%C3%B8%C3%A0%C3%99%C2%B6%C3%ADw(%C2%B8%C3%BA%C2%8B%05%C3%92%0A%C3%97-%14%C2%BF%1D%1A%C3%86f%C3%A1%C2%94%C2%9C%C2%AD%C2%AE%7D%3A%C3%80%2BA%C2%8C%C2%80yl%1D%C2%96n%C3%96%0E%C2%B3%3C%09%C3%83p%0B%05%5Bt%C2%9D%C3%A4%C2%B3%0E%C2%91%5D%C2%BE%06v%C2%93%C2%A6%C3%A9%C3%8Dl6Sl%C2%9A%C3%89%1FAV%C2%9Cm%14E%3B%22%C2%83%20%C3%B0%C2%98%C2%85o%C3%86%C3%B0%C2%BE%00%C2%B1%C2%88%C3%A38%C2%AB%C2%AA%C3%AA%C2%89%1C%C3%A0Uw%C3%8E%12%C3%80Pg%C3%B1%08%C2%A6*%7DO%C3%B5%0E%C3%98%3A%11%C3%A3%C3%A5%C2%B7%0D%C2%83c%C2%A1%C3%87F%C2%B0%C3%B4%7D%3F%C3%A2%C2%AA%02%C2%BC%C2%A6O%C3%97%2C%5B%7Co%3D%C2%BBM%C3%A3J%C3%AA%C2%8D%2B%C2%B5%1A%C3%95%C3%85%C3%B6%C3%88%C2%AD%C2%A1~v%C3%B5%C3%8E%C3%B8%C2%9A%C2%A9%C3%97%C3%9D%C3%A9%C2%A3%C2%8Cep%C2%8Cc%C3%B1O%3Db%C3%85%12%5B%C2%84%C3%B4%C2%9F%00%00%00%00IEND%C2%AEB%60%C2%82";

//TOOLS
var add_null_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0F%08%06%00%00%00%3B%C3%96%C2%95J%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%18IDATx%01%C3%95%C2%92AR%C2%83%40%10E%7F%0F%C2%B8%C3%A7%06r%04n%10%C3%B0%02%C3%A6%06%C2%BAu%C2%91%C3%B2%08)O%40%25%2C%C3%9C%C2%86%13%18%C3%B7%1A%C3%B0%06z%03%C2%8E%C3%80Zf%C2%A6%C3%AD%26%C2%91*C%C3%8C%C2%86Uz%01L%C3%B7%7F3%C3%94%C3%BC%0FL(%C3%92%C3%87s%C3%85q%07%C2%97%1E%1A%C3%AD%22%0B%C2%B7%C3%87%C3%82%C2%A2%C2%B2s%06%22%C3%BD%C2%BEBP%3Fd%C3%94%C2%84%C2%BA%C3%A8%C2%BC%C2%80DK%027%22H%C3%96%C2%95%C2%8DF%C3%870%3D%12%C3%8B%C2%9C(%C3%A9%C3%98ig%13%0E%C2%BF%40%C3%BC%C3%89%C3%9E%7F%C2%80LJ%C2%8C%C2%BB%11%0B%C2%8E%01_%12%C2%99%C2%88y%C3%9F%C3%ABa2h%C2%A5%C2%91%C3%B6%20P%2Fn%C3%82%C3%AC%18%5E%C3%AD%C2%BE7%02%C3%A6%C2%A2kE%C2%BF%C3%BA3%5C%C2%BF%C3%9B%C3%BBbg%2B%C2%9C)%C2%9D%C2%AB%C3%AEwm0%C2%A1.%19.%C3%9E%C3%AC%5C%C3%92%C2%91%C2%8B%03%C3%A9%7F%C2%97%26%C3%9E%C2%BFh%06T%C3%97%C3%ABq%C2%B0%C2%8A%09%C2%91%C3%B8%C3%B8%25!%C3%982%C2%99%C3%A5%C2%A9%0D%C3%84%C2%A2%04%C3%AC%C2%9F%60%C3%8CL%C3%B5%03%C2%ACE0%C3%97%C2%92%C2%B0%19%C3%AF7%2BGG3%C3%85%C3%A2%C3%B3-%C3%8B%5B%16%C2%AF%03%C3%ACLP%07p%0Ai%C2%B6%C3%8BS%C3%99%C3%8E%C2%AB%C2%AE%09%C3%90%C2%83p%14%C3%94%C2%98Z%3F%19%03x%C3%AC%1ED%C2%94X%00%00%00%00IEND%C2%AEB%60%C2%82";
var clear_all_panels_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%0E%08%06%00%00%00%26%2F%C2%9C%C2%8A%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%7FIDATx%01%C2%9DR%C3%8Bm%C3%82%40%10%C2%9D%C2%B1%1D%C3%8E%C2%94%40*%C2%88K0%C2%90%02%C3%A8%008%C3%A6%40%C3%80%15%04*%08%1FE9%C2%92%0E%20%C3%B7%C2%80%C3%A9%00%C2%A7%02(%C3%81%C2%91r%0A%C3%9E%7D%C2%99%C2%B5X%C3%8B%06D%C2%A4%C3%8CeWow%C3%9E%C2%BC%C2%99yL%17b%1E%C2%A1%C3%BAM%C2%BAO%40%00%22_%C2%A0*%13%C3%87%C3%8C%C2%88%5DrG%0Fu%C3%9E%C3%9B%C2%BF%7C%C2%9A%C3%BC%12%C3%BD%C3%B8%0A%C3%AE%C2%82%08%C2%B5%2C%09%C2%88%15%C3%A1%C3%8Ba%C2%BE%13%C2%B2%20%C3%BB%04%1D%3E6%2B%C3%A33%C2%82%C3%97%08%C2%B5%03%C3%94V%C3%A0%C2%84Yw%7B%C3%B5%C2%9BM%C3%B1%C3%BDY%C3%9E%3D%C3%A8%05%08%C2%BE%25)%11L%C3%97jgN%C3%85N%3D%2C%C3%88%3C%C2%8D%C3%99%3A%C2%8DLk%C2%8A%C3%9D%5B%2F%07%C2%A3C%00%C2%A0%26%C2%9A%C2%BA%C3%97%C2%92M%C2%A4%C3%ACv%5D%C2%A8%C2%9D%C2%A3%C3%93%C2%81cA%C2%AD%C2%A9%C2%95U'wYR%C2%B5J%3B%C2%93%C3%95a(%C3%B2%C2%AB%163%05D%C3%BA%C2%86%C2%99%C3%9B%C2%B9%023%24%C3%A9%3D%C2%96%C3%87%24W%C3%B5%C2%91%C2%B6%C3%804%C2%97a%C2%92T3%04%C2%83%C2%BC%20%C3%B0)%04%C2%81g%C3%98%C3%A5%C3%B2%C2%84%0C%C2%86%C3%8C!%C2%95N0%C3%AA7o%C2%86%C3%A4%22!%C3%B0%C2%B5n%C3%881%1FM%C2%82%05%C3%A4%3E%C3%89%C2%92%25%C2%B2-%C3%88L%C2%88u%C2%A8%1DoXJ%14%C3%85%C3%99%C2%9A-%60%C2%94%10%C2%A3%C3%96oT%3A%C3%B4G%1C%C3%97%C2%BD%13%C3%B27%C2%A6%7F%C3%84l%C2%AD%C2%B6%C3%86%0B%C2%A55%C2%9EVH%C2%95%C3%B2%7B%C3%B7%C3%9E%C3%B2%0C%C2%87%C2%9A%5B%23%C2%85%0Do%C3%8F%C2%97%2BdF%09%C2%AC%C2%95%C2%A5%C3%A1Df%C3%A3%1F%C2%AD%2C%C2%83%C3%95%C2%A3%C2%8BV.%C3%864J%3B%0Cj%C3%A7%C3%BE'%C3%9E%03%C3%BA%5D%C2%869.%1A%C3%AD%171X%C3%8D%C3%91%C2%9F%C3%BC%C3%93%C2%8D%00%00%00%00IEND%C2%AEB%60%C2%82";
var track_matte__imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%10%08%06%00%00%00%C3%B01%C2%94_%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01.IDATx%01%C3%8D%C2%91%C2%B1J%03A%10%C2%86%C3%BF%C3%99%C3%9D%2B%C2%B4%12%2B%C2%B1Q%2CB%5E%40%C3%85*%C3%86%7B%C2%82%C2%94i%C3%A4l%04%C2%91%C2%9C%C3%B8%00%22%C2%A4%C2%B3%12%7C%07AP%C3%90%C3%86%C3%86%C3%82%C3%93V%C2%B0P%5B%5B-%C2%83%C2%95%18r%C2%BB%C3%A3DX%0C%C3%87%C3%A6re%C2%A6%C3%9A%7F%C2%98%C3%B9v%C3%BE%19%60Z%C2%82%C3%BC%C3%A3%C3%A4%C2%8E%17g%C2%8C%C3%8B%00%C2%AEM%C3%ACb8%C2%AD%C3%B4%C3%B6~%C2%93%C3%8E%C2%87R%C3%B9%C3%BCl%C2%94%C3%97*%01%C2%80%2FV%C3%B4j%C3%99%C3%AE%C3%B8%C2%84%C2%9A%C3%90%C3%B0I%C2%8C%0B%C3%B9%C3%B9%C3%89%03%C2%88%C2%B8%05%C2%B6%2FbAW%C2%80p%17%3Fz%C2%A5%13%C2%9Bv%1A%C2%9Bu%C3%92%3A%16%C3%A0n%C2%A7%19%3D%14%2BM%C2%B8%1F%C3%B7i%1C%1D%7By%C2%9A%C3%B1%1C%C2%AC%3DbBO%C3%A4e5%08%C3%A8j%14%60%C3%98%5E3%C2%B0)%C3%B2%3BT%5D%C2%BA%C2%93%02%60l%04!%C2%A4%C2%B8%15%02%C3%882oC%C3%B5A%3B%C3%8CX%C3%95p%C2%A9%00%1A%C3%BFdz6N%1DV%C2%9D%C3%A4%C3%AF%C2%8C%C3%A9%C2%96%C3%AEF%03%C2%BD%C2%A0%08m%C2%90%C3%9B%C3%A8%3D%C2%AA%C2%B5%C2%BD%C2%98%3EP6%C2%89%26cs%C2%B6%C3%83%C2%99o%18%C2%B4%7C%C2%96%C3%A5%C3%89%00%C3%96%C3%BFU%C2%9Fo%C3%98%C2%BA%C3%A4%C2%BC%C2%AD%25vr%C3%83%22%C2%A4%C3%8Fx%13%C3%B1.V%12%C2%91%09JB%C2%BA%C3%BB%60%3A%C3%80%C3%94%C3%85%2F%C2%95%C3%83o%C2%B5%C2%AF%C3%8B%C3%98%C3%9A%00%00%00%00IEND%C2%AEB%60%C2%82";
var effect_manager_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%86IDATx%01%C2%8DR%0B%0D%021%0C%C3%9D.%08%40%C3%82%24%20a%0E%18%0A%C2%98%04P%40P%C3%80%24%20%01%07%03%05%04%05w%0E%C3%80Ai%C2%93w%C2%97f%C2%8C%C2%BB%C2%BD%C3%A4e%C3%9D%C3%BAogM%01%22%C2%8A%7C8%C3%B5%C2%94%C2%AC%C2%B5%1F%C3%B3%0F%C3%ACp%C2%A1_83%076x3%7B%C3%A6%C3%9A%C2%B4%C2%80%0D%3D%22%C3%87%25%C3%9BN%C3%89%01%C3%A7%7D%C3%89I2%04fFi%04Y%C3%93%C3%83n%C2%8F%7BX%C3%81w%60zdy%C2%A8%C2%98%5B%C3%A6%C2%89%0DE%C2%BE2%C3%8F%3C%C3%89%C2%9B%C3%8E%268%C2%98z%C2%9FRE*KLPn%C2%8Aw7%C3%8E%C2%BD%C3%96W.%15p%C3%A8A%1A%7B%C3%93%06%C2%92%3EW%1C%C2%9E%C2%B23%C3%88%C2%93%C2%BECI%C2%B2%C3%8C%C2%97%C2%8A%131%C2%94%1D%C2%BE%C3%90Q%C2%865%C3%BD%0EY%26%C3%92%07%C3%93%08Y%C2%AEx%0F%60%13%C2%BE%C2%B2%C3%96%C3%A3T%C2%BD%01_%C2%8E%00%00%00%00IEND%C2%AEB%60%C2%82";
var pre_comps_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%B5IDATx%01%C2%A5%C2%91%C3%81%0D%C2%830%0CE%C3%A3%10qf%C2%84%C2%B0AG(cq%01%C3%82%C2%851%3AC'h7(%230B%C3%AEQ%C2%92%C3%BED%C3%90S%C2%A4Z%C3%B0%C2%A5%C3%84%C2%96%C3%A5%17%C3%9B1%C2%89%5D%C3%8B%C2%B2h%C3%81P%C3%9F%C3%B7%5B%C2%B24MSCD%1F%C3%B8%2C%10%C2%B9%C3%AFa%18%3AUU%C3%95-%C2%84%C2%A0c%C2%8C-%C2%83%C3%938%C2%AF%C3%A4%C2%A8%23%C2%82%C3%8A%C3%9B%3F%0A9%3F_y%C3%AFW%C2%94%C2%B7%C3%86%C2%98(x%C3%9A%C3%92%25%C3%B1%C2%8A%C2%85%7D2%C2%A14%C2%A3%C3%89%C2%A08%C2%A9%22X%C3%97u%3B%C2%8E%23%C2%A5%23%C2%A5%C3%ACJ9%C2%AA%14t%C3%8E%3D%C3%A6y%C3%8E%3E~%C2%BCa%C2%83X%C3%8D%5D%C2%9Ci%C2%95%C2%A3k%20Z%5B%C2%B9%00f%C3%8E%C2%B9t%04%C2%B0O%C3%8D%C3%A0%C3%AC%C2%BEw%C3%B1%05%C2%83%C2%98%3B%7F%C2%9D%C2%9F%7B%C3%A5%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var rename_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0D%08%06%00%00%00%C2%99%C3%9C_%7F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%9DIDATx%01%C3%8D%C2%8E%C2%B1%0DB1%0CDc%07)%C3%AD%1F!%230%C3%82g%14%26%00%C3%8AT%C2%84*-%1B%C3%81%06%C2%8C%40%C3%A6H%C2%91p%C3%AE%10r%0C%25'Y%C2%8E%C3%AC%3C%C3%9FQ)%25%3AC)%C2%A5%C2%AA%C3%8D%C2%B9%C2%B5%C3%B6%C2%B4*%C3%A7%C2%BCj%C3%A0f%C2%8C%C2%B1w%C2%B6%C2%AA%0A%C2%86%10%C3%AE%C3%AEo%C2%A3%C3%A2%C3%88%C2%96%C2%99%C3%8F%C2%BD%C3%B7%C2%93%1AU%C2%8B%07(J%C2%87%C3%91JDW%C3%BE%25%C2%9E8%C3%A1%C3%B3%03n%07%C2%80%3B%C3%94q%16%C2%B5~%407%3C%17qC%C2%BF%60V%C3%89%19z%C2%87%C3%A4%C2%98%C2%B8%09%24%3B2%C2%A0(%C3%B14H%C3%843%C3%90%7B%1Fg%C3%90W%C2%89%2Bj%C3%91v%2F%C2%A9%C3%B1%C2%A5d%06%C3%A2%C2%87%C2%BC%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var group_viewer_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0C%08%06%00%00%00R%C2%80%C2%8C%C3%9A%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%B4IDATx%01%C2%9D%C2%91%C3%8D%09%C3%830%0C%C2%85e%13%C3%88%C2%B1%19!%C2%9B4%2Bt%C2%82f%C2%84%5E%7D%C3%B2%C3%8F%C3%85%C3%A7N%C3%90%C2%8C%C3%92%11%3ABF%C3%A8%C3%99%06%C2%BB%2F%60%C2%87B%2BH%C3%B2%0E%C2%96%40%C3%BA%C3%84%C2%93%2C%082%C3%86tm%C3%9Bv%C2%B4QJ%C2%A9Y%00%1A%C2%85%10%0F%C3%9A!%C3%B4O%12OO%3B%C2%95s%1E%24%1DTS%C3%A2%1BS.%5C%C2%93%C2%94R%C2%A7%C2%94%C3%AC%C2%92%C3%83%C3%A1%C2%88p%5EA%C3%AC%C3%BA%C3%A4%40%C3%A7%C3%9C%C2%B5%C3%96%C2%AD%C2%B5%C3%837H%C3%9E%C3%BB%C2%9E%03c%C2%8C%C3%84Y%C3%ADB%08%23%07%C3%BE%3B%C3%A0jUkm%C2%88%C2%B7%C3%BA%C3%B3%5D%C2%87%C2%AF*0%C3%AD%C2%86%C2%8Bj%C3%98yqM%C2%A8%C3%B7%C2%A8%C3%8F5_%1C68%C3%B3Tv8%C2%B1%C3%93%0BTs0%C3%B7%0F1AA%C2%86Inr8%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var sort_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%A6IDATx%01%C3%9D%C2%93%C2%B1%09%02A%10E%C3%BFz%17%18%09%22%C2%87%C2%89%C2%99%0DX%C2%84%3D%C3%98%C2%82M%08%C3%B6%20FV%60%C2%A0%16cj%03%06%26f%222%3E%C2%90%C2%83u%C3%99%C3%93%5B%13%C2%8F%7B%C3%B0%C2%99e%C2%98%7Dl%C2%B0%235%05%176%C3%8ClL%C3%99%C2%93%5Ed%C3%BEF%C3%96%C3%8E%C2%B9%C2%95%C3%9F%C3%8C%23%C2%83%059%C2%A8%C2%9A%7B%C3%98%C3%88%C2%83W%C3%8C(K%C3%92U5%C2%8C%C3%99%C2%84%C3%97%C3%8C%C2%A3%12%C3%A8%C2%93%C2%ADj%C2%80h%C2%88%C3%A8%C3%BC%26%C2%A19%C2%A2L%C3%89%C2%A0%C2%8E%C2%83%1C%C3%89.4%2F%2C%C2%8DSy%C2%B7%C3%A3y2%C2%A5%C2%91%C3%85%24%3F%C3%93b%C3%89Ui%5C%C3%8A%C2%83%C3%BF%C3%996z%C3%ADF%C2%A1%C3%AF%3C%C3%B4y5%C3%BE%C3%84%13%C3%8E%19S%5E%C2%82x%C2%B0~%00%00%00%00IEND%C2%AEB%60%C2%82";
var duplicate_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%13%00%00%00%13%08%06%00%00%00rP6%C3%8C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%02TIDATx%01%C3%8DSMh%13Q%10%C2%9Eyo7-%C3%B4bR%C3%A9%C3%85%C2%8A%1E%05%11%3D%08%C3%A2%0F%0D%C2%9BV%C2%A5G%3D%C3%B9%C2%83D%C3%B1%07%C2%A44%C2%8DV%C2%BC%C2%A9%C3%91%C2%BB%14%13R%15Q%C2%A4%14%C2%A19(%C2%82%07AHR%C3%81%3F%C2%A8%C3%90%C2%80'A%C2%BDx%C2%90%C3%86%C2%98*%C2%A8%C3%B9%C3%99%C3%B7%C3%86%C3%99M%23%C2%BB%C3%95%10-%3Dt%0E%C3%BBf%C3%9E%C3%8C%7C%C3%BB%7D%C3%B3%C3%9E%03X%C2%A9%C2%86M'%C2%93!%C3%B9)d%C3%AF%40%09%C3%B2_%C2%9B%C2%89%C2%8Cr%2C%C2%82%05%1F%C2%98%0B%C2%B4Z%C3%B3%26m%C2%84%C3%BF4%C2%8D%C3%BAD%C3%9C%0A%C3%9Cv%7C%C3%A1%7C%C3%A6%C2%BA%C2%A1%C3%97%01%22%C2%A2k%C2%88%C2%B0%C2%AF%1D%00%02%C3%8E%22%C2%92%C3%A5%C2%AC%02%C3%84%C2%AE%C3%A6%C2%BE%0BV%17%0D%C2%86%1C%C3%8C%13%C3%80*X%C2%A2%19%C3%9E%C2%80%10%2F%01%C2%B5o%22%C2%A0-%5C%C2%9C%C2%83F%C3%B1%C2%AC%C2%8F%C3%99%C3%AF%C2%A2%C2%BF%C3%8A%C3%84%02%C3%8B%19%12%C2%82%C3%B6H%C2%A4A%C3%90p%07%C2%81%5E5ez%2B%C3%85%C2%A2%C3%80'%C2%93%C3%BD%C3%B1%2FO%C3%85%C3%96%C3%A1%C2%88%1CG2%5E%0CY%C3%A6%C3%A3%C3%98%C2%80q%C3%9C%40%C3%A3%40%C2%ADJeXd%C3%AE%C2%AC%C3%86r%C2%B4%5E%C2%92%C3%BA%C3%A0g%09%C3%AF%03%C2%9Dr%C2%BB%C2%AE%C3%83%3A%C2%A5%C3%AC%20%22F%09%C3%A4%3D%C2%AD%C3%AA%C3%9D%C3%B1%C3%9D%C2%81%C2%89t%C2%8E%0E%2BR%C2%93%C2%8Cp7f%19%C3%87%C3%BE%60%06%C2%A4%C3%8F8%C3%B4%C3%9D%C2%84%C2%A4%C2%A9%C3%93%3Bq%C2%AEFP%04%C3%84%C2%87%C3%8C%C3%B2%10%C2%80z%C2%84R%0C8%C3%B9%22%C3%80%14%C3%8F%C3%AD%5Bk%C2%99Blv%C2%87%C3%8B%C2%A6lz%C2%97%C3%88%C2%91!%C2%B5%C2%BA%C3%82a%C2%A7G%C2%8A%C2%95%C3%8A%C3%9B%C2%83%09%0Bm%40z%C3%93%12L%13%1C%05%12cn%02!%C3%A04H!%1D%C2%B0%1F%C2%9E%C2%B2%C2%B7%C2%A5%C2%BC%7C%C3%92%00%C2%A6ZK0%C2%AFLD%C2%B1%C2%ADA%C2%A5%1E%C3%A4%C3%84%0D%C3%B7%C2%A2%12%3D%C3%A0%C2%9DH%C2%B0O%C2%A5%13%092%C2%B4%C2%82%0B%7CJ%3F%7D%60%C2%A6f%C3%B5%C2%AC%C3%8C%2B%C2%93g%14%C2%BE9Cf1l%C2%BE%C2%8EE%C3%8CQ%C2%8D%C3%B6%C2%91%C3%A1~s%3F%C3%BF%C3%A5%1C%C3%97%C2%9E%0C%C2%85%C3%B5%C2%AD%C3%B23%C3%A3%C2%A5Dy%C3%9E%07%C3%96S%C2%82%C2%8F%C2%BC%C3%9Cg%C2%99%C3%91%05%C2%99%C3%B3%C2%80%C3%BA%60%C2%ADT%C3%A9%C3%AD%C3%89%C3%83)%C2%A7f%C3%84%C3%AAp%C3%A7%13%C2%B3%C3%A4Uf9%C3%8A%C3%87%1D%0D%C3%B5%C2%A9%C3%89%C3%A24T%3C%C3%B3%5CPH%24%C3%92YX%2B%C3%B9ii%C3%B8%5E%C2%A9vt%7D5%C2%ABv%C2%86%087%C3%98%0C%7C%C3%96%0A%C3%8Cx'%C2%92%C3%8C%C2%AA%C2%8B%C3%9Cu%C3%99%C2%B9%C3%A8%23%C3%BDf%1C%C3%9A%C3%99D%C2%81%C2%BAR%C3%99%C3%BA%C3%9EV%C3%B9d%C2%AE%16Of%C3%AD%C3%8F%C2%A9%C3%A9%C3%AA%26X%0E%C2%BB%C3%BE%C2%9C%C3%964%C3%BD_%3D%C2%8B%C3%B9xs%1F%01%C3%A3%00%00%00%00IEND%C2%AEB%60%C2%82";

//About//
var telegram_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0B%08%06%00%00%00%C2%A4%C2%B2%07a%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%9BIDATx%01%C2%8DQ%C3%91%0D%C2%82%40%0C%7D%C2%BD%C3%B8%2Fn%C2%A2%13%088%C2%88h%C3%BC%07'%00'0%C3%BEc%C3%A2%0AN%00%23%C3%A0%06%C2%B8%01%C3%8A%2FR%0B'DH%20%C2%BC%C3%A4%C3%92%C2%BB%C2%B6%C2%AF%7D%C3%AD%11%26%C3%A2%10%C2%B1Y%02k%C2%94x%C3%92X%C2%A2%17%C2%B1%C2%91%03%26%18.*%C2%ABq%C2%9F%0D%25%C2%BF%017gx%C3%B24%C3%A4%C2%A4m%C2%90%C2%91%C3%8E%C3%BA%12%18%C3%98J%C2%B2%C3%B3%C2%93%C2%90%11%C3%A3X*%C3%8C%C3%85%06%C2%95C%C3%BC%C2%9AT'3%7C9fS%40%C2%82qA%C3%98)%C2%82K%C2%BA%C2%A3%C2%86B%C2%A2%C3%AA%C2%8ERY%C3%8C%C2%B2%250N%C2%A1M%C2%96%04%C3%BD%0EAP%00%09%C3%B5%C3%A5U%C3%8E%C2%9BE%C3%99%3E%C3%A2s%C2%9FP%C3%89%C2%BD%C3%9A%C2%B4%C3%A8%C3%8C%14Z%14%C2%B7*J%C2%BC%C2%B8%C2%B7%5By%26Z%C3%A1%00%C3%82%0D%05D%C2%B0%C3%B0%C2%B79%19%C3%A31Jj%3A%7F%08%2BY%C3%B3%C2%A5%26)%C3%9Di2%1C%C3%B9%C2%BB%C3%A6%C3%BE%05%5C%C2%88T%06E%C3%8F4%C3%92%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var manual_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%A4IDATx%01%C3%95%C2%921%0E%02!%10E%07%C3%98%C3%A05%C2%A4!%C2%A1%C3%9B%0B%19%3BK%7Bo%C2%B1%C2%89%17%C3%90%13%C2%A87%C3%91%0A%3A%3C%C2%81%C3%99%C2%92%0A%C3%BC%16%24%C2%A8%C3%8B%C2%9Alb%C2%B1%3F!3L%C3%A6%C3%BDb%C3%B2%C2%89%26%C2%8A%C3%A5%C3%86Z%C2%BB%14B%C2%ACRJ%C2%A2%C2%B6%2C%C2%A5%C3%AC%C2%94R%C3%BD%C2%ABo%C3%B2%C2%90s%C2%BE%03%C2%B4%C2%A1%11%C2%85%10%0E(%C3%AF%20%C2%B4(%C3%BA3c%C2%AC%C3%8F%1F%18%C2%B6(mi%C3%92%0C%7B%C3%93%C2%B1%04%0B%C3%B8'x%C2%8A1%C3%92%C2%988M%C3%94%C2%8C%C3%80%C3%8F%C3%A3%5Cp%C2%94%C2%AE%C2%B6l%C2%8C%C2%B9%0F%C2%817%C2%BC-%C3%92%C2%B3%C2%AE%C2%81%C3%9E%C3%BB%C3%ABWr%C2%B4%C3%96%7B%C3%A7%C3%9C%03%09R%C3%B4O%3D%01%01%C3%A4.%C2%90%C3%9D%C3%A0%C2%B1%C3%BA%00%00%00%00IEND%C2%AEB%60%C2%82"; 


////////////////////

var panelGlobal = this;
var palette = (panelGlobal instanceof Panel)
    ? panelGlobal
    : new Window("palette", undefined, undefined, { maximizeButton: true, resizeable: true });

if (!(panelGlobal instanceof Panel)) palette.text = "YO Group Matcher " + scriptVersion;
palette.preferredSize.width = 395;
palette.preferredSize.height = 490;
palette.orientation = "column";
palette.alignChildren = ["fill", "top"];
palette.spacing = 11;
palette.margins = 0;

var head_panel = palette.add("group", undefined, { name: "head_panel" });
head_panel.orientation = "row";
head_panel.alignChildren = ["left", "fill"];
head_panel.spacing = 8;
head_panel.margins = [8, 10, 5, 0];

// --- LOGO ---

var logo = head_panel.add("image", undefined, File.decode(logo_imgString), { name: "logo" });
logo.alignment = ["left", "fill"];
logo.helpTip = "YO Group Matcher " + scriptVersion;

// --- SAVE PRESETS BUTTON ---
var save_my_presets_button = head_panel.add("iconbutton", undefined, File.decode(save_my_presets_button_imgString), {
    name: "save_my_presets_button",
    style: "toolbutton"
});
save_my_presets_button.helpTip = "Save current Layer and Effect Groups to a .pgm file";
save_my_presets_button.text = "";
save_my_presets_button.preferredSize.width = 32;
save_my_presets_button.preferredSize.height = 32;

// --- LOAD PRESETS BUTTON ---
var load_my_presets_button = head_panel.add("iconbutton", undefined, File.decode(load_my_presets_button_imgString), {
    name: "load_my_presets_button",
    style: "toolbutton"
});
load_my_presets_button.helpTip = "Load Layer and Effect Groups from a .pgm file";
load_my_presets_button.text = "";
load_my_presets_button.preferredSize.width = 32;
load_my_presets_button.preferredSize.height = 32;


// --- DIVIDER1 ---
var divider1 = head_panel.add("panel", undefined, undefined, { name: "divider1" });
divider1.alignment = "fill";
divider1.helpTip = "Divider";

// --- ABOUT / CHECK UPDATE ---
var check_update_button = head_panel.add("iconbutton", undefined, File.decode(push_update_imgString), {
    name: "check_update_button",
    style: "toolbutton"
});
check_update_button.helpTip = "Open About & Check for Updates window";
check_update_button.preferredSize.width = 32;
check_update_button.preferredSize.height = 32;

// (1) "Технический" статус, невидимый
var silentUpdateStatus = head_panel.add("statictext", undefined, "");
silentUpdateStatus.visible = false;

// Новый блок для solo‑кнопок (располагается под head_panel)
var solo_buttons_group = palette.add("group", undefined, { name: "solo_buttons_group" });
solo_buttons_group.orientation = "row";          // Располагаем кнопки в ряд (можно изменить на "column", если нужно)
solo_buttons_group.alignChildren = ["left", "center"];
solo_buttons_group.spacing = 5;
solo_buttons_group.margins = [8, 0, 5, 0];

// ----- Новая кнопка для режима Solo Animation ----- 
var solo_anim_button = solo_buttons_group.add("iconbutton", undefined, File.decode(solo_anim_imgString), { name: "solo_anim_button", style: "toolbutton" });
solo_anim_button.helpTip = "Solo Animation: show only layers with more than one animation keyframe";
solo_anim_button.text = "";
solo_anim_button.preferredSize.width = 32;
solo_anim_button.preferredSize.height = 32;

// Новая кнопка для режима Solo Track Matte
var solo_mask_button = solo_buttons_group.add("iconbutton", undefined, File.decode(solo_mask_imgString), { name: "solo_mask_button", style: "toolbutton" });
solo_mask_button.helpTip = "Solo Mask: show only layers with masks";
solo_mask_button.text = "";
solo_mask_button.preferredSize.width = 32;
solo_mask_button.preferredSize.height = 32;

// Новая кнопка для режима Solo Track Matte
var solo_trackmatte_button = solo_buttons_group.add("iconbutton", undefined, File.decode(trackmatte_imgString), { name: "solo_trackmatte_button", style: "toolbutton" });
solo_trackmatte_button.helpTip = "Solo Track Matte: show only layers involved in track matte (main layer and matte)";
solo_trackmatte_button.text = "";
solo_trackmatte_button.preferredSize.width = 32;
solo_trackmatte_button.preferredSize.height = 32;

// Кнопка Solo Shapes
var solo_shapes_button = solo_buttons_group.add("iconbutton", undefined, File.decode(shapes_imgString), { name: "solo_shapes_button", style: "toolbutton" });
solo_shapes_button.helpTip = "Solo Shapes: show only shape layers";
solo_shapes_button.text = "";
solo_shapes_button.preferredSize.width = 32;
solo_shapes_button.preferredSize.height = 32;

// Кнопка Solo Text
var solo_text_button = solo_buttons_group.add("iconbutton", undefined, File.decode(text_imgString), { name: "solo_text_button", style: "toolbutton" });
solo_text_button.helpTip = "Solo Text: show only text layers";
solo_text_button.text = "";
solo_text_button.preferredSize.width = 32;
solo_text_button.preferredSize.height = 32;

// Кнопка Solo Null Objects
var solo_null_button = solo_buttons_group.add("iconbutton", undefined, File.decode(null_objects_imgString), { name: "solo_null_button", style: "toolbutton" });
solo_null_button.helpTip = "Solo Null Objects: show only null layers";
solo_null_button.text = "";
solo_null_button.preferredSize.width = 32;
solo_null_button.preferredSize.height = 32;

// Новая кнопка для режима Solo Adjustment Layers
var solo_adjust_button = solo_buttons_group.add("iconbutton", undefined, File.decode(Adjust_imgString), { name: "solo_adjust_button", style: "toolbutton" });
solo_adjust_button.helpTip = "Solo Adjustment Layers: show only adjustment layers";
solo_adjust_button.text = "";
solo_adjust_button.preferredSize.width = 32;
solo_adjust_button.preferredSize.height = 32;

// Создаем панель с вкладками
var tpanel1 = palette.add("tabbedpanel", undefined, undefined, { name: "tpanel1" });
tpanel1.alignChildren = "fill";
tpanel1.preferredSize.width = 100;
tpanel1.margins = 0;
tpanel1.helpTip = "Switch between Layers Group, Effects Group, and Tools tabs";

// --- TAB_LAYERS ---
var tab_layers = tpanel1.add("tab", undefined, undefined, { name: "tab_layers" });
tab_layers.text = "Layers Group";
tab_layers.orientation = "column";
tab_layers.alignChildren = ["left", "top"];
tab_layers.spacing = 10;
tab_layers.margins = 10;
tab_layers.helpTip = "Here you can manage your Layer Groups";

// --- TAB_EFFECTS ---
var tab_effects = tpanel1.add("tab", undefined, undefined, { name: "tab_effects" });
tab_effects.text = "Effects Group";
tab_effects.orientation = "column";
tab_effects.alignChildren = ["fill", "top"];
tab_effects.spacing = 10;
tab_effects.margins = 10;
tab_effects.helpTip = "Manage your Effects Groups";

// Если вкладка Tools уже не создана, создаём её:
var tab_tools = tpanel1.add("tab", undefined, undefined, { name: "tab_tools" });
tab_tools.text = "Tools";
tab_tools.orientation = "column";
tab_tools.alignChildren = ["fill", "top"];
tab_tools.spacing = 7;
tab_tools.margins = 10;
tab_tools.helpTip = "Tools Tab";

// Добавляем группу для кнопок напрямую в tab_tools
var compsButtonGroup = tab_tools.add("group");
compsButtonGroup.orientation = "row";
compsButtonGroup.alignChildren = ["left", "top"];
compsButtonGroup.spacing = 8;

// Добавляем кнопку "Auto Sort Comps"
var autoSortCompsButton = compsButtonGroup.add("iconbutton", undefined, File.decode(sort_imgString), {
    name: "sort_comps",
    style: "toolbutton"
});
autoSortCompsButton.text = "Sort Files";
autoSortCompsButton.preferredSize = [110, 35];
autoSortCompsButton.helpTip = "Automatically sort project items into folders: Compositions, Footages, Audio, Nulls & Solids, Images";

// Добавляем кнопку "Duplicate Comp"
var duplicateCompButton = compsButtonGroup.add("iconbutton", undefined, File.decode(duplicate_imgString), {
    name: "duplicate_button",
    style: "toolbutton"
});
duplicateCompButton.text = "";
duplicateCompButton.preferredSize = [35, 35];
duplicateCompButton.helpTip = "Duplicate the active composition. All duplicate comps (including nested ones) will be moved to a folder 'Duplicate (CompName)', a new color label is assigned to each, and the duplicated comp is opened.";

// Переносим кнопку "Add Null Objects" в ту же группу
var add_null_objects_button = compsButtonGroup.add("iconbutton", undefined, File.decode(add_null_imgString), {
    name: "add_null_objects_button",
    style: "toolbutton"
});
add_null_objects_button.helpTip = "Add Null Object for selected layers";
add_null_objects_button.text = "";
add_null_objects_button.preferredSize.width = 35;
add_null_objects_button.preferredSize.height = 35;

// Переносим кнопку "Add Track Matte Layer" в ту же группу
var add_track_matte_button = compsButtonGroup.add("iconbutton", undefined, File.decode(track_matte__imgString), {
    name: "add_track_matte_button",
    style: "toolbutton"
});
add_track_matte_button.helpTip = "Add Track Matte Layer to the active layer";
add_track_matte_button.text = "";
add_track_matte_button.preferredSize.width = 35;
add_track_matte_button.preferredSize.height = 35;

// "Create + Unlink" group
var create_unlink_group = tab_layers.add("group", undefined, { name: "create_unlink_group" });
create_unlink_group.orientation = "row";
create_unlink_group.alignChildren = ["left", "center"];
create_unlink_group.spacing = 7;
create_unlink_group.margins = [0, 0, 0, 0];

// Button: Create a New Layer Group
var create_group_layers_button = create_unlink_group.add(
    "iconbutton",
    undefined,
    File.decode(create_group_layers_button_imgString),
    { name: "create_group_layers_button", style: "toolbutton" }
);
create_group_layers_button.helpTip = "Create a new Layer Group";
create_group_layers_button.text = "CRT";
create_group_layers_button.preferredSize.width = 100;
create_group_layers_button.preferredSize.height = 35;
create_group_layers_button.alignment = ["left", "center"];

var switch_button = create_unlink_group.add(
    "iconbutton", undefined,
    File.decode(switch_view_imgString),
    { name: "switch_button", style: "toolbutton" }
);
switch_button.helpTip = "Switch Mode: View, Tools, Mode";
switch_button.preferredSize = [103, 35];
switch_button.alignment    = ["left","center"];

var bmpView  = switch_view_imgString;
var bmpTools = switch_tools_imgString;
var bmpMode  = switch_mode_imgString;

switch_button.onClick = function() {
// 1.1) циклически переключаем индекс иконки
currentIcon = (currentIcon + 1) % modes.length;
// 1.2) обновляем саму иконку кнопки
switch (currentIcon) {
    case 0: setButtonIcon(switch_button, bmpView,  "switch_view");  break;
    case 1: setButtonIcon(switch_button, bmpTools, "switch_tools"); break;
    case 2: setButtonIcon(switch_button, bmpMode,  "switch_mode");  break;
}
// 1.3) и теперь синхронно перестраиваем все группы
updateAllGroups(modes[currentIcon]);
};

// Button: Unlink Layer
var unlink_layer_button = create_unlink_group.add(
    "iconbutton",
    undefined,
    File.decode(unlink_layer_button_imgString),
    { name: "unlink_layer_button", style: "toolbutton" }
);
unlink_layer_button.helpTip = "Remove group prefix [XXX] from selected layers";
unlink_layer_button.text = "";
unlink_layer_button.preferredSize.width = 35;
unlink_layer_button.preferredSize.height = 35;
unlink_layer_button.alignment = ["left", "center"];



// --- "Панель" внутри Layers (удаляем её потом)
var layer_group_default = tab_layers.add("panel", undefined, undefined, { name: "layer_group_default" });

//PANEL EFFECTS LAYERS///
var create_unlink_effects_group = tab_effects.add("group", undefined, { name: "create_unlink_effects_group" });
create_unlink_effects_group.orientation = "row";
create_unlink_effects_group.alignChildren = ["left", "center"];
create_unlink_effects_group.spacing = 7;
create_unlink_effects_group.margins = [0, 0, 0, 0];

// (2) "Create a New Effects Group"
var create_group_effects_button = create_unlink_effects_group.add(
    "iconbutton",
    undefined,
    File.decode(create_group_layers_button_imgString),
    {
        name: "create_group_effects_button",
        style: "toolbutton"
    }
);
create_group_effects_button.helpTip = "Create a new Effects Group";
create_group_effects_button.text = "CRT";
create_group_effects_button.preferredSize.width = 75;
create_group_effects_button.preferredSize.height = 35;
create_group_effects_button.alignment = ["left", "center"];

// (3) "Unlink Effects"
var unlink_effects_button = create_unlink_effects_group.add(
    "iconbutton",
    undefined,
    File.decode(unlink_effects_button_imgString),
    {
        name: "unlink_effects_button",
        style: "toolbutton"
    }
);
unlink_effects_button.helpTip = "Remove [GroupPrefix] from selected effects";
unlink_effects_button.text = "";
unlink_effects_button.preferredSize.width = 35;
unlink_effects_button.preferredSize.height = 35;
unlink_effects_button.alignment = ["left", "center"];

// Добавляем разделитель
var separator = create_unlink_effects_group.add("panel", undefined, undefined, { borderStyle: "sunken" });
separator.preferredSize = [2, 35]; // Ширина 2 пикселя, высота как у кнопок

// ===== Новый блок: кнопка Effects Manager =====
var effects_manager_button = create_unlink_effects_group.add(
    "iconbutton",
    undefined,
    File.decode(effect_manager_imgString),
    {
        name: "effects_manager_button",
        style: "toolbutton"
    }
);
// Кнопка Effects Manager (оставляем без изменений)
effects_manager_button.helpTip = "Open Effects Manager";
effects_manager_button.text = "FX Manager";
effects_manager_button.preferredSize.width = 118;
effects_manager_button.preferredSize.height = 35;
effects_manager_button.alignment = ["left", "center"];

// "Панель" внутри Effects (удаляем потом)
var effect_group_default = tab_effects.add("panel", undefined, undefined, { name: "effect_group_default" });
var view_effects_checkbox = effect_group_default.add("checkbox", undefined, undefined, { name: "view_effects_checkbox" });
view_effects_checkbox.helpTip = "Example: checkbox for showing/hiding effects";
var add_effect_button = effect_group_default.add("iconbutton", undefined, File.decode(add_layer_button_imgString), { name: "add_effect_button", style: "toolbutton" });
add_effect_button.helpTip = "Add effect";
var edit_group_effects_button = effect_group_default.add("iconbutton", undefined, File.decode(edit_group_effects_button_imgString), { name: "edit_group_effects_button", style: "toolbutton" });
edit_group_effects_button.helpTip = "Edit group effects";
var delete_group_effects_button = effect_group_default.add("iconbutton", undefined, File.decode(delete_group_layers_button_imgString), { name: "delete_group_effects_button", style: "toolbutton" });
delete_group_effects_button.helpTip = "Delete group effects";

// Какую вкладку показывать при старте
tpanel1.selection = tab_layers;

// Финальные настройки панели
palette.layout.layout(true);
palette.layout.resize();
palette.onResizing = palette.onResize = function () { this.layout.resize(); };

// 3-ий пункт: обновление при смене активной композиции
palette.onActivate = function () {
    refreshSoloButtons();
};

// Запускаем автообновление каждые 2000 мс (2 секунды)
$.global.refreshTaskId = app.scheduleTask("refreshSoloButtons()", 1000, true);


if (palette instanceof Window) {
    palette.onClose = function () {
        if ($.global.refreshTaskId) {
            app.cancelTask($.global.refreshTaskId);
        }
    };
}

if (palette instanceof Window) palette.show();


// При запуске — тихая проверка обновлений
checkForUpdatesQuietlyForHeadPanel(check_update_button);

// ======== Обработчик "About" / "Check for Updates" ========

check_update_button.onClick = function () {
var dialog = new Window("dialog", "About | Group Matcher");
dialog.orientation = "column";
dialog.alignChildren = ["center", "top"];
dialog.spacing = 10;
dialog.margins = 16;

// Логотип
var logo_image = dialog.add("image", undefined, File.decode(logo_about_imgString), { name: "logo" });
logo_image.alignment = ["center", "center"];

// Текст текущей сборки
var build_version = dialog.add("statictext", undefined, undefined, { name: "build_version" });
build_version.text = "Build " + scriptVersion;
build_version.helpTip = "Version information.";

// Кнопки Telegram / Manual
var group1 = dialog.add("group", undefined, { name: "group1" });
group1.orientation = "row";
group1.alignChildren = ["left", "center"];
group1.spacing = 10;
group1.margins = 0;

// Telegram Button с иконкой
var telegram_button = group1.add(
    "iconbutton",
    undefined,
    File.decode(telegram_imgString), // строка-ресурс для иконки Telegram
    { name: "telegram_button", style: "toolbutton" }
);
telegram_button.text = "Telegram";
telegram_button.helpTip = "Open Telegram channel.";
telegram_button.preferredSize = [100, 32];
telegram_button.onClick = function () {
    openURL("https://t.me/romlogunov_hub");
};

// Manual Button с иконкой
var manual_button = group1.add(
    "iconbutton",
    undefined,
    File.decode(manual_imgString), // строка-ресурс для иконки Manual
    { name: "manual_button", style: "toolbutton" }
);
manual_button.text = "Manual";
manual_button.helpTip = "Open user manual.";
manual_button.preferredSize = [90, 32];
manual_button.onClick = function () {
    openURL("https://romlogunov.notion.site/Manual-YO-Group-Matcher-122dc723a706801ca52edde6ac3920d6?pvs=74");
};

// Разделитель
var divider_about = dialog.add("panel", undefined, undefined, { name: "divider_about" });
divider_about.alignment = "fill";

// Кнопка "Check For Updates"
var check_updates = dialog.add("iconbutton", undefined, File.decode(updates_check_button_imgString), { name: "check_updates", style: "toolbutton" });
check_updates.text = "Check For Updates";
check_updates.preferredSize.width = 203;
check_updates.preferredSize.height = 39;
check_updates.helpTip = "Check for the latest updates.";

// Статус обновлений
var Status_update = dialog.add("statictext", undefined, undefined, { name: "Status_update" });
Status_update.text = "Status Update...";
Status_update.helpTip = "Current update status.";
Status_update.alignment = ["fill", "top"];

// Привязываем проверку обновлений
check_updates.onClick = function () {
    checkForUpdates(Status_update, check_updates);
};

// Кнопка Close
var close_button = dialog.add("button", undefined, "Close", { name: "close_button" });
close_button.helpTip = "Close the dialog.";
close_button.onClick = function () {
    dialog.close();
};

// Обработчик закрытия окна через крестик
dialog.onClose = function () {
    dialog.close();
};

dialog.show();
};


//UPDATE CHECK//FUNCTIONS//

function compareVersions(v1, v2) {
    var v1parts = v1.split(".");
    var v2parts = v2.split(".");
    var len = Math.max(v1parts.length, v2parts.length);

    for (var i = 0; i < len; i++) {
        var a = parseInt(v1parts[i] || "0", 10);
        var b = parseInt(v2parts[i] || "0", 10);
        if (a > b) return 1;
        if (a < b) return -1;
    }
    return 0;
}

function checkForUpdatesQuietlyForHeadPanel(headPanelButton) {
    var githubApiUrl = "https://api.github.com/repos/yo-romlogunov/YO-Group-Matcher/releases/latest";

    try {
        var curlCmd = 'curl -s -H "User-Agent: YO-Group-Matcher" "' + githubApiUrl + '"';
        var response = system.callSystem(curlCmd);
        if (response) {
            var tagNameMatch = response.match(/"tag_name":\s*"v?([0-9.]+)"/);
            if (tagNameMatch) {
                var latestVersion = tagNameMatch[1];
                if (compareVersions(latestVersion, scriptVersion) > 0) {
                    // Новая версия
                    setButtonIcon(headPanelButton, push_update_new_update_imgString, "head_update_new");
                } else {
                    // Актуальная
                    setButtonIcon(headPanelButton, push_update_imgString, "head_update_normal");
                }
            }
        }
    } catch (e) {
        // alert("Ошибка при тихой проверке: " + e.toString());
    }
}

function checkForUpdates(Status_update, check_updates) {
    var githubApiUrl = "https://api.github.com/repos/yo-romlogunov/YO-Group-Matcher/releases/latest";

    try {
        var curlCmd = 'curl -s -H "User-Agent: YO-Group-Matcher" "' + githubApiUrl + '"';
        var response = system.callSystem(curlCmd);

        if (response) {
            var tagNameMatch = response.match(/"tag_name":\s*"v?([0-9.]+)"/);
            var htmlUrlMatch = response.match(/"html_url":\s*"([^"]+)"/);

            if (tagNameMatch && htmlUrlMatch) {
                var latestVersion = tagNameMatch[1];
                var downloadUrl = htmlUrlMatch[1];

                if (compareVersions(latestVersion, scriptVersion) > 0) {
                    // Новая версия
                    Status_update.text = "New Update: v" + latestVersion;
                    check_updates.text = "Download Now (Open Page)";
                    setButtonIcon(check_updates, update_ready_imgString, "update_ready");

                    check_updates.onClick = function () {
                        openURL(downloadUrl);
                    };

                } else {
                    // Версия актуальна
                    Status_update.text = "You are using the latest version";
                    check_updates.text = "Check For Updates";
                    setButtonIcon(check_updates, updates_check_button_imgString, "updates_check");

                    check_updates.onClick = function () {
                        checkForUpdates(Status_update, check_updates);
                    };
                }
            } else {
                Status_update.text = "Не удалось обработать ответ об обновлении.";
            }
        } else {
            Status_update.text = "Не удалось получить ответ от GitHub API.";
        }
    } catch (e) {
        Status_update.text = "Ошибка при проверке обновлений: " + e.toString();
    }
}

function openURL(url) {
    try {
        if ($.os.indexOf("Mac") !== -1) {
            system.callSystem('open "' + url + '"');
        } else if ($.os.indexOf("Windows") !== -1) {
            system.callSystem('cmd.exe /c start "" "' + url + '"');
        } else {
            alert("Unsupported operating system.");
        }
    } catch (e) {
        alert("Error opening URL: " + e.message);
    }
}

////SOLO BUTTONS FUNCTIONS///

function updateSoloForComp(comp) {
    var compId = comp.id;
    var soloShapes = soloShapesStates[compId] || false;
    var soloText = soloTextStates[compId] || false;
    var soloNull = soloNullStates[compId] || false;

    // Если ни один режим не активен – снимаем shy со всех слоёв
    if (!soloShapes && !soloText && !soloNull) {
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        // Для каждого слоя: если он соответствует выбранному типу – оставляем shy = false,
        // иначе устанавливаем shy = true (то есть он будет скрыт в панели, если Hide активен)
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            var show = false;
            if (soloShapes && layer.matchName === "ADBE Vector Layer") {
                show = true;
            }
            if (soloText && layer.property("Source Text") !== null) {
                show = true;
            }
            if (soloNull && layer.nullLayer === true) {
                show = true;
            }
            layer.shy = !show;
        }
    }
    // Включаем Hide в композиции, если он ещё не активен
    comp.hideShyLayers = true;
}

solo_anim_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    // Переключаем состояние soloAnim для данной композиции
    soloAnimStates[compId] = !soloAnimStates[compId];
    if (soloAnimStates[compId]) {
        setButtonIcon(solo_anim_button, solo_anim_select_imgString, "solo_anim_select");
    } else {
        setButtonIcon(solo_anim_button, solo_anim_imgString, "solo_anim");
    }
    updateSoloAnim(comp);
};

function updateSoloMask(comp) {
    var compId = comp.id;
    var soloMask = soloMaskStates[compId] || false;
    if (!soloMask) {
        // Режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        // Режим активен – показываем только слои, у которых есть хотя бы одна маска
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            var hasMask = false;
            try {
                // Проверяем наличие масок: свойство "ADBE Mask Parade" содержит маски, если они есть
                if (layer.property("ADBE Mask Parade") && layer.property("ADBE Mask Parade").numProperties > 0) {
                    hasMask = true;
                }
            } catch (e) {
                // Если произошла ошибка, оставляем hasMask = false
            }
            layer.shy = !hasMask;
        }
    }
    // Включаем режим Hide в композиции, чтобы скрытые (shy) слои не отображались в панели
    comp.hideShyLayers = true;
}

function updateSoloAnim(comp) {
    var compId = comp.id;
    var soloAnim = soloAnimStates[compId] || false;
    if (!soloAnim) {
        // Если режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        // Проверяем каждый слой: если в нём есть хотя бы одно свойство с более чем одним ключевым кадром – показываем его, иначе скрываем.
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            var show = hasMoreThanOneKey(layer);
            layer.shy = !show;
        }
    }
    // Включаем режим Hide, чтобы скрытые (shy) слои не отображались в панели
    comp.hideShyLayers = true;
}

// Рекурсивная функция для проверки, есть ли в свойстве (или группе свойств)
// хотя бы одно свойство с более чем одним ключевым кадром.
function hasMoreThanOneKey(prop) {
    // Если объект является свойством, проверяем количество ключевых кадров
    if (prop instanceof Property && prop.numKeys && prop.numKeys > 1) {
        return true;
    }
    // Если объект является группой свойств, рекурсивно проверяем все дочерние свойства
    if (prop.numProperties && prop.numProperties > 0) {
        for (var i = 1; i <= prop.numProperties; i++) {
            if (hasMoreThanOneKey(prop.property(i))) {
                return true;
            }
        }
    }
    return false;
}

solo_mask_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    // Переключаем состояние solo mask
    soloMaskStates[compId] = !soloMaskStates[compId];
    if (soloMaskStates[compId]) {
        // Предполагается, что у вас есть переменная solo_mask_select_imgString для иконки выбранного состояния
        setButtonIcon(solo_mask_button, solo_mask_select_imgString, "solo_mask_select");
    } else {
        setButtonIcon(solo_mask_button, solo_mask_imgString, "solo_mask");
    }
    updateSoloMask(comp);
};

solo_trackmatte_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloTrackMatteStates[compId] = !soloTrackMatteStates[compId];
    if (soloTrackMatteStates[compId]) {
        setButtonIcon(solo_trackmatte_button, trackmatte_select_imgString, "solo_trackmatte_select");
    } else {
        setButtonIcon(solo_trackmatte_button, trackmatte_imgString, "solo_trackmatte");
    }
    updateSoloTrackMatte(comp);
};

solo_shapes_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloShapesStates[compId] = !soloShapesStates[compId];
    if (soloShapesStates[compId]) {
        setButtonIcon(solo_shapes_button, shapes_select_imgString, "solo_shapes_select");
    } else {
        setButtonIcon(solo_shapes_button, shapes_imgString, "solo_shapes");
    }
    updateSoloForComp(comp);
};

solo_text_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloTextStates[compId] = !soloTextStates[compId];
    if (soloTextStates[compId]) {
        setButtonIcon(solo_text_button, text_select_imgString, "solo_text_select");
    } else {
        setButtonIcon(solo_text_button, text_imgString, "solo_text");
    }
    updateSoloForComp(comp);
};

solo_null_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloNullStates[compId] = !soloNullStates[compId];
    if (soloNullStates[compId]) {
        setButtonIcon(solo_null_button, null_object_select_imgString, "solo_null_select");
    } else {
        setButtonIcon(solo_null_button, null_objects_imgString, "solo_null");
    }
    updateSoloForComp(comp);
};

solo_adjust_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloAdjustStates[compId] = !soloAdjustStates[compId];
    if (soloAdjustStates[compId]) {
        setButtonIcon(solo_adjust_button, Adjust_select_imgString, "solo_adjust_select");
    } else {
        setButtonIcon(solo_adjust_button, Adjust_imgString, "solo_adjust");
    }
    updateSoloAdjust(comp);
};

function updateSoloAdjust(comp) {
    var compId = comp.id;
    var soloAdjust = soloAdjustStates[compId] || false;
    if (!soloAdjust) {
        // Если режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            // Если слой является Adjustment Layer (adjustmentLayer == true), показываем его, иначе скрываем
            layer.shy = !layer.adjustmentLayer;
        }
    }
    // Включаем режим Hide, чтобы скрытые слои не отображались в панели
    comp.hideShyLayers = true;
}

function updateSoloTrackMatte(comp) {
    var compId = comp.id;
    var soloTM = soloTrackMatteStates[compId] || false;
    if (!soloTM) {
        // Если режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
        return;
    }
    // Если активен режим solo для track matte, для каждого слоя проверяем:
    // 1. Является ли слой основным, т.е. его trackMatteType != NO_TRACK_MATTE
    // 2. Либо является ли слой matte-слоем: если для слоя с индексом i+1 задан trackMatteType (то есть, слой i используется как маска)
    for (var i = 1; i <= comp.numLayers; i++) {
        var layer = comp.layer(i);
        var isMain = false;
        var isMatte = false;
        try {
            if (layer.trackMatteType && layer.trackMatteType !== TrackMatteType.NO_TRACK_MATTE) {
                isMain = true;
            }
        } catch (e) {
            // Если слой не поддерживает trackMatteType – пропускаем
        }
        if (i < comp.numLayers) {
            var nextLayer = comp.layer(i + 1);
            try {
                if (nextLayer.trackMatteType && nextLayer.trackMatteType !== TrackMatteType.NO_TRACK_MATTE) {
                    isMatte = true;
                }
            } catch (e) { }
        }
        // Если слой участвует в track matte, делаем его видимым (shy = false), иначе скрываем (shy = true)
        layer.shy = !(isMain || isMatte);
    }
    // Включаем Hide режим в композиции, чтобы скрытые (shy) слои не отображались в панели
    comp.hideShyLayers = true;
}

// Обновление состояния всех кнопок solo (в том числе solo_anim)
function refreshSoloButtons() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) return;
    var compId = comp.id;
    if (soloShapesStates[compId]) {
        setButtonIcon(solo_shapes_button, shapes_select_imgString, "solo_shapes_select");
    } else {
        setButtonIcon(solo_shapes_button, shapes_imgString, "solo_shapes");
    }
    if (soloTextStates[compId]) {
        setButtonIcon(solo_text_button, text_select_imgString, "solo_text_select");
    } else {
        setButtonIcon(solo_text_button, text_imgString, "solo_text");
    }
    if (soloNullStates[compId]) {
        setButtonIcon(solo_null_button, null_object_select_imgString, "solo_null_select");
    } else {
        setButtonIcon(solo_null_button, null_objects_imgString, "solo_null");
    }
    if (soloTrackMatteStates[compId]) {
        setButtonIcon(solo_trackmatte_button, trackmatte_select_imgString, "solo_trackmatte_select");
    } else {
        setButtonIcon(solo_trackmatte_button, trackmatte_imgString, "solo_trackmatte");
    }
    if (soloAdjustStates[compId]) {
        setButtonIcon(solo_adjust_button, Adjust_select_imgString, "solo_adjust_select");
    } else {
        setButtonIcon(solo_adjust_button, Adjust_imgString, "solo_adjust");
    }
    // Пример добавления обновления solo_mask_button
    if (soloMaskStates[compId]) {
        setButtonIcon(solo_mask_button, solo_mask_select_imgString, "solo_mask_select");
    } else {
        setButtonIcon(solo_mask_button, solo_mask_imgString, "solo_mask");
    }
    // Обновляем состояние кнопки solo_anim
    if (soloAnimStates[compId]) {
        setButtonIcon(solo_anim_button, solo_anim_select_imgString, "solo_anim_select");
    } else {
        setButtonIcon(solo_anim_button, solo_anim_imgString, "solo_anim");
    }
    
}

// Привязываем обновление при активации панели
palette.onActivate = function () {
    app.scheduleTask("refreshSoloButtons()", 10, false);
};


///UNLINKS///

unlink_layer_button.onClick = function () {
    unlinkSelectedLayersFromGroup();
};

//
// ============= getDefaultLabelForLayer =============
//
function getDefaultLabelForLayer(layer) {
    if (layer.matchName === "ADBE Vector Layer") {
        return 11; // Teal
    }
    var isTextLayer = layer.property && layer.property("Source Text") !== null;
    if (isTextLayer) {
        return 1; // Text -> Red
    }
    if (
        layer instanceof AVLayer &&
        layer.source && layer.source.mainSource &&
        layer.source.mainSource.isSolid
    ) {
        return 1; // Solid -> Red
    }
    if (layer.nullLayer === true) {
        return 1; // Null -> Red
    }
    if (layer instanceof LightLayer) {
        return 6; // Light -> Peach
    }
    if (layer instanceof CameraLayer) {
        return 4; // Camera -> Pink
    }
    if (layer.adjustmentLayer === true) {
        return 5; // Adjustment -> Lavender
    }
    if (layer instanceof AVLayer && layer.source instanceof CompItem) {
        return 15; // Precomp -> Sandstone
    }
    return 1; // Default -> Green
}


// Функция "unlinkSelectedLayersFromGroup" (дублируется — для удобства)
function unlinkSelectedLayersFromGroup() {
    var layers = getSelectedLayersInActiveComp();
    if (!layers) return;

    app.beginUndoGroup("Unlink Layers from Groups");

    for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];

        // (1) Удаляем любой префикс в квадратных скобках + пробел
        var newName = layer.name.replace(/\[.*?\]\s*/g, "");
        layer.name = newName;

        // (2) Возвращаем родной цвет (label)
        layer.label = getDefaultLabelForLayer(layer);
    }

    app.endUndoGroup();
}


unlink_effects_button.onClick = function () {
    unlinkSelectedEffectsFromGroup();
};

// (5) Обработчик кнопки Unlink (Effects)
function unlinkSelectedEffectsFromGroup() {
    var layers = getSelectedLayersInActiveComp();
    if (!layers) return;

    app.beginUndoGroup("Unlink Effects from Groups");

    for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];
        var selectedProps = layer.selectedProperties;
        if (!selectedProps || selectedProps.length === 0) continue;

        for (var j = 0; j < selectedProps.length; j++) {
            var prop = selectedProps[j];
            if (
                prop.matchName !== "ADBE Effect Parade" &&
                prop.parentProperty &&
                prop.parentProperty.matchName === "ADBE Effect Parade"
            ) {
                var newName = prop.name.replace(/\[.*?\]\s*/g, "");
                prop.name = newName;
            }
        }
    }
    app.endUndoGroup();
}



//
// ============= ICONS / FUNCTIONS FOR BUTTONS =============
//

var labelColorIcons = {
    0: none_color_label_button_imgString,
    1: red_color_label_button_imgString,
    2: yellow_color_label_button_imgString,
    3: aqua_color_label_button_imgString,
    4: pink_color_label_button_imgString,
    5: lavender_color_label_button_imgString,
    6: peach_color_label_button_imgString,
    7: sea_color_label_button_imgString,
    8: blue_color_label_button_imgString,
    9: green_color_label_button_imgString,
    10: purple_color_label_button_imgString,
    11: orange_color_label_button_imgString,
    12: brown_color_label_button_imgString,
    13: fuchsia_color_label_button_imgString,
    14: cyan_color_label_button_imgString,
    15: sandstone_color_label_button_imgString,
    16: dark_green_color_label_button_imgString
};

function setButtonIcon(button, source, prefix) {

// ── Если уже File ──────────────────────────────────────────────
    if (source instanceof File) {          // << ключевая проверка
        button.image = source;
        if (typeof button.notify === "function") button.notify("onDraw");
        return;
    }

// ── Если пришла строка (как раньше) ───────────────────────────
    try {
        var decoded = decodeURIComponent(source);
        var tmp = new File(Folder.temp.fsName +
                           "/tmp_" + prefix + "_" + Date.now() + ".png");
        if (!tmp.open("w+b")) throw Error("Не открыть файл " + tmp.fsName);
        tmp.encoding = "BINARY";
        tmp.write(decoded);
        tmp.close();

        button.image = tmp;
        if (typeof button.notify === "function") button.notify("onDraw");
    } catch (e) {
        alert("Ошибка иконки: " + e.message);
    }
}

function setColorLabelButtonIcon(button, labelColorIndex) {
    var imgString = labelColorIcons[labelColorIndex] || default_color_label_button_imgString;
    setButtonIcon(button, imgString, "label_icon_" + labelColorIndex);
}

function setLabelButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "label_icon");
}

function setViewButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "view_icon");
}
function setGuideButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "guide_icon");
}
function setLockButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "lock_icon");
}
function setHideButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "hide_icon");
}
function setSoloButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "solo_icon");
}
function setViewButtonIconEffects(button, imgString) {
    setButtonIcon(button, imgString, "view_icon_effects");
}
function setSoloButtonIconEffects(button, imgString) {
    setButtonIcon(button, imgString, "solo_icon_effects");
}
function setCollapseTransformationsButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "collapse_transformations_icon");
}
function setMotionBlurButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "motion_blur");
}
function set3DLayerButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "3d_layer");
}

function trim(str) {
    return str.replace(/^\s+|\s+$/g, '');
}

var layerGroups = [];
var effectGroups = [];

// Сразу убираем временные дефолтные панели
tab_layers.remove(layer_group_default);
tab_effects.remove(effect_group_default);


/////////////

//
// ФУНКЦИЯ: получить все композиции проекта
//
function getAllCompositions() {
    var comps = [];
    for (var i = 1; i <= app.project.numItems; i++) {
        if (app.project.item(i) instanceof CompItem) {
            comps.push(app.project.item(i));
        }
    }
    return comps;
}

//
// ФУНКЦИЯ: получить выбранные слои в активной композиции
//
function getSelectedLayersInActiveComp() {
    var activeComp = app.project.activeItem;
    if (!(activeComp instanceof CompItem)) {
        alert("Please ensure that the active item is a composition.");
        return null;
    }

    var selectedLayers = [];
    for (var l = 1; l <= activeComp.numLayers; l++) {
        var layer = activeComp.layer(l);
        if (layer.selected) {
            selectedLayers.push(layer);
        }
    }

    if (selectedLayers.length === 0) {
        alert("Please select layers in the active composition.");
        return null;
    }

    return selectedLayers;
}

function isEnglishLetter(ch) {
    return /^[A-Za-z]$/.test(ch);
}

function containsOnlyEnglishLetters(str) {
    return /^[A-Za-z0-9_\s]+$/.test(str);
}

//
// generateUniquePrefix
//
function generateUniquePrefix(groupName) {
    var vowels = "aeiouyAEIOUY";
    var prefix = "";
    var trailingDigits = groupName.match(/\d+$/);
    trailingDigits = trailingDigits ? trailingDigits[0] : "";
    var nameWithoutDigits = groupName.replace(/\d+$/, '');
    var nameParts = nameWithoutDigits.split('_');

    for (var p = 0; p < nameParts.length; p++) {
        var part = nameParts[p];
        for (var i = 0; i < part.length; i++) {
            var ch = part.charAt(i);
            if (vowels.indexOf(ch) === -1 && isEnglishLetter(ch)) {
                prefix += ch;
            }
        }
    }

    if (trailingDigits !== "") {
        prefix = prefix.substring(0, 3).toUpperCase() + trailingDigits;
    } else {
        prefix = prefix.substring(0, 4).toUpperCase();
    }

    var basePrefix = prefix;
    var suffix = 1;
    while (isPrefixUsed(prefix)) {
        prefix = basePrefix + suffix;
        suffix++;
    }
    return prefix;
}

function isPrefixUsed(prefix) {
    for (var i = 0; i < layerGroups.length; i++) {
        if (layerGroups[i].prefix === prefix) {
            return true;
        }
    }
    for (var j = 0; j < effectGroups.length; j++) {
        if (effectGroups[j].prefix === prefix) {
            return true;
        }
    }
    return false;
}


function promptForAutoSave() {
// Если нет ни одной группы (слоёв и эффектов)
    if ((layerGroups.length + effectGroups.length) === 0) {
        var response = confirm("This is the first group.\nDo you want to save the project settings now?");
        if (response) {
            // Вызов функции сохранения, которая откроет окно диалога сохранения
            saveData();
        }
    }
}

function autoSavePreset() {
if (!autoSaveEnabled || presetFilePath === "") return;
var file = new File(presetFilePath);
if (file.open("w")) {
try {
    var dataLines = [];
    dataLines.push("LayerGroups:");
    for (var i = 0; i < layerGroups.length; i++) {
        var lg = layerGroups[i];
        dataLines.push("GroupType: LayerGroup");
        dataLines.push("Name: " + lg.name);
        dataLines.push("Prefix: " + lg.prefix);
        dataLines.push("LabelColorIndex: " + lg.labelColorIndex);
        dataLines.push("DisableLabelColor: " + lg.disableLabelColor);
        dataLines.push("");
    }
    dataLines.push("EffectGroups:");
    for (var j = 0; j < effectGroups.length; j++) {
        var eg = effectGroups[j];
        dataLines.push("GroupType: EffectGroup");
        dataLines.push("Name: " + eg.name);
        dataLines.push("Prefix: " + eg.prefix);
        dataLines.push("");
    }
    var data = dataLines.join("\n");
    file.write(data);
    file.close();
    // Можно добавить console.log или $.writeln для отладки, но лучше тихо.
} catch (e) {
    alert("Error auto-saving preset: " + e.toString());
}
}
}

//
// ===================== EFFECT GROUP =====================
//


// Убираем в конце эффекта любые пробел + число (например "Curves 2" -> "Curves")
function unifyEffectBaseName(baseName) {
    return baseName.replace(/\s+\d+$/, "");
}

// Собираем статистику эффектов по префиксу группы
function getEffectCountsByBaseName(prefix) {
    var comps = getAllCompositions();
    var prefixString = "[" + prefix + "]";
    var prefixLength = prefixString.length;
    var result = {}; // формат: { baseName: count }

    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                // Проверяем, начинается ли имя эффекта с [prefix]
                if (eff.name.indexOf(prefixString) === 0) {
                    // baseName без префикса [CRVS] и пробела
                    var baseName = eff.name.substring(prefixLength + 1);
                    baseName = unifyEffectBaseName(baseName);

                    if (!result[baseName]) {
                        result[baseName] = 0;
                    }
                    result[baseName]++;
                }
            }
        }
    }
    return result;
}

// Обновляем заголовок панели группы с учётом до 3 уникальных имён эффектов и общего количества
function updateEffectGroupPanelTitle(groupData) {
    var groupName = groupData.name;
    var prefix = groupData.prefix;
    var countsMap = getEffectCountsByBaseName(prefix);
    var baseNames = [];

    for (var nm in countsMap) {
        if (countsMap.hasOwnProperty(nm)) {
            baseNames.push(nm);
        }
    }
    baseNames.sort();

    // Если вообще нет эффектов с таким префиксом, просто показываем "GroupName [PRFX]"
    if (baseNames.length === 0) {
        groupData.panel.text = groupName + " [" + prefix + "]";
        return;
    }

    // Берём первые 3 эффекта
    var top3 = baseNames.slice(0, 3);
    var top3String = top3.join(", ");

    // Считаем общее количество эффектов (сумма значений в countsMap)
    var totalCount = 0;
    for (var k in countsMap) {
        if (countsMap.hasOwnProperty(k)) {
            totalCount += countsMap[k];
        }
    }
    groupData.panel.text = groupName + " [" + prefix + "] | " + top3String + " (" + totalCount + ")";
}

function createEffectGroupUI(groupName, prefix, effectName) {
    var groupPanel = tab_effects.add("panel", undefined, undefined, { name: "effect_group_" + prefix });
    groupPanel.text = groupName + " [" + prefix + "]"; // Изначально
    groupPanel.orientation = "row";
    groupPanel.alignChildren = ["center", "center"];
    groupPanel.spacing = 6;
    groupPanel.margins = [5, 13, 5, 10];
    groupPanel.alignment = ["fill", "top"];
    groupPanel.helpTip = "Effect Group panel for " + groupName;

    // VIEW
    var view_button = groupPanel.add("iconbutton", undefined, undefined, { name: "view_button_" + prefix, style: "toolbutton" });
    view_button.helpTip = "Toggle visibility of effects in this group across all compositions";
    view_button.preferredSize.width = 26;
    view_button.preferredSize.height = 26;
    var viewState = true;
    setViewButtonIconEffects(view_button, view_button_fx_on_imgString);

    // SOLO
    var solo_button = groupPanel.add("iconbutton", undefined, undefined, { name: "solo_button_" + prefix, style: "toolbutton" });
    solo_button.helpTip = "Toggle solo mode for this effects group";
    solo_button.preferredSize.width = 26;
    solo_button.preferredSize.height = 26;
    var soloState = false;
    setSoloButtonIconEffects(solo_button, solo_off_button_imgString);

    // Разделитель
    var divider1 = groupPanel.add("panel", undefined, undefined, { name: "divider1" });
    divider1.alignment = "fill";
    divider1.helpTip = "Divider for layout";
    divider1.graphics.backgroundColor = divider1.graphics.newBrush(
        divider1.graphics.BrushType.SOLID_COLOR, [0.5, 0.5, 0.5, 1]
    );
    divider1.preferredSize.height = 1;

    // "Add Effect"
    var add_effect_button = groupPanel.add(
        "iconbutton",
        undefined,
        File.decode(add_layer_button_imgString),
        { name: "add_effect_button_" + prefix, style: "toolbutton" }
    );
    add_effect_button.helpTip = "Add selected effects to this group across all compositions";
    add_effect_button.text = "Add FX";
    add_effect_button.preferredSize.width = 82;
    add_effect_button.preferredSize.height = 30;

    // "Edit"
    var edit_group_effects_button = groupPanel.add(
        "iconbutton",
        undefined,
        File.decode(edit_group_effects_button_imgString),
        { name: "edit_group_effects_button_" + prefix, style: "toolbutton" }
    );
    edit_group_effects_button.helpTip = "Rename and settings this Group";
    edit_group_effects_button.text = "";
    edit_group_effects_button.preferredSize.width = 30;
    edit_group_effects_button.preferredSize.height = 30;

    // "Delete"
    var delete_group_effects_button = groupPanel.add(
        "iconbutton",
        undefined,
        File.decode(delete_group_layers_button_imgString),
        { name: "delete_group_effects_button_" + prefix, style: "toolbutton" }
    );
    delete_group_effects_button.helpTip = "Delete this Effects Group";
    delete_group_effects_button.text = "";
    delete_group_effects_button.preferredSize.width = 30;
    delete_group_effects_button.preferredSize.height = 30;

    // Собираем все данные
    var groupData = {
        name: groupName,
        prefix: prefix,
        effectName: effectName,
        panel: groupPanel,
        viewButton: view_button,
        viewState: viewState,
        soloButton: solo_button,
        soloState: soloState,
        addButton: add_effect_button,
        deleteButton: delete_group_effects_button,
        editButton: edit_group_effects_button
    };
    effectGroups.push(groupData);

    // VIEW onClick
    view_button.onClick = function () {
        groupData.viewState = !groupData.viewState;
        if (groupData.viewState) {
            setViewButtonIconEffects(view_button, view_button_fx_on_imgString);
        } else {
            setViewButtonIconEffects(view_button, view_button_fx_off_imgString);
        }
        app.beginUndoGroup("Toggle View for " + groupName);

        var comps = getAllCompositions();
        var effectsFound = false;
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                var fx = layer.property("Effects");
                if (!fx) continue;
                for (var i = 1; i <= fx.numProperties; i++) {
                    var effect = fx.property(i);
                    if (effect.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        effect.enabled = groupData.viewState;
                        effectsFound = true;
                    }
                }
            }
        }
        if (!effectsFound) {
            alert("Effects for group '" + groupName + "' not found in any composition.");
        }

        app.endUndoGroup();
    };

    // SOLO onClick
    solo_button.onClick = function () {
        groupData.soloState = !groupData.soloState;
        if (groupData.soloState) {
            setSoloButtonIconEffects(solo_button, solo_on_button_imgString);
        } else {
            setSoloButtonIconEffects(solo_button, solo_off_button_imgString);
        }
        app.beginUndoGroup("Toggle Solo for " + groupName);

        var comps = getAllCompositions();
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                var effects = layer.property("Effects");
                if (!effects) continue;

                // Проверяем, есть ли в слое эффект из этой группы
                var hasGroupEffect = false;
                for (var e = 1; e <= effects.numProperties; e++) {
                    var eff = effects.property(e);
                    if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        hasGroupEffect = true;
                        break;
                    }
                }
                if (hasGroupEffect) {
                    // Переключаем enable
                    for (var e = 1; e <= effects.numProperties; e++) {
                        var eff = effects.property(e);
                        if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                            eff.enabled = groupData.viewState;
                        } else {
                            eff.enabled = !groupData.soloState;
                        }
                    }
                }
            }
        }
        app.endUndoGroup();
    };

    // ADD EFFECT onClick
    add_effect_button.onClick = function () {
        var layers = getSelectedLayersInActiveComp();
        if (!layers) return;

        app.beginUndoGroup("Add Effects to " + groupName);
        var effectsFound = false;

        for (var j = 0; j < layers.length; j++) {
            var layer = layers[j];
            var selectedProps = layer.selectedProperties;
            if (selectedProps.length === 0) continue;

            for (var i = 0; i < selectedProps.length; i++) {
                var effect = selectedProps[i];
                if (
                    effect.matchName !== "ADBE Effect Parade" &&
                    effect.parentProperty.matchName === "ADBE Effect Parade"
                ) {
                    var baseName = effect.name.replace(/^\[[^\]]+\]\s*/, "");
                    effect.name = "[" + groupData.prefix + "] " + baseName;
                    effectsFound = true;
                }
            }
        }
        if (!effectsFound) {
            alert("Please select effects to add to " + groupName + ".");
        }
        app.endUndoGroup();
        updateEffectGroupPanelTitle(groupData);
    };

    // EDIT onClick
    edit_group_effects_button.onClick = function () {
        var dialog = new Window("dialog", "Settings Effect Group: " + groupData.name);
        dialog.orientation = "column";
        dialog.alignChildren = ["fill", "top"];

        var namePrefixPanel = dialog.add("panel", undefined, "Name and Prefix");
        namePrefixPanel.orientation = "column";
        namePrefixPanel.alignChildren = ["fill", "top"];
        namePrefixPanel.margins = [10, 15, 10, 10];

        var groupNameGroup = namePrefixPanel.add("group");
        groupNameGroup.add("statictext", undefined, "Group Name:");
        var groupNameInput = groupNameGroup.add("edittext", undefined, groupData.name);
        groupNameInput.characters = 15;

        var prefixGroup = namePrefixPanel.add("group");
        prefixGroup.add("statictext", undefined, "Prefix:");
        var prefixInput = prefixGroup.add("edittext", undefined, groupData.prefix);
        prefixInput.characters = 5;

        var autoPrefixGroup = namePrefixPanel.add("group");
        autoPrefixGroup.orientation = "row";
        autoPrefixGroup.alignChildren = ["left", "center"];
        autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
        var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
        autoPrefixCheckbox.value = false;
        prefixInput.enabled = !autoPrefixCheckbox.value;

        autoPrefixCheckbox.onClick = function () {
            prefixInput.enabled = !autoPrefixCheckbox.value;
            if (autoPrefixCheckbox.value) {
                if (containsOnlyEnglishLetters(groupNameInput.text)) {
                    prefixInput.text = generateUniquePrefix(groupNameInput.text);
                } else {
                    autoPrefixCheckbox.value = false;
                    prefixInput.enabled = true;
                    alert("Auto-prefix generation is disabled for invalid characters.");
                }
            }
        };

        groupNameInput.onChanging = function () {
            if (autoPrefixCheckbox.value) {
                if (containsOnlyEnglishLetters(groupNameInput.text)) {
                    prefixInput.text = generateUniquePrefix(groupNameInput.text);
                } else {
                    autoPrefixCheckbox.value = false;
                    prefixInput.enabled = true;
                    prefixInput.text = "";
                }
            }
        };

        if (groupData.effectName && groupData.effectName !== "") {
            var updateButton = dialog.add("button", undefined, "Update Group Effects");
            updateButton.helpTip = "Re-scan the project for '" + groupData.effectName + "' and prefix them.";

            updateButton.onClick = function () {
                addAllEffectsOfThisTypeToGroup(groupData.prefix, groupData.effectName);
                alert("All '" + groupData.effectName + "' have been updated with [" + groupData.prefix + "].");
            };
        } else {
            var infoText = dialog.add("statictext", undefined, "(No effect is tracked in this group.)");
            infoText.graphics.foregroundColor = infoText.graphics.foregroundColor = infoText.graphics.newPen(
                infoText.graphics.PenType.SOLID_COLOR,
                [0.5569, 0.7333, 0.9412], // RGB для #8EBBF0
                1                         // непрозрачность 100%
            );
        }

        var buttonsGroup = dialog.add("group");
        buttonsGroup.alignment = "center";
        var okButton = buttonsGroup.add("button", undefined, "OK");
        var cancelButton = buttonsGroup.add("button", undefined, "Cancel");

        okButton.onClick = function () {
            var newGroupName = groupNameInput.text;
            var newPrefix = prefixInput.text;
            if (!newGroupName || !newPrefix) {
                alert("Please enter both a group name and prefix.");
                return;
            }
            app.beginUndoGroup("Settings Effect Group " + groupData.name);

            var comps = getAllCompositions();
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    var fx = layer.property("Effects");
                    if (!fx) continue;
                    for (var e = 1; e <= fx.numProperties; e++) {
                        var eff = fx.property(e);
                        if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                            var baseName = eff.name.replace("[" + groupData.prefix + "] ", "");
                            eff.name = "[" + newPrefix + "] " + baseName;
                        }
                    }
                }
            }

            groupData.name = newGroupName;
            groupData.prefix = newPrefix;
            updateEffectGroupPanelTitle(groupData);
            palette.layout.layout(true);
            palette.layout.resize();
            app.endUndoGroup();
            dialog.close();
        };

        cancelButton.onClick = function () {
            dialog.close();
        };

        dialog.center();
        dialog.show();
    };

    // DELETE onClick
    delete_group_effects_button.onClick = function () {
        app.beginUndoGroup("Delete Effect Group " + groupName);
        var effectsFound = false;

        var comps = getAllCompositions();
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                var fx = layer.property("Effects");
                if (!fx) continue;
                for (var i = fx.numProperties; i >= 1; i--) {
                    var eff = fx.property(i);
                    if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        var originalName = eff.name.replace("[" + groupData.prefix + "] ", "");
                        eff.name = originalName;
                        effectsFound = true;
                    }
                }
            }
        }

        if (!effectsFound) {
            alert("Effects for group '" + groupName + "' not found in any composition.");
        }

        tab_effects.remove(groupPanel);
        palette.layout.layout(true);
        palette.layout.resize();

        for (var j = 0; j < effectGroups.length; j++) {
            if (effectGroups[j].panel === groupPanel) {
                effectGroups.splice(j, 1);
                break;
            }
        }
        app.endUndoGroup();
    };
    updateEffectGroupPanelTitle(groupData);
    palette.layout.layout(true);
    palette.layout.resize();

    if (autoSaveEnabled) {
        autoSavePreset();
    }
}

//
// "Create a New Effects Group" кнопка
//

create_group_effects_button.onClick = function () {
    var dialog = new Window("dialog", "Add New Effects Group");
    dialog.orientation = "column";
    dialog.alignChildren = ["fill", "top"];

    var projectEffects = getAllUniqueEffectsInProject_WithNone();
    if (projectEffects.length === 0) {
        alert("No effects in the project! The list is empty.");
        return;
    }

    var nameAndPrefixPanel = dialog.add("panel", undefined, "Name and Prefix");
    nameAndPrefixPanel.orientation = "column";
    nameAndPrefixPanel.alignChildren = ["fill", "top"];

    var groupNameGroup = nameAndPrefixPanel.add("group");
    groupNameGroup.add("statictext", undefined, "Group Name:");
    var groupNameInput = groupNameGroup.add("edittext", undefined, "");
    groupNameInput.characters = 15;

    var prefixGroup = nameAndPrefixPanel.add("group");
    prefixGroup.add("statictext", undefined, "Prefix:");
    var prefixInput = prefixGroup.add("edittext", undefined, "");
    prefixInput.characters = 5;

    var autoPrefixGroup = nameAndPrefixPanel.add("group");
    autoPrefixGroup.orientation = "row";
    autoPrefixGroup.alignChildren = ["left", "center"];
    autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
    var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
    autoPrefixCheckbox.value = true;
    prefixInput.enabled = !autoPrefixCheckbox.value;

    autoPrefixCheckbox.onClick = function () {
        prefixInput.enabled = !autoPrefixCheckbox.value;
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                alert("Auto-prefix disabled: non-English characters.");
            }
        }
    };

    groupNameInput.onChanging = function () {
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                prefixInput.text = "";
            }
        }
    };

    var effectSelectPanel = dialog.add("panel", undefined, "Select an Effect from Project (optional)");
    effectSelectPanel.orientation = "column";
    effectSelectPanel.alignChildren = ["fill", "top"];
    effectSelectPanel.margins = [10, 15, 10, 10];

    var ddGroup = effectSelectPanel.add("group");
    ddGroup.add("statictext", undefined, "Effect Name:");
    var effectDropdown = ddGroup.add("dropdownlist", undefined, projectEffects);
    effectDropdown.selection = 0;
    effectDropdown.preferredSize.width = 120;

    effectDropdown.onChange = function () {
        var chosenEffect = effectDropdown.selection ? effectDropdown.selection.text : "";
        if (chosenEffect && chosenEffect !== "None") {
            if (groupNameInput.text === "") {
                groupNameInput.text = chosenEffect;
            }
        }
    };

    var buttonsGroup = dialog.add("group");
    buttonsGroup.alignment = "center";
    var okButton = buttonsGroup.add("button", undefined, "OK");
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel");

    okButton.onClick = function () {
        var groupName = groupNameInput.text;
        var prefix = prefixInput.text;
        var chosenEffect = effectDropdown.selection ? effectDropdown.selection.text : "";

        if (!groupName) {
            alert("Please enter a group name.");
            return;
        }
        if (!prefix) {
            if (autoPrefixCheckbox.value) {
                prefix = generateUniquePrefix(groupName);
                prefixInput.text = prefix;
            } else {
                alert("Please enter a prefix.");
                return;
            }
        }

        var finalEffectName = (chosenEffect === "None") ? "" : chosenEffect;
        createEffectGroupUI(groupName, prefix, finalEffectName);

        if (finalEffectName !== "") {
            addAllEffectsOfThisTypeToGroup(prefix, finalEffectName);
        }
        dialog.close();
    };


    cancelButton.onClick = function () {
        dialog.close();
    };

    dialog.center();
    dialog.show();

};

function getAllUniqueEffectsInProject_WithNone() {
    var effectNamesSet = {};
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                var baseName = eff.name.replace(/^\[[^\]]+\]\s*/, "");
                effectNamesSet[baseName] = true;
            }
        }
    }
    var resultArray = [];
    for (var nm in effectNamesSet) {
        if (effectNamesSet.hasOwnProperty(nm)) {
            resultArray.push(nm);
        }
    }
    resultArray.sort();
    resultArray.unshift("None");
    return resultArray;
}

function addAllEffectsOfThisTypeToGroup(prefix, effectName) {
    app.beginUndoGroup("Add All Effects of " + effectName + " -> " + prefix);
    var comps = getAllCompositions();
    var countAdded = 0;
    var prefixRegex = /^\[[^\]]+\]\s*/;

    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;

            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                var baseName = eff.name.replace(prefixRegex, "");
                if (baseName === effectName) {
                    if (prefixRegex.test(eff.name)) {
                        // Уже какой-то [префикс], пропускаем
                        continue;
                    }
                    eff.name = "[" + prefix + "] " + baseName;
                    countAdded++;
                }
            }
        }
    }
    app.endUndoGroup();
    $.writeln("Added prefix [" + prefix + "] to " + countAdded + " \"" + effectName + "\" effects.");
}



// EFFECTS MANAGER///

effects_manager_button.onClick = function () {
    openEffectsManager();
};

function openEffectsManager() {
    var win = new Window("dialog", "Effects Manager Tool V1.5");
    win.orientation = "column";
    win.alignChildren = ["fill", "top"];
    win.spacing = 10;
    win.margins = 15;

    // Основной контейнер с двумя колонками: слева – эффекты, справа – композиции
    var mainGroup = win.add("group");
    mainGroup.orientation = "row";
    mainGroup.alignChildren = ["fill", "fill"];
    mainGroup.spacing = 10;
    mainGroup.margins = 0;

    // Левая панель: список эффектов
    var effectsPanel = mainGroup.add("panel", undefined, "All Effects");
    effectsPanel.orientation = "column";
    effectsPanel.alignChildren = ["left", "top"];
    effectsPanel.spacing = 10;
    effectsPanel.margins = 10;

    var effectsList = effectsPanel.add("listbox", undefined, undefined);
    effectsList.preferredSize.width = 300;
    effectsList.preferredSize.height = 350;

    // Правая панель: список композиций, содержащих выбранный эффект
    var compsPanel = mainGroup.add("panel", undefined, "Compositions");
    compsPanel.orientation = "column";
    compsPanel.alignChildren = ["left", "top"];
    compsPanel.spacing = 10;
    compsPanel.margins = 10;

    var compsList = compsPanel.add("listbox", undefined, undefined);
    compsList.preferredSize.width = 270;
    compsList.preferredSize.height = 350;

    // Группа для кнопок (располагаются в один ряд) – ниже основных панелей
    var btnGroup = win.add("group");
    btnGroup.orientation = "row";
    btnGroup.alignChildren = ["fill", "center"];
    btnGroup.spacing = 10;

    // Кнопка Disable Select Effect
    var disableEffectBtn = btnGroup.add(
        "iconbutton",
        undefined,
        File.decode(disable_effect_button_imgString),
        { name: "disableEffectBtn", style: "toolbutton" }
    );
    disableEffectBtn.text = "Disable";
    disableEffectBtn.helpTip = "Disable the currently selected effect";
    disableEffectBtn.preferredSize.width = 90;
    disableEffectBtn.preferredSize.height = 35;

    // Кнопка Delete с иконкой
    var deleteEffectBtn = btnGroup.add(
        "iconbutton",
        undefined,
        File.decode(delete_group_layers_button_imgString),
        { name: "deleteEffectBtn", style: "toolbutton" }
    );
    deleteEffectBtn.text = "Delete";
    deleteEffectBtn.helpTip = "Delete the selected effect";
    deleteEffectBtn.preferredSize.width = 80;
    deleteEffectBtn.preferredSize.height = 35;

    // Кнопка Add to Group с иконкой
    var addToGroupBtn = btnGroup.add(
        "iconbutton",
        undefined,
        File.decode(add_layer_button_imgString),
        { name: "addToGroupBtn", style: "toolbutton" }
    );
    addToGroupBtn.text = "Add to Group Effects";
    addToGroupBtn.helpTip = "Add the selected effect to a group";
    addToGroupBtn.preferredSize.width = 155;
    addToGroupBtn.preferredSize.height = 35;

    // *** Кнопка "Open Selected Composition" – интегрированный готовый код ***
    var open_selected_comp_button = btnGroup.add("iconbutton", undefined, File.decode(open_selected_comp_button_imgString), { name: "openselectBtn", style: "toolbutton" });
    open_selected_comp_button.text = "Open Selected Comp";
    open_selected_comp_button.helpTip = "Open the selected composition";
    open_selected_comp_button.preferredSize.width = 175;
    open_selected_comp_button.preferredSize.height = 35;

    // Кнопка Close с иконкой
    var closeBtn = btnGroup.add(
        "iconbutton",
        undefined,
        File.decode(close_button_imgString),
        { name: "closeBtn", style: "toolbutton" }
    );
    closeBtn.text = "Close";
    closeBtn.helpTip = "Close the Effects Manager dialog";
    closeBtn.preferredSize.width = 90;
    closeBtn.preferredSize.height = 35;

    // Глобальная переменная для хранения композиций с информацией о группе (используется в onClick кнопки Open Selected Composition)
    var compsWithGroup = [];

    // Функция заполнения списка эффектов (группировка по префиксу и базовому имени)
    function fillEffectsList() {
        effectsList.removeAll();
        var allEffects = getAllEffectsInProject();
        var groups = {};
        for (var i = 0; i < allEffects.length; i++) {
            var eff = allEffects[i];
            var prefix = "";
            var baseName = "";
            // Если имя эффекта начинается с "[XXX] ", разбиваем его на префикс и базовое имя
            var m = eff.name.match(/^\[([^\]]+)\]\s*(.*)/);
            if (m) {
                prefix = m[1];
                baseName = m[2];
            } else {
                prefix = "None";
                baseName = eff.name;
            }
            var key = "[" + prefix + "] " + baseName;
            if (!groups[key]) groups[key] = [];
            groups[key].push(eff);
        }
        for (var key in groups) {
            if (groups.hasOwnProperty(key)) {
                var groupArray = groups[key];
                var allDisabled = true;
                for (var j = 0; j < groupArray.length; j++) {
                    if (groupArray[j].effectProp.enabled) {
                        allDisabled = false;
                        break;
                    }
                }
                var count = groupArray.length;
                var itemLabel = key + " (" + count + ")" + (allDisabled ? " | Off" : "");
                var item = effectsList.add("item", itemLabel);
                item.__effectDataGroup = groupArray;
                item.__groupName = key;
            }
        }
    }

    fillEffectsList();

    // Функция для заполнения списка композиций для выбранного эффекта.
    function updateCompositionsList() {
        compsList.removeAll();
        compsWithGroup = [];
        var selItem = effectsList.selection;
        if (!selItem) return;
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) return;
        var compsFound = {};
        // Проходим по всем экземплярам эффекта и собираем уникальные композиции
        for (var i = 0; i < effGroup.length; i++) {
            var comp = effGroup[i].comp;
            compsFound[comp.name] = comp;
        }
        // Добавляем найденные композиции в список и массив compsWithGroup
        for (var compName in compsFound) {
            // Здесь можно добавить дополнительную информацию в названии (например, группу) если требуется
            var displayName = compName; // Если нужно, можно добавить " [info]"
            compsWithGroup.push({ comp: compsFound[compName] });
            compsList.add("item", displayName);
        }
    }

    // При изменении выбора эффекта обновляем список композиций
    effectsList.onChange = function () {
        updateCompositionsList();
        // Обновляем подсказку для кнопки Disable/Enable
        var selItem = effectsList.selection;
        if (!selItem) {
            disableEffectBtn.helpTip = "Disable/Enable";
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            disableEffectBtn.helpTip = "Disable/Enable";
            return;
        }
        var anyEnabled = false;
        for (var i = 0; i < effGroup.length; i++) {
            if (effGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }
        disableEffectBtn.helpTip = anyEnabled ? "Disable Select Effect" : "Enable Select Effect";
    };

    // Обработчик кнопки Disable/Enable
    disableEffectBtn.onClick = function () {
        var selItem = effectsList.selection;
        if (!selItem) {
            alert("Select an effect group from the list first!");
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            alert("No effect data found!");
            return;
        }
        var anyEnabled = false;
        for (var i = 0; i < effGroup.length; i++) {
            if (effGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }
        var count = effGroup.length;
        if (anyEnabled) {
            for (var j = 0; j < effGroup.length; j++) {
                effGroup[j].effectProp.enabled = false;
                effGroup[j].isEnabled = false;
            }
            selItem.text = selItem.__groupName + " (" + count + ") | Off";
        } else {
            for (var j = 0; j < effGroup.length; j++) {
                effGroup[j].effectProp.enabled = true;
                effGroup[j].isEnabled = true;
            }
            selItem.text = selItem.__groupName + " (" + count + ")";
        }
        updateCompositionsList();
    };

    // Обработчик кнопки Delete
    deleteEffectBtn.onClick = function () {
        var selItem = effectsList.selection;
        if (!selItem) {
            alert("Select an effect group from the list first!");
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            alert("No effect data found!");
            return;
        }
        app.beginUndoGroup("Delete Selected Effect(s)");
        for (var i = 0; i < effGroup.length; i++) {
            effGroup[i].effectProp.remove();
        }
        app.endUndoGroup();
        fillEffectsList();
        updateCompositionsList();
    };

    // Обработчик кнопки Add to Group
    addToGroupBtn.onClick = function () {
        var selItem = effectsList.selection;
        if (!selItem) {
            alert("Select an effect group from the list first!");
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            alert("No effect data found!");
            return;
        }
        var dlg = new Window("dialog", "Add to Group");
        dlg.orientation = "column";
        dlg.alignChildren = ["fill", "top"];
        dlg.spacing = 10;
        dlg.margins = 15;
        dlg.add("statictext", undefined, "Select Effect Group:");
        var groupDropdown = dlg.add("dropdownlist", undefined, []);
        if (typeof effectGroups !== "undefined" && effectGroups.length > 0) {
            for (var i = 0; i < effectGroups.length; i++) {
                groupDropdown.add("item", effectGroups[i].name + " [" + effectGroups[i].prefix + "]");
            }
            groupDropdown.selection = 0;
        } else {
            groupDropdown.add("item", "No groups available");
            groupDropdown.selection = 0;
        }
        var btnGroupDlg = dlg.add("group");
        btnGroupDlg.alignment = "center";
        var okBtn = btnGroupDlg.add("button", undefined, "OK");
        var cancelBtn = btnGroupDlg.add("button", undefined, "Cancel");
        okBtn.onClick = function () {
            if (typeof effectGroups !== "undefined" && effectGroups.length > 0) {
                var selIndex = groupDropdown.selection.index;
                var targetGroup = effectGroups[selIndex];
                for (var j = 0; j < effGroup.length; j++) {
                    var effectProp = effGroup[j].effectProp;
                    var baseName = effectProp.name.replace(/^\[[^\]]+\]\s*/, "");
                    effectProp.name = "[" + targetGroup.prefix + "] " + baseName;
                }
                dlg.close();
                fillEffectsList();
                updateCompositionsList();
            } else {
                alert("No effect groups available to add.");
            }
        };
        cancelBtn.onClick = function () { dlg.close(); };
        dlg.center();
        dlg.show();
    };

    // *** Интегрированный готовый код для кнопки "Open Selected Composition" ***
    open_selected_comp_button.onClick = function () {
        var sel = compsList.selection;
        if (!sel) {
            alert("Select a composition first!");
            return;
        }
        var compName = sel.text.split(" [")[0];
        for (var i = 0; i < compsWithGroup.length; i++) {
            var compObj = compsWithGroup[i].comp;
            if (compObj && compObj.name === compName) {
                compObj.openInViewer();
                break;
            }
        }
    };

    closeBtn.onClick = function () {
        win.close();
    };

    win.center();
    win.show();
}

// Вспомогательная функция для получения всех эффектов в проекте
function getAllEffectsInProject() {
    var allEffects = [];
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var effectProp = fx.property(e);
                allEffects.push({
                    name: effectProp.name,
                    effectProp: effectProp,
                    comp: comp,
                    layerIndex: l,
                    isEnabled: effectProp.enabled
                });
            }
        }
    }
    return allEffects;
}



//TOOLS//

function sortProjectFiles() {
    if (!app || !app.project) {
        return;
    }

    // ─── UI setup ──────────────────────────────────────────────────────────
    var dlg = new Window("dialog", "Sort Project Files Tool  –  V1.6");
    dlg.orientation   = "column";    // теперь одна колонка
    dlg.alignChildren = "fill";
    dlg.spacing       = 10;
    dlg.margins       = 15;

    // выбор категории
    dlg.add("statictext", undefined, "Select category to sort:");
    var sortOpt = ["All Sort","Compositions","Footages","Audio","Nulls & Solids",
                   "Images & SQ","PSD","Vector","GLB Models","Other",
                   "Custom Sort Folder"];
    var sortDD = dlg.add("dropdownlist", undefined, sortOpt);
    sortDD.selection = 0;

    // применять цвет
    var applyColorChk = dlg.add("checkbox", undefined, "Apply folder color to files");

    // Additional options
    var optPanel = dlg.add("panel", undefined, "Additional options");
    optPanel.orientation   = "column";
    optPanel.alignChildren = "left";
    optPanel.spacing       = 5;
    optPanel.margins       = [10, 10, 10, 10];

    var rmUnusedChk     = optPanel.add("checkbox", undefined,
                                       "Remove unused Footages & Comps");
    var rmDisabledFXChk = optPanel.add("checkbox", undefined,
                                       "Remove disabled Effects");

    // ─── Сразу под Additional options — Exclude folders ───────────────────
    var excludePanel = dlg.add("panel", undefined, "Exclude folders");
    excludePanel.orientation   = "column";
    excludePanel.alignChildren = "left";
    excludePanel.spacing       = 4;
    excludePanel.preferredSize = [300, 30];

    var folderChecks = [];
    for (var i = 1; i <= app.project.numItems; i++) {
        var itm = app.project.item(i);
        if (!(itm instanceof FolderItem)) continue;
        var cnt = 0;
        for (var j = 1; j <= app.project.numItems; j++) {
            if (app.project.item(j).parentFolder === itm) cnt++;
        }
        var cb = excludePanel.add("checkbox", undefined,
                                  itm.name + "   |   " + cnt + " items");
        folderChecks.push({ cb: cb, name: itm.name });
    }

    // кнопки
    var btns = dlg.add("group");
    btns.alignment = "center";
    btns.add("button", undefined, "OK",     {name: "ok"});
    btns.add("button", undefined, "Cancel", {name: "cancel"});

    dlg.center();
    if (dlg.show() !== 1) return;  // user cancelled

    // ─── read settings ─────────────────────────────────────────────────────
    var excludedFolders = [];
    for (var k = 0; k < folderChecks.length; k++) {
        if (folderChecks[k].cb.value) {
            excludedFolders.push(folderChecks[k].name);
        }
    }

    var chosenCategory = sortDD.selection.text;
    var doColorLabels  = applyColorChk.value;
    var doRemoveUnused = rmUnusedChk.value;
    var doRemoveFX     = rmDisabledFXChk.value;

    // ─── Custom Sort Folder dialog ────────────────────────────────────────
    var useCustomSort = false;
    var customSortParams = null;
    if (chosenCategory === "Custom Sort Folder") {
        var customDlg = new Window("dialog", "Custom Sort Folder");
        customDlg.orientation = "column";
        customDlg.alignChildren = "fill";
        customDlg.spacing = 10;
        customDlg.margins = 15;

        function countFilesWithExtension(ext) {
            var count = 0;
            for (var a = 1; a <= app.project.numItems; a++) {
                var it = app.project.item(a);
                if (it && it.mainSource && it.mainSource.file) {
                    var fn = it.mainSource.file.name;
                    var e2 = fn.split('.').pop().toLowerCase();
                    if (e2 === ext.toLowerCase()) count++;
                }
            }
            return count;
        }

        customDlg.add("statictext", undefined, "Enter custom folder name:");
        var folderNameInput = customDlg.add("edittext", undefined, "");
        folderNameInput.characters = 25;

        customDlg.add("statictext", undefined, "Select color label for folder:");
        var colorOptions = [
            { name: "None", value: 0 },{ name: "Red", value: 1 },{ name: "Yellow", value: 2 },
            { name: "Aqua", value: 3 },{ name: "Pink", value: 4 },{ name: "Lavender", value: 5 },
            { name: "Peach", value: 6 },{ name: "Sea", value: 7 },{ name: "Blue", value: 8 },
            { name: "Green", value: 9 },{ name: "Purple", value: 10 },{ name: "Orange", value: 11 },
            { name: "Brown", value: 12 },{ name: "Fuchsia", value: 13 },{ name: "Cyan", value: 14 },
            { name: "Sandstone", value: 15 },{ name: "Dark Green", value: 16 }
        ];
        // build colorNames array with a for-loop
        var colorNames = [];
        for (var c = 0; c < colorOptions.length; c++) {
            colorNames.push(colorOptions[c].name);
        }
        var colorDD = customDlg.add("dropdownlist", undefined, colorNames);
        colorDD.selection = 0;

        customDlg.add("statictext", undefined, "Select file formats (extensions):");
        var formatsGroup = customDlg.add("group");
        formatsGroup.orientation = "row";
        formatsGroup.alignChildren = "fill";
        formatsGroup.spacing = 10;

        var rasterFmt = ["psd","jpg","jpeg","png","tif","gif","exr"];
        var vectorFmt = ["ai","pdf"];
        var videoFmt  = ["mov","mp4"];
        var audioFmt  = ["mp3","wav","aif","aiff","ogg","aac"];

        function makePanel(title, formats) {
            var p = formatsGroup.add("panel", undefined, title);
            p.orientation = "column";
            p.alignChildren = "left";
            p.spacing = 5;
            var cbs = [];
            for (var f = 0; f < formats.length; f++) {
                var cnt2 = countFilesWithExtension(formats[f]);
                cbs.push(p.add("checkbox", undefined,
                               formats[f] + " : " + cnt2 + " Files"));
            }
            return { formats: formats, cbs: cbs };
        }

        var raster = makePanel("Raster Images", rasterFmt);
        var vector = makePanel("Vector Formats", vectorFmt);
        var video  = makePanel("Video Formats", videoFmt);
        var audio  = makePanel("Audio Formats", audioFmt);

        var btnGrp = customDlg.add("group");
        btnGrp.alignment = "center";
        btnGrp.add("button", undefined, "OK");
        btnGrp.add("button", undefined, "Cancel");

        if (customDlg.show() !== 1) return;

        var name = folderNameInput.text;
        if (!name) {
            alert("Please enter a folder name.");
            return;
        }

        // collect selected formats with for-loops
        var selectedFormats = [];
        var panels = [raster, vector, video, audio];
        for (var pi = 0; pi < panels.length; pi++) {
            var set = panels[pi];
            for (var fi = 0; fi < set.formats.length; fi++) {
                if (set.cbs[fi].value) {
                    selectedFormats.push(set.formats[fi]);
                }
            }
        }
        if (selectedFormats.length === 0) {
            alert("Select at least one file format.");
            return;
        }

        customSortParams = {
            folderName: name,
            color:      colorOptions[colorDD.selection.index].value,
            formats:    selectedFormats
        };
        useCustomSort = true;
    }

    // ─── helpers ───────────────────────────────────────────────────────────
    function isExcluded(item) {
        if (item instanceof FolderItem &&
            excludedFolders.indexOf(item.name)!==-1) return true;
        var pf = item.parentFolder;
        while (pf) {
            if (excludedFolders.indexOf(pf.name)!==-1) return true;
            if (pf === app.project.rootFolder) break;
            pf = pf.parentFolder;
        }
        return false;
    }

    var presets     = ["Compositions","Footages","Audio","Nulls & Solids","Images & SQ","PSD","Vector","GLB Models","Other"];
    var presetColor = { "Compositions":8, "Footages":9, "Audio":2, "Nulls & Solids":1, "Images & SQ":14, "PSD":15, "Vector":11, "GLB Models":10, "Other":0 };

    // ext arrays...
    var audioExt = ["mp3","wav","aif","aiff","ogg","aac"];
    var psdExt   = ["psd"];
    var vectExt  = ["ai","pdf"];
    var imgExt   = ["jpg","jpeg","png","tif","tiff","gif","bmp"];
    var videoExt = ["mov","mp4","m4v","avi","mxf","vob","flv","mkv","mpg","mpeg"];
    var glbExt   = ["glb"];

    function getOrCreateFolder(name) {
        for (var i = 1; i <= app.project.numItems; i++) {
            var f = app.project.item(i);
            if (f instanceof FolderItem && f.name === name) return f;
        }
        return app.project.items.addFolder(name);
    }
    function getCategory(item) {
        if (item instanceof CompItem) return "Compositions";
        if (!(item instanceof FootageItem)) return null;
        if (item.mainSource instanceof SolidSource ||
            (item.name && item.name.match(/^solid/i))) return "Nulls & Solids";
        if (!item.mainSource || !item.mainSource.file) return "Other";
        var ext = item.mainSource.file.name.split(".").pop().toLowerCase();
        if (audioExt.indexOf(ext)!==-1) return "Audio";
        if (psdExt.indexOf(ext)!==-1)   return "PSD";
        if (vectExt.indexOf(ext)!==-1)  return "Vector";
        if (imgExt.indexOf(ext)!==-1)   return "Images & SQ";
        if (glbExt.indexOf(ext)!==-1)   return "GLB Models";
        if (videoExt.indexOf(ext)!==-1) return "Footages";
        return "Other";
    }
    function removeEmptyFolders() {
        var removed = 0;
        for (var i = app.project.numItems; i >= 1; i--) {
            var it = app.project.item(i);
            if (!(it instanceof FolderItem)) continue;
            if (excludedFolders.indexOf(it.name)!==-1) continue;
            var hasChild = false;
            for (var j = 1; j <= app.project.numItems; j++) {
                if (app.project.item(j).parentFolder === it) {
                    hasChild = true;
                    break;
                }
            }
            if (!hasChild) {
                it.remove();
                removed++;
            }
        }
        return removed;
    }

    // ─── do sort ───────────────────────────────────────────────────────────
    try {
        app.beginUndoGroup("Auto Sort Comps");

        if (useCustomSort) {
            var tgt = getOrCreateFolder(customSortParams.folderName);
            tgt.label = customSortParams.color;
            var itemsToMove = [];
            for (var i = 1; i <= app.project.numItems; i++) {
                var it = app.project.item(i);
                if (it instanceof FolderItem) continue;
                if (isExcluded(it)) continue;
                if (it.mainSource && it.mainSource.file) {
                    var e3 = it.mainSource.file.name.split(".").pop().toLowerCase();
                    if (customSortParams.formats.indexOf(e3)!==-1) {
                        itemsToMove.push(it);
                    }
                }
            }
            for (var m = 0; m < itemsToMove.length; m++) {
                itemsToMove[m].parentFolder = tgt;
                if (doColorLabels) itemsToMove[m].label = tgt.label;
            }
        } else {
            // standard sort
            var folderMap = {};
            for (var p = 0; p < presets.length; p++) {
                var nm = presets[p];
                var f  = getOrCreateFolder(nm);
                f.label = presetColor[nm];
                folderMap[nm] = f;
            }
            var moved;
            do {
                moved = false;
                for (var i = app.project.numItems; i >= 1; i--) {
                    var it = app.project.item(i);
                    if (isExcluded(it) || it instanceof FolderItem) continue;
                    var cat = getCategory(it);
                    if (!cat) continue;
                    if (chosenCategory !== "All Sort" && chosenCategory !== cat) continue;
                    var dest = folderMap[cat];
                    if (it.parentFolder !== dest) {
                        it.parentFolder = dest;
                        if (doColorLabels) it.label = dest.label;
                        moved = true;
                    }
                }
            } while (moved);
        }

        var emptyGone = removeEmptyFolders();

        if (doRemoveUnused) {
            for (var i = app.project.numItems; i >= 1; i--) {
                var it = app.project.item(i);
                if (it instanceof FootageItem && it.usedIn && it.usedIn.length === 0) {
                    it.remove();
                }
            }
            for (var i = app.project.numItems; i >= 1; i--) {
                var it = app.project.item(i);
                if (it instanceof CompItem && it.usedIn && it.usedIn.length === 0 &&
                    it.numLayers === 0 && it !== app.project.activeItem) {
                    it.remove();
                }
            }
        }

        if (doRemoveFX) {
            var comps = [];
            for (var i = 1; i <= app.project.numItems; i++) {
                if (app.project.item(i) instanceof CompItem) {
                    comps.push(app.project.item(i));
                }
            }
            for (var ci = 0; ci < comps.length; ci++) {
                var comp = comps[ci];
                for (var li = 1; li <= comp.numLayers; li++) {
                    var fx = comp.layer(li).property("Effects");
                    if (!fx) continue;
                    for (var ei = fx.numProperties; ei >= 1; ei--) {
                        if (!fx.property(ei).enabled) {
                            fx.property(ei).remove();
                        }
                    }
                }
            }
            alert("Disabled effects removed.");
        }

        app.endUndoGroup();
        //alert("Finished!\n " + (useCustomSort ? "" : emptyGone + " empty folder(s)."));
    } catch (err) {
        app.endUndoGroup();
        alert("‼ Script error ‼\n\n" + err.toString() +
              "\n(line " + (err.line || "unknown") + ")");
    }
}

// bind if needed
if (typeof autoSortCompsButton !== "undefined") {
    autoSortCompsButton.onClick = sortProjectFiles;
}



//Duplicate Comp Tool//


duplicateCompButton.onClick = function () {
    app.beginUndoGroup("Duplicate Comp");
    var activeComp = app.project.activeItem;
    if (!(activeComp instanceof CompItem)) {
        alert("Please select a composition.");
        app.endUndoGroup();
        return;
    }

    // Функция для поиска или создания папки
    function getOrCreateFolder(folderName) {
        for (var i = 1; i <= app.project.numItems; i++) {
            var item = app.project.item(i);
            if (item instanceof FolderItem && item.name === folderName) {
                return item;
            }
        }
        return app.project.items.addFolder(folderName);
    }

    // Создаём папку для всех дубликатов: "Duplicate (Имя Композиции)"
    var dupFolder = getOrCreateFolder("Duplicate (" + activeComp.name + ")");
    // Назначаем новый цвет метки для дубликатов (например, 10)
    var newColor = 10;

    // Запускаем рекурсивное дублирование с передачей пустого кэша (объект для хранения уже продублированных композиций)
    var dupComp = duplicateCompRecursively(activeComp, dupFolder, newColor, {});

    // Открываем дублированную композицию в окне Project
    dupComp.openInViewer();

    app.endUndoGroup();
    alert("Composition duplicated successfully.");
};

/**
 * @param {CompItem} compItem - композиция для дублирования.
 * @param {FolderItem} targetFolder - папка, в которую перемещаются все дубликаты.
 * @param {Number} newColor - новый цвет метки для дубликатов.
 * @param {Object} cache - объект для хранения уже продублированных композиций (ключ – compItem.id).
 * @returns {CompItem} - дубликат композиции.
 */
function duplicateCompRecursively(compItem, targetFolder, newColor, cache) {
    if (!cache) { cache = {}; }

    // Если композиция уже была продублирована, возвращаем копию из кэша
    if (cache[compItem.id]) {
        return cache[compItem.id];
    }

    // Атомарно дублируем композицию – так сохраняются все внутренние связи (track matte, parenting и т.п.)
    var dupComp = compItem.duplicate();
    dupComp.label = newColor;
    if (targetFolder) {
        dupComp.parentFolder = targetFolder;
    }

    // Сохраняем продублированную композицию в кэше
    cache[compItem.id] = dupComp;

    // Обходим все слои в продублированной композиции
    for (var i = 1; i <= dupComp.numLayers; i++) {
        var layer = dupComp.layer(i);

        // Если источник слоя – композиция, рекурсивно дублируем её (или берём из кэша, если уже была продублирована)
        if (layer.source instanceof CompItem) {
            var dupNestedComp = duplicateCompRecursively(layer.source, targetFolder, newColor, cache);
            // Заменяем источник слоя на дубликат вложенной композиции
            layer.replaceSource(dupNestedComp, false);
        }
    }
    return dupComp;
}


//// Null Object Tool//

add_null_objects_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var selectedLayers = [];
    for (var i = 1; i <= comp.numLayers; i++) {
        var layer = comp.layer(i);
        if (layer.selected) { selectedLayers.push(layer); }
    }
    if (selectedLayers.length === 0) {
        alert("Please select layers in the active composition.");
        return;
    }

    // Вычисляем среднюю позицию выбранных слоёв (учитывая X, Y и Z)
    var sumX = 0, sumY = 0, sumZ = 0;
    for (var i = 0; i < selectedLayers.length; i++) {
        var pos = selectedLayers[i].property("Position").value;
        sumX += pos[0];
        sumY += pos[1];
        var zVal = (pos.length > 2) ? pos[2] : 0;
        sumZ += zVal;
    }
    var avgPos = [
        sumX / selectedLayers.length,
        sumY / selectedLayers.length,
        sumZ / selectedLayers.length
    ];

    // Проверяем наличие 3D или камеры среди выбранных слоёв
    var is3D = false;
    for (var i = 0; i < selectedLayers.length; i++) {
        if (selectedLayers[i].matchName === "ADBE Camera Layer" || (selectedLayers[i].threeDLayer && selectedLayers[i].threeDLayer === true)) {
            is3D = true;
            break;
        }
    }

    app.beginUndoGroup("Add Null Object for Selected Layers");
    var nullLayer = comp.layers.addNull();
    // Формируем название согласно формату: NULL | (Имя слоя)
    nullLayer.name = "NULL | " + selectedLayers[0].name;

    if (is3D) {
        nullLayer.threeDLayer = true;
        nullLayer.property("Position").setValue(avgPos);
    } else {
        nullLayer.property("Position").setValue([avgPos[0], avgPos[1]]);
    }

    for (var i = 0; i < selectedLayers.length; i++) {
        selectedLayers[i].parent = nullLayer;
    }
    app.endUndoGroup();
};


function getLayerIndices(layersArray) {
    var indices = [];
    for (var i = 0; i < layersArray.length; i++) {
        indices.push(layersArray[i].index);
    }
    return indices;
}

//Track Matte Tool//

add_track_matte_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }

    if (comp.selectedLayers.length === 0) {
        alert("Please select one or more layers.");
        return;
    }

    app.beginUndoGroup("Add Track Matte Layer");
    var solidColor = [1, 1, 1]; // белый цвет

    if (comp.selectedLayers.length > 1) {
        var baseName = comp.selectedLayers[0].name;
        var indices = getLayerIndices(comp.selectedLayers);
        var precomp = comp.layers.precompose(indices, "Precomp (" + baseName + ")", true);
        var matteLayerName = "TRMT (" + baseName + ")";
        var matteLayer = comp.layers.addSolid(solidColor, matteLayerName, comp.width, comp.height, comp.pixelAspect, comp.duration);
        matteLayer.moveBefore(precomp);
        precomp.trackMatteType = TrackMatteType.ALPHA;
    } else {
        var activeLayer = comp.selectedLayers[0];
        var matteLayerName = "TRMT (" + activeLayer.name + ")";
        var matteLayer = comp.layers.addSolid(solidColor, matteLayerName, comp.width, comp.height, comp.pixelAspect, comp.duration);
        matteLayer.moveBefore(activeLayer);
        activeLayer.trackMatteType = TrackMatteType.ALPHA;
    }

    app.endUndoGroup();
};


//
// "Create a New Layer Group" кнопка
//
create_group_layers_button.onClick = function () {
var dialog = new Window("dialog", "Add New Layer Group");
dialog.orientation = "column";
dialog.alignChildren = ["fill", "top"];

// Name + Prefix
var nameAndPrefixPanel = dialog.add("panel", undefined, "Name and Prefix");
nameAndPrefixPanel.orientation = "column";
nameAndPrefixPanel.alignChildren = ["fill", "top"];

var groupNameGroup = nameAndPrefixPanel.add("group");
groupNameGroup.add("statictext", undefined, "Group Name:");
var groupNameInput = groupNameGroup.add("edittext", undefined, "");
groupNameInput.characters = 15;

var prefixGroup = nameAndPrefixPanel.add("group");
prefixGroup.add("statictext", undefined, "Prefix:");
var prefixInput = prefixGroup.add("edittext", undefined, "");
prefixInput.characters = 5;

var autoPrefixGroup = nameAndPrefixPanel.add("group");
autoPrefixGroup.orientation = "row";
autoPrefixGroup.alignChildren = ["left", "center"];
autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
autoPrefixCheckbox.value = true;
prefixInput.enabled = !autoPrefixCheckbox.value;

autoPrefixCheckbox.onClick = function () {
    prefixInput.enabled = !autoPrefixCheckbox.value;
    if (autoPrefixCheckbox.value) {
        if (containsOnlyEnglishLetters(groupNameInput.text)) {
            prefixInput.text = generateUniquePrefix(groupNameInput.text);
        } else {
            autoPrefixCheckbox.value = false;
            prefixInput.enabled = true;
            alert("Auto-prefix generation is disabled for group names containing non-English characters.");
        }
    }
};

groupNameInput.onChanging = function () {
    if (autoPrefixCheckbox.value) {
        if (containsOnlyEnglishLetters(groupNameInput.text)) {
            prefixInput.text = generateUniquePrefix(groupNameInput.text);
        } else {
            autoPrefixCheckbox.value = false;
            prefixInput.enabled = true;
            prefixInput.text = "";
            alert("Auto-prefix generation is disabled for group names containing non-English characters.");
        }
    }
};

// Color Label
var colorLabelPanel = dialog.add("panel", undefined, "Color Label");
colorLabelPanel.orientation = "column";
colorLabelPanel.alignChildren = ["fill", "top"];

var labelColorGroup = colorLabelPanel.add("group");
labelColorGroup.add("statictext", undefined, "Label Color:");
var labelColorDropdown = labelColorGroup.add("dropdownlist", undefined, [
    "None", "Red", "Yellow", "Aqua", "Pink", "Lavender", "Peach", "Sea Foam",
    "Blue", "Green", "Purple", "Orange", "Brown", "Fuchsia", "Cyan", "Sandstone"
]);
labelColorDropdown.selection = 0;
labelColorDropdown.helpTip = "Select a label color for layers in this group";

var disableLabelColorCheckbox = colorLabelPanel.add("checkbox", undefined, "Disable label color assignment");
disableLabelColorCheckbox.value = false;
disableLabelColorCheckbox.helpTip = "Disable automatic label color assignment to layers in this group";
labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
disableLabelColorCheckbox.onClick = function () {
    labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
};

// Volume Presets Checkbox
var volumePresetsPanel = dialog.add("panel", undefined, "Audio Control");
volumePresetsPanel.orientation = "column";
volumePresetsPanel.alignChildren = ["fill", "top"];
var volumePresetsCheckboxGroup = volumePresetsPanel.add("group");
volumePresetsCheckboxGroup.orientation = "row";
volumePresetsCheckboxGroup.alignChildren = ["left", "center"];
volumePresetsCheckboxGroup.add("statictext", undefined, "Disable Volume Presets:");
var disableVolumePresetsCheckbox = volumePresetsCheckboxGroup.add("checkbox", undefined, "");
disableVolumePresetsCheckbox.value = false;
disableVolumePresetsCheckbox.helpTip = "Disable advanced volume presets (only On/Off will be available)";

// Buttons
var buttonsGroup = dialog.add("group");
buttonsGroup.alignment = "center";
var okButton = buttonsGroup.add("button", undefined, "OK");
var cancelButton = buttonsGroup.add("button", undefined, "Cancel");

okButton.onClick = function () {
var groupName = groupNameInput.text;
var prefix = prefixInput.text;
var labelColorIndex = labelColorDropdown.selection ? labelColorDropdown.selection.index : 0;
var disableLabelColor = disableLabelColorCheckbox.value;
var disableVolumePresets = disableVolumePresetsCheckbox.value; // Новое значение

if (groupName === "") {
    alert("Please enter a group name.");
    return;
}
if (prefix === "") {
    if (autoPrefixCheckbox.value) {
        prefix = generateUniquePrefix(groupName);
        prefixInput.text = prefix;
    } else {
        alert("Please enter a prefix.");
        return;
    }
}

createLayerGroupUI(groupName, prefix, labelColorIndex, disableLabelColor, false, false, disableVolumePresets);
dialog.close();
};

cancelButton.onClick = function () {
dialog.close();
};

dialog.center();
dialog.show();
};


/**
 * Проверяет, есть ли в проекте хотя бы один слой с [prefix] и audio
 */
function groupHasAudio(prefix) {
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + prefix + "]") === 0) {
                if (layer instanceof AVLayer && layer.hasAudio) {
                    return true;
                }
            }
        }
    }
    return false;
}

/**
 * Возвращает все композиции из текущего проекта.
 * @returns {CompItem[]} Массив композиций.
 */
function getAllCompositions() {
    // Заглушка: вернёт все композиции в текущем проекте.
    // В реальном скрипте можете добавить фильтры, проверки и т.п.
    var result = [];
    for (var i = 1; i <= app.project.numItems; i++) {
        var item = app.project.item(i);
        if (item instanceof CompItem) {
            result.push(item);
        }
    }
    return result;
}

/**
 * Возвращает список эффектов по проекту (уникальные).
 * При этом в начало списка добавляется "None".
 * @returns {String[]} Массив уникальных имён эффектов, включая "None".
 */
function getAllUniqueEffectsInProject_WithNone() {
    var effectNamesSet = {};
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                // Убираем префикс [XXX], если он есть, чтобы получить "чистое" имя эффекта
                var baseName = eff.name.replace(/^\[[^\]]+\]\s*/, "");
                effectNamesSet[baseName] = true;
            }
        }
    }

    var resultArray = [];
    for (var nm in effectNamesSet) {
        if (effectNamesSet.hasOwnProperty(nm)) {
            resultArray.push(nm);
        }
    }
    resultArray.sort();

    // Добавляем пункт "None" в начало
    resultArray.unshift("None");
    return resultArray;
}
    


// ----------------------------------------------------------------------
// 2) Функции «строительства» кнопок для каждого режима
// ----------------------------------------------------------------------
function buildViewControls(panel, groupData) {
var pfx = groupData.prefix;

// (A) Color Label
var color_label_icon = panel.add("image", undefined, undefined, { name: "color_label_icon_" + pfx });
color_label_icon.preferredSize = [8,28];
setColorLabelButtonIcon(color_label_icon, groupData.labelColorIndex);
groupData.colorLabelButton = color_label_icon;

// Volume
var volumeAudioButton = panel.add("iconbutton", undefined, undefined, {
name: "volume_audio_button_" + pfx, style: "toolbutton"
});
volumeAudioButton.preferredSize = [28,28];
volumeAudioButton.helpTip = "Volume Audio (Off / Min / Normal / High)";
// Стартовая иконка в зависимости от состояния:
var volState = groupData.volumeStates[groupData.currentVolumeIndex];
var volIconMap = {
  off:    volume_off_imgString,
  on:     volume_on_imgString,
  min:    volume_min_imgString,
  normal: volume_normal_imgString,
  high:   volume_high_imgString
};
setButtonIcon(volumeAudioButton, volIconMap[volState], volState);
if (!groupHasAudio(pfx)) {
volumeAudioButton.enabled = false;
volumeAudioButton.helpTip = "No audio layers found in this group.";
}
groupData.volumeAudioButton = volumeAudioButton;
// --- Volume Audio Button ---
volumeAudioButton.onClick = function () {
var p = groupData.prefix;
var states = groupData.volumeStates;
groupData.currentVolumeIndex = (groupData.currentVolumeIndex + 1) % states.length;
var nextState = states[groupData.currentVolumeIndex];
switch (nextState) {
case "off":
setButtonIcon(volumeAudioButton, volume_off_imgString, "volume_off");
break;
case "on":
setButtonIcon(volumeAudioButton, volume_on_imgString, "volume_on");
break;
case "min":
setButtonIcon(volumeAudioButton, volume_min_imgString, "volume_min");
break;
case "normal":
setButtonIcon(volumeAudioButton, volume_normal_imgString, "volume_normal");
break;
case "high":
setButtonIcon(volumeAudioButton, volume_high_imgString, "volume_high");
break;
}
app.beginUndoGroup("Volume " + nextState + " for group " + p);
var comps = getAllCompositions();
var foundAny = false;
for (var c = 0; c < comps.length; c++) {
var comp = comps[c];
for (var l = 1; l <= comp.numLayers; l++) {
var layer = comp.layer(l);
if (layer.name.indexOf("[" + p + "]") === 0 && layer instanceof AVLayer && layer.hasAudio) {
foundAny = true;
switch (nextState) {
    case "off":
        layer.audioEnabled = false;
        break;
    case "on":
        layer.audioEnabled = true;
        break;
    case "min":
        layer.audioEnabled = true;
        var grpMin = layer.property("ADBE Audio Group");
        if (grpMin) {
            var lvlMin = grpMin.property("ADBE Audio Levels");
            if (lvlMin) {
                var cur = lvlMin.value;
                lvlMin.setValue([cur[0] - 11, cur[1] - 11]);
            }
        }
        break;
    case "normal":
        layer.audioEnabled = true;
        var grpNorm = layer.property("ADBE Audio Group");
        if (grpNorm) {
            var lvlNorm = grpNorm.property("ADBE Audio Levels");
            if (lvlNorm) {
                lvlNorm.setValue([0, 0]);
            }
        }
        break;
    case "high":
        layer.audioEnabled = true;
        var grpHigh = layer.property("ADBE Audio Group");
        if (grpHigh) {
            var lvlHigh = grpHigh.property("ADBE Audio Levels");
            if (lvlHigh) {
                lvlHigh.setValue([3, 3]);
            }
        }
        break;
}
}
}
}

if (!foundAny) {
alert("No audio layers found for group [" + p + "]");
}
app.endUndoGroup();
};

// (C) View
var view_button = panel.add("iconbutton", undefined, undefined, {
name: "view_button_" + pfx, style: "toolbutton"
});
view_button.preferredSize = [28,28];
view_button.helpTip = "Toggle visibility of layers in this group across all compositions";
setViewButtonIcon(
    view_button,
    groupData.viewState
      ? view_button_on_imgString
      : view_button_off_imgString
  );
groupData.viewButton = view_button;
// --- View Button ---
view_button.onClick = function () {
var p = groupData.prefix;          
var n = groupData.name;                 
var v = groupData.viewState = !groupData.viewState;
setViewButtonIcon(view_button, v ? view_button_on_imgString : view_button_off_imgString);
app.beginUndoGroup("Toggle View for " + n);
var comps = getAllCompositions(), found = false;
for (var c = 0; c < comps.length; c++) {
    for (var l = 1; l <= comps[c].numLayers; l++) {
        var layer = comps[c].layer(l);
        if (layer.name.indexOf("[" + p + "]") === 0) {
            layer.enabled = v;
            found = true;
        }
    }
}
if (!found) alert("Layers for group '" + n + "' not found.");
app.endUndoGroup();
};

// (D) Solo
var solo_button = panel.add("iconbutton", undefined, undefined, {
name: "solo_button_" + pfx, style: "toolbutton"
});
solo_button.preferredSize = [28,28];
solo_button.helpTip = "Solo this group: show only layers in this group and hide all others";
setSoloButtonIcon(
    solo_button,
    groupData.soloState
      ? solo_on_button_imgString
      : solo_off_button_imgString
  );
groupData.soloButton = solo_button;
//Solo button
solo_button.onClick = function () {
var p = groupData.prefix;
var n = groupData.name;
groupData.soloState = !groupData.soloState;
setSoloButtonIcon(
solo_button,
groupData.soloState ? solo_on_button_imgString : solo_off_button_imgString
);
app.beginUndoGroup((groupData.soloState ? "Solo On: " : "Solo Off: ") + n);
var comps = getAllCompositions();

if (groupData.soloState) {
var pre = [];
for (var c = 0; c < comps.length; c++) {
    var comp = comps[c];
    for (var l = 1; l <= comp.numLayers; l++) {
        var layer = comp.layer(l);
        var isThis = layer.name.indexOf("[" + p + "]") === 0;
        // save original
        pre.push({
            layer:    layer,
            enabled:  layer.enabled,
            shy:      layer.shy
        });
        if (isThis) {
            layer.enabled = true;
            layer.shy     = false;
        } else {
            layer.enabled = false;
            layer.shy     = true;
        }
    }
}
groupData.preSoloStates = pre;

} else {
// — SOLO OFF — restore all saved states
var pre = groupData.preSoloStates || [];
for (var i = 0; i < pre.length; i++) {
    var st = pre[i];
    if (st.layer) {
        st.layer.enabled = st.enabled;
        st.layer.shy     = st.shy;
    }
}
groupData.preSoloStates = null;
}

app.endUndoGroup();
};

// (E) Hide
var hide_button = panel.add("iconbutton", undefined, undefined, {
name: "hide_button_" + pfx, style: "toolbutton"
});
hide_button.preferredSize = [28,28];
hide_button.helpTip = "Toggle hide (Shy) for layers in this group without disabling them";
setHideButtonIcon(
    hide_button,
    groupData.hideState
      ? hide_on_button_imgString
      : hide_off_button_imgString
  );
groupData.hideButton = hide_button;

// --- Hide Button ---
hide_button.onClick = function () {
var p = groupData.prefix;
var n = groupData.name;

// переключаем состояние
groupData.hideState = !groupData.hideState;
setHideButtonIcon(hide_button,
    groupData.hideState ? hide_on_button_imgString : hide_off_button_imgString
);

app.beginUndoGroup("Toggle Hide for " + n);

var comps = getAllCompositions();
var found = false;

for (var c = 0; c < comps.length; c++) {
    var comp = comps[c];
    var inThisComp = false;

    for (var l = 1; l <= comp.numLayers; l++) {
        var layer = comp.layer(l);
        if (layer.name.indexOf("[" + p + "]") === 0) {
            layer.shy = groupData.hideState;
            found = true;
            inThisComp = true;
        }
    }
    // если хоть один слой есть — применяем флаг shy ко всей композиции
    if (inThisComp) {
        comp.hideShyLayers = groupData.hideState;
    }
}

if (!found) {
    alert("Layers for group '" + n + "' not found in any composition.");
}

app.endUndoGroup();
};

// Divider + Add
addDivider(panel);
var add_layer_button = panel.add("iconbutton", undefined, File.decode(add_layer_button_imgString), {
name: "add_layer_button_" + pfx, style: "toolbutton"
});
add_layer_button.preferredSize = [60,30];
add_layer_button.helpTip = "Add selected layers to group: " + groupData.name;
groupData.addButton = add_layer_button;
//Add Layer Button
add_layer_button.onClick = function() {
var p = groupData.prefix;
app.beginUndoGroup("Add Layers to " + groupData.name);
var layers = getSelectedLayersInActiveComp();
for (var i = 0; i < layers.length; i++) {
    var layer = layers[i];
    var base = layer.name.replace(/^\[.*?\]\s*/, "");
    layer.name = "[" + p + "] " + base;
    if (!groupData.disableLabelColor) layer.label = groupData.labelColorIndex;
    if (groupData.guideCheckbox.value) layer.guideLayer = true;
    if (groupData.lockCheckbox.value) layer.locked = true;
    layer.enabled = groupData.viewState;
}
app.endUndoGroup();

// обновляем доступность аудио-кнопки по новому префиксу
var hasAudio = groupHasAudio(p);
volumeAudioButton.enabled = hasAudio;
volumeAudioButton.helpTip = hasAudio
    ? "Volume Audio (Off / Min / Normal / High)"
    : "No audio layers found in this group.";
};

}

function buildToolsControls(panel, groupData) {
var pfx = groupData.prefix;

// (A) Color Label
var color_label_icon = panel.add("image", undefined, undefined, { name: "color_label_icon_" + pfx });
color_label_icon.preferredSize = [8,28];
setColorLabelButtonIcon(color_label_icon, groupData.labelColorIndex);
groupData.colorLabelButton = color_label_icon;

// Viewer
var viewer_button = panel.add("iconbutton", undefined, File.decode(group_viewer_imgString), {
name: "viewer_button_" + pfx, style: "toolbutton"
});
viewer_button.preferredSize = [28,28];
viewer_button.helpTip = "Open Group Viewer";
groupData.viewerButton = viewer_button;
viewer_button.onClick = function() {
    showGroupCompositions(groupData);
};


//GROUP VIEWER///

/**
 * Основная функция, которую вы вызываете.
 * @param {Object} groupData Параметры группы:
 *                          {name: "...", prefix: "..."}
 */
function showGroupCompositions(groupData) {
    var groupName = groupData.name;    // напр. "MyGroup"
    var groupPrefix = groupData.prefix;  // напр. "LR"
    
    var comps = getAllCompositions();
    var compsWithGroup = [];
    var allEffectsFromAllComps = [];
    
    // 1) Сканируем проект, собираем все comps, где есть слои с [groupPrefix]
    for (var c = 0; c < comps.length; c++) {
    var comp = comps[c];
    var layerCount = 0;
    var layerNamesArray = [];
    var layerEffectsArray = [];
    
    for (var l = 1; l <= comp.numLayers; l++) {
    var layer = comp.layer(l);
    
    // Проверяем, начинается ли имя слоя с "[<prefix>]"
    if (layer.name.indexOf("[" + groupPrefix + "]") === 0) {
        layerCount++;
        layerNamesArray.push(layer.name);
    
        // Эффекты этого слоя
        var effectGroup = layer.property("ADBE Effect Parade");
        var effectNames = [];
        if (effectGroup && effectGroup.numProperties > 0) {
            for (var e = 1; e <= effectGroup.numProperties; e++) {
                var effectProp = effectGroup.property(e);
                if (effectProp) {
                    effectNames.push(effectProp.name);
    
                    // Сохраняем в общий массив (для списка All Effects)
                    allEffectsFromAllComps.push({
                        name: effectProp.name,
                        comp: comp,
                        layerIndex: l, // 1-based
                        effectProp: effectProp,
                        isEnabled: effectProp.enabled
                    });
                }
            }
        }
        layerEffectsArray.push(effectNames);
    }
    }
    
    // Если в этой компе были слои с группой prefix
    if (layerCount > 0) {
    compsWithGroup.push({
        comp: comp,
        layerCount: layerCount,
        layerNames: layerNamesArray,
        layerEffects: layerEffectsArray
    });
    }
    }
    
    // Если ни одной композиции не найдено, завершаем
    if (compsWithGroup.length === 0) {
    alert("No compositions containing the group '" + groupName + "'");
    return;
    }
    
    var dialog = new Window("dialog");
    dialog.text = ("Group Viewer: " + groupData.name);
    dialog.orientation = "column";
    dialog.alignChildren = ["left", "top"];
    dialog.spacing = 10;
    dialog.margins = 16;
    
    var head_group = dialog.add("group");
    head_group.orientation = "row";
    head_group.alignChildren = ["left", "fill"];
    head_group.spacing = 192;
    
    // (1) Группа сортировки
    var sort_group = head_group.add("group");
    sort_group.orientation = "row";
    sort_group.alignChildren = ["center", "center"];
    sort_group.spacing = 18;
    
    sort_group.add("statictext", undefined, "Sort by layer count:");
    var Sort_array = ["Ascending", "Descending"];
    var Sort = sort_group.add("dropdownlist", undefined, undefined, { items: Sort_array });
    Sort.selection = 0; // Ascending
    
    // (2) Группа закрытия окна
    var close_group = head_group.add("group");
    close_group.orientation = "row";
    close_group.alignChildren = ["left", "fill"];
    close_group.spacing = 10;
    close_group.margins = [300, 0, 0, 0];
    
    var close_button = close_group.add(
    "iconbutton",
    undefined,
    File.decode(close_button_imgString),
    { style: "toolbutton" }
    );
    close_button.text = "Close";
    close_button.preferredSize.width = 98;
    
    var main_group = dialog.add("group");
    main_group.orientation = "row";
    main_group.alignChildren = ["left", "center"];
    main_group.spacing = 13;
    main_group.margins = [0, 0, 0, 8];
    
    var All_Effects_panel = main_group.add("panel");
    All_Effects_panel.text = "All Effects Group";
    All_Effects_panel.orientation = "column";
    All_Effects_panel.alignChildren = ["left", "top"];
    All_Effects_panel.spacing = 10;
    All_Effects_panel.margins = 10;
    All_Effects_panel.alignment = ["left", "top"];
    
    var All_effects = All_Effects_panel.add("group");
    All_effects.orientation = "column";
    All_effects.alignChildren = ["left", "top"];
    All_effects.spacing = 10;
    All_effects.margins = [0, 0, 0, 0];
    
    var All_Effects_list = All_effects.add("listbox", undefined, undefined);
    All_Effects_list.preferredSize.width = 200;
    All_Effects_list.preferredSize.height = 329;
    
    var disable_effect_button = All_effects.add(
    "iconbutton",
    undefined,
    File.decode(disable_effect_button_imgString),
    { style: "toolbutton" }
    );
    disable_effect_button.text = "Disable Select Effect";
    disable_effect_button.preferredSize.width = 193;
    disable_effect_button.preferredSize.height = 39;
    disable_effect_button.alignment = ["fill", "top"];
    
    var compositions_panel = main_group.add("panel");
    compositions_panel.text = "Compositions Group";
    compositions_panel.orientation = "column";
    compositions_panel.alignChildren = ["left", "top"];
    compositions_panel.spacing = 10;
    compositions_panel.margins = 10;
    compositions_panel.alignment = ["left", "top"];
    
    var compositions_group = compositions_panel.add("group");
    compositions_group.orientation = "column";
    compositions_group.alignChildren = ["left", "top"];
    compositions_group.spacing = 10;
    compositions_group.margins = [0, 0, 0, 0];
    
    var compositions_list = compositions_group.add("listbox", undefined, undefined);
    compositions_list.preferredSize.width = 246;
    compositions_list.preferredSize.height = 328;
    
    var open_selected_comp_button = compositions_group.add(
    "iconbutton",
    undefined,
    File.decode(open_selected_comp_button_imgString),
    { style: "toolbutton" }
    );
    open_selected_comp_button.text = "Open Selected Compositions";
    open_selected_comp_button.preferredSize.width = 240;
    open_selected_comp_button.preferredSize.height = 39;
    open_selected_comp_button.alignment = ["center", "top"];
    
    var Effects_and_Layers_Group = main_group.add("panel");
    Effects_and_Layers_Group.text = "Effects and Layers";
    Effects_and_Layers_Group.orientation = "column";
    Effects_and_Layers_Group.alignChildren = ["left", "top"];
    Effects_and_Layers_Group.spacing = 10;
    Effects_and_Layers_Group.margins = 10;
    Effects_and_Layers_Group.alignment = ["left", "top"];
    
    var Effects_and_layers_group = Effects_and_Layers_Group.add("group");
    Effects_and_layers_group.orientation = "column";
    Effects_and_layers_group.alignChildren = ["left", "top"];
    Effects_and_layers_group.spacing = 10;
    Effects_and_layers_group.margins = [0, 0, 0, 0];
    
    var layers_text = Effects_and_layers_group.add("statictext", undefined, "Layers");
    var layers_list = Effects_and_layers_group.add("listbox", undefined, undefined);
    layers_list.preferredSize.width = 250;
    layers_list.preferredSize.height = 136;
    
    var Effects_text = Effects_and_layers_group.add("statictext", undefined, "Effects");
    var effects_layer_list = Effects_and_layers_group.add("listbox", undefined, undefined);
    effects_layer_list.preferredSize.width = 250;
    effects_layer_list.preferredSize.height = 130;
    
    // Кнопки FFX (import/export)
    var ffx_button = Effects_and_layers_group.add("group");
    ffx_button.orientation = "row";
    ffx_button.alignChildren = ["center", "center"];
    ffx_button.spacing = 10;
    
    var import_ffx = ffx_button.add("iconbutton", undefined, File.decode(import_ffx_imgString), { style: "toolbutton" });
    import_ffx.text = "Import FFX";
    import_ffx.preferredSize.width = 120;
    import_ffx.preferredSize.height = 39;
    import_ffx.enabled = false; // по умолчанию отключена
    
    var export_ffx = ffx_button.add("iconbutton", undefined, File.decode(export_ffx_imgString), { style: "toolbutton" });
    export_ffx.text = "Export FFX";
    export_ffx.preferredSize.width = 120;
    export_ffx.preferredSize.height = 40;
    export_ffx.enabled = false; // по умолчанию отключена
    
    /**
     * Сортирует массив compsWithGroup по количеству слоёв (возр/убыв).
     * @param {Array} compsArray массив объектов {comp, layerCount, ...}
     * @param {String} order "Ascending" или "Descending".
     */
    function sortCompositions(compsArray, order) {
    compsArray.sort(function (a, b) {
    if (order === "Descending") {
        return b.layerCount - a.layerCount;
    } else {
        return a.layerCount - b.layerCount;
    }
    });
    }
    
    /**
     * Заполнение списка «Compositions» (с учётом текущего массива compsWithGroup).
     */
    function fillCompositionsList() {
    compositions_list.removeAll();
    for (var i = 0; i < compsWithGroup.length; i++) {
    var compName = compsWithGroup[i].comp.name;
    var layerCount = compsWithGroup[i].layerCount;
    var txt = compName + " [" + layerCount + " layer" + (layerCount !== 1 ? "s" : "") + "]";
    compositions_list.add("item", txt);
    }
    }
    
    /**
     * Группируем одинаковые эффекты, чтобы выводить в списке All_Effects_list одной строкой.
     */
    function fillAllEffectsList() {
    All_Effects_list.removeAll();
    
    var effectGroups = {}; // ключ = имя эффекта, значение = массив объектов effObj
    
    for (var i = 0; i < allEffectsFromAllComps.length; i++) {
    var effObj = allEffectsFromAllComps[i];
    var effName = effObj.name;
    
    if (!effectGroups[effName]) {
        effectGroups[effName] = [];
    }
    effectGroups[effName].push(effObj);
    }
    
    for (var groupName in effectGroups) {
    if (effectGroups.hasOwnProperty(groupName)) {
        var groupArray = effectGroups[groupName];
    
        // Проверяем, выключены ли все эффекты (allDisabled)
        var allDisabled = true;
        for (var k = 0; k < groupArray.length; k++) {
            if (groupArray[k].isEnabled) {
                allDisabled = false;
                break;
            }
        }
    
        var count = groupArray.length;
        var itemLabel = groupName + " (" + count + ")" + (allDisabled ? " | Off" : "");
        var newItem = All_Effects_list.add("item", itemLabel);
    
        newItem.__effectDataGroup = groupArray;
        newItem.__groupName = groupName;
    }
    }
    }
    
    // Первоначальная инициализация (сортируем + выводим)
    sortCompositions(compsWithGroup, Sort.selection.text);
    fillCompositionsList();
    fillAllEffectsList();
    
    // (C1) Обработчик: сортировка композиций (DropDown "Ascending"/"Descending")
    Sort.onChange = function () {
    sortCompositions(compsWithGroup, Sort.selection.text);
    fillCompositionsList();
    layers_list.removeAll();
    effects_layer_list.removeAll();
    };
    
    // (C2) Обработчик: кнопка «Disable Select Effect» (переключает On/Off у выбранной группы эффектов)
    disable_effect_button.onClick = function () {
    var selItem = All_Effects_list.selection;
    if (!selItem) {
    alert("Select an effect group from 'All Effects' first!");
    return;
    }
    
    var effDataGroup = selItem.__effectDataGroup;
    if (!effDataGroup || effDataGroup.length === 0) {
    alert("No effect data group found!");
    return;
    }
    
    // Проверяем, есть ли хотя бы один включённый эффект
    var anyEnabled = false;
    for (var i = 0; i < effDataGroup.length; i++) {
    if (effDataGroup[i].effectProp.enabled) {
        anyEnabled = true;
        break;
    }
    }
    
    var count = effDataGroup.length;
    if (anyEnabled) {
    // Выключаем все
    for (var j = 0; j < effDataGroup.length; j++) {
        effDataGroup[j].effectProp.enabled = false;
        effDataGroup[j].isEnabled = false;
    }
    selItem.text = selItem.__groupName + " (" + count + ") | Off";
    disable_effect_button.text = "Enable Select Effect";
    } else {
    // Включаем все
    for (var j = 0; j < effDataGroup.length; j++) {
        effDataGroup[j].effectProp.enabled = true;
        effDataGroup[j].isEnabled = true;
    }
    selItem.text = selItem.__groupName + " (" + count + ")";
    disable_effect_button.text = "Disable Select Effect";
    }
    };
    
    // При смене выделения в списке «All Effects» — меняем надпись кнопки disable_effect_button
    All_Effects_list.onChange = function () {
    var selItem = All_Effects_list.selection;
    if (!selItem) {
    disable_effect_button.text = "Disable / Enable";
    return;
    }
    var effDataGroup = selItem.__effectDataGroup;
    if (!effDataGroup || effDataGroup.length === 0) {
    disable_effect_button.text = "Disable / Enable";
    return;
    }
    
    // Проверяем, есть ли включённый
    var anyEnabled = false;
    for (var i = 0; i < effDataGroup.length; i++) {
    if (effDataGroup[i].effectProp.enabled) {
        anyEnabled = true;
        break;
    }
    }
    
    disable_effect_button.text = anyEnabled ? "Disable Select Effect" : "Enable Select Effect";
    };
    
    // (C3) Обработка выбора композиции — заполнить список слоёв
    compositions_list.onChange = function () {
    layers_list.removeAll();
    effects_layer_list.removeAll();
    
    var selItem = compositions_list.selection;
    if (!selItem) return;
    
    // Из строки "CompName [5 layers]" берём CompName
    var compName = selItem.text.split(" [")[0];
    
    var foundItem = null;
    for (var i = 0; i < compsWithGroup.length; i++) {
    if (compsWithGroup[i].comp.name === compName) {
        foundItem = compsWithGroup[i];
        break;
    }
    }
    if (!foundItem) return;
    
    // Заполняем список слоёв
    for (var l = 0; l < foundItem.layerNames.length; l++) {
    layers_list.add("item", foundItem.layerNames[l]);
    }
    };
    
    // (C4) Обработка выбора слоя — заполняем список «Effects»
    layers_list.onChange = function () {
    effects_layer_list.removeAll();
    
    var compSel = compositions_list.selection;
    var layerSel = layers_list.selection;
    if (!compSel || !layerSel) return;
    
    var compName = compSel.text.split(" [")[0];
    var foundItem = null;
    for (var i = 0; i < compsWithGroup.length; i++) {
    if (compsWithGroup[i].comp.name === compName) {
        foundItem = compsWithGroup[i];
        break;
    }
    }
    if (!foundItem) return;
    
    var layerIndexInArray = layerSel.index;
    var effectNamesForLayer = foundItem.layerEffects[layerIndexInArray];
    if (!effectNamesForLayer) return;
    
    for (var e = 0; e < effectNamesForLayer.length; e++) {
    effects_layer_list.add("item", effectNamesForLayer[e]);
    }
    };
    
    // Кнопка "Open Selected Composition"
    open_selected_comp_button.onClick = function () {
    var sel = compositions_list.selection;
    if (!sel) {
    alert("Select a composition first!");
    return;
    }
    var compName = sel.text.split(" [")[0];
    for (var i = 0; i < compsWithGroup.length; i++) {
    var compObj = compsWithGroup[i].comp;
    if (compObj && compObj.name === compName) {
        compObj.openInViewer();
        break;
    }
    }
    };
    
    // (D3) Кнопка закрытия основного окна
    close_button.onClick = function () {
    dialog.close();
    };
    
    // Показываем диалог
    dialog.center();
    dialog.show();
    }
    
 // 1) Инициализация кнопки Pre-compose
var precompose_button = panel.add(
    "iconbutton",
    undefined,
    File.decode(pre_comps_imgString),
    { name: "precompose_button_" + pfx, style: "toolbutton" }
);
precompose_button.preferredSize = [28, 28];
precompose_button.helpTip = "Pre-compose this group";
groupData.precomposeButton = precompose_button;

// 2) При клике строим и показываем новый модальный диалог
precompose_button.onClick = function() {
    // 2.1) Создаём окно-диалог
    var dlg = new Window("dialog", "Pre-compose: " + groupData.name);
    dlg.orientation   = "column";
    dlg.alignChildren = ["fill", "top"];
    dlg.spacing       = 10;
    dlg.margins       = 16;

    // 2.2) Текст описания
    var About = dlg.add("statictext", undefined,
        "Pre-compose works only on active composition."
    );
    About.graphics.foregroundColor = About.graphics.newPen(
        About.graphics.PenType.SOLID_COLOR, [0.56,0.73,0.94], 1
    );
    About.justify   = "center";
    About.alignment = ["center", "top"];

    // 2.3) Группа полей с префиксом и именем
    var grp = dlg.add("group");
    grp.orientation   = "row";
    grp.alignChildren = ["left", "center"];
    grp.spacing       = 10;

    grp.add("statictext", undefined, "Prefix:");
    var prefixField = grp.add("edittext", undefined, groupData.prefix);
    prefixField.enabled = false;
    prefixField.preferredSize.width = 50;

    grp.add("statictext", undefined, "Name:");
    var nameField = grp.add("edittext", undefined,
        "Pre-Compose: " + groupData.name
    );
    nameField.preferredSize.width = 200;

    var Add_Prefix = grp.add("dropdownlist", undefined, ["None", "Numbers"]);
    Add_Prefix.selection = 0;

    // 2.4) Чекбокс Collapse Transformations
    var collapseCheckbox = dlg.add("checkbox", undefined,
        "Apply Collapse Transformations"
    );
    collapseCheckbox.value = false;

    // 2.5) Радиокнопки для варианта переноса атрибутов
    var sel = dlg.add("group");
    sel.orientation   = "column";
    sel.alignChildren = ["left", "top"];
    sel.spacing       = 5;
    var rb1 = sel.add("radiobutton", undefined,
        "Leave all attributes in composition"
    );
    var rb2 = sel.add("radiobutton", undefined,
        "Move all attributes into new composition"
    );
    rb2.value = true;

    // 2.6) Кнопки Cancel / Apply
    var btns = dlg.add("group");
    btns.alignment = "right";
    var cancel_btn = btns.add("button", undefined, "Cancel");
    var apply_btn  = btns.add("button", undefined, "Apply");

    cancel_btn.onClick = function() {
        dlg.close();
    };

    apply_btn.onClick = function() {
        var cp       = groupData.prefix;
        var newName  = nameField.text;
        var useNums  = (Add_Prefix.selection.text === "Numbers");
        var collapse = collapseCheckbox.value;
        var moveAll  = rb2.value;
        var comp     = app.project.activeItem;

        if (!(comp instanceof CompItem)) {
            alert("Open a composition first!");
            return;
        }

        // собираем индексы слоёв с префиксом
        var idxs = [];
        for (var i = 1; i <= comp.numLayers; i++) {
            if (comp.layer(i).name.indexOf("[" + cp + "]") === 0) {
                idxs.push(i);
            }
        }
        if (!idxs.length) {
            alert("No prefixed layers [" + cp + "]");
            return;
        }
        idxs.sort(function(a, b){ return b - a; });

        app.beginUndoGroup("Pre-compose " + groupData.name);
        var counter = 1;
        for (var k = 0; k < idxs.length; k++) {
            comp.layers.precompose(
                [ idxs[k] ],
                "[" + cp + "] " + newName +
                  (useNums ? (("0" + counter).slice(-2) + "_") : ""),
                moveAll
            );
            var newLayer = comp.layer(idxs[k]);
            if (collapse) newLayer.collapseTransformation = true;
            if (!groupData.disableLabelColor) {
                newLayer.label = groupData.labelColorIndex;
            }
            counter++;
        }
        app.endUndoGroup();
        dlg.close();
    };

    // 2.7) Центрируем и показываем модально
    dlg.center();
    dlg.show();
};

// Rename
var rename_button = panel.add("iconbutton", undefined, File.decode(rename_imgString), {
name: "rename_button_" + pfx, style: "toolbutton"
});
rename_button.preferredSize = [28,28];
rename_button.helpTip = "Rename layers in this group";
groupData.renameButton = rename_button;


// --- Rename Layers Tool ---
rename_button.onClick = function () {
    var cp = groupData.prefix;
    var cn = groupData.name;
    
    // Открываем диалог переименования
    var renameDialog = new Window("dialog", "Rename Layers In Group: " + cn);
    renameDialog.orientation = "column";
    renameDialog.alignChildren = ["fill","top"];
    renameDialog.margins = 16;
    
    // Поля ввода
    var fields = renameDialog.add("group");
    fields.orientation = "row";
    fields.add("statictext", undefined, "Prefix:");
    var prefixField = fields.add("edittext", undefined, "[" + cp + "]");
    prefixField.enabled = false;
    fields.add("statictext", undefined, "New Name:");
    var newNameField = fields.add("edittext", undefined, "");
    newNameField.characters = 20;
    
    var useGroupName = renameDialog.add("checkbox", undefined, "Use Group Name for Rename");
    useGroupName.onClick = function() {
    newNameField.text = useGroupName.value ? cn : "";
    };
    
    // Кнопки
    var btns = renameDialog.add("group");
    btns.alignment = "right";
    var okBtn     = btns.add("button", undefined, "OK");
    var cancelBtn = btns.add("button", undefined, "Cancel");
    
    okBtn.onClick = function () {
    var newName = newNameField.text;
    if (!newName) {
        alert("Please enter a new name.");
        return;
    }
    app.beginUndoGroup("Rename Layers In Group " + cn);
    var comps = getAllCompositions();
    for (var i = 0; i < comps.length; i++) {
        var comp = comps[i];
        for (var j = 1; j <= comp.numLayers; j++) {
            var layer = comp.layer(j);
            if (layer.name.indexOf("[" + cp + "]") === 0) {
                layer.name = "[" + cp + "] " + newName;
            }
        }
    }
    app.endUndoGroup();
    renameDialog.close();
    };
    
    cancelBtn.onClick = function () {
    renameDialog.close();
    };
    
    renameDialog.center();
    renameDialog.show();
    };
    

// Divider + Add/Edit
addDivider(panel);

// Delete
var delete_group_layers_button = panel.add("iconbutton", undefined, File.decode(delete_group_layers_button_imgString), {
name: "delete_group_layers_button_" + pfx, style: "toolbutton"
});
delete_group_layers_button.preferredSize = [95,30];
delete_group_layers_button.text = "DLT";
delete_group_layers_button.helpTip = "Delete this group";
groupData.deleteButton = delete_group_layers_button;

delete_group_layers_button.onClick = function() {
    var g = groupData;  
    // окно подтверждения на английском
    if (!confirm("Are you sure you want to delete the group '" + g.name + "'?")) {
        return;
    }

    app.beginUndoGroup("Delete Layer Group " + g.name);

    // удалить префикс у слоёв
    var layersFound = false;
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = comp.numLayers; l >= 1; l--) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + g.prefix + "]") === 0) {
                layer.name = layer.name.replace("[" + g.prefix + "] ", "");
                layer.label = getDefaultLabelForLayer(layer);
                layersFound = true;
            }
        }
    }
    // если нужно — предупреждаем
    if (!layersFound) {
        alert("Layers for group '" + g.name + "' not found in any composition.");
    }

    // удаляем UI-панель и из массива
    tab_layers.remove(g.panel);
    for (var i = 0; i < layerGroups.length; i++) {
        if (layerGroups[i] === g) {
            layerGroups.splice(i, 1);
            break;
        }
    }

    app.endUndoGroup();

    // обновляем оставшиеся группы в том же режиме
    updateAllGroups(currentMode);
    palette.layout.layout(true);
    palette.layout.resize();
};
}

function buildModeControls(panel, groupData) {
var pfx = groupData.prefix;

// (A) Color Label
var color_label_icon = panel.add("image", undefined, undefined, { name: "color_label_icon_" + pfx });
color_label_icon.preferredSize = [8,28];
setColorLabelButtonIcon(color_label_icon, groupData.labelColorIndex);
groupData.colorLabelButton = color_label_icon;

// Lock
var lock_button = panel.add("iconbutton", undefined, undefined, {
name: "lock_button_" + pfx, style: "toolbutton"
});
lock_button.preferredSize = [28,28];
lock_button.helpTip = "Toggle Lock";
setLockButtonIcon(
    lock_button,
    groupData.lockState
      ? lock_on_imgString
      : lock_off_imgString
  );
groupData.lockButton = lock_button;
// --- Lock Button ---
lock_button.onClick = function () {
var p = groupData.prefix, n = groupData.name;
groupData.lockState = !groupData.lockState;
setLockButtonIcon(
lock_button,
groupData.lockState ? lock_on_imgString : lock_off_imgString
);

app.beginUndoGroup("Toggle Lock for " + n);
var comps = getAllCompositions();
for (var c = 0; c < comps.length; c++) {
var comp = comps[c];
for (var l = 1; l <= comp.numLayers; l++) {
var ly = comp.layer(l);
if (ly.name.indexOf("[" + p + "]") === 0) ly.locked = groupData.lockState;
}
}
app.endUndoGroup();
};

// Collapse
var collapse_button = panel.add("iconbutton", undefined, undefined, {
name: "collapse_button_" + pfx, style: "toolbutton"
});
collapse_button.preferredSize = [28,28];
collapse_button.helpTip = "Toggle Collapse Transformations";
setCollapseTransformationsButtonIcon(
    collapse_button,
    groupData.collapseTransformationsState
      ? collapse_transformation_on_imgString
      : collapse_transformation_off_imgString
  );
groupData.collapseButton = collapse_button;
// --- Collapse Transformations Button ---
collapse_button.onClick = function () {
var p = groupData.prefix, n = groupData.name;
groupData.collapseTransformationsState = !groupData.collapseTransformationsState;
setCollapseTransformationsButtonIcon(
collapse_button,
groupData.collapseTransformationsState ?
collapse_transformation_on_imgString :
collapse_transformation_off_imgString
);

app.beginUndoGroup("Toggle Collapse for " + n);
var comps = getAllCompositions(), found = false;
for (var c = 0; c < comps.length; c++) {
var comp = comps[c];
for (var l = 1; l <= comp.numLayers; l++) {
var ly = comp.layer(l);
if (ly instanceof AVLayer && ly.name.indexOf("[" + p + "]") === 0) {
    ly.collapseTransformation = groupData.collapseTransformationsState;
    found = true;
}
}
}
if (!found) alert("Group [" + p + "] not found.");
app.endUndoGroup();
};

// Motion Blur
var motion_button = panel.add("iconbutton", undefined, undefined, {
name: "motion_button_" + pfx, style: "toolbutton"
});
motion_button.preferredSize = [28,28];
motion_button.helpTip = "Toggle Motion Blur";
setMotionBlurButtonIcon(
    motion_button,
    groupData.motionBlurState
      ? motion_on_imgString
      : motion_off_imgString
  );
groupData.motionButton = motion_button;
// --- Motion Blur Button ---
motion_button.onClick = function () {
var p = groupData.prefix, n = groupData.name;
groupData.motionBlurState = !groupData.motionBlurState;
setMotionBlurButtonIcon(
motion_button,
groupData.motionBlurState ? motion_on_imgString : motion_off_imgString
);

app.beginUndoGroup("Toggle Motion Blur for " + n);
var comps = getAllCompositions();
for (var c = 0; c < comps.length; c++) {
var comp = comps[c];
for (var l = 1; l <= comp.numLayers; l++) {
var ly = comp.layer(l);
if (ly instanceof AVLayer && ly.name.indexOf("[" + p + "]") === 0) {
    ly.motionBlur = groupData.motionBlurState;
}
}
}
app.endUndoGroup();
};


// 3D Layer
var layer3D_button = panel.add("iconbutton", undefined, undefined, {
name: "layer3D_button_" + pfx, style: "toolbutton"
});
layer3D_button.preferredSize = [28,28];
layer3D_button.helpTip = "Toggle 3-D Layer";
set3DLayerButtonIcon(
    layer3D_button,
    groupData.threeDState
      ? layer_3d_on_imgString
      : layer_3d_off_imgString
  );
groupData.layer3DButton = layer3D_button;
// --- 3D Layer Button ---
layer3D_button.onClick = function () {
var p = groupData.prefix, n = groupData.name;
groupData.threeDState = !groupData.threeDState;
set3DLayerButtonIcon(
layer3D_button,
groupData.threeDState ? layer_3d_on_imgString : layer_3d_off_imgString
);

app.beginUndoGroup("Toggle 3-D Layer for " + n);
var comps = getAllCompositions();
for (var c = 0; c < comps.length; c++) {
var comp = comps[c];
for (var l = 1; l <= comp.numLayers; l++) {
var ly = comp.layer(l);
if (ly instanceof AVLayer && ly.name.indexOf("[" + p + "]") === 0) {
    ly.threeDLayer = groupData.threeDState;
}
}
}
app.endUndoGroup();
};

addDivider(panel);

var edit_group_layers_button = panel.add("iconbutton", undefined, File.decode(edit_group_layers_button_imgString), {
name: "edit_group_layers_button_" + pfx, style: "toolbutton"
});
edit_group_layers_button.preferredSize = [60,30];
edit_group_layers_button.helpTip = "Rename and settings...";
groupData.editButton = edit_group_layers_button;



// Setting layer group////

edit_group_layers_button.onClick = function () {
    // Забираем из groupData всё, что нужно
    var groupName   = groupData.name;
    var groupPrefix = groupData.prefix;
    var groupPanel  = groupData.panel;    // чтобы потом обновить заголовок кнопки


    var dialog = new Window("dialog", "Settings Layer Group: " + groupName);
    dialog.orientation = "column";
    dialog.alignChildren = ["fill", "top"];
    dialog.spacing = 10;
    dialog.margins = 10;
    
    // Основной контейнер с двумя колонками
    var mainGroup = dialog.add("group");
    mainGroup.orientation = "row";
    mainGroup.alignChildren = ["fill", "top"];
    mainGroup.spacing = 10;
    
    // Левая колонка: Name & Prefix, Color Label, Audio Control
    var leftColumn = mainGroup.add("group");
    leftColumn.orientation = "column";
    leftColumn.alignChildren = ["fill", "top"];
    leftColumn.spacing = 10;
    
    // --- Панель: Name and Prefix ---
    var namePrefixPanel = leftColumn.add("panel", undefined, "Name and Prefix");
    namePrefixPanel.orientation = "column";
    namePrefixPanel.alignChildren = ["fill", "top"];
    namePrefixPanel.margins = [10, 15, 10, 10];
    
    var groupNameGroup = namePrefixPanel.add("group");
    groupNameGroup.add("statictext", undefined, "Group Name:");
    var groupNameInput = groupNameGroup.add("edittext", undefined, groupData.name);
    groupNameInput.characters = 15;
    
    var prefixGroup = namePrefixPanel.add("group");
    prefixGroup.add("statictext", undefined, "Prefix:");
    var prefixInput = prefixGroup.add("edittext", undefined, groupData.prefix);
    prefixInput.characters = 5;
    
    var autoPrefixGroup = namePrefixPanel.add("group");
    autoPrefixGroup.orientation = "row";
    autoPrefixGroup.alignChildren = ["left", "center"];
    autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
    var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
    autoPrefixCheckbox.value = false;
    prefixInput.enabled = !autoPrefixCheckbox.value;
    
    autoPrefixCheckbox.onClick = function () {
        prefixInput.enabled = !autoPrefixCheckbox.value;
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                alert("Auto-prefix generation is disabled for group names containing non-English characters or special symbols.");
            }
        }
    };
    
    groupNameInput.onChanging = function () {
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                prefixInput.text = "";
                alert("Auto-prefix generation is disabled for group names containing non-English characters or special symbols.");
            }
        }
    };
    
    // --- Панель: Color Label ---
    var colorLabelPanel = leftColumn.add("panel", undefined, "Color Label");
    colorLabelPanel.orientation = "column";
    colorLabelPanel.alignChildren = ["fill", "top"];
    colorLabelPanel.margins = [10, 15, 10, 10];
    
    var labelColorGroup = colorLabelPanel.add("group");
    labelColorGroup.add("statictext", undefined, "Label Color:");
    var labelColorDropdown = labelColorGroup.add("dropdownlist", undefined, [
        "None", "Red", "Yellow", "Aqua", "Pink", "Lavender", "Peach", "Sea Foam",
        "Blue", "Green", "Purple", "Orange", "Brown", "Fuchsia", "Cyan", "Sandstone"
    ]);
    labelColorDropdown.selection = groupData.labelColorIndex;
    labelColorDropdown.helpTip = "Select a label color for layers in this group";
    
    var disableLabelColorCheckbox = colorLabelPanel.add("checkbox", undefined, "Disable label color assignment");
    disableLabelColorCheckbox.value = groupData.disableLabelColor;
    labelColorDropdown.preferredSize.width = 130; // расширяем выпадающий список
    disableLabelColorCheckbox.helpTip = "Disable automatic label color assignment to layers in this group";
    labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
    disableLabelColorCheckbox.onClick = function () {
        labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
    };
    
    // --- Панель: Audio Control ---
    var audioControlPanel = leftColumn.add("panel", undefined, "Audio Control");
    audioControlPanel.orientation = "column";
    audioControlPanel.alignChildren = ["fill", "top"];
    audioControlPanel.margins = [10, 15, 10, 10];
    
    var audioControlGroup = audioControlPanel.add("group");
    audioControlGroup.orientation = "row";
    audioControlGroup.alignChildren = ["left", "center"];
    audioControlGroup.add("statictext", undefined, "Disable Volume Presets:");
    var disableVolumePresetsCheckboxEdit = audioControlGroup.add("checkbox", undefined, "");
    disableVolumePresetsCheckboxEdit.value = groupData.disableVolumePresets || false;
    
    
    //Options
    var OptionslayerPanel = leftColumn.add("panel", undefined, "Options");
    OptionslayerPanel.orientation = "column";
    OptionslayerPanel.alignChildren = ["fill", "top"];
    OptionslayerPanel.margins = [10, 15, 10, 10];
    
    // --- Кнопка Guide Layers
    var guideLayerButton = OptionslayerPanel.add("iconbutton", undefined, undefined, { name: "guide_layer_button", style: "toolbutton" });
    guideLayerButton.text = "Guide Layer Mode";
    guideLayerButton.preferredSize.width = 150;
    guideLayerButton.preferredSize.height = 35;
    guideLayerButton.helpTip = "Toggle Guide Layer for this group";
    setGuideButtonIcon(guideLayerButton, groupData.guideCheckbox.value ? guide_on_imgString : guide_off_imgString);
    guideLayerButton.onClick = function () {
        groupData.guideCheckbox.value = !groupData.guideCheckbox.value;
        setGuideButtonIcon(guideLayerButton, groupData.guideCheckbox.value ? guide_on_imgString : guide_off_imgString);
    };
    
    var buttonsGroup = dialog.add("group");
    buttonsGroup.alignment = "center";
    
    var okButton = buttonsGroup.add("button", undefined, "OK");
    okButton.helpTip = "Confirm changes to the Layer Group";
    
    // Кнопка Cancel — закрывает без сохранения
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel");
    cancelButton.helpTip = "Cancel editing the Layer Group";
    cancelButton.onClick = function () {
        dialog.close();
    };
    
    okButton.onClick = function () {
    var newGroupName = trim(groupNameInput.text);
    var newPrefix = trim(prefixInput.text);
    var newLabelColorIndex = labelColorDropdown.selection ? labelColorDropdown.selection.index : 0;
    var newDisableLabelColor = disableLabelColorCheckbox.value;
    var newGuideLayer = groupData.guideCheckbox.value;
    
    if (newGroupName === "") {
        alert("Please enter a group name.");
        return;
    }
    if (newPrefix === "") {
        if (autoPrefixCheckbox.value) {
            newPrefix = generateUniquePrefix(newGroupName);
            prefixInput.text = newPrefix;
        } else {
            alert("Please enter a prefix.");
            return;
        }
    }
    
    app.beginUndoGroup("Edit Layer Group " + groupData.name);
    
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + groupData.prefix + "]") === 0) {
                var baseName = layer.name.replace("[" + groupData.prefix + "] ", "");
                layer.name = "[" + newPrefix + "] " + baseName;
                if (!newDisableLabelColor) {
                    layer.label = newLabelColorIndex;
                }
                layer.guideLayer = newGuideLayer;
            }
        }
    }
    
    // Обновляем объект groupData
    groupData.name = newGroupName;
    groupData.prefix = newPrefix;
    groupData.labelColorIndex = newLabelColorIndex;
    groupData.disableLabelColor = newDisableLabelColor;
    groupData.guideCheckbox.value = newGuideLayer;
    groupData.disableVolumePresets = disableVolumePresetsCheckboxEdit.value;
    groupData.volumeStates = groupData.disableVolumePresets ? ["off", "on"] : ["off", "min", "normal", "high"];
    groupData.currentVolumeIndex = groupData.disableVolumePresets ? 0 : 2;
    
    groupPanel.text = newGroupName + " [" + newPrefix + "]";
    groupPanel.name = "layer_group_" + newPrefix;
    setColorLabelButtonIcon(groupData.colorLabelButton, newLabelColorIndex);
    setGuideButtonIcon(guideLayerButton, newGuideLayer ? guide_on_imgString : guide_off_imgString);
    
    palette.layout.layout(true);
    palette.layout.resize();
    if (autoSaveEnabled) {
        autoSavePreset();
    }
    
    app.endUndoGroup();
    dialog.close();
    };
    
    cancelButton.onClick = function () {
        dialog.close();
    };
    
    dialog.center();
    dialog.show();
    };
    }
    
    

// Вспомог
function addDivider(panel) {
    var div = panel.add("panel");
    div.alignment = "fill";
    div.preferredSize = [1,1];
    div.graphics.backgroundColor = div.graphics.newBrush(div.graphics.BrushType.SOLID_COLOR, [0.5,0.5,0.5,1]);
}

// ----------------------------------------------------------------------
// 3) Пересоздание группы в новом режиме
// ----------------------------------------------------------------------
function rebuildGroupUI(groupData, mode) {
    var p = groupData.panel;
    for (var i = p.children.length - 1; i >= 0; i--) {
        p.remove(p.children[i]);
    }
    switch(mode) {
        case "view":  buildViewControls(p, groupData);  break;
        case "tools": buildToolsControls(p, groupData); break;
        case "mode":  buildModeControls(p, groupData);  break;
    }
}

// ----------------------------------------------------------------------
// 4) Обновить ВСЕ группы после переключения
// ----------------------------------------------------------------------
function updateAllGroups(newMode) {
    for (var i = 0; i < layerGroups.length; i++) {
        rebuildGroupUI(layerGroups[i], newMode);
    }
    palette.layout.layout(true);
}

//
// ===================== CREATE LAYER GROUP UI =====================
//
function createLayerGroupUI(groupName, prefix, labelColorIndex, disableLabelColor, guideCheckboxValue, lockCheckboxValue, disableVolumePresets) {

// Если это первая группа (слоёв и эффектов)
if ((layerGroups.length + effectGroups.length) === 0) {
    promptForAutoSave();
}


// Основная панель группы
var groupPanel = tab_layers.add("panel", undefined, undefined, { name: "layer_group_" + prefix });
groupPanel.text = groupName + " [" + prefix + "]";
groupPanel.orientation = "row";
groupPanel.alignChildren = ["center", "center"];
groupPanel.spacing = 7;
groupPanel.margins = [5, 13, 7, 10];
groupPanel.alignment = ["fill", "top"];
groupPanel.helpTip = "Layer Group panel for " + groupName;

// --- (A) Кнопка метки цвета
var color_label_icon = groupPanel.add("image", undefined, undefined, { name: "color_label_icon_" + prefix });
setColorLabelButtonIcon(color_label_icon, labelColorIndex);

//Volume
var volumeAudioButton = groupPanel.add("iconbutton", undefined, undefined, {
    name: "volume_audio_button_" + prefix,
    style: "toolbutton"
});
volumeAudioButton.helpTip = "Volume Audio (Off / Min / Normal / High)";
volumeAudioButton.preferredSize.width = 28;
volumeAudioButton.preferredSize.height = 28;
setButtonIcon(volumeAudioButton, volume_normal_imgString, "volume_normal");
var hasAudio = groupHasAudio(prefix);
if (!hasAudio) {
    volumeAudioButton.enabled = false;
    volumeAudioButton.helpTip = "No audio layers found in this group.";
}
// Четыре состояния (или два, если пресеты отключены)
var volumeStates = disableVolumePresets ? ["off", "on"] : ["off", "min", "normal", "high"];
var currentVolumeIndex = disableVolumePresets ? 0 : 2; // По умолчанию "off" или "normal"

// --- (C) Кнопка View
var view_button = groupPanel.add("iconbutton", undefined, undefined, { name: "view_button_" + prefix, style: "toolbutton" });

var viewState = true;
setViewButtonIcon(view_button, view_button_on_imgString);

// --- (D) Кнопка Solo
var solo_button = groupPanel.add("iconbutton", undefined, undefined, { name: "solo_button_" + prefix, style: "toolbutton" });

var soloState = false;
setSoloButtonIcon(solo_button, solo_off_button_imgString);

// --- (E) Кнопка Hide
var hide_button = groupPanel.add("iconbutton", undefined, undefined, { name: "hide_button_" + prefix, style: "toolbutton" });

var hideState = false;
setHideButtonIcon(hide_button, hide_off_button_imgString);

//lock button
var lock_button = groupPanel.add("iconbutton", undefined, undefined,
    { name: "lock_button_" + prefix, style: "toolbutton" });
var lockState = false;
setLockButtonIcon(lock_button, lock_off_imgString);


/* ---------- COLLAPSE TRANSFORMATIONS ------------------ */
var collapse_button = groupPanel.add("iconbutton", undefined, undefined,
    { name: "collapse_button_" + prefix, style: "toolbutton" });
var collapseState = false;
setCollapseTransformationsButtonIcon(collapse_button, collapse_transformation_off_imgString);


/* ---------- MOTION BLUR -------------------------------- */
var motion_button = groupPanel.add("iconbutton", undefined, undefined,
    { name: "motion_button_" + prefix, style: "toolbutton" });
var motionState = false;
setMotionBlurButtonIcon(motion_button, motion_off_imgString);


/* ---------- 3-D LAYER ---------------------------------- */
var layer3D_button = groupPanel.add("iconbutton", undefined, undefined,
    { name: "layer3D_button_" + prefix, style: "toolbutton" });
var threeDState = false;
set3DLayerButtonIcon(layer3D_button, layer_3d_off_imgString);


var viewer_button = groupPanel.add("iconbutton", undefined,
    File.decode(group_viewer_imgString),
    { name: "viewer_button_" + prefix, style: "toolbutton" });
viewer_button.onClick       = function () { showGroupCompositions(groupData); };

/* ---------  PRE-COMPOSE  ------------------------------------ */
var precompose_button = groupPanel.add("iconbutton", undefined,
    File.decode(pre_comps_imgString),
    { name: "precompose_button_" + prefix, style: "toolbutton" });

// --- (H) Кнопка Delete
var delete_group_layers_button = groupPanel.add("iconbutton", undefined, File.decode(delete_group_layers_button_imgString), {
    name: "delete_group_layers_button_" + prefix,
    style: "toolbutton"
});


/* ---------  RENAME LAYERS  ---------------------------------- */
var rename_button = groupPanel.add("iconbutton", undefined,
    File.decode(rename_imgString),
    { name: "rename_button_" + prefix, style: "toolbutton" });

// --- Разделитель
var divider1 = groupPanel.add("panel", undefined, undefined, { name: "divider1" });
divider1.alignment = "fill";
divider1.helpTip = "Divider for layout";
divider1.graphics.backgroundColor = divider1.graphics.newBrush(divider1.graphics.BrushType.SOLID_COLOR, [0.5, 0.5, 0.5, 1]);
divider1.preferredSize.height = 1;

// --- (F) Кнопка Add Layer
var add_layer_button = groupPanel.add("iconbutton", undefined, File.decode(add_layer_button_imgString), {
    name: "add_layer_button_" + prefix,
    style: "toolbutton"
});

// --- (G) Кнопка Edit
var edit_group_layers_button = groupPanel.add("iconbutton", undefined, File.decode(edit_group_layers_button_imgString), { name: "edit_group_layers_button_" + prefix, style: "toolbutton" });


var groupData = {
/* базовые свойства */
name:  groupName,   prefix: prefix,   panel: groupPanel,

/* UI-кнопки */
colorLabelButton: color_label_icon,
volumeAudioButton: volumeAudioButton,
viewButton:  view_button,   soloButton: solo_button, hideButton: hide_button,
lockButton:  lock_button,   collapseButton: collapse_button,
motionButton: motion_button,layer3DButton: layer3D_button,
viewerButton: viewer_button, precomposeButton: precompose_button,
renameButton: rename_button,
addButton: add_layer_button, editButton: edit_group_layers_button,
deleteButton: delete_group_layers_button,

/* состояния */
volumeStates: disableVolumePresets ? ["off","on"] : ["off","min","normal","high"],
currentVolumeIndex: disableVolumePresets ? 0 : 2,
viewState: true,  soloState: false,  hideState: false,
lockState: lockState,
collapseTransformationsState: collapseState,
motionBlurState: motionState,
threeDState: threeDState,

/* настройки для новых слоёв */
labelColorIndex: labelColorIndex,
disableLabelColor: disableLabelColor,
guideCheckbox: { value: guideCheckboxValue },
lockCheckbox:  { value: lockCheckboxValue },
disableVolumePresets: disableVolumePresets
};

// Наполняем сразу в текущем режиме
rebuildGroupUI(groupData, modes[currentIcon]);

layerGroups.push(groupData);
palette.layout.layout(true);
if (autoSaveEnabled) {
    autoSavePreset();
}




//
// ================== SAVE / LOAD PRESETS ==================
//

save_my_presets_button.onClick = function () {
    saveData();
};

load_my_presets_button.onClick = function () {
    loadData();
};

function saveData() {
    var saveWindow = new Window("dialog", "Save Presets and Settings Project");
    saveWindow.orientation = "column";
    saveWindow.alignChildren = ["fill", "top"];
    saveWindow.spacing = 15;
    saveWindow.margins = 15;
    saveWindow.helpTip = "Save the current Layer/Effect groups to a .pgm file";

    var pathGroup = saveWindow.add("group");
    pathGroup.orientation = "row";
    pathGroup.add("statictext", undefined, "Save path:");
    var pathEdit = pathGroup.add("edittext", undefined, "");
    pathEdit.size = [300, 25];
    var browseButton = pathGroup.add("button", undefined, "Browse");
    browseButton.onClick = function () {
        var folder = Folder.selectDialog("Please select a folder for saving");
        if (folder) {
            pathEdit.text = folder.fsName;
        }
    };

    var fileGroup = saveWindow.add("group");
    fileGroup.orientation = "row";
    fileGroup.add("statictext", undefined, "Preset Name:");
    var fileEdit = fileGroup.add("edittext", undefined, "My_Preset_Project");
    fileEdit.size = [375, 25];

    var buttonsGroup = saveWindow.add("group");
    buttonsGroup.orientation = "row";

    var exportButton = buttonsGroup.add("button", undefined, "Export", { name: "ok" });

    exportButton.onClick = function () {
        var savePath = pathEdit.text;
        var fileName = fileEdit.text;

        if (savePath === "" || fileName === "") {
            alert("Please specify the path and file name.");
            return;
        }

        // Добавляем расширение .pgm, если его нет
        if (!/\.pgm$/i.test(fileName)) {
            fileName += ".pgm";
        }

        var fullPath = savePath + "/" + fileName;
        var file = new File(fullPath);
        if (file.open("w")) {
            try {
                var dataLines = [];
                dataLines.push("LayerGroups:");
                for (var i = 0; i < layerGroups.length; i++) {
                    var lg = layerGroups[i];
                    dataLines.push("GroupType: LayerGroup");
                    dataLines.push("Name: " + lg.name);
                    dataLines.push("Prefix: " + lg.prefix);
                    dataLines.push("LabelColorIndex: " + lg.labelColorIndex);
                    dataLines.push("DisableLabelColor: " + lg.disableLabelColor);
                    dataLines.push("");
                }

                dataLines.push("EffectGroups:");
                for (var j = 0; j < effectGroups.length; j++) {
                    var eg = effectGroups[j];
                    dataLines.push("GroupType: EffectGroup");
                    dataLines.push("Name: " + eg.name);
                    dataLines.push("Prefix: " + eg.prefix);
                    dataLines.push("");
                }

                var data = dataLines.join("\n");
                file.write(data);
                file.close();
                alert("Preset successfully saved.");
                presetFilePath = fullPath;
                autoSaveEnabled = true;
                saveWindow.close();

            } catch (e) {
                alert("Error saving the preset: " + e.toString());
            }
        } else {
            alert("Failed to save the Preset.");
        }
    };

    var cancelButton = buttonsGroup.add("button", undefined, "Cancel", { name: "cancel" });
    cancelButton.onClick = function () {
        saveWindow.close();
    };

    saveWindow.center();
    saveWindow.show();
}

function loadData() {
    // Создаём диалог импорта
    var importWindow = new Window("dialog", "Load Preset and Settings Project");
    importWindow.orientation = "column";
    importWindow.alignChildren = ["fill", "top"];
    importWindow.spacing = 10;
    importWindow.margins = 15;

    // Группа для выбора .pgm файла
    var fileGroup = importWindow.add("group");
    fileGroup.orientation = "row";
    fileGroup.alignChildren = ["left", "center"];
    fileGroup.add("statictext", undefined, "Preset to import:");
    var fileEdit = fileGroup.add("edittext", undefined, "");
    fileEdit.size = [300, 25];
    fileEdit.helpTip = "Select the .pgm file with previously saved settings";

    var browseButton = fileGroup.add("button", undefined, "Browse");
    browseButton.helpTip = "Click to find .pgm file";

    browseButton.onClick = function () {
        var file = File.openDialog("Please select a file to import", "*.pgm");
        if (file) {
            fileEdit.text = file.fsName;
        }
    };
    // Группа настроек Options (колонка)
    var optionsGroup = importWindow.add("group");
    optionsGroup.orientation = "row";
    optionsGroup.alignChildren = ["left", "centrer"];
    optionsGroup.spacing = 10;

    optionsGroup.add("statictext", undefined, "Options:");

    // Кнопка Clear All Panels
    var clear_all_panels_button = optionsGroup.add("iconbutton", undefined, File.decode(clear_all_panels_button_imgString), {
        name: "clear_all_panels_button",
        style: "toolbutton"
    });
    clear_all_panels_button.helpTip = "Clear All Panels";
    clear_all_panels_button.text = "Clear All Panels";
    clear_all_panels_button.preferredSize.width = 140;
    clear_all_panels_button.preferredSize.height = 30;

    clear_all_panels_button.onClick = function () {
        var confirmClear = confirm("Are you sure you want to clear all groups and reset layer and effect prefixes? This action cannot be undone.");
        if (!confirmClear) return;
        try {
            app.beginUndoGroup("Clear All Groups and Reset Names");

            if (!tab_layers || !tab_effects) {
                alert("Error: 'tab_layers' or 'tab_effects' is not defined.");
                app.endUndoGroup();
                return;
            }

            // Очистка групп слоёв
            for (var i = layerGroups.length - 1; i >= 0; i--) {
                var lg = layerGroups[i];
                var comps = getAllCompositions();
                for (var c = 0; c < comps.length; c++) {
                    var comp = comps[c];
                    for (var l = comp.numLayers; l >= 1; l--) {
                        var layer = comp.layer(l);
                        if (layer.name.indexOf("[" + lg.prefix + "]") === 0) {
                            var originalName = layer.name.replace("[" + lg.prefix + "] ", "");
                            layer.name = originalName;
                        }
                    }
                }
                if (lg.panel && lg.panel.parent === tab_layers) {
                    try {
                        tab_layers.remove(lg.panel);
                    } catch (removeError) {
                        alert("Failed to remove layer group panel for '" + lg.name + "': " + removeError.toString());
                    }
                } else {
                    alert("Layer group panel for '" + lg.name + "' has already been removed or does not exist.");
                }
                layerGroups.splice(i, 1);
            }

            // Очистка групп эффектов
            for (var i = effectGroups.length - 1; i >= 0; i--) {
                var eg = effectGroups[i];
                var comps = getAllCompositions();
                for (var c = 0; c < comps.length; c++) {
                    var comp = comps[c];
                    for (var l = 1; l <= comp.numLayers; l++) {
                        var layer = comp.layer(l);
                        if (layer.property("Effects")) {
                            for (var e = layer.property("Effects").numProperties; e >= 1; e--) {
                                var effect = layer.property("Effects").property(e);
                                if (effect.name.indexOf("[" + eg.prefix + "]") === 0) {
                                    var originalName = effect.name.replace("[" + eg.prefix + "] ", "");
                                    effect.name = originalName;
                                }
                            }
                        }
                    }
                }
                if (eg.panel && eg.panel.parent === tab_effects) {
                    try {
                        tab_effects.remove(eg.panel);
                    } catch (removeError) {
                        alert("Failed to remove effect group panel for '" + eg.name + "': " + removeError.toString());
                    }
                } else {
                    alert("Effect group panel for '" + eg.name + "' has already been removed or does not exist.");
                }
                effectGroups.splice(i, 1);
            }

            palette.layout.layout(true);
            palette.layout.resize();

            alert("All groups have been cleared and layer and effect prefixes have been reset.");
            app.endUndoGroup();
        } catch (error) {
            alert("An error occurred while clearing groups: " + error.toString());
            app.endUndoGroup();
        }
    };
    // Группа кнопок (Import/Cancel)
    var buttonsGroup = importWindow.add("group");
    buttonsGroup.orientation = "row";
    buttonsGroup.alignChildren = ["fill", "center"];

    // Кнопка Import
    var importButton = buttonsGroup.add("button", undefined, "Import", { name: "ok" });
    importButton.helpTip = "Load the selected .pgm preset";

    importButton.onClick = function () {
        var filePath = fileEdit.text;

        if (filePath === "") {
            alert("Please select a file to import.");
            return;
        }

        var file = new File(filePath);
        if (file.exists && file.open("r")) {
            try {
                var content = file.read();
                file.close();

                // Разделяем содержимое файла по строкам
                var lines = content.split(/\r\n|\n|\r/);
                var currentSection = "";
                var currentGroup = {};

                // Начинаем группу Undo для очистки и импорта
                app.beginUndoGroup("Import Preset and Reset Groups");

                // Сохраняем копии текущих групп, чтобы безопасно очистить
                var layerGroupsCopy = layerGroups.slice();
                var effectGroupsCopy = effectGroups.slice();

                for (var i = layerGroupsCopy.length - 1; i >= 0; i--) {
                    var lg = layerGroupsCopy[i];

                    // Сброс префиксов слоёв
                    var comps = getAllCompositions();
                    for (var c = 0; c < comps.length; c++) {
                        var comp = comps[c];
                        for (var l = comp.numLayers; l >= 1; l--) {
                            var layer = comp.layer(l);
                            if (layer.name.indexOf("[" + lg.prefix + "]") === 0) {
                                var originalName = layer.name.replace("[" + lg.prefix + "] ", "");
                                layer.name = originalName;
                            }
                        }
                    }

                    // Удаление UI панели группы слоёв
                    if (lg.panel && lg.panel.parent === tab_layers) {
                        try {
                            tab_layers.remove(lg.panel);
                        } catch (removeError) {
                            alert("Failed to remove layer group panel for '" + lg.name + "': " + removeError.toString());
                        }
                    }
                    // Удаляем из массива layerGroups позже (ниже), а пока просто удалили панели
                }
                // Полностью обнуляем массив
                layerGroups = [];

                for (var k = effectGroupsCopy.length - 1; k >= 0; k--) {
                    var eg = effectGroupsCopy[k];

                    // Сброс префиксов эффектов
                    var comps = getAllCompositions();
                    for (var c = 0; c < comps.length; c++) {
                        var comp = comps[c];
                        for (var l = 1; l <= comp.numLayers; l++) {
                            var layer = comp.layer(l);
                            if (layer.property("Effects")) {
                                for (var e = layer.property("Effects").numProperties; e >= 1; e--) {
                                    var effect = layer.property("Effects").property(e);
                                    if (effect.name.indexOf("[" + eg.prefix + "]") === 0) {
                                        var originalName = effect.name.replace("[" + eg.prefix + "] ", "");
                                        effect.name = originalName;
                                    }
                                }
                            }
                        }
                    }

                    // Удаление UI панели группы эффектов
                    if (eg.panel && eg.panel.parent === tab_effects) {
                        try {
                            tab_effects.remove(eg.panel);
                        } catch (removeError) {
                            alert("Failed to remove effect group panel for '" + eg.name + "': " + removeError.toString());
                        }
                    }
                }
                // Обнуляем массив
                effectGroups = [];

                // Обновляем интерфейс после удаления групп
                palette.layout.layout(true);
                palette.layout.resize();

                //--------------------------------------------------------
                // (3) Разбор файла и создание новых групп
                //--------------------------------------------------------
                for (var i = 0; i < lines.length; i++) {
                    var line = trim(lines[i]);
                    if (line === "LayerGroups:") {
                        currentSection = "LayerGroups";
                        continue;
                    } else if (line === "EffectGroups:") {
                        currentSection = "EffectGroups";
                        continue;
                    }

                    // --- (A) Если читаем секцию LayerGroups ---
                    if (currentSection === "LayerGroups") {
                        if (line.indexOf("GroupType:") === 0) {
                            currentGroup = {};
                            currentGroup.type = trim(line.split(":")[1]);
                        } else if (line.indexOf("Name:") === 0) {
                            currentGroup.name = trim(line.split(":")[1]);
                        } else if (line.indexOf("Prefix:") === 0) {
                            currentGroup.prefix = trim(line.split(":")[1]);
                        } else if (line.indexOf("LabelColorIndex:") === 0) {
                            currentGroup.labelColorIndex = parseInt(trim(line.split(":")[1]), 10);
                        } else if (line.indexOf("DisableLabelColor:") === 0) {
                            currentGroup.disableLabelColor = (trim(line.split(":")[1]).toLowerCase() === "true");
                        }

                        // Если собраны все поля для LayerGroup
                        if (
                            currentGroup.name &&
                            currentGroup.prefix &&
                            typeof currentGroup.labelColorIndex !== 'undefined' &&
                            typeof currentGroup.disableLabelColor !== 'undefined' &&
                            currentGroup.type === "LayerGroup"
                        ) {
                            // Проверяем уникальность префикса сразу в layerGroups и effectGroups
                            if (isPrefixUsedAcrossAll(currentGroup.prefix)) {
                                // Генерируем новый уникальный префикс
                                currentGroup.prefix = generateUniquePrefix(currentGroup.name);
                                alert(
                                    "Prefix for group '" + currentGroup.name +
                                    "' was already in use. A new unique prefix '" +
                                    currentGroup.prefix + "' has been generated."
                                );
                            }

                            // Создаём группу
                            createLayerGroupUI(
                                currentGroup.name,
                                currentGroup.prefix,
                                currentGroup.labelColorIndex,
                                currentGroup.disableLabelColor,
                                false, // guideCheckboxValue
                                false  // lockCheckboxValue
                            );
                            // Сброс объекта
                            currentGroup = {};
                        }
                    }
                    // --- (B) Если читаем секцию EffectGroups ---
                    else if (currentSection === "EffectGroups") {
                        if (line.indexOf("GroupType:") === 0) {
                            currentGroup = {};
                            currentGroup.type = trim(line.split(":")[1]);
                        } else if (line.indexOf("Name:") === 0) {
                            currentGroup.name = trim(line.split(":")[1]);
                        } else if (line.indexOf("Prefix:") === 0) {
                            currentGroup.prefix = trim(line.split(":")[1]);
                        }

                        // Если собраны все поля для EffectGroup
                        if (
                            currentGroup.name &&
                            currentGroup.prefix &&
                            currentGroup.type === "EffectGroup"
                        ) {
                            // Проверяем уникальность префикса сразу в layerGroups и effectGroups
                            if (isPrefixUsedAcrossAll(currentGroup.prefix)) {
                                currentGroup.prefix = generateUniquePrefix(currentGroup.name);
                                alert(
                                    "Prefix for effect group '" + currentGroup.name +
                                    "' was already in use. A new unique prefix '" +
                                    currentGroup.prefix + "' has been generated."
                                );
                            }

                            // Создаём группу
                            createEffectGroupUI(
                                currentGroup.name,
                                currentGroup.prefix
                            );
                            currentGroup = {};
                        }
                    }
                }

                // После импорта заново перерисовываем окно
                palette.layout.layout(true);
                palette.layout.resize();

                alert("Preset successfully loaded and all existing groups have been cleared.");
                app.endUndoGroup();
                importWindow.close();

            } catch (e) {
                alert("Error reading the preset: " + e.toString());
                app.endUndoGroup();
            }
        } else {
            alert("The file does not exist or cannot be opened.");
        }
    };

    // Кнопка Cancel
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel", { name: "cancel" });
    cancelButton.helpTip = "Cancel the upload and close the window";
    cancelButton.onClick = function () {
        importWindow.close();
    };

    importWindow.center();
    importWindow.show();
}


function trim(str) {
    return str.replace(/^\s+|\s+$/g, '');
}

function isPrefixUsedAcrossAll(prefix) {
    // Сначала проверяем в layerGroups
    for (var i = 0; i < layerGroups.length; i++) {
        if (layerGroups[i].prefix === prefix) {
            return true;
        }
    }
    // Затем в effectGroups
    for (var j = 0; j < effectGroups.length; j++) {
        if (effectGroups[j].prefix === prefix) {
            return true;
        }
    }
    return false;
}
}