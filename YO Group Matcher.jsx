var scriptVersion = "4.0.0 Beta";

var soloAnimStates = soloAnimStates || {};
var soloShapesStates = {};
var soloTextStates = {};
var soloNullStates = {};
var soloTrackMatteStates = {};
var soloAdjustStates = {};
var soloMaskStates = {};

var autoSaveEnabled = false;
var presetFilePath = "";


//Switch//
var switch_tools_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%5B%00%00%00%24%08%06%00%00%00%C3%A6BF%C2%8D%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%0C!IDATx%01%C3%ADZ%5Bl%1CW%19%C3%BE%C3%A6%C2%B6W%C2%AFo%C2%B1%C2%9D4%C2%A4%C3%94X%C3%B4%16'4j%C2%9FPU%C3%A1%C2%AA%2F%C2%A8%C2%80ZT%C2%B9%20%5E%C3%AA%3E%C3%90'(T%C2%82%17%24%C3%A4%C3%B5%7B%C2%A5%5E%C3%84%03%0FHM%C2%85%04%25.J%C2%A3B%C2%80%17b*%01E%C2%95i%C3%92%C3%84%C2%A5*i%C3%AA%C2%866%C3%81%C2%8E%5D%3B%C3%9E%C3%AB%C3%9C%C3%B9%C3%BE%C3%99%19g%C3%97%C3%9E%C3%99%5D%3B%C2%A1%C2%B6%C3%94%C3%BE%C3%B2xv%C3%8E%C2%9C9%C3%A7%3F%C3%9F%C3%B9%C3%8Fw%C3%BE%C3%B3%C2%9F%03%7C%26%C2%9F%C2%98(%C3%98%25%C3%A2%C3%BB%C3%BE%C2%BA.%C2%8A%C2%A2%C3%B8%0D%C3%8F%C3%B2%C2%BE%C3%B6%C3%82G%C2%94%1E%C2%BD%C2%AD%C2%BD%60%C2%A2%C3%8F%7F%C3%97%C3%9EK%19%C3%98e%C2%B2k%C3%80%16%C2%90%C3%AA%C3%91%11%C3%85%C3%B2SP%C3%B2%C2%93%C3%80%C3%B8tM%C3%8F%0B%2BPgo%C2%83%3F~%C2%A5%061%C3%86%C2%81%C3%A9)%C3%B8y%C3%BE%C2%9C%C2%9C%C2%84_%C3%AB%14)%C2%86%C2%B0G%C3%80%C3%AF%22%C3%90w%14l%C2%B1%C3%9E%C3%88%C2%8A%23%C3%AB%C2%9D%C2%A2Ns%C2%BC%C2%AE%C3%8C%40%C2%99%19%C2%82%C2%8AE%C2%A8%C3%83%C3%83%C2%80%C2%B5%0C%C3%95.%40U%C3%BB%C2%B1%0E%C2%9Ef%C3%83%C3%8F%2C%C3%82%C2%95%C3%9F%C3%A7%C3%93p%C3%87%C3%87%C3%A0%C2%8F%C2%B2%C2%98I%C2%84%C3%80%C3%AF2K%C3%9F1%C2%B0%C3%ABi%025E%14%C2%B1%C3%A0%0B%23%C2%B4%C3%9E%02%C2%B4%C3%BD9%C2%A8V%C2%95x%C3%BA%C3%90%3D%07%C2%9A%C3%9FC%C2%93%C2%B5%C2%A0%C3%8A%C2%A5%24%C3%A0%C2%95%5C%C3%B89%0B%C2%9E%C2%AA%C3%83%C3%95%0C%C2%B8)%1D%C3%8E%C2%A5%02%C2%BC%7BrpG.%C3%80%1B%7D%C2%9B%C2%A0O%C2%A2%01%C3%A0%C2%9D%06%7CW%C2%80-%C3%96%C2%9C%C2%9F%C2%A1%15W%08%C3%B2%10%C2%B4%0A%608%05%18n%0EF%C3%99D%22%09%C3%A8%C2%84M%C3%B75v%C2%80M%C2%9D%0D%C3%B8I%15%C2%AE%C3%A9%04V%C3%ADd%5CXZ%064%7C%C3%98%C3%BBy%5D%C3%AAa%C3%BA%C2%87%C2%B4t%C3%92%C3%8D%C3%B48%C2%BC%06z%C3%9AA%C3%80u%7C%C3%82%C3%A2%C2%87%3C%1A%C3%91%C2%862%0Dul0%C3%A8t%7D%C3%B0%16%C3%A8%C2%85%C3%8BH%C2%BA)%24%C2%BD%0C%C2%92%C3%95%12R%C3%940%C3%A9)H%C3%B8%3E%C2%92%0E-%C2%9C%5D%12%7Cj%C3%9Ap%0D%1F%C2%B4mX%C3%A5%04%C2%AA%C2%A9%0A%C3%8C%C2%8C%C2%82j%C3%81%C2%809h%C3%81%C2%BC%22E%C2%8F%C3%80%C3%8D%C3%97(%C3%85%C2%AF%C2%A7%C2%94%C2%9D%C2%92O%1C%C3%AC%40d2%14%C3%9E8%C2%86%00%C3%A8y%C3%AA%C3%91%C2%9FF%C2%A2%C2%BA%C2%88%C2%84%C3%93%C2%8D%C2%B4%C3%AB%20K%C2%BA%C3%88%12%C3%9A%0C%C2%A1%C3%8Dz%20%C3%A8%40BlZ%C3%B3%C2%A1%C2%BA.%3C%C3%8D%C2%83%C3%8BN0%15%03e%C3%9DC%C2%85%26%5E%C2%AA%C2%AA(%C2%A1%C2%8A%C2%92oB%1D0P%C3%AD%C3%9A%03%C2%BC%3A%C3%8By%C2%94%C2%B4%C3%82%3A%3D%C3%AC%C2%B0l%09%C3%AC%23%14%C3%8F%C3%B3%1E%C2%A2u%1E%C3%A1p%3C%12%26%C2%AF%C3%B2y%C2%9E%C3%B7%13%C2%9A%C2%A6%C3%8D%C2%9C%3E%7Dz%C2%BEmA%02t%1E%C2%8A%00%C3%BD!%C2%A9%C2%A3%C3%98%0D%C3%83%C2%B2%C2%90%2C%26%08%C2%AE%C2%8D%C2%9C%C3%AE%C2%A0%C2%9B%C2%94%C3%91%C2%A3%01%C3%9D%7B%0D%0C%3E%C2%B2%07%C3%B7%7D%3E%C2%81%C3%9B%7Bu%1C%C2%A0%C2%85%07%C3%96Y%C3%B2%C2%B0%C3%BC%5E%15%C2%A7_%5B%C3%85%1Bs%15%5Cd%C3%A7%C2%AD%C3%B1%C2%BB5U(%C3%88%40ai%C2%8D%C3%B9%3EbF%C2%9B%C3%97HP%C2%A5%C3%97)%7F%C2%B0%C2%99%C2%BDl%C3%A7%04%C3%9B%C3%B5%C2%95%C2%BAv%C3%8A%C2%A8%C2%9C%C3%A7%C3%B3_TU%3D%C3%9AQ%3B77%C2%BB%C2%A3%C3%8A%C2%87%5D%C3%97%7D%C2%86%3F%1Fn%5B%C2%A0%C2%A2%C3%A4%C3%9Fz%C3%AB%C2%AD%C2%A9%C2%B8%C3%B7%C2%91%C3%A7%C3%81%C3%89P%C2%9D%C2%A6C%C2%81A%24r%C2%A4%0C%C3%9BAWUA%C2%B7%C3%AE%C2%A3%C2%8F%C3%80%C3%B5%C3%AFU%C3%B1%C2%B9%C3%87%C3%B7%C3%A1%C2%91%3B2%C2%B8%1Fmd%C2%BE%C2%8A%C3%97%C2%A7%C2%97%C3%B1%C3%9B%C2%B9%22%C3%9E%23Y%7C%C3%AC%00%2B)%0DW%0D%0B%25%C3%B2x%15C%C2%B0%C3%86%C3%A7%C3%A0%1E%23%7F%C3%97%C3%A9%C3%A97i%C2%A7%C2%80%C3%BC%03%C3%AA%C3%B8C%3E%C3%B6%C2%B6%C2%A9%C3%B6(%C2%8Dkj%2B%C2%A0%C2%B7%05%5B%C2%AC%C2%99%40%C2%9F%C3%AA%C2%A0%C3%B2z%C2%99%C2%A7%22%C3%B77SD%C3%80%C2%9E%C2%AA%C3%B9%C3%8F*%5E%255%C3%B4!I%08%C2%BA%12it%7B%16%C3%BA%1D%05C%C2%872%C2%B8%C3%AD%C3%89%7D%C3%B8QZC%3F%3A%14%C3%B2%C3%88%C3%87%3F%5B%C3%84%C3%93%04%C3%BC%5D6%C3%AA%C2%8A%C3%AAc%C3%99r%C2%B1%C3%86Z%C2%8A%C3%BB%C3%930o%C2%A2%C2%8D%7F%C3%A3wp%03%7F%C2%BC9%C3%90%C3%83%C2%8E%C3%A3%1C%C2%AF%C2%B7%C3%A4N%C3%9A%C3%89%C3%B6%3C~%C3%AE%C3%9C%C2%B9%C2%99N2%C2%AB%C2%AD%5En%13h%11%19%09%C2%A7%C2%A4%01%C3%B5%C2%89%C3%AB%1E%08%1D%C3%A1QZ6-N%C2%BC%C2%8CT2%C2%8549%3A%C3%A7h%C3%A8%3B%C2%9C%C3%86%C2%AD%5B%05ZD%C3%B2%3F%C2%B5%0F%3F%3D%C2%98%C3%85%C2%ADD%C2%B2%C3%8F%C3%92%C2%91%C2%93r3%2C%C2%BF%C3%AA%40%C2%9FM%C3%93%C2%B0%26%C2%9B%7F%1B%C2%8E%C3%9CS%5B%04%3Ah'%C2%BF9u%C3%A8%C3%90%C2%A1%C2%B1N2%C3%87%C2%82%1D*p%1C%5B%07z%5D%11~%C3%BFB%C2%B3%17%C3%A2%C3%A6%C3%8D%1D%C2%80%C3%96%C3%ADA%C3%A7pOx.%C2%B26)%C2%84%0E%5B%C3%9F%C2%93%C3%BB%C2%B7%0Et%24%C2%BA%C2%82%C3%B4%C3%B7%C3%B7%C3%A2%C3%87%C3%BB%0C%C3%ACgY%C3%9DRn%C3%99%25E%15%C3%A9%2C%5E%C2%8563S%C3%B3e6%C3%BA%C3%B8%C3%94S%C2%BAa%18%C3%9B%14%02~%5C(%C2%A8%5D%C2%BEX%C2%B0%C2%AFW%C2%81P%C3%86%0E%1F%3E%3C%C2%81kJ%05%C3%83%C2%97%0B%0Feo%16*g3%C2%83%3EB%C2%92%C2%93%5E%C2%8A%C2%9At%7D%C3%AF%26%7C-%C2%A5b%0F%C2%AEC%C2%A4%C2%A3%C2%BE3%C2%84%07%C3%B93GH3I%C2%83%C2%AE%C2%A3%06c%C2%80%1D%5B%60%C2%BDS%3E%C2%94z%1A%09%C3%B5%C2%9B%C3%80%C3%B5Io8%C2%A7%C2%B5%C2%94%C2%A6%C3%9EHh%C3%95%13%C2%9B2%C3%AB%3AR%C2%A9%14l%C3%9B%C2%86i%C2%9A%C3%AB%C3%A9%5D%5D%5D%C3%81%C2%BDX%2C6%2B%C3%AE1%5EG%C2%A3%07Y%C3%80T9%C2%A4%17.AOg%C2%A1%C2%BB%04%C2%9BT%C2%92%C2%A1%2B%C3%97%C3%B5%C2%A5%0C%1EhV%C3%80%C3%AC%C3%89Wpq%C3%AE%C3%8C%C2%A6%C3%B4%C2%81%C2%9Bo%C3%81%7D%C3%9F%C2%9E%C3%98%C2%94~0%C2%8D%07n6p%C3%B2%C2%B2%C2%83U%C3%93EBMC_%C3%A2R%7Fo%1F%C3%ADz%C3%83%C3%94M%C3%A0eBlHK%26%C2%930%0C%03%C2%9C%2CQ.%C2%97%C3%97%C3%93%13%C2%89DpmL%0Fe%C2%82%C2%B8%3D%C3%85yj%151%C3%92%14l%02%3D%16%C2%93%C2%8El6%2B%C3%83%10%C2%8B%C2%8B%C2%8B%C2%B5%02%C3%98%01%C2%92%C3%86%C3%89%25%0E%C3%AC1%C3%A9%3C%C2%99%2C%C2%83%C3%89%C2%91%09%C2%A6x%C3%8C%C2%B4e_V%C2%85%09Z%C2%B7%C2%8D%C3%94W%C3%BBq8%C2%8E%3E%C3%BE%C3%B9%C3%87%13x%C3%AD%C2%A5%C2%A3%C2%9B%C3%92%C3%AF%C2%BCw%C2%AC)%C3%98B'wu%C3%A1%0B%C2%97V%C3%B1%1FC%C3%A5%C2%82%C2%A8%C3%82v%C2%B2%3E%C2%A97_%C2%97%2F4%C2%AAM%3C-%06%25%C2%97H%C2%B5Z%0D%C3%80%15%C3%89%C3%A5rA%7B%05%C2%87%26%60K%C2%BE%09%C3%9E%C2%9EE%C2%8C%C3%84%C3%91%C3%88C%C3%8D%12%05d%C2%8B%0E1%C2%AD!%C3%A8%C3%A1H1%C2%91J%C2%A5%C2%828%C2%A9%C3%AF%C2%BC9%C3%86%3F%C2%AAoB%C3%8D%25%08%C2%B6t%C2%B6%C3%83e%C2%B9%0E%C2%83%13%C3%9B%1Dq%C3%9F%7F%C3%B7%C3%B9%17%C3%B0%C3%8BE%1FO%3C_%C2%9B%02%C2%9Ex%C3%BEh%C3%B0%C3%BC%C2%93%C3%A3%C2%A7b%C3%AB%C2%BC%3B%C2%8B%C2%BB%C3%A9%C3%A5%04%0B!v%C2%A8%C2%96%C3%A3B%C3%87%C3%91%1B'%C3%89f%40o%C2%94L%26%13%C3%9C%05d%C2%B9Z%09%C3%B1%C2%B9%C2%AB%C3%95%C3%BB8%C2%B0c%C3%89%3E%C2%A2%0F%19j%C3%B5%C3%B7zZ%C3%99(%C3%AC%C2%9C%C3%A1%C3%B0%C3%AEKXT%1F%0C%03D%5C%C2%B8%C3%BB*T%C2%8D%C3%9EB%C2%B7%C2%8A%01%C3%9C%40%C2%A1EgY%C2%BE*%C3%A5%C2%B3CU%02%C2%AE%3A%C2%97k%C3%81.%C3%BFZ%24%C2%B0%25%C3%98b%5C%11%C3%98r%C2%97%C3%A7%C2%8D%C2%94%C2%B3A%C2%86%5B%C2%BDl%C3%A9%C3%BA5%13%C2%B1%60%C2%A90%C2%9DN%C2%83%C2%BEt%C3%90%C3%9BB!2%C2%B4%C3%9A%C2%894RB%C2%A0%C3%8E%15(%05-%C3%B4%C3%B1%1D(%C2%AE%C2%86%C3%BF%C2%8B%C2%B8%C3%ACL)%1F%C3%89ki%C2%A3%C3%A3%C3%A88%10%25T!%C2%A3X%C3%9A*%C2%97%18TD)%C3%9B%C2%91%C2%B8q%11K%C3%B2%02%C2%B4L%C2%90B%23%C3%82%C3%95%22%C2%AD(%C2%A4%C2%BE%C2%BC%C3%80%C2%B2%C2%8F%C3%B9%C3%AA%C2%81%03%C3%A4%3F.%C3%AD%0A%09%C3%B8%C2%86%C3%868%07%C3%83%C2%A5%26%C3%A7%1C%C3%9C%40%C2%B1%C2%A4%3C%C2%95D%C3%82%C3%B2%C3%A9%06zE%C3%96%C3%91%C2%AB7%C3%97%2B%C2%B6%0CR%C2%A6X%C2%B4p%C2%B5%C2%88%C2%B4S%26%C3%8E%C3%ADJS%C3%8B%26(%1F%C2%B4%C3%BAH%26%0D%11%C3%A9m%C2%91V%14%22Bk8%C2%BD%C3%BE%40%C3%8B%C3%92M%C2%AE%C3%A2%C2%B8nL1%3CD%C3%BF%C3%9A%C2%A5%16%C3%B6e%0B%17q%03%C3%A5%23%1B%17IO6%0DSB%C2%B1%1EC%02A%C2%BD%C2%81%3B%14%C2%BA~%0Dz%C3%85Hd%C3%9D2r%05%C3%BCV%C3%82%7CgZ%C2%BDo%0A6%C2%95x%C2%A5%C3%95G%02v%C3%84%5D%1DP%C3%88j%C3%BDrV%C3%B6%C2%AC%C2%B2C%C3%B0%C3%96%C3%92%C3%B0%C2%AAI%C3%98%06C%C2%A4%C2%8A%0A%C3%B3%0F%2B%C2%98%C3%85%0D%C2%947%C2%AE%C3%A2_R.%2B%C2%B4%C3%A8%C3%A5%C2%B8Z%02%C2%AE%5E%C2%A9m%C2%A1E%C2%A1VR%C2%A0%C2%80%C3%9D%C3%92%C2%BAK%C2%A5R%C3%83%C2%BD%C2%95%C2%B4%C3%83%C2%AD)%C3%98!83q%1F%09%C3%90%C3%8B%C3%8B%C3%8BXZZ%C3%82%C3%8A%C3%8A%0A%C3%9AH%C2%83%02bX%C2%8C%3D%C3%BB%03%25%C2%B8%19N%5D%C2%8A%C3%8E%C2%98%C2%B4%C2%83%C3%AA%C2%82%C2%83%25F%C2%90%C3%9EmU%C3%90%3D%0F%3E%C2%8Cgf%C3%9F%C3%A7%C3%BD%C2%A1%C2%96%15.%C3%9B%C3%B8%C3%B7%C3%9B%15n%1F%C2%B0%5CE%C2%83U%C3%B1%60%C3%AB%C3%9C6%3B%C3%8FN%C3%8EK%C2%86%C3%90%C2%B2%C3%85'%C2%A65%3E%C2%B7%C3%B1%C3%BBB%C2%A1%10%C2%B4M%0CI%C3%9A%C2%BA%C2%B0%C2%B0%C2%B0N%C2%95%C3%92%C3%9Efmf9%C3%B3%C3%ADb%24%C2%B1%13%24%2B%C2%99j%C3%B5%C2%A1X%C2%B3%5C%C2%AD%26%0C*%C2%B0*%C2%91%C2%B1%C3%B52%11%C2%84E%7C%C3%B2%C2%B5%C2%9FH%C3%81-%17%60%C2%AB%0Ec%C3%925%C2%BE.%C2%BC%C2%BC%C2%84%C2%97Z%C3%95%C2%99%C3%A9%C3%AE%C3%A5Bf8%C2%B8%C2%B7%C2%92_%5C%C3%86%0B%C2%AC%C2%AC%40%C2%A0%C3%8B%C2%AA%C3%8D%C2%B86%07%C2%A0%C3%B6%01%C2%BC1%C3%96%C2%9B%C3%8F7N%C2%90%0C%C2%97%C2%8A_%C3%9C%60%C3%9D%C3%92%C2%A6%C2%B8%C2%B6E%C3%AD%C3%9E(%C3%AD%C3%B0%0A%C3%AA%C2%8A%7B!%C2%BD%C3%84%02%C2%9E%C3%83u%08%C2%95j%0CA%C2%86%C3%83w%C2%90%C3%9BU%09%C3%AE%17%122%C2%A7%C2%AA%C3%81%C2%B4u%C2%94%09x%C3%A9o%25%C3%8C%C2%BD%5E%C3%80%C3%8B%C2%B8%0E9S%C3%84%C3%AF%C3%8F%C2%95%C3%B1%3E%C2%81%5E%C2%A3%C3%BD%C2%96y7u%17%C3%B6%02idpl%C2%B3%C3%A7%16%C2%AE%C3%B8%C2%9E%C3%82u%C2%88%C3%A0t%C3%B6%C3%AC%C3%99%C2%A3%C3%AD%C3%B2%C2%B5t%C3%BD%08%C2%B8%C3%84u_%C3%84%C3%B6%14%C2%98%C2%9A%C2%9B%C2%9BkXM%C3%89%C3%84%24%C3%81%C3%ACin%C3%86%C3%AE%C3%A1%C3%86%2C%C3%A7u%C2%87%C2%8B%1B3%C3%85%05%19%C3%A9d%C2%8D%C2%80%C2%AF%C3%BE%C3%BC%C2%BF8q%C2%A6%C2%84%C2%93%C3%98%C2%86%C2%9C)%C3%A3%C3%A4%C3%93%C2%97%C3%B1%1B%C3%BE%5CQ%1C%14%C2%B8j%C2%AAp%C2%92%C2%B4tn%08%C2%83%C3%B5M%C2%A3%C2%B9%C3%9B'%40ub%C2%991%C3%B2b%C2%88S%5Bi%C3%ABgS%C2%91%C2%89%C2%AD(%22%C3%94%C3%81%C3%A1'1%C3%9E%7C%C2%B3%C3%B7~%C2%8DK%02*%C2%A1%C3%A3%C3%A8%18%04CK%C2%A3%C2%A2Z%1C%C3%B66AR%C2%B0%C3%B4%C3%8CG%C3%B8%15-%7C%C3%9A!X%1DT%09%C2%87%C3%9Bb%C3%BF(b%C2%9A%C3%9F%C3%BD%C2%9A%C3%9BfKLZ%C3%A1%C2%AE%7CAK%C2%A2%5C4au%7D%0E%C2%B6P%C2%88%C2%8Fx%1F%3B%C3%94%C3%B7q%C3%A1%5Et(%C2%A1EOt%C2%9A%C2%BF%C3%A3%0D%C3%900%C2%8E%C2%90%C2%A72%C2%B2-%C2%B6%C2%894C%C2%90%C2%9F%C3%A3%0C%C3%BFl%C2%AB%60L%C2%A0%24%3D%C2%BF)n%C2%8B%C2%BD%C3%BAuh%0B%16t%02%C2%92%C2%B44%C2%A4%C3%8B%0A%C3%ADOE%0F3%C3%B4%12%C2%B4%C3%9E%3B%C2%BB0%C3%BC%C2%AD%01%7CsH%C3%87%C3%AD%C2%99%26q%13%01%C3%B9%3D%13%7F%3F%C3%B11%C3%BEt%C2%B6%C2%82%C3%B7%C2%B9%17%C3%89%09%0F%C2%AB%C2%AA%C2%86UZt%C2%A9%C3%8C%C3%8E%3A%C2%A0%C2%A1%C3%BAa%02N%C3%BE%1En%1C(%1C%3B%C2%BE%C3%A8%C3%9A%C2%BA%C2%9D%C2%9C%18'%C3%88%C3%A5%C2%8F%C2%B1%C2%9D%C3%831%C3%AD%7C%C2%91%C3%AD%C2%94%C2%AD%C2%B1%C2%B6%C2%AEc%C3%83%C2%B7%C3%98%C2%86H%C2%B0%C2%9C%C2%95%0A%C3%A0%01%C3%A8%5C%C3%A4%C3%8C%C2%BC%C3%B3%C3%8E%3B%C3%B3%C2%9D~%C2%BF%C2%BE%5C%C2%96%0D%C2%84%11%C2%A8%C3%BB%C2%B9%C2%BA%C2%BETAR%02%C3%BD%C2%8C%C2%93dM%C3%99%C2%87Lr%C3%93%C3%97%09%C3%80%C3%AF%22%09%C2%A4%C3%AF%C3%AD%C3%85%C3%88M%09%0Cv1lJ%C2%B0%C3%BCw%C3%8B%C2%B8%C3%B8%C3%97%12.%C3%B0%5D%C2%85%C2%AD(%C2%B2%C3%80%C2%A2%C3%A2%C2%A2%C2%A8r%C3%BFQ%16H%3D%04%C3%BA*%17%7DH%C3%83%C2%91-%C2%B1%C3%A8H%C3%83V%C2%8E2%C2%8C%C2%8E%C2%8E%1E!%C3%A8%C3%83Q%3B%C3%85%2F%C3%A7%C2%A2f%C2%BE%C2%9D1%C3%85%C3%89%C2%8El%C3%AD%C3%BBu%C3%A7%C3%B5%1E%C3%A5n%C3%B9%C3%B4l%0D%C3%B0%C3%8A%0A%C2%8C%C2%95%1Cc%5B%15%C2%A4%C2%B9S%C2%9E%C3%A6b-%251i%C3%94b%C3%9EI%02%C2%AF1%24%2B%C3%91%0EO%C3%A3%3A%C2%83%C2%B4cq%5B%C2%A0%C2%AA%C2%88%C2%8BG%C2%80%C2%AD%04*Y%05%15%C2%A3%023i%C3%81%1E8%00%C3%BB%C3%A0A%C2%B8%C2%A3S%C2%B5%03%3B%C2%9F%C3%8AC%3A%1BwJ%1E%C2%A5%C2%85%C2%BF%C3%8D%C3%8D_%C3%99%C2%BD%C3%A9%C3%A7%C2%86%02W%C2%95%C2%86k%07A%C3%BF%C2%84%C3%8F%C2%9D%16%C3%A66%2C%5E%C2%86%2C%C2%BE)%C3%A4c%C2%9F%C2%81%26%C2%97%20%C2%BB%C3%A2G%C2%8B%C3%87%C2%A1%C3%8AA%1D%03%C2%A6%C3%81hB%C2%86~uO%0F%C3%9Cz%C2%A0%C2%A3%C2%BA%3EU%C2%87tD%C2%A2%06G%C2%A0%C3%8BQ1%06%C2%A8%C2%9C%C3%94%08%C3%BC%C2%AB%3D%C3%B0%C3%8AW%C3%A9%12%124r%C2%B2%C3%AEV%19%22M1%C3%A6%25G%C3%90%C3%B4%C3%80%C2%AA%15%C2%9B%C3%91%02z%18%1E%17-n%25I%C2%8F%C2%86%C3%A1%26c%C2%80%C2%ABQ%C2%92Jn%04%C3%8E%C3%B9%3F%C3%83%C3%BBr%1F%C2%BCc%C2%A3%C3%B0%C2%A4%C2%A6%C3%89%0D%C3%B5%C3%AE%C2%94%C3%AC%C3%8C!%C2%9D%3A%09%01%C2%A8%1D%11%C2%9E%0A%C2%8E%C2%93%C2%B9%C3%93%07%C3%A1%C3%8F%C2%91%C2%A9%C2%87%C3%AF%C3%A4%C3%AAo%0D%C2%9A%5D%C2%81%C3%A6%C3%99%C2%84%C2%99%C3%91N%C2%BF%08%25I%C2%AD%C3%95%14%C2%81%C3%A4v1%17v%5E!%09%C3%B7%C2%8B%C2%A4%C3%94%C3%B3%7B%C3%A0-%C2%BCIn~%C2%82%C3%AF%C2%A4%C3%B0%3A%C3%B7%C3%A3S%7D%C2%B02%12%7F%C3%83)%C3%93%60%12cZ%3E8%C3%87%13%C3%A8%C2%A7%40%26R%C2%9A%3E%C3%BF%60~%C3%80%C3%A7%5B%C2%81%C3%B3o2%2BG%C2%82%C2%B8t%C2%B2Xa%C2%9E%60%C2%84%C3%A4C%C3%8A%C3%98-%C3%A7%C3%BBv%C2%A5%08%C3%A8%C3%91%15%C2%9D%C3%95%C2%8E~%C3%A7%C3%B3%C2%BEZ%C3%BF%3Ex%C3%86%C2%B5%C3%A7%C3%B5%0B%C3%80g%C2%A8nS%C3%AA'R%C2%BF%C3%85%C2%A1H%7F%C2%87%0FLv*%C3%BF%03%C2%93%23!!%C2%86%C3%B4%3F%C2%B0%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var switch_mode_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%5B%00%00%00%23%08%06%00%00%00%C3%BBGv5%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%0B%C2%9EIDATx%01%C3%ADZMl%1DW%15%3E%C3%B7gf%C3%9E%C2%AF%C3%AD%C3%B8GI%5C%C2%88%C2%9CbU%C3%82VB%C3%9AH%C2%88%22%24%1C%09%09%C2%A4%C2%B6%C3%90.%5C%01%1B%C2%BA%C3%AD%06%C3%91%1Dl%C3%B0%C2%B3%C3%84%C2%A2%C2%8BJ%C3%80%C2%86%05l%02%0B%24%C2%B0%C2%90%C2%AA%0Av%C2%95jD%05%C2%AA%C2%90%C3%9B%C3%90%C3%94Y%C2%B4Vq%C2%A9qj%C2%92%C3%A7%3C%C3%BB%3D%C2%BFy3s%7F%C3%B8%C3%AE%C3%98%C3%A3%C3%98%C2%8E%C3%9F%C2%8F%C2%9DZB2%C2%9F%3Co%C3%9E%C2%BB%C2%9E%C2%993%C3%B3%C3%9D3%C3%9F%3D%C3%B7%C2%9C%C3%8B%C3%A8%C3%BF%C3%98%C2%85%C2%B5%C2%96%01%C3%96%C3%AD%C3%B7%C2%B6%C2%A7m%C2%846%C2%BB%C3%BD%3D%3B6%C3%BB_%C2%AF%C3%97gt%C3%8A%C2%B1M%C2%9A%C3%BB%C3%9B%C3%A1%2C%C2%A3nv%C2%96Qe%C3%86Rev%C2%9B%C2%A3Jv%02%C3%9A%18s'n%C3%BFf%7B%C3%8E%C2%A1%C3%8E%C3%A4%C2%9FZ%C2%B2w%C2%BD%C2%97%C3%AD%C2%B0%C3%A5H%C2%AD%2C2%C2%9A%C2%9E%C2%A6%C2%85%0F_%C3%A7W%5B%C2%A3%C3%9B%C3%BF%C3%9F%22%C2%BE%C2%BC%C2%BCL4%C2%86%3FY%C2%B6KKD%C3%A3%14%19%C2%A2%C2%AFa%C2%BB%C2%B5Cl%C3%85f%C3%A4go%C3%86a%C2%A4%C2%9F*%C2%B2%0F%C3%8AC%C2%8A%C3%94%C2%83'%C3%98%C3%82%C3%95%7B%C3%BC%C3%AA%C3%82%7B%C3%BC%C3%B6%C3%A8%C2%90%C2%90%09q%C2%A1%C2%AB%C3%98%C2%8A%C2%82mD%C2%8C%C3%BAp%C3%9C%C2%A6%C3%AB%C2%92%C3%80%C2%9A3%C3%ABF%C3%9F%1B0%C2%9An%C2%9BpL%C3%A8%C3%A6%C3%B2%C2%98%C2%99%20%02%C3%B1%C3%98%2CHO%C3%BB%C3%AE%3E%C3%B1%7BM%C2%9D%3A%C2%B2%19%C3%AD%C3%A8%C3%AF%C3%AC%C2%AE%3C%C3%B0%C3%A51%C2%92%C3%B9%C2%B0!%C3%BCX%C3%88%C2%96R%5E%C2%9FQ%22%C3%9A%0A%3CNZ%C2%B0%1C%C3%A3D%C2%92QKY%C2%9B%C2%B3%C3%86%C2%B0%C2%9C%C3%89%C2%85V%C3%A9r%C2%94%C3%A8%C2%BAV%C3%89%C3%88%C2%80%1A)%C2%92Z%18Z%C3%95%C3%B5%C3%B2%C2%A8%C2%9D%C2%9A'%C3%83%C3%AC%C2%8Cq%C3%94%3A%3B%7B%09%3F5d%C3%AF%C3%B3j%10%3D%C2%B7%C2%B8%C3%88%26oM%C2%8A%09%C3%88%C3%84%C3%BAr%C3%95%C3%B7%C3%8A%C2%BE%1F%C3%95%C2%85%C3%AF%C2%91%09x%C3%80%7De%13_%C3%87%C3%9CG%03%C3%88%06%C3%A1%C2%89F'qm%3D%C2%AB%24%C2%93%C2%B1f6%C3%96%C2%BC%15%C3%B9%C2%A2%14%C2%95%1A%26%C2%A6%C3%91%7C%C2%B2%C2%B4Z%C3%95%C3%A3SC%C2%9A%C3%A6%C2%9D%C2%97%C3%8F%C3%98%C2%ACc3%C3%82%25%C2%9D6%C2%A4%C2%94O%C2%B0I%2211J%C2%B2%C2%B6Z%C3%B3%C2%83b9H%C2%92f%C2%9E%C3%B9%3AOV%14H%C3%9B%1C'%C2%91%17%C3%84%7Cf%C2%ACG%C3%84%C2%99%16%C3%B8%C2%8Ff%C3%9AX%C2%8AUb%23%C3%AE%C2%A9%C2%90%C3%99%C2%A0%C2%A9%C2%8D%0A%C2%9B%C3%A45%C2%93%C2%ADVk%C2%9C%C2%82xi%C2%A5J%20%1C%C3%BD9k%C3%B0%C3%96X7%1Cd%1A~d%C2%B2%C2%AF%5C%C2%B92%C2%80%C3%9D%C2%941f%0C%7B%C3%B7%C2%BD%C3%869%C2%BF%01%C3%8C%C3%93%09%C3%A1am%C3%9E%C3%B7j%C2%B7%C2%AB%C3%A0%C3%A3%3C%3FC%C2%AB%C2%B2%C3%96%2C%C3%B8%3E%15%C3%B2J%C2%85E%C2%8A%C2%BC%12%C2%97T6%10%08%12%C2%B6%04%C2%87%1C%C2%B2%C3%9C%5C%24M%17%0C%C3%93E%08ph%C2%B8%C2%B9C%C2%8A%C3%BF%C2%93%0B%C2%BB%C3%82%12%C2%B1%C3%A5I%C3%9E%C3%90%C2%8A%C3%AA%C2%A1%1Fy%C2%858%C3%87%C3%BFMu%3E%C2%BE%C2%94o%C3%91%C3%92%20%7D%C2%95%C3%96%1D%C3%93%C3%B6X2%C2%82%07%C2%9E%C3%92Z%C3%8F%C2%B8%C2%87%C3%AEp%C3%98u!%C3%84%2CHX%C2%A6O%01%3D%C3%98%C2%ACa%7B%C2%B5%C2%9B%C3%8D%C3%9D%C3%B8%C2%B9R%C3%A1%0B%C2%95Uq%C2%95%C2%8A%C2%B26%60%03%3F%06%C3%91%C2%BAQ%C2%B2F%C3%B4%C2%93%05%C3%BF%C2%8A%C3%BA!%C2%B6%C2%8Frb_%C3%87YO%C3%A2%C3%94%7C%C2%9BK~%00%06_%C3%A3%C2%82%16%C3%90%195%25u%C3%8Dr%C2%AA%C2%B1%C3%98%C2%AF%C3%8B%C2%BE%C2%A4%C3%99%C2%97%1F%C2%8Dn%C2%ADm%25%13%C3%93%13%C2%9A%C3%A6%C2%A6%0D%C3%AD%C2%89%12%C2%BB%3D%C3%B0%00%3Cj%067%C3%BC%03%C3%AA%11x%C2%B0%C3%8A%C2%BB%C3%AF%C2%BE%3BK%C3%87%C3%84I%C3%98L%C2%BD%C3%BB%C3%B99N%7F%C2%BF%C3%A5%C2%ADoV%7D%1D%C3%A5%0A%C2%81R%25%1B%C3%91%00%C2%93%7C%08%C2%84%0C%5B%C3%8D%C2%BE%C2%85%23%C2%9F%C2%A6%C3%B6%24%1F%C3%84%1B%C3%84%C3%B9%C2%9C1vE%C2%92%C2%A9%C2%92%C3%8F%C3%96E%2C6c*4%C3%83Q%C2%8A%C3%8F%C2%AFR%0C)143%C2%93z%C2%B8%C2%A0.%0F%C2%AD%C2%94z%03_%C2%9F%C2%A5%C2%A3a%C3%AA%C3%9C%C2%B9s%C2%B4%C2%B6%C2%B6%C3%B6g%3A%22N%C3%82fJ%C2%B4%C2%8B%3E%C3%9E%C2%92bm%C3%BD%13O%C3%9D%15%C2%B9%C2%9C%C2%A0%22%3C%C2%BA%0FC%C3%9F%10S4%02%C3%99%C3%B8%0E%C2%8Et6%3D%C3%AA%1D%17q%C3%AD%2B%C2%82%C3%B8M%C3%84-%11cF%C2%87%1E%C2%84Hs-%C2%83H%17.z%C2%86%26A%C3%B6%C2%B5k%C3%A4%C2%BC%C2%80w%C2%BA%12%5E%C3%A1%C2%9F%C2%A2G%C2%AE%C3%901%C2%80%C2%9B%C2%A8%5C%C2%BE%7C%C2%B9g%C3%8F%3Cq%C2%9B%15%C2%A2%C2%A5%C2%8D%C3%B7%C2%B8%0B%C3%AF%C3%BA%0B%C3%82%C3%87H%C2%97%C2%B7%C2%89*%C3%A3%C2%A4%01H%C3%87%C2%B7%C2%A1%C2%AFO%C3%911%00ix%04!%C3%B6%C3%B71~%0EX%2B%C3%BA%C2%BC%C2%88%15%C2%BD%C2%BC%0E%C3%BC%C2%BB%C2%89G%1B%1B%C2%82%10%C3%B5%C2%B8%C2%B8%C3%9Bux%5B%C2%B2%2F%5D%C2%BA%C3%B4%02v%2F%C3%90C%00%06f%C3%A0%C2%A9c%C2%BD%1E%7F%C3%826y%C2%B1%19%09%C2%A9%1A%C2%92%1B%13%08Ky!d%C2%994%C2%BB%08%C3%82%C2%9E%C2%A6%C2%87%00%24%C3%B91%C2%AB%C3%A9%C2%9B%C3%A0%C2%B4%2C%24%2Fh%C2%93%C3%A4D1%C3%AF%C3%9D%C2%89%C3%BA%C3%85%C3%82%C3%9C%19%C2%9E%C3%85%C3%B4%C2%9D%3C%7B%C3%A6%C2%81%C2%BB%C3%A5%08%C2%88%C2%84H%C3%B7%7B%C3%A1%C3%9A%C3%9Cv%08%06v%06%C2%B8%5Eq%C3%A8%C2%B1%C2%99%C3%9D%C2%83%C3%9B%C3%81%C3%BB%C3%88lB%C3%AFw%C2%BD%7BWB%C2%AE%C2%9Eg2%19%C3%A5%C3%9C%14%C2%BC%C2%AD%C2%96%0D%C2%8C%C2%95y%C3%B8%5B%09%C2%87%3Cw%C3%B0%02%1B%14%C3%91%C2%BF0et%C3%BB%C3%83%C3%9A%C3%9Dv%10%20%C3%BC%19t%1C%C2%A2%19S%C3%88%5B%1BD%5B%C3%8A%1BQ!%06%C3%A3%C2%80gy%C2%95C%C3%AF%C3%96E%01%C2%94f%03%C3%B6CJI%C3%83%C3%83%C3%83488%C2%B8%C3%9B%C3%A6%1E%C3%9A%C2%B5%0D%0D%0DQ%1B%3C%C2%BB%13%C2%BAuD%3B%C2%9B%0E%C3%A5r9%C2%B5qp%1B%188%C3%BC%C2%B2%20%C3%B8%7B%C2%99%C3%8D%C3%9D%C3%90k%C3%A16%C2%93xxn%7C%C2%81h%C3%83%C3%A7J%C3%A7%C2%8C5%C3%AE%C2%A6%C2%BFt%C3%B0%C3%BC%1FaVr%C2%99~%C2%95n%C3%BB%C3%9B%C3%9FH%C3%9B%C2%9E%C2%A6%C3%9F%3D%60%13%C2%AE%C2%9B%C2%B7%C3%9C%5E%C2%82%24%C3%A5C%C3%8C%C3%ABE%C3%8Ex%C2%9B%3A%16%C3%8BTg%1D%C3%89%C2%86g%1C%3A8%C3%85q%C3%AC4u%C2%9F'%C3%BB%C2%88T%1D%C2%A2(%C2%A26p%C3%9E%3DE%5D%C3%90%C3%8E%C2%A6C%18%C2%86%C2%B4%C2%B9%C2%B9I%C2%ADV%2B%C3%BD%C3%AD%C3%B6%C3%AE%C3%B7%C3%96%C3%96V%5B%C2%9B%18d%C3%B7%C3%A9%C3%BE%12UA%7B%C3%84%C2%A2%C2%B0%25A%C2%B6d%C3%82%C3%B8d%C3%B8%C2%A3%C3%94%01%C3%8E%C2%93%C3%9F%C2%A4%C2%95%C3%B4%C2%BB%C3%B3%C3%A6%C3%9F%C3%92b%C2%A7%C3%83%09%13%C2%A0'%C2%98%60~%60%C2%85%C3%87ZR0%C3%8B%11%C2%BA%C2%9Fa%C2%B48%C2%91%C2%86%C2%9E%C2%87%C2%92%0D%C3%8F%C3%B8B%C2%BB%0Bf%0F%1C%04%C3%81%C2%BE%C2%BD%23%C2%A4%C3%ADM06F%5D%C3%90%C3%89%C2%A6%C3%ABdw%7D%C2%B7%C3%9F%C3%BB%C2%BBC%07%3B%C2%89%C3%99%3F%C3%88%C2%8E%C2%A3%C3%8D0%C2%8E)4g%C2%9E%11Ls%0F%C2%83%C3%9A%05%C3%AA%C2%80~%C3%8A%C3%91%C3%8B%C3%B4%C3%97%C3%B4%C3%BB%C2%9B%C3%B41u%03%C2%BC%7B%C2%98%11G4c%05%23%23%C2%9A%18%13%C2%BD%C2%B3%C2%82%C3%AF%3C%1F%C3%A3tDd%0F%C2%9C%C2%91%C3%AC%3C%C3%9By%7B%C3%96%C3%9E%06%5De%C3%A4%04%C2%B0%C3%8F%C3%A6%C2%B8%1A%C3%9A%C2%9ES%C3%A4%24Ks%1D%22%C2%9DU%16%3A%5D%C3%A0%12%22BG%C3%B2M%C2%BA%C2%93%C2%92%C3%BE%15%C3%BA%2C%5DHS%C2%80m%C2%917%C2%8Eh%C2%B5%C2%AD%18E%C3%B7%C2%B1%C3%A6%3E%C3%A6%5C%26%C3%97%1E%C2%8BlG%C2%AE%23%C3%99%11%0E%C2%AF%C2%A5%24I%C3%A8%7F%1D%C3%8B%C3%98%2C%0B%C2%A0%C3%9FH1!%C3%B9%C2%A1%5Dc%C2%97*%C3%8B%C2%8B%C3%B4D%C2%BAwZ%C3%ADd%C3%A4%C2%BB%08%C2%9A%C2%BB%01%C3%A2%C2%8A%C3%B4%09%C2%B7Q%C2%B0%C3%BD%C3%96%C2%9D%C2%A5%C2%92%C2%9D%C2%9BK%07%C3%90%C3%83%3D%1B%04~%C3%94%C3%A9%C2%82%C2%99%C2%94%C3%B4%C3%B7%C3%B7%C2%A7%C3%BBN%12%C3%A2%C2%80W%C3%A8%06uA7%C2%9BG%C3%85%3E%C2%9B3%C3%883%2F%C2%BB%2F%1Bxh%C2%89%08%0D%3A%C2%A2%C2%B9%02%C3%97w%3B%5D%C3%83%C3%89%C2%88%C3%B3f%C3%A7%C3%9D%C3%BD%14t'%C2%9BQ%C3%93j%C2%A3%15%C2%A6%C2%93%3E%C3%B9%18%2B%3D%7B%7B%C2%94%5C%3D%22e%C2%BB%C2%9Df%C3%8Fw%C2%BAf%26%19%C3%8E%C2%AB%7B%C2%90%107%C2%98v%25%1B%C3%A8%C3%A5%C2%98%C2%9E%C2%91%C3%99tZ9%C3%8B*L%C2%8DW%C2%AD%C3%B3l%C3%83b-%C3%89%C2%AA%C2%84L%C2%A2%C2%88%C2%BD%C3%9D%C3%AD%3A%3F%C2%A4'%C3%93%C3%BDSN%C3%B4%C2%BB%00%C3%82%C3%B4%0E%C3%B2%25%C2%91%60%26%C2%B6%0C9Y%087%C2%A6%C3%AC%C2%86%C3%A6%26m%C3%9B%01%127%C3%BA*m'y%0E%C2%85%23%C2%B7%5E%C2%AF%C2%A7%C3%91%40%C2%87%C2%88%20%C3%83%7C%2F%C2%89)%0Ch%C3%97%3B%C3%99tpr%C3%A5%C3%AC!%C3%92%C2%A0%C2%A3%C3%98%C2%9CAny%C2%BC%3F2Jb%C3%A2%18b%C3%87X%C3%84%25%C2%8B%C3%88%C3%A8u%08%C3%B7%C3%BB%07O~%C2%8A%3E%07%C2%92%C2%BF%C2%9C%C3%AA%C2%B3%C3%B3%C3%AC_%C3%907%C3%92%C3%9F%0E%2F%C3%92%C3%95t%3B%0C%C2%90%C2%90%C3%B7%C2%8C%C2%B6-C%3C%C3%B1Y%11%C3%85%C2%85%40%2F%C2%A1%C2%93%C3%93%0A%0E%C2%B5%C3%B1l%C3%9Ch%0D%3D%C3%B1s%C3%AA%C2%80f%C2%B3I%C2%8DF%C2%A3%C2%AB%C2%84%00%C2%BF%C2%A6%1E%C3%90%C2%8BMG%C2%B2%C2%B3%C3%99%C3%83%18%C2%B1%C3%9F%C2%A6%C2%AB3%C2%A2%C2%8A2%7C%C2%B7%C2%A0s%C2%A5%C2%BC%C2%92%C2%9CGZ%C3%A9%26%22%C2%93%06b%C2%93%C3%97%0E%C2%9E%C3%AC%C2%BC%C3%98yt6%18%3A%C3%B9%C3%88%C2%BE%3B%1D%C3%8F%C2%B4%C3%BC%C2%80%C2%89%C2%BF%C2%A1%C2%8C%C3%B31%C2%97%C2%BC%C2%A9%C2%99i%C2%990N%C3%8C%60%C3%95%C3%84%C3%81'%C3%96%15%C2%93%3BF%23%C3%B0%C2%B4%C2%9F%C3%A1%C3%A1%C2%97%C3%A9%C3%A1p%C3%BD%C3%A6%C3%8D%C2%9B%C3%97%7B%3D%C3%B8%C3%84lB%C2%A5%C3%A7F%16-%C3%8A_F5%C3%82%C3%84%C3%A25%C3%A7%C3%A4%C2%87%08%C3%93%1A%C3%96%C3%90%3B8%C3%A2-z8%C2%AC%1BF%7F0%C3%82%C3%96%C2%8D%C3%A2M%C3%89Yd%C3%8A2%19%2C%C3%88%C3%A4%3F%23%C2%93%C2%BB)%C3%96%C2%B6d%3BO%C3%83%C3%83_%C2%A3.%C2%AFv%3B8%C3%92%20G%2F%1D%C3%A5%1Cg%13c%C3%80s%C2%9F%C2%A6%C3%8Dl%069%0D%C3%9D%1C%2B%C2%82%C3%AC%C3%A1M%C2%AD%05%C3%88%0E%0C%0A%2C%7C%C2%93%04%C2%AB%C3%81%C3%A5~%C2%83CV%C3%A8x%08Q%C3%88y%053%C2%9A%0F%C2%A5%C2%B6%1B%3C%C2%88%C2%B7%3C%C3%AE%C2%B7%C3%8A%5E%C2%90PN%C2%99%C2%A9%C2%A9%C2%B4%18%C2%9C%C2%A2c%C3%A8%C3%A7t%0F7%C3%BF%C3%B81%C2%BCm%1E%1D%C3%B5%C2%B8%23%C2%8F%C2%8E%C2%88%C3%85%C3%85%C3%85%1B'c%13%C2%BA%C2%B9H%C2%A6Q%C3%82%C3%80(U%C2%9C%C2%880Dj%C2%A5%C2%AE%C2%98v%C3%B2%C3%B51%C3%A3%C3%BCet%C3%8D%07t4%40%C3%B3%C3%99%2B%C2%82%C2%B1%C3%B71)%5DG%12%603%C3%A1%C2%A2y%C2%AF%C2%B9%11%C2%A3P%C2%A3h)2%C3%99T%C2%BD%C3%AD%00%C2%B9%17%C2%8E%C3%B0%1D%0F%C3%AF%C2%AA%C2%BD%C2%B8%60%0D%C3%93%C3%AE%C2%97%C3%B0%1A_%3B%0E%C3%91'j%13%C3%BE%3D7%C2%BD%08%C3%AF%1E3%03%C2%85f%1C%09%1B%25%C2%91%5B%15%C3%82j(%C2%A2WQ%5E%C3%BC%08%C3%A2%C3%BA%13x%C2%B9%C2%B3%C2%B9%C3%9E%C3%85%2C%24%C2%88%C3%BE%C2%84y%C3%8A%C2%8F1%18%C2%BE%C2%8D%C2%90%C3%AF%C2%AE%C2%A7%C3%AC%3D%C3%85U%C3%83%C2%93%2C%C3%B4%09%25%C2%89%C3%B1%C2%AA%C2%A6%C3%A9%7B%C2%A8%C2%B4W%C3%9C%C3%AC)%7D%C2%BB%C2%8ET%5Dw%C2%A9%C3%8B%C2%9D%3C%07*%1A%C2%A8p0%C2%86%1C%C2%AE%C2%ADa%C3%BB%07~%C2%BF%C2%8AD%C3%95%C2%8D%C2%87!%C3%B9%24m%C3%AE%C2%AE%7Cz~%C2%9A%C3%93%3B%C3%A7%C3%A4%C2%9D%25%C3%AD%C3%A5%C2%A8%3F%C2%90%C3%B9F%C2%BE%C2%A9%C3%B3e%C3%8F%C2%9A%C2%BE4Ejy%C2%9F%22%5D%C2%86%C3%B8%7C%11%14%7D%1E%C2%9E%C3%BB%08%C3%9A%0B85%C3%84E%C2%AA%C3%A8%C2%8C%C2%8F%C2%90%0B%C3%BF%0B%17%C3%BC%0E%22%C2%8F%C2%BA%C2%94vCq%5Bg%C2%B1%C2%ADG%25%C3%99%3C%C2%9B%C3%A3!%C2%95%0A%09Rjj%16%122%C2%B3S%C2%A5q%C3%B7p*%C2%962%C3%AC%5B%C3%83%C3%A7%C2%9ExjV%2C%C3%8DWQx%C3%94%5E%40%C2%81%2F%0BIn%C2%AB%C3%89%C2%8B%1E%C3%89%C2%82%C3%8BG%1BREcy%C2%8Ek%C2%963d%C2%A4%10%3C%5D%C2%9F%06%C3%8F%C3%97%C2%88%2Bb%C3%A6%C2%8A%C2%BF%C2%A4B%C3%8Dx3%60%C2%B4%C2%A5%C2%84j%C3%8AP6%C3%97%06%C3%A3x%7C%C2%BD%1E%C3%93%C3%94%C2%98B%C3%95%C3%94%C2%B0%C2%99%C2%8A9uK%19%C3%B6.%09%C3%9B%C3%8Eo%C2%93Y!dWW%C2%AAT%5E%C2%BAks%C3%8DGl%C2%A1%C3%88u%C2%A2%C2%A3%18%19%C2%8C%C2%96%C2%89%C3%AC%16%C3%B7%C2%AC%C3%8F%C2%99A%5D%0B5te%C2%98%C2%92%C2%A0M)m%3C%C2%96%C3%A4%C3%88%C2%8F%C2%90%C3%93%C2%8A8%C2%A2%0E%7CD%C2%81%C3%B0%C2%A3hX%C3%87%C2%B24%C2%94%C3%90z%C2%A4%1D%C3%91n%C3%96%C2%9A.%06%C3%9A%7B%1Ft%C2%9A%C3%A0%C3%BC%C2%8B%C3%AD)(%20%C3%B5I%1F%C2%BE%C3%8Ei%C2%AD(%C3%97W%C2%94%17%C2%96K%C2%9Eg%C2%9AR%1A%C3%A1%C2%8B0%C2%96%2C%C3%B0%C2%90%C2%BD%C3%B3%C3%929!%0Av%10be%C2%BD%C2%9CQ%3E%C3%A3%C2%89%09E%C2%B2%C2%89%C3%A0%26G2iQ%3E9%0F%C2%8D%5E%C3%80%C3%84%C3%A9%C2%8F%C3%8F%C3%BCRC9%C3%AE%2F_8%C2%8D%2B%C2%A22%C3%ACz%C3%B8%C3%8E%12%C3%A0%C3%AD%C2%B5~%C2%88%C3%8A%C3%86%C2%ABb%05%C2%A9%C3%AE%20%C2%8A%C3%84%C2%88%C2%BA%206%C3%B5%C2%9A%60%C2%9B%C3%BD%C2%9C%C2%95%1A%C2%9C%C3%99%C2%84%C2%B9%C2%89r%C2%A1%C2%84%3A%3A%2B%19-B%C2%ADj%C2%BE%1E%C2%A6%02%C3%B2Y%C2%83%C3%BA%C3%96%C3%A4%C2%BA%C2%9D%C2%98X%C3%944%C3%B7%7B%C2%93u%C3%A8%C3%AE%C3%B2%C2%85%C3%93L%C2%B6%C3%83%03%1A%C2%9E%12%04%C3%92%C2%A7%C3%A69%C3%8D%3F%C3%86hr%C2%94-%2F%12%0F%C3%9C%3C%C2%8B%1A%C3%AC%C3%AC%C3%A8%C2%A6%5D%5B%C3%ADcf%C2%B4d5%C3%9F%C2%B0%C2%9F%C3%A9%C3%AF%C3%97%C2%B7p%C3%8A%04B%C3%89t%C2%A9%C2%82%C3%83%C3%8C%C2%83%C3%8B%C3%8D%0E%C3%A2T%C2%92%C2%9Da%7B%C2%A1e%C2%BA%C3%A6%C3%B4%C3%81%05%C2%97%0E%C2%AE2%C2%8E%C3%B4%C3%A8%C3%BC%C3%94%24%C2%9B%C3%82%0C4m%C3%83o%C2%AAL%C3%9A4%C2%938%5B%C3%81%5Bq%7F%C2%B9p%06v%C2%84%05%C3%B2%C2%A7%0E%C2%87.%25%C3%9E%C3%93nw%C2%9C2%1B%C3%B0%C3%9A%1D%C3%9F%0D%C3%BF%05%C3%8A%C3%BEb%C3%8D%40%C2%82%C2%97%C3%B3%00%00%00%00IEND%C2%AEB%60%C2%82"; 
var switch_view_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%5D%00%00%00%23%08%06%00%00%00%C3%B6Y%06r%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%0BRIDATx%01%C3%ADZ%5Bl%1CW%19%C3%BE%C3%A6%C3%8C%C3%AC%C3%AC%C3%9D%C3%B6%3A%C2%B1%C3%92%24%C2%86%C3%B8!-%C3%82M%C3%9A%14%02%02T%09W%C2%AD%C2%90%10%C2%AA%C2%8A%10%C2%AE%04%08%C3%91J%3C%C2%81D%C2%A9%0A%C3%8F%C2%B6_%C2%A0oP%24%C2%90%C3%88K%0B%0F%C3%A5%C3%A2%3E%C2%B4%C2%A5%7D%C2%82%C2%92%C2%AD%C3%A0%C2%A1H%04%C2%85%265V%08%C3%82%C2%BD%C3%A6b7%C2%BE%C3%AC%7D%C2%AE%7C%C3%BF%C3%AC%C2%8C%C2%BDk%C3%AF%C3%8E%5E%12%1E%C3%80%C3%BD%C2%A4%C3%A3%C2%99%3D3s%C3%8E%C3%B8%3B%C3%9F%C3%BC%C3%A7%C3%BF%C3%BFs4%C3%B4%C2%80%C3%AF%C3%BB%C2%9A%1C5M%C3%B3%C2%A3%C3%9Fr%C3%9EZ%1F%C2%9D%C2%B7%C2%A2S%7D%C3%94%C3%86~%C2%87%C3%AAT)d5%0B%C2%B4%C3%9Du%C3%8D%C3%B3y%3E%C2%B7%20%C3%A7Z%C3%B3%7CQ%C3%9AQ%C2%8B%C3%8DcK%C3%BD%07%C3%A8%C2%84%3D%0AmW%C2%A7%C2%9C%C3%8E%C2%87%C2%BF%C3%A7X%C2%8A%24%C3%B2%C2%92v%19%0Du%1Cy%C3%AD%1D%C2%ACk%C2%93%C2%98%0C%C2%AE%5E%C3%A1%C2%B9%C2%8B%C2%8A%3F%C2%89%02%C3%95%C2%9C%C3%B5%C3%8Ea%C3%9D%C3%BF8%0A%1E%C2%B0%C3%A47%C2%9F%C3%85%C2%B6%C3%8A%C3%B7%C2%BB%C3%A2%C3%9BH%C3%AF%60%26%C3%B8%7B%C2%91e%C2%82%C3%A5%C2%82~%05I%3D%01C7%C2%A0t%1D%15%1DHh%1A%3CUA%C2%99%C2%B7%C3%A6%C3%88%C2%AA%C3%ADg%C2%90q%5D%C2%B8%C2%AE%03%C3%87m%C2%A0%C3%A1Nb%C3%8B-%02%C3%9E%0C%C3%A68%00%0B%C2%BCo.%20%3C2%3F%C3%BBq%00%C3%B6%C2%90%C3%9Eb%C2%8B%C2%B5%22%16%C3%94%0C%C2%A6%C2%A9%C3%AEuc%C2%9D%0C%17%C2%A0%C3%AB%C2%ABh%C2%98%C3%82%C2%B6%0E%C3%8F%C3%90H%C2%BE%C2%86%04%C2%AF%3BdN%C2%91T%C3%97%C3%B7%C2%A0%C2%9C%24%60%C2%BB%2C%1C%06%1BH%3A%40%C3%9EY%C3%82%C2%92%7B%C2%9D%C3%A4%C2%BF%C3%8A2%17%12%C2%BF%C3%BD%12%C3%BB%C2%8C%C3%B86%C2%9B%C3%9D%24%5Cl%C2%B1%C2%98%C2%83%05%1E%C3%87I%C2%B2%C2%9EH%22I%C2%A2u%C3%93F%3D%C3%A5%C3%80OR%C3%A9)%0D6%C3%99N%24%C3%98%C2%84%C3%AE%C3%80%C3%95%0Ch%C2%9E%0F%C3%9F%25%7B%C2%B6%07%C3%97%C3%92%C2%91%C2%A8%C2%BBh4Ld%1A6%C2%8C%C3%86%18%2C%0BT%3Ep%C3%92%5D%C3%80%C2%ABm%C3%84%C3%AFK%C3%92w%08%C2%97%C3%9F%C2%81%0D'%C3%A1%C3%87%C2%8C5x%24%C3%9C%09H%C2%AE%C3%80%C3%8E%1Ap2%3E%C3%B4%C2%AC%C2%82%C2%9EVpST%C2%B5%C2%89%C2%A6%C3%A25%07%C2%9E%C3%8F%C2%87l%05%C2%AD%C3%81fj%C2%BC%5Es%C2%A0*%0E%C3%ACZ%16%C2%B9%C2%8A%C2%8DF%C3%8D%C2%A2%C3%B2%2B%C3%888%2Bx%C3%93%C2%99%C3%A1%C2%83%C3%AC%C2%8B%1Dc%C3%9F%C2%99%17C%C3%BE%C2%B4%13%3E%C2%AD%C2%AD%C2%A0b%C3%A4p%3D%C2%91%C3%82%04%C2%95mg4%C2%989%05o%C2%84%C3%8A%1E%C3%B1%C3%A1%C3%A5%1D%C3%AF%C2%BD%C2%89M%C3%AB%C2%8F%C2%A7-%C3%A7%C3%AA%C2%94%C2%8B%C3%B2A%C3%9F%C2%B3%C3%93%1E%C2%B93%C3%94%C3%B8%C3%9B9%C3%B3%C3%A4%C2%B91%C3%B3s%17%5C%C3%A8e%05%C2%BF%C2%94%C2%84%C2%B1YC%C2%9D%03%C3%A3%C2%AA%14Fk%C2%A0%C3%BD%C2%9F%C3%818%C2%89%C3%BE%C2%93%2F%C3%83-%C3%A3%C3%9E%C2%8Fm%3Fu%C3%AA%C3%94%C2%98%1C%5C%C3%97%7D%C2%88%C3%87)%C2%96%C2%B1%C3%B0%C3%92y%5D%C3%97_%3D%7F%C3%BE%C3%BC%C3%B3%C3%B8%2F%C2%80%C3%BD%C3%8Et%C3%AB%C2%93%C3%87%22%C3%BB%C3%9D%C3%80%C2%80h3%2FM7p%C2%9A%03%C2%B1j%C2%96%C2%90K%26P%C3%8F%C3%92%1E%C2%8C%C3%9A%C2%B0%0B%C2%B4%C3%A3%C2%85%C2%9A%C2%BDvt%C3%83~%C3%AE%C3%B3%15%7B%C3%B9~%C3%9A%C3%B1t%C2%B7F%15%C3%927%C3%B2%C3%89%C3%93%2F%16R_y%C2%85%C3%8F%C2%ADs%C2%B2%C2%BD%C2%A1A%C3%9B%C2%B0%C3%A0%C2%96%C2%AA%C3%88T'%C3%A1%C3%96y%C2%9B%C2%BDH%C3%AF%C3%A6a%C3%ADa%C2%B7%17%C3%A9w%C3%9Du%C3%97cb%C3%B7Z%C3%BE%C3%A9NXaY%C2%B8p%C3%A1%C3%823%C2%B8%058y%C3%B2%C3%A4%23h%C3%9A%C3%99%C2%A9%C2%98%C3%9BV%C3%B8%C3%9E%C3%8F(%C2%A5%C2%9E%1A%C2%84%7C%C2%AD%C3%9Dc)%C3%92C%C2%B9dR%C2%A5%C2%A9%03%C2%A8f%5C%C2%A8Q%C3%8E%C2%82%074%C3%A8%13ug%C3%B9%C3%B6k%C3%953%C3%9Fs%C3%BD%C3%9A%C2%81~%1BO%1A%C3%87%C3%BEr0%C3%BD%C3%A8%2F%13j%C3%A2m%03%C3%BE%1A%C2%87%C3%A3%06%C3%A7%C2%86-%0B%C3%95Z%19~%C3%A32%C2%B6lz5n%C3%B0%22%1DH%C2%A7%C3%8A%C2%A6%C2%A8%C2%B2%C2%A7y%3A%C2%83%C3%BE%C2%B1B%15%C3%9EG%12V0%04%C3%A4%C2%8B%0A%C3%BB%C3%BC%C3%A2%00%C2%8F%0D%C3%94g%0B%C3%A9%C2%8B%C3%AA2%C2%AE%1A%C3%A3%C3%A4%C3%8AC2%C2%9B%C2%84%C2%9D%C2%B7%C2%A1%1D%C2%A4%C2%89%C2%98h8%C3%BF%C3%BC%C3%A8%C3%95%C3%AA%C2%99%C3%AF%7B~m%1C%03BG%C3%BE%C3%9D%C2%A3%C3%B9'~%C2%A0%C3%94m%2B%3A%C3%9CU%1A!%12%C2%9F%C3%98%C2%AA!W%5B%05%C2%ACi%C3%8C%C3%9A%C2%9D%C3%9C%C3%87%C2%90%C3%B0%C2%B3%C2%88WZ7%0CE%C2%BC%10%C3%AE8%C3%8EY%C2%BE%C3%87)%0C%C2%8E%C2%BE%C3%BBT%C3%8D%7Ft!%C3%B0%C3%85%C2%8F%C3%83Q%09%C2%8C%26%0CxI%C2%AA%3D%C3%8B%C2%B9.Oe%16D%C3%A1%C3%83%10.pQ%3Az%C2%AD%C3%B2%C3%B4%C3%97%C3%A9b%C2%8E%C3%89%7C%C3%A0%C3%81K%C3%AB(%C3%93t%C2%BDkL%C2%A3%12D%C2%B3%C2%9D%C3%92%08%C2%A1%C3%9A%C2%A60%1C%C2%A2%2Fd%20x%C2%9E77%24%C3%A1Q%C2%9Fg%C3%83%C2%B9'%16%C3%8A%0F%C2%9D%C2%87s%C2%8C4)r%5D%C2%A1%C2%9C%C2%A0YI%C2%91%C2%A0%2C%15%C2%99%7F%C2%B7%C3%B2%C3%93%2F%0FbR%3A%C2%A1%C3%A1%C2%BD%C3%B9%C2%A9M%C3%AB%C2%95%7B%C3%A8%C3%B5%C3%A4h%C3%A33%16%C2%92%C3%89%3A%5D%C3%91%2B%C2%B0H%C3%BAR%5BnG%10%C3%9A%C3%93%19%C3%9C%1Cf8%17%7C%C2%B7%C3%9F%C2%9Be%C3%82%C3%A4%C3%A0%C3%B7%7D%7F%17Lq%C3%A0z%C2%B6%C2%A1%C2%B4p.e%C3%88%C2%AEm%C3%8028%09%C3%92kQ%C2%A6%C2%B8%C2%85%C2%8Ewm%C2%A2%C3%A1%C3%BE%C3%AB%C3%93%C2%BB%1Fz%C3%AF-%C3%A0%C3%85g%C2%81%C2%BF%C3%BE%C2%B9%C2%BD%5E%C3%AA%C2%A4%C2%946%C3%B7v%C2%B4%C3%99(%3E%C3%84%C3%B9!G%2F'%C3%AD%06%C2%BE%C2%BEkHt%C3%8B%C3%96%C2%B4%0E%C3%AF5%C3%97%C2%A1%0E%C2%A6i%22%C2%9DN%C3%AF)R%C3%9F%09%24%C2%B1c%3B%C2%9D%40%C2%95%C3%8Eu%C3%ABow%C3%BB%C2%86a%04%C3%B5%C3%89d%C2%B2S%C2%9F%C2%8F%C3%B5R%7B%C3%B8iO%C2%B3T%14%C2%95%C2%AD%5Bt%17%19%C3%AC%C2%98Tzz%C3%9D%C3%BA%C3%BD'%3A%C2%99%C2%95%C3%BC(%C2%9D%C3%8Bo%01O%7Cm%C2%A7N%06B%C3%AA%C3%8E%3C%C3%99%C2%BC%C2%BE%1B%C2%B6%C3%B7%C3%BE%C3%AD%C2%8E%7D%7D%C2%9C~%7C%C2%8A%3E%3C%07%C3%95%24%C3%A3%0E%C2%95~%C2%A4%C2%8DtQ%1C%C2%BA%C2%98%15%C3%B9GGFF%C3%B6%C2%94%5C.%C2%87.%18%3Bq%C3%A2%C3%84%0Cz%40%C3%A6%0Ft%C3%B8%C2%B2%C2%A2%C3%BE%C3%86%C3%86%C3%86%40%0Fe%C2%BB%3E%C2%9F%C3%8F%07%C3%B5r%C3%AC%C3%94'%070v%12n%C3%89%04%C3%92%C2%B3C%C2%9D%C2%B1J%C2%9A%26%C2%86I%15%C3%B8%C2%A6%C3%A3%5E%3D%C3%96%C3%A9!!%C3%B5%C3%B4%C2%BDMEGj%2F%C2%BE%C3%9C%3C%C3%8E%7C%C2%A1%7Bg%C2%9B%C3%B6%1F%3EF%C3%B7%C3%91d%C3%A1%17%C2%A5%C3%98%C2%8F%2BQo%1B%C3%A9%C3%BC%3C%C2%BB%C3%9A%C3%94R%C2%A9%C2%84%C2%B5%C2%B5%C2%B5%C3%A0((%C2%97%C3%8B%C3%81%C3%AF%C3%8D%C3%8D%C3%8D%C2%AE%7D%C2%92%C2%AC%C2%9E6%C2%9A%24%C3%85%C3%9EC%C3%93%C2%87L%26%13%C2%9Cs%C2%B2%C3%AC%C3%BAe%C2%B5%C3%A0%C2%B3q%17U%14%11%5EA%C2%96%C2%A7Ye%C3%81bX%C3%AF%194%03%C2%86%C3%AB%C2%ADOv%7B0%22%C3%B7%C3%9C.%C3%92%1F%C3%BCj%C3%B7%C3%8E%3C%C2%ACO%C3%B0%C3%A3d%C2%BEFc%C3%B1%C2%A9%1DO%C2%AD0%5B%19%C2%A6%C2%89%23t%25%C2%80%03%22%04%C3%89'%C3%9C%C3%B6%5BJ7%C3%B0%C3%9E%C2%BB%C3%91%03%C2%BD%26O%C3%A9%2F2%25%C3%99lv%C2%BB.%06Sq%17U3%3EZ%C3%A4%C3%89VsB%0B%C3%B2(%C3%A2%C3%AA%C3%A9%C3%B0%3B%C2%A4~%23D%C3%A4%C3%BE%C3%AE%C3%99%C2%A6i%11%C3%85%1F%C3%B90%C3%B0%C2%91%C2%93%C2%88%C2%85%1B%C2%98%C2%94%C3%BF-4%1A%C2%8D%C3%80%C2%8E%C2%8B%C3%82%C2%A5%C3%94%C3%AB%C3%B5%60%C3%80%C2%87Eh%C3%93g%C2%A9BF%C3%B8Hr%C3%BCt%C2%9FiY%08%3D%C2%B42%C2%B5n%0FF%26F%08%17%C3%A2%05q%C2%A6E%C3%A05%C2%93%C2%BA%5Et%C3%A6%C3%83%C3%B2%C2%A7P%C3%9A-%C2%99%C2%81%C3%83%C3%AA%5B%C2%80%C3%98%3E%C2%85dQ%C2%B6%C3%98v1%2F%C2%B5Z%0D7%C2%83PuK%C3%BEa.%40H%3E%C3%9C%0C2%C2%85%C2%A6%C3%A3A%C2%B3%C2%94%C2%96%5B%C2%8B%7B8%22%C3%B9%C3%A7O6%C2%8Fq%C2%A6E%60jG%C3%9Fb%C2%8A%C3%87%C3%B1%C2%83%C2%8C%C2%A4%C2%94%C3%946%C3%A1-%C2%BE%C3%BA%0An!h%3A%C3%BE%C3%9E%C3%AB%1E%C2%AA%C3%B6%7C%C3%9Cu!%5C%C2%88%16%C3%9B.%C2%A6%C3%8C%C2%92%C2%84%C3%A9M%C3%B4%19%04G%C2%8BA%C2%92%C2%AB%20*'%11%C2%A6%C2%AB%C3%83%0E%C2%B2%C2%85%23L%5E%C3%85%3D%C3%9CJr%3F%C2%A6e4%C3%B5%C2%997%C2%9AYH%C3%9Ff%22%C2%8C%03%7B%C2%90%C2%AA%C2%BFMV%C2%96%C3%BC%C3%88O%C3%A7%C3%84wK%13Wl%C2%AF%C3%98%C3%AB%1E%C2%9A%0E!%3DV%C3%ADbb%04%C3%95j%15%C2%BD%C3%80A*%C3%86%5D%0F%C2%94%3EK%C2%A5Oq%C2%89-%C2%9C%C2%92l%1DF%C2%9D%11d%7D%C3%84%7C%C3%A0%C2%A2%C2%A6%19%5D%7B%11%13s%C3%A6%C2%A5%C2%9D%12%C2%87%C2%A4%C3%BE%C2%A1%C3%97%0C5%C3%B1%3E'O%C2%B6%C2%AD5*%C3%B0%C3%9C%02m%C2%98%2C%C3%AB%C2%B5%C3%9E%17%C2%86%C3%91%C3%85%C2%B8%C2%B6Di%C3%AB%C3%AB%C3%AB%C3%9BDt%03%07%C3%B2%C2%BC%00%3D%10%26%C2%AB%5E%C3%98%5D_%C2%A9T%C2%82~%C2%98%1A%08%C3%BA%14OIL%C2%8D%60kk%0B%1B%1B%1B%C2%9D%C3%BA%5Ca%C3%92-V8-!%C3%B8%C2%BA_%C3%A0%12%C2%9B%09%C3%87%C3%B2%C2%B9%08%C3%91%60%3E%C2%9Cy%C3%B2R.qw%2C%C2%9Db%C3%97%C2%A5%C2%88%C3%92%C3%A3P0%C2%BF%C3%B4%02%C2%BD%C2%962U%5E%C2%A7%C2%BC%1BI%C2%A4%C3%B8%C2%8D%C2%AE%7B%C3%8Du%C3%94v%C3%B0%C2%9D%16%C3%A2%C3%9A%C2%8A%3E%C3%B1%5E%C2%93%19%C3%9By%0A%7D%C2%82%C2%B6z~w%5DDv%C3%94%C2%8F%C3%B4%1B%C2%9DK%C2%BD%5C%C3%87%C2%80%C3%AF.%08m%C3%BA%3C%C3%95V%C3%B0%C3%9E%C3%A1%C3%8A%C2%8E%C2%87%04%C2%9BJ%C3%94%C2%B9ZT%C2%A1%C3%9BX%3A%C2%98%C3%BE%C3%A6K%C2%A6~%C3%A0%12n%02i%C3%A3%C3%84%C3%8B%19%C3%B3%C2%8E%7F%7Bp%24%C3%87%5E51b9%C2%A8%3B%C3%8D%C2%95%C2%A4%C2%A5%3D%0B%19%17%2F%5E%2C%0EBX'%C3%88%C3%B3%C2%83%C2%A4y%C3%A5%0B%C2%A3J%1F%C3%87%C3%8D%C2%A1%C3%98O%C2%9F!%C3%A9%C3%8D%C3%BF%C2%99%2B%C3%BB%5CP%C2%AE%3A%26%14%C3%99p%C2%B9%C3%AA%C3%A3%C2%95%24%1F~%5B%C3%A6%3B%3F1T%C3%BE%1D%0C%C2%81%C2%8Cq%C3%87%C3%99%23%C3%99o%C3%BF%06A%C3%B4%C2%A5J.%C2%92U%12%C3%9E%C2%90%C2%85%C3%AB%20%C2%A1%19%40%C3%9B%C2%B3(N%C3%A2%25%C2%87%C3%B1%0B%0C%C2%87b%C3%B8%C3%BC%40x%C3%BD%C3%B5%C3%97%7F%C3%9C%C2%8FR%3BA%C3%8C%0A%C2%BF%C2%96G%C3%BB%C2%B9W%C3%AD%24%C2%9AfI%C3%80%C2%84W%C2%85cs%C2%B5%C3%882%C2%90%C2%A2%22%13%C2%9B6%17%20t%C2%AE%08%1D%C3%89%3E%C3%B1%C3%83%C2%94~%C3%AC5%0C%C2%80%C2%9Cy%C3%BA%C2%B9%C3%83%C3%99%C3%87%C2%99%C3%AD%C3%B3%C3%97H%C3%B8%06%C3%8D%C3%8B%C2%96%01%C2%8B%C3%8Bx%08%C2%96%C3%AD%18%C2%92Q%C3%A5%C3%B3%5E%C3%B8%C3%92%7B%C2%A2%0D%C2%AA%C3%A6%C2%91AI%08%15~%1F%C2%86%04%07k~%08%C3%A2%C2%9F%C3%A7%C2%84%7D%C3%8F%40%C3%B9%C3%B4%C2%9D%1D%00%12%19%1E%C3%96%C2%AF!m%1E%C2%82%C2%95%C2%BC%01%3Fc%C3%82%15%07%C2%9E%C2%8B%19%1Es0%C3%BE%C3%98%C3%BB%C3%95_%C3%9D_w%C3%BFq%C2%AF%C3%A4R%C2%BA5jh%C3%A3%C2%97%0A%C2%A9%07%7F%C2%9D7%3F%C2%B9%C3%84_T%C2%B8%C3%86bm2%C2%B7S%C3%8A%C3%80%C2%AC1%C2%BBh%1D%26%C3%B1%24%C3%9Dm%C3%9D%C2%92%C3%91%C2%AD%3D%C3%A6Fd%C2%99%C3%AEG%C2%88%C3%8F%3C%C2%8AIZ%10%C3%93%C2%84%5B%C2%800%C2%9F%3F%C3%8F%C3%93o%C3%A0%16%C3%B7%C2%B9%C2%BD0%C2%BDS%C2%B5%C2%A0G%C2%BB%00R%C3%8C%06R%C3%A9i%C3%BA%C3%94%C2%B9%04T%C3%9Eg%C2%A1M%C3%8E%C2%91%C2%9D%5C%C3%99Y%C2%9E%C2%B4%C2%9C%C3%A5%C2%A9%C2%BA%C3%BB%C3%9E%C2%87%C2%842%C3%96%C3%BB%C2%86%3Er%3Do%3E%C3%B0%C2%B7%C2%B4%3A%C2%B4F%3F%C2%BF%2C6%5CL%C2%8A%06%C2%A3dQ%C3%9C%09%C3%A8%C2%B5Q%C3%A8t9%0AT%C3%B9%C2%92%13%C2%B9%C2%8A%C3%BD%C3%AE%7F%09%C2%898%C3%95%1A%C2%B6%C3%B3Y%C3%B9%C2%AC%C2%9F%1Ff%C2%AD%C2%B2%1F%C2%84%2BI3%C2%BB%C3%BB%C2%B4m%C2%BB%C2%B8%C2%BC%C2%BC%C2%BC%C2%82!%C3%90i%C2%B3Q%C2%B8%C3%9F%25%C3%9A~%C3%910%0D%24R6L.%3E%5B%19%C2%A6%7B2%C2%B2%10%C3%81%C3%89%20)%C3%89%2BfB%0C!%5D%0F%22M%C2%8D%C2%BE%C2%B7G%C3%AFG%C2%AF%C2%B3%C2%A1%C2%AA%0EUs%C2%A1U%C3%85%C2%A4%C3%98%C2%B0%C3%AA%0D%1C%C2%B0%0F%C2%81M%05%C3%A1%C3%AE%C2%AC%C2%B7_wz%19%C3%91I%C2%8B%C3%9A%C3%BD%19%06iE%C3%9C%C3%A0%C3%84%3A%C2%8E%C3%A3%C3%B4%C3%9F7P%C3%B5%0C%063%5C%C3%9C%C2%A0%2B%C3%A9%C3%94%C3%92%C3%90MI%C3%BF%C2%9A%C3%90%0D%1F%0E%13d%C2%A2%C3%B4(%C3%8A%C3%94mN%C3%82%C2%9C%13%C2%B4%06%C2%B37%0C%C2%84T%23%C3%8B%C3%9F%C3%80%C3%91%C2%90ll%7B%2C%C2%BB7%C2%A7%C3%AE%17t%C3%9CV'%0B%1BM%16~%C2%AB%C2%96%C2%B0%C2%A4O%C3%A3%C2%98ZE%C3%950%C2%A11%19%C3%A3%18%23%5Cr%C2%AE%C3%B3%C2%A8%C2%82%1D%5E%C2%B2%C3%9D%C2%85%07%18%C2%8Ch-O%22M%C3%A6%C3%A2%C2%83%20%C3%8B%09%C2%8A%C3%A3%C3%8A%C2%A49%05%C3%8BE%C3%A0%C2%93%3F%C3%AC%C2%B5lk%C3%9C%C2%97%C3%BB%1A%3Bf%11wv%C3%AB%C3%BA%C3%A1%3D%C2%B2qt%C2%95i%C3%98%C2%8A%C2%A2%C3%8A%C3%B5%046%C3%B4qZ%C2%97-T%C3%88%C3%B6%C2%81%C3%A0%C3%9E-%C2%94%C2%90%23%C2%A9%1E%C3%8A%C2%8Cl7%C2%BC%C2%83%C3%8C%C3%A5_%C2%A6%1F~%C2%9Ca~%11K%C3%9E*%C2%A6%C3%BD%C3%99%C3%80C%12%C2%A2c%13%C2%98%C3%BF%C3%B7%C2%88%C3%B9%C3%8F%C3%BD%C3%AD%C3%8B%C2%91g%C2%B3%C2%887%C2%B4Y%C3%9C)%1E%0EKA6%25%C2%A9%C2%9D%2C%C2%A1%C3%A4%C3%85%0F%C3%B9K(%C3%BB%C3%93t%3D%C2%9Bu%3F%C3%A3%C2%B5%3B%C3%83%C3%AB%C3%BBw%1B%C3%9D%40%C3%98%C3%99%C2%8F%C2%BEs%C2%8C%C3%8A%C2%BC%3F%C2%AF%C3%BC%C2%A0%C3%B8-e%C2%BBN%2C%C3%B6%C3%B6%C2%BD%C2%AD%C3%8F%C3%A2%03%0C%C2%87V%C3%B2%C3%BC%5D%C3%A4~%C2%80%C3%9E%C3%B8%0F%C3%A1%11%C3%BE%C2%A5%C3%B4%C2%86%19%C3%88%00%00%00%00IEND%C2%AEB%60%C2%82"; 


// LAYER_GROUP Color Label

var none_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8BIDATx%01%C3%A5%C2%91%C2%BB%0D%021%10D%C3%B7S%00%17%3A%C2%A4%C2%84%C3%85r%01W%02mP%05%C2%94B%09W%02%0DX2%1D%5C%C3%A8%C3%90)%C2%89%C3%8DX%02%01%C2%92E%03%C3%B7%C2%82%C2%95%C3%87%C2%A3%C3%9D%C3%A41%C2%BD%08!%C3%8C%C2%B5Vc%C3%A65%C3%86%C2%B8%C3%B4%3F%C3%AE%C3%83%7B%7Fn%C2%AD%5D%C3%A8%C3%83%C2%8A%7CP3%C3%9B%23%2C%C3%B4%C3%8B%24%22%0FQU%C2%A3%01%C3%984%C3%81%C2%98h%C3%8CN%C3%A8%0F%C2%9B)a%C3%A26*%60%C3%A7%C2%AE9%C3%A7%C3%A2%C2%9C%C3%83%C2%9B%C3%A7%C2%AF%C2%AE%5B9%C3%B1%3B%C3%81%C3%8E%11%26%0C%C2%97%0A%C3%A25%C2%A5T%C2%9E%C3%8C%C2%8B%2F%C2%BB%C2%834%C2%88%C2%8E%00%00%00%00IEND%C2%AEB%60%C2%82";

var red_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%95IDATx%01%C3%A5%C3%8C%C2%B1%09%02A%10%C2%85%C3%A1y3%C3%91%05%C3%A2U%20%C2%82%0D%C2%AC%05(%0B%1A%18%C2%AA%C2%A1%1DX%C2%85%C2%96b%C3%A4E%C3%825%20l%0Bv%C2%B0%25lz%2C%C2%BB%C2%A3%C2%A2%C2%A2%C3%82b%03~%C3%99%C3%8C%0F%0F%C3%B4%C3%94%C3%8C%C2%AD%C3%95%C2%9C%0CA%C3%BC%C3%A6%C3%AC%C3%9A%C3%BB%0F%C2%8F0%C3%9D%C2%A9%C3%AA%C2%9E%C3%9E%7C%C3%95%C2%93%C2%B14%0B%3B%C3%94%C2%94%5B%C3%BAV%C3%87%C2%8E%3A%C3%96x%C2%9B*%60%C2%A8ae%C2%AA%C2%A9%C2%AC%C3%8F%C3%B4%C3%83%C3%9FD%C2%8E%C3%A2JA%09%179y%1F%C3%96%C2%A3%01%40%C2%B0%1F%C3%8D%23%C3%89%16%C2%AF%C3%AB8%C2%9B%2C%150%C3%88%1A%C2%AA%2C%C2%87%C2%95s%C3%A1%0A9%0D%2F%C3%AE%C2%8A%C3%BA%2C-%00%00%00%00IEND%C2%AEB%60%C2%82";

var yellow_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%86IDATx%01%C3%A5%C2%91%C2%BB%0D%C3%82%40%10Dg%C3%AF%12%C2%AA%C2%B0%C3%8E%09%12%5D%C2%98N%C2%AE%04(%C2%81J%C3%98%12(%C2%81%12%C3%88%10%220%C2%88%06pn%C3%9Fz%C3%AC%C3%88%3F%C2%B9%01%3Fm%C2%B0%C2%AB%C2%9DIf%04%C2%A4%7C%C3%86%C3%A0%3D%C2%AE0%14%3C%3F%10%5C%C2%B2%C2%BD%C2%AAt%C3%8F%C3%AF%2B%C2%96%5C%02%06H%C3%82%C3%91%C3%BF%C3%9E%C2%B1%C2%A0%C3%A3%C2%84)%C2%8Ec6v%0C%08%0E%2Bl%C3%A6)%0D%C2%83%5E%C3%80%12*W%C3%AF%C3%B00%C3%8C%05b%C2%B8%C2%B9%3C%C3%97%7Fb%03%C2%AC%C3%A9%C3%9E%3B(d%C3%9E%C3%A7%C3%AC%C2%A0%C3%9A%02%C2%B5%C2%9D%26%5B%C3%84n%C3%8E%C3%A6%00%00%00%00IEND%C2%AEB%60%C2%82";

var aqua_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%92IDATx%01%C3%A5%C3%8C%C3%81%09%021%10%C2%85%C3%A17Y%C2%83zrK%C2%B0%C2%84%04%04%C3%99%C2%9B%25%C2%98%C2%8A%C3%94%0E%2C%C3%81%0E%C2%B2v%C3%A0%C3%89%20%C3%AB%C3%85%0ER%C3%82%5E%15%C2%B2O%17%14Q%C2%82%0D%C3%B8%1D%06f~%18%C3%81%C2%93o%C3%82%02%C2%89%06%C2%83%22%C2%BA%C3%99%C2%BC%C3%AEo%C3%92%C2%8F%7DsZ%C2%91%C3%9D%1Ao%C2%91zd%0B%1F%C3%82%14%C3%82%1A%C2%9FJ%C2%A4%C3%9BUA%3F%5E%C3%A5P%C2%8CB'e%C2%AE%C2%89%C2%92%C2%89%C3%82%0F%C3%BF%13%13%0E%C2%B9%40%C3%B0%C2%A2%5CUE%12%C2%9B%C2%AF%16%C2%A1e%2B%C2%AF%C3%8D%C2%9F%C2%8FK%241%20%5B%0C%C3%87%3Bgm%7B%07%C2%86%3A-5%C2%8E%C2%98%C2%BF%C2%90%00%00%00%00IEND%C2%AEB%60%C2%82";

var pink_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%93IDATx%01%C3%A5%C2%91%C2%B1%0D%C3%82%40%0CE%C2%BF%C2%9D%5CMF8F%C3%88%060%010%010%11b!%C2%AED%C2%8A%C2%90%C2%8E%01%40w%23%C2%A4EA61PD(b%C2%81%C2%BC%C3%86O%C3%BF%C2%95%26%7CI!V%40%C3%A7%01%C3%97%C3%8E%C2%97u%C2%B6%C2%8D%3F%C3%A1%C2%B2%15%C3%AD%C2%92(%C2%A2%C3%9D%7Bh%0E%C2%B6S%0Ag%2FZ%C3%84%C3%9E%2B%0CP%C3%85%C2%9E%C2%9F(%C3%BDoxC%C2%B2f%12%C3%B5%18%C2%81%C3%813%C3%86%1F%26%13%0B%C3%86u%2C(!%C2%93%C3%89%C3%AD%C3%94%C2%84%5E%16%C2%83%C3%962%C2%B9%C2%BA4%2B%C3%88mD%1E%3B%25%5E%C2%91%223%C3%A3h%3F%7D%01%C2%AAp2%C3%B7%7B%5E%C2%BF%C3%B9%00%00%00%00IEND%C2%AEB%60%C2%82";

var lavender_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8FIDATx%01%C3%A5%C2%911%0E%C2%82%40%10E%C3%A7%C2%AF%C2%81%C2%B5%C2%93%23x%04(%C3%AD8%C2%82%C2%94%C2%9CF%C2%BD%09%1D%05%0D%C3%9E%C3%80%C2%8E%C3%98y%C2%84%3D%02%C2%AD%C2%89%3B%C3%A3%10%20%C2%84d%C3%83%05x%C3%9D%C2%9F%C2%97%C2%A9%1Eh%C2%A2i%C2%BA%C2%9C%C2%99r%C2%80%C2%9C%C3%B7%C3%B4*%C3%8B%C2%8B%C3%83(%C3%9E7f%C2%B9%C3%93%C2%82%C2%8Bc%C2%9B%1D%C3%AA%C2%BA%3B%C3%ABhiM%C3%A2%C3%BD%C3%AFk%C2%94%C2%94%02%C2%88Hj%00NBR%C2%9FN%C2%866%C3%98%C2%8D%C2%8C%C2%A2c%1B%12Z%C3%A8i%C2%8A%22%C3%AB%C2%B5%C3%88c%C2%AD%C3%B0%C2%B1%C3%96V%C2%98%C3%A7P%07%C2%90%C2%AB%08zmY%0D%C2%B7%3F%03%3D.%C3%BE%C2%AB%C2%AC0J%00%00%00%00IEND%C2%AEB%60%C2%82";

var peach_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%81IDATx%01%C3%A5%C2%91%C2%B1%0D%C3%82%40%10%04w%C2%8FF%C3%9E%C2%8D%20%7F%23Ht%00%25P%09%08%02RJ%40%02%C2%89%C2%94%0E%C3%BEK%C2%80%C2%98%C3%87%C3%8B%C2%BDH%10%C2%B6%C3%9C%C2%80'%C2%BB%C2%9B%C2%BBh%08'%C3%9D%C2%8E%C2%81%C2%A5l%01%C2%B5%20%C2%B2%3Al%C2%9A%C3%B9b%C3%87*%C3%B3u%C2%9F%20%04%C3%BC%200%C3%8E%C3%92%C3%A5%C3%90%C3%BA%C3%85%0A%7F%C2%98%2F%0DR%C3%80%00%12%C2%83a%C2%84%C3%A9H2%0F%09%C2%A9%7B%1AJ%C2%B9%C3%97%12%7D%C3%8D%C2%935q%C3%B9%C3%90%C3%AB%1D%7D8%7F_%3C%19%C2%B1%C2%AE%C3%89%3E%C3%A9N%2B%5D%C3%B9%C2%82%16Z%00%00%00%00IEND%C2%AEB%60%C2%82";

var sea_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8DIDATx%01%C3%A5%C3%90%C2%BD%11%C2%82%40%10%C2%86%C3%A1%C3%BD%C3%B6L%C2%88%C2%A4%04K8B%C2%8DL!%C2%92%C2%8A%C3%94%0E%2C%C3%81%12%18%03I%C2%8D4%C2%B6%C2%83%2B%C2%81%C2%8C%C2%BF%C2%81%C3%A5%C2%98%C2%81a%60nh%C2%807%C3%9B%7D%C2%B2%0F4%C2%94%C3%BE%C3%923%1A%C3%91-%C2%93%C2%89NQ%C3%92%C3%BF0%C3%80%C2%95%C2%A4%C2%BD%C3%91%C2%94)%C2%BC*P%16%0E%16%12%C2%9A%C3%A7%C3%AFjU%C2%B2H%C2%AD%C3%89%C2%9Df%C2%88%C3%B2%C2%9D%04%C3%AC%C2%99V%C3%9A%0E2%7F%5C%20%24%7F%0E%C2%8F%C2%A1%C2%B1%C3%83%C3%9F%17f%00~%60%C2%BC%C3%9E%C3%9F%C3%97%C3%85%C3%AE%C2%AC%01d%C2%B9W%3E%C3%A3%20%C3%8E%3Ao%2F.%18%C2%81%C3%84%C2%A4z%00%00%00%00IEND%C2%AEB%60%C2%82";

var blue_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8CIDATx%01%C3%A5%C2%91%C2%BB%0D%C3%82%40%10Dw%C3%B6%5C%00%25%C2%98%04%C3%9A%C3%80%C3%BD%C2%80%049HFP%00%12%C3%A4P%C2%82K%C2%A0%0F%C2%90L%09G~%C3%9Cp%C3%A7%C3%80%C3%B2On%C3%80%2F%5B%C2%BD%C2%99M%06%12%C3%98%C3%A6e%C3%AA%C2%9C%C2%BB%C2%83L%09X%11%7F%C2%BC%C2%9D%C2%97%05%C2%A2%C3%9C%1C%C3%9E%25%C2%83%C2%906%C2%99Y%C3%AF_%C2%ABX%C3%AE%08%01%20%0A%C3%9FkT%C3%84O*%23LFR%C3%95%0E%09%C3%92%7F5I%C3%8C%13%C3%A0%C2%A7%C3%97R%14z%C3%89%C3%A7%C3%96%C2%98_V%07%20%C2%96%C2%94%C3%9D%C3%B5%C2%B4x%C2%B4%C3%92a%C3%97Y%C3%B3%C3%BE%03H%C3%9D0vv%C2%A8%C3%B6%C3%AC%00%00%00%00IEND%C2%AEB%60%C2%82";

var green_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%89IDATx%01%C3%A5%C2%91%C3%81%0D%C2%82%40%10E%C3%BF%C2%9FmdK%C2%81%1E4%C3%B1db%C2%A2%C2%89G-%C3%81%3A%3CH%C3%B4%C3%A0%C3%81%0B%25X%C2%82%1DH%09p_%18f%03%07%20%C2%84%06x%C2%A7%C3%89%C3%BF%C2%939%C3%8C%23%C2%8C%C3%B3%7B%C3%A7C%08%0F(%12%C2%82%C2%85E%C2%B7%C3%BB%C3%BE%C2%931%C2%96%C2%A7%C3%A7%C3%B6%C2%AFP%C2%8F!D%C3%AA%C2%8E%C2%AFMb%C3%A3%05%13%C3%AC%02%C2%A4Qz%C3%8C%C2%A0T%2FX%605%C2%A5P%C2%8B%C3%99%C2%A6A%25f%C3%A3%C3%97%C2%9B%18A2%C2%97%C3%AC%C2%90%C2%97%C2%AEv%C2%A9%C3%BD%C3%B9%1BC%C3%AD%16%C2%AFQY%0B8R'j%C3%8E%26%22%C2%95%00%00%00%00IEND%C2%AEB%60%C2%82";

var purple_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%9DIDATx%01%C3%A5%C2%91%C2%B1%09%02A%14D%C3%A7%C3%AF%C3%8A%C2%A1%20x%C2%B1%C2%91%25%C2%ACh%60%C2%B8%05%18%C3%98%C2%82%C2%91X%C2%84%C2%B8p%3Dx%C2%98Y%C3%82%25%C3%A6%C3%9B%C2%80%C2%81%1D%5C%60%01%C2%9B%C3%AA%C3%81%C3%BF%C2%AE%C3%A8%09%C3%82b%03%C3%B7%C2%B2%C2%997%C3%99%10%3E%14%C3%B3%C3%92%0A%C3%84%C2%90%C3%A8zw%C3%99T%C2%AF%C2%8E%C3%9E%C3%A2%C2%B8%17%C2%B0k%C2%87%C2%B1%C2%AD%C2%B9%C3%A9O%C2%B5%5B%C2%94%13b%C2%A9%C3%B0K%0E%C3%B5%C2%B8%2B%C3%9D%C2%88A%12e%C2%94%08%C3%A5I%05%C2%8C%14%C3%BE%C3%90%19%C3%89%19%7CJ%C2%B0%C3%A0%C2%AA%C3%BD%C3%AD%1C%C3%ACxI%C3%B1%1E%C3%BB5%C3%B1%C2%95%C2%AC%C2%87-%C2%B5%C2%B9%C2%98%1DVLd%08%12x889%C2%BF%0EO%C2%83%C2%AD-9l%C3%BA%C3%A2%C2%B1%00%00%00%00IEND%C2%AEB%60%C2%82";

var orange_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8DIDATx%01%C3%A5%C2%91%C2%B1%0D%C3%820%14D%C3%AF~%16%60%04%C3%93%40%1B%24%06%C2%80q%C2%A0%22%23%C2%B0%04)%C3%83%08%19%C2%81%11%C3%9C%C2%83dF0%25%12%C3%B1a%1A%14%C2%A2%C2%88%05%C3%B2%C2%BA%C2%AFw%C3%BA%C3%85%1D%C2%91%09u%C3%A9%5E%60%23%C3%81%11%C2%88%09%3A.%C3%B7%C2%BE%C3%A5G%C3%9EN%C2%AB%20%C3%80%C2%A1%0F%C2%B5-%C2%AE%C3%B5z%03%C3%A8%C2%80%01%C2%A4%C3%81%C2%94%C2%92%C3%83%08%C2%82%C2%9C%C3%A1%0F%C2%93%C2%91F%C3%861%C2%91%C2%80%C2%87%15%C3%8F%C3%AE%C2%92K%C2%BF%0F%25%C2%A1%C3%96%C3%A6%C2%95%C2%8F%5D%5E%C3%A0%1B%10%C3%B2'U%C2%8B%C2%9D%3F%C3%BF%C2%A4CS%C3%8E%C3%BA%C3%B7%1B%C3%BE%3C%2FJ%C3%A5zi3%00%00%00%00IEND%C2%AEB%60%C2%82";

var brown_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%89IDATx%01%C3%A5%C2%91%C2%BD%0D%C3%82P%10%C2%83%C3%ADK%C3%83%18o%032B%C3%A8%40b%18hPZ%3A%24%1A6%20%23%C2%A4B%C2%94%C2%8C%C3%B06%20%23%40GC%C3%8C!%24%C2%94%3Fe%C2%81%7C%C3%8D%C3%A9l_s%26%C2%9C%7C%C2%99%06Qg%01%C2%99%C2%AF%C2%95%C3%88%C3%BD%C3%B1%12%0B~%C3%8D%C3%9Dj~%C3%B7%11%C3%90%C3%80%C3%84E%C2%92%C2%AF%C3%93L%C3%82%06%5D%C2%8C%C2%B0w%C3%9D%C2%BE%C3%B8%23%04%C3%83%08%C2%931%C2%93%1A%C3%95%C2%A0%23%3C%C3%AD5C%C3%B4%C3%AF%C3%B7%02%C2%AE%C2%95v*%C3%A3%C2%83%C3%9E%00%C3%81%C3%9BO%C2%A4%07%C2%B9%3D%5Cc%C3%B1%01e%C3%AC%24j%C3%A1%14j%60%00%00%00%00IEND%C2%AEB%60%C2%82";

var fuchsia_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%10%08%06%00%00%00%C3%9A%C2%81e%C3%B0%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%86IDATx%01%C3%A5%C2%91%C2%B1%0D%C3%82P%10C%C3%AD%C3%8B%1E%C3%A8%C2%B3%00%12%1B%24%1BA%C2%81%C2%94%C2%96%C2%9A%C2%86%0D%60%04F%60%04%24%C2%90(%13%C3%84%02P%C3%B3%C3%B3%C3%8D%C2%85%0A%25Q%16%C3%88%C2%AB%C3%AE%C3%B4%C3%AC%C3%8A%C2%84S%C2%95%C3%B7%C2%905%C3%B1%C3%A0g%0E%C2%B0%06%C3%92v%C2%B6%5B%1C%C3%99%C3%8A%C3%87%C3%A6V%11%0A%C3%B8%C2%83B%C2%91%3D%C3%8Bk%0Ea%C2%85.%24L%C2%8D%05%0C%C2%A2%60%18a2%C2%92J%C3%B5%C2%90%10%C3%B4%C2%B6%18%C3%A3Ed%2F%C3%A0%C2%8B%C2%9Cl%C2%BE_%C2%BE%C2%92%7D%0A%C3%BF%C3%8F%C2%BF%C2%86%07%25%C2%AE%C3%9B%C3%89%C2%BE%10%08%2C_%C3%A3%0CDy%00%00%00%00IEND%C2%AEB%60%C2%82";

var cyan_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%94IDATx%01%C3%A5%C2%91%C2%B1%0D%C3%82%40%10%04%C3%B7%0E%119%C3%80%25P%C3%82%C3%93%01%25%40%08%22%C3%A0%2B%01%3A%C2%A0%03%C2%83%00A%C3%B8%25%C3%90%02%1D%7C%09N%08%00%C3%9B%C3%8B%C2%83%40%08%C3%AB%C3%A5%06%3C%C3%89%C3%A9v%C2%82%0DV%C3%B0a%C2%96%C3%AD%C2%86%C2%84%18%C2%81%C3%BA%C2%BD%C2%9D%C2%BAW%26o%C2%B1%3D%2CH.%C3%B1%C3%83w%C2%99%0C%3A%C3%B3%C3%AC%C3%98%2FQ9%C3%BC%C2%93%C2%96%C2%B8%C3%9F%C2%B4%40a%10E%C2%8C%C2%86%C2%8E4%C2%AA%04%3DE%03%C2%AD%C2%91%0F%C3%A89%26H%C2%B9%C3%A8%C3%89N%C2%BC%C2%90%C2%AB%C2%9A%C3%B3%15t-%C3%9F%2F%C3%AC9%0A%C3%87%C2%84M%C3%B3%2B%C2%92%C2%8D%C2%B3%C3%A3%C3%BC%09%C3%A7%C2%92%2B%C2%8C%C3%96%08%C2%BFj%00%00%00%00IEND%C2%AEB%60%C2%82";

var sandstone_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%9AIDATx%01%C3%A5%C3%91%C2%B1%09%C3%82%40%14%C3%86%C3%B1%C3%AF%C2%BD%40%24%C2%A40%23d%C2%84%C2%B8AF%C2%B0%15%2BK%C2%B1%C2%B2%13%11%3C%1BW%C2%B86%20%C2%926n%C3%A0%08%C2%8Ep%23%C2%A4%C3%B5%C3%8C%C3%9D%C3%93%C2%80%22%C3%8A%C3%A1%02%C3%BE%C2%BA%C3%B7%C3%BE%C3%A5Gx%3A%C3%A8M%09%C3%AFK%06%0Cs%7C%C2%9E%C3%8C%C2%95%C2%A1%3E%1C%C3%B5z%2B%02%C2%857%C2%93%26%C3%B1(%C2%AA%C2%B5%C3%8A%C2%BD%C2%B8%06%C2%9F2%7BsW%C3%AE%C2%A4%2B%10%40%C2%8C%C2%82Y%7C%C2%86%20%1A2~%C3%B8%C2%9Bhm%C3%9C%04%C2%8B%C3%B8%13%C3%8F%C2%96%C2%AA%7D%2C%C2%B2%C3%BBJ%C2%974%19T%C3%B4%C2%BAj%C2%BD%C3%8A%C2%9DDc%12i%C2%A7%C2%8B%7D%C3%95%C3%BF%C3%AE%7D%C3%A61%C2%9F%C2%A8%C2%89%C2%B9%C3%AA%00%00%00%00IEND%C2%AEB%60%C2%82";

var dark_green_color_label_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%07%00%00%00%11%08%06%00%00%00%11%C3%9D%C2%B6U%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8EIDATx%01%C3%A5%C2%91%C3%81%0D%C2%82%40%10E%C3%BF%2C%C3%B1%2C%17%C3%AF%C3%AB%C3%85x%C3%94%06%C3%8C%C2%96%60%2BV%C2%A0%C2%A5X%C2%82v%40%09%1E%3DN%09%7B%04%0E%C3%80%1F%02%01%02%C2%A1%01%5E2%C3%99%C3%8C%C3%BF%3B%C2%99d%C2%BE%C2%A0%C3%A3%1C%7C%C3%A0c%C2%A5%C2%AC%C3%AC%C2%9F%C2%A9%C2%8A%19%C2%A7%C2%9B%7F%C2%8A%C3%A0%C2%85%01-%04%C3%97%C2%84%13%C2%9E%C3%8D%07S%C3%92%C2%9D%C2%A0p%15p%C3%81%025u%C3%A7%C3%B8k%C3%89%C3%A4%C2%BE%C2%BD%C3%83%0A%C2%9B1%C3%B3%C3%B9%5D%5Bx%C2%BEo%125%C3%A6%C2%87cj%C3%A9%C2%84%C2%91%C3%B1%2B%05%0F%C3%A9%05K%C2%87%C3%8D%C2%9DFd%C2%96o%C3%93%1A%C2%A1%C2%94%1Fj%C3%A6%C2%A0%C3%B4%C2%85%00%00%00%00IEND%C2%AEB%60%C2%82";

//icons for layers and Effects Group

var view_button_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01oIDATx%01%C3%A5SK%C2%8E%C2%82%40%10m0%26%26%C2%BA%C3%80%C2%85%C2%BF%C3%84d%C3%A4%06%C3%A3%0D%C3%B0%06z%02%C2%99%13%C3%8C%C3%9C%409%C2%81%C3%83%09%C3%B4%06r%C2%83%C3%A1%06%C3%8C%0D%60V%04%C3%98%C3%B4%06%12%16%C3%80%C2%BC%22%C2%B6i%09%24%C2%B3%1E%2B1%C3%9D%C3%B5%C2%AA%C3%AA%C3%B9%C3%AA%01%C2%8C%C3%BD%C3%9BP%C2%BA%0AI%C2%92%18eY%1A%C2%B8%C2%BE%C3%9C%C2%A0%1FUU%C3%9D%C3%89d%C3%A2%C3%BE%C2%89(%C2%8E%C3%A3w%1C%C3%87%C2%AA%C2%AA4%C3%96%1E%C2%81%C2%A2(%C3%96t%3A%C2%BD%C2%B4%12%C3%B9%C2%BE%C2%AF%C2%8DF%C2%A33Tl%05%062%1BC.0%0E5%26%C2%A0%C2%BD4%C3%ABdY%C3%B6%C2%A6%C3%AB%3A%C2%A7D%15%C3%A8p8%C2%BC%C3%8A%24%20X%C3%8F%C3%A7%C3%B3%0F%C2%9CA%C2%AF%C3%97%C3%A3%C2%B3%C3%99%C3%8C%24L%22%C3%9A%C3%92%C2%8CHj%C2%A2(%C2%8A%0E%C3%B8wC%22%C2%B9%40%C3%BA7%C3%96%3C%01%C3%B7%C3%A8%07%C3%8FN%C2%84%C2%91JI%C2%B1%C2%81%C3%99c%3D%13%C2%86%C3%A1%0A%C2%B2%7Dy_%C3%A4%C2%9B%3C%C3%8Fy%C2%BF%C3%9F%C3%B7%1E%7C%C2%80%22%0C%C2%AFp%C2%BDJ0%C3%87%C2%8A%C2%BA%3A%18%0C8%1A%C2%B8%3C%C2%80%15%C2%BB%C2%8C%C2%A6%1Ao%40%1A84u%3C%1E%C3%B3%C2%A2(l%C2%B9B%C2%92%C2%97%C3%8Bes%0D%C2%9BV%C2%83_%C3%BB%06%C2%91%C2%B5X%2C%C2%82%C3%BBS%C2%83%1F_%0D%C2%9F%C3%967%C2%9F%5E)%17w%C3%B2K%C3%AAq%C2%81oj%3B%04%08%3Fv8%1CI%C2%81%C2%87%C3%813%C2%9A5%C3%B2E%18%2F%C3%AA%C3%B0%C3%91I%C3%93tw'm%C3%88d0%C3%9FD%C3%93%01%C3%97%15k%09%C3%B2%13%3EYx5%3E%1Fp%C3%96%11%204%40h0%C3%A9%13%01%C2%81%0B%3F%5C%C3%B6%5C%C3%B1%0BY.%C2%BA%C3%B0%C3%A0%24%C2%9B6%00%00%00%00IEND%C2%AEB%60%C2%82";

var view_button_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%02%12IDATx%01%C3%8D%C2%93%3Dh%13a%18%C3%87%2F%C2%97%3B%3F%C2%88%C2%93%20%C2%88PpR%10Lb%0C(H%C2%9D%C3%84((%C3%89%25%10%C2%97*%0E%C2%82%60q(%22%C2%AD%19lP(%C2%B4u%10q%10D7Q%03%C3%B9%12%C2%82%20J%16%C3%85%C2%B6%C2%A4%19%12h%C2%A1c%C2%97%C3%92%C2%A1M%C2%A1%14%C2%92%C3%8B%25%C3%A9%C3%AFM%C3%AF-%C3%97%C2%AF%C2%A1t%C3%A9%03%0F%C3%8F%C3%A7%C3%BB%7F%C2%BE%C3%AE%14%C3%A5%C2%B0%C2%91K*%C2%99L%C3%A6V%C2%A7%C3%93%C3%A9%C2%ADV%C2%AB%C3%83%C3%89d%C3%92R%C3%B6I%C3%9A%26%C2%A2%C3%8Bu%05%C2%91%C3%B0%C3%BB%C3%BDn%C3%A4P.%C2%97%C2%BB%C3%98j%C2%B5r%C3%A8%3D%C3%84%C2%84o%01%C3%BE%05%7F%C2%8EF%C2%A3%7F%C3%B7%C3%ACH%10%C2%8F%C3%9F%C2%B7%C3%9B%C3%AD~%3A%7B%1B%C2%8B%C3%85%06%C2%B0%1Fa%7F%C3%9C%C2%A5%C2%81%2F%1E%C2%8F%C3%A7q(%14Z%C3%9B%01T(%14N%C3%97%C3%AB%C3%B5%02%C3%95%03%C3%82%06lD%C2%8C%19%08%04.Y%C2%96u%06%C3%BF%5D%40%1F%20u%3B%3E%C2%890(%C2%B8%C2%B0%09%C3%84N4%C2%AF%C3%97%3B%C2%81z%C3%99%1Es%C2%8DD%C2%8F%C2%AA%C2%AA%C2%A3%C2%91HdH%16K%C2%A7%C3%93%C3%97%C2%88%C3%BDA%3Dj%C2%BB~%C2%BA%C3%9D%C3%AE%7B%C3%A1pxU%15%C2%96%C3%8F%C3%A7%7B%25A%04Q%C3%B9%1Bb%149%C3%88%11%C3%86%C2%A5%C2%9F%C3%AA%C3%BF%10%C3%9F%1D%23%C3%9E6M%C3%B3I%C2%B78%7B%C3%A8%C3%A1%C3%81%0C%C3%BA%09%19%C2%A5J%C2%98q%C2%96%C2%A8.%C2%97%C3%BA%C2%AER%C2%A9%3C%13%C3%97%24%C3%9F%20%3F%C3%A3%00%5B%26%C3%BF%C2%ACJ%C2%B2%C2%89%C2%B1%C3%A5%C3%9C%C2%8CuD%C3%97%C3%B5%15%C2%87%C3%AB%C2%A9%C3%9D%C2%B5%C2%88%C3%8D%C3%83MG%C3%8Cj4%1A%C2%BA%C3%8A%7C%C2%8B%C2%80%C2%8Dm%03%C2%BA%5E.%C2%97gQ%3F8%7C%2F%18s%C3%8C0%C2%8Ci%C3%B2%07%1C%C3%A9%C3%A3%C3%B1x%7C%C2%B9%C2%BB%C3%ACb%C2%B1x%C2%ACV%C2%AB%C3%A5Qo%C3%9AA%C2%93%C3%A4%5E%1EM1%C3%8A%05%C3%86lj%C2%9A%C3%B6%C2%90%C2%91%12%C3%B2%C2%9At%C3%98%C2%87%C3%9E%C3%877u%C2%A3%C2%BB%23%09%C2%9BJ%C2%A5N%C2%92%C3%BC%1F%C3%B5%C2%9Cl%02%C3%BE%C3%84%C3%A3%1F%C3%AC%C3%A08%C3%B2%0E%C3%A0%C3%B7E%40%5E%C2%B3T*%C3%A9%C3%81%60%C2%B0%C2%B9%05%C3%88%06%3BE%C3%920%C3%9C%C2%AF%C3%ACMm%C2%81%05%C2%BF%C2%A1%C2%9B%C3%A7%C3%92%C3%A9%C3%9A-3%C2%9F%C3%8F%C2%9F%C3%A7%C3%B7%18T6%3E%09%C3%99%C3%A1%1C%1D%C3%BD%C3%86%C3%BF%C2%95%C3%8E%C3%85%C3%A5%12%C3%98%2F%19%C3%BF%C2%B5r%10%C3%8Af%C2%B3%23%7C%C2%A0W%C2%95CK%C3%AB%160%C3%B1%C2%AA%5E%C2%B1%C3%8Ex%00%00%00%00IEND%C2%AEB%60%C2%82";

var hide_on_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%B3IDATx%01%C3%8DSKK%C2%95A%18~%C3%9E%C2%999%7C'%C2%A2%5D%C2%84%C3%8BV%16%C3%ADB%10*%C2%A2%C2%B4SQB%C3%902%C3%A8%07dx!%C3%A2%C2%B4h%C2%97%C3%9B6%C2%9Dc%17%C2%A2%40%10DW%C2%82%20%C2%A2%C2%A0~%5E%10%C2%BCl%C3%A4%C2%A0%C3%A0B%C2%BC%2CDW*%C3%A2%05%C2%BF%C3%B9f%5E_%15%C3%84%C2%83z%C2%BC%C2%80%C3%A0%C2%B3%C2%99%C2%99w%C3%A6y%C3%9E%C3%AB%00W%05t%C2%9C%C3%B1g7%17%C2%B3%C3%B1%15%C3%B0%C3%BCH%5E%C3%9C%02c%05%C3%84%C2%A3%3A6%C3%8D%1F%C2%9F%C3%93LA%C2%91_!%17y%C3%B0of%C3%BF%16'%C3%BBmv%C3%9B%C3%AA%C3%AB%C2%A7W4wD%24%C3%9B%C3%8F%C3%B7%C3%89%C2%B9N%C2%86x%3E%1D%C3%B3%0A%C2%AE%C2%A2%C2%AA%3C%C2%98%3C%10%C3%B9%13%C3%B2m%0B%3F%06%C3%A6%C2%9B8%3BV%C3%99%C2%BA%C3%87%C2%B5%2F%C2%83%09bf%C2%AA%0F%C3%BD%14%C3%80%C3%858%3F%C2%86n%C2%90NQv%20*E%C2%ACFpA(%C3%A3K%C3%94%C3%B2Rb%5C%C2%B2%C3%8A%C3%A1B%C3%A0%C2%9C_OL%C3%AE%C3%95%24%C3%9B%23%C3%91%C2%90%1A%C3%86%09-%3F%C2%9E%C2%8F%C2%88%C2%8C%C2%BE%5B%C3%BD%C2%84fU%C2%B6%C2%83%03%09*%C2%BDk%C2%96%C3%8E%2C%C2%9CM%C2%81V%C2%A0%C2%A0%C3%98%C2%B9tC%C3%88IE%C3%89%C3%B8%C2%8B%C3%B8%7Fa%3D%C2%A7%C2%8C%C2%8E%1E%10%C2%A1%C2%BD%20_%C2%A1u%5BG%25%22T%25%C2%A7%C3%8A%C2%B5%C3%98%C2%BE3%C2%8A%C3%8C%3F%C3%AB%C2%A2%C2%B6%C3%8F%C2%A9%20%C2%B7%C2%9FZ%C2%ACA4'b%C3%BFeb%C3%9F0%C2%A1T%C3%8C%C3%9DB%1A%C2%94%C3%B5%03%C2%BC%5BL%C2%97_%C2%9B%C2%95%C3%BD%C3%9F%1F%C2%BD%3CnHO%C3%A7%C3%95%20%C3%93c%1F%12%C3%91%10%3C%C3%9E%C3%97%C2%A4LS%7Dh%C2%9F%C3%8A%04%C2%84D%5CV%5D%C2%96%C3%A8%C3%8B%C3%B4%C3%9A%3Ab%C2%AAM%40%C3%9F%C2%AB%7CF%07%C2%A9%C2%9B%C2%BCHI~%08%C3%90X%C2%B4%C2%AC%5B%C2%B0_%24%3E%7C%C2%AF%C3%BDV%C3%86%C2%A9%C3%A4%C2%9D%0D%C2%B6y%C2%BC%C2%82%C3%9D%C3%B8%C3%9E%C3%85%C3%97%C2%83%C3%80%C3%97aS%7D%C2%AByMk%C2%B8L%C3%AC%00%C2%83%C2%BF%C2%A9%C2%8C%C2%AD%C3%BE%C3%9Dw%00%00%00%00IEND%C2%AEB%60%C2%82";

var hide_off_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%13%00%00%00%11%08%06%00%00%00%3F%C2%98%C2%97%C3%87%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%A0IDATx%01%C3%95%C2%93%3FH%02a%14%C3%80%C3%AFT%C2%A4%1C2*(%C2%9A%1A%C2%A2%02%C3%A1%08%C2%A2%C2%A0%C2%A5%10%C2%A2%C2%86%C3%88%3F'HCK%C3%90%1EA%05%C2%81Ca%11%244%14%C2%B9%C2%B4%C2%95%04%09%C2%9EN%C2%AD%11%05%C2%B5%C3%9E%12HCC%C2%83%0D%11%C3%98%C2%9F%23%C3%A2%C3%94~%17(G*jS%3Dx%C2%BCw%C3%AF%7B%C3%AFw%C3%9F%7B%C3%9F%C3%B7%09%C3%82_%15%C2%B1VB2%C2%99l%C2%B5%C3%9B%C3%ADM%C2%BA%C2%AE%C2%BF%7B%C2%BD%C3%9E%C3%97%C2%86a%C2%8A%C2%A2%C2%B4%17%0A%C2%85uQ%14e%3E%C2%BBMK%C3%8F%C3%84%C2%8E%C2%ACV%C3%AB%C2%9E%C3%87%C3%A3%C2%B9%C2%AF%09%034K%C3%81%3E%C2%B0%0E%C2%A1%C2%8A%C2%B0%C3%B6%C2%88%09%07%02%C2%81hUX*%C2%95Z%22q%07%C2%B5%09%C3%B5IH%C2%96%C3%A5%C2%AD2%18%C2%B3%19%01r%C2%8Dk%11%C3%AA%C2%97O%C2%9B%C3%8D6I%C3%8B%17B%C2%B1%10%C2%88%C2%98%C3%8F%C3%A7%0F%1B%04%19b%C3%A7%60%0Eb%C2%B1XK%09%C2%96H%24%06%C2%99%C2%93%24%C3%BCN%5C%0E%C2%87%C3%83e8%C3%9F%C2%B3aWw%16%C2%8B%C3%A5%06w%00%C3%A8%09%C2%B6%C2%8FX%0F~o%C2%85%C3%A2%0Cz%C3%8BZ%C2%9A%C2%8E%C3%A6%C3%B0%C2%9FhU-%C3%AD%2C%18%0C%C2%BE%01%5B%C3%85mF%C2%B3%C2%AA%C2%AAN%C2%910N%C3%81%C2%99%C2%99B%C3%B1%15q%C2%89%C2%A1O%C3%A0%3F%102%C3%9A%5BafZ%09f%C2%88%C3%8F%C3%A7%C2%BB%C3%84%C2%84IZ%C2%93%24)%C3%8A%C3%8E4%C2%BF%C3%9F%3F%C3%8D%C2%9D%1A%06%C2%BA%40%7C%14%C3%88%189%1A%C3%97'%C2%82%C3%9D%26%C2%B6AL)2%C3%8A%C3%AE%19%C2%A7%C2%BAHR%08%C3%95%00%1Dc%C3%8F%C3%99%C3%B5%07%C2%B6-%C2%97%C3%8B%0D%C2%912%0F%C2%BC%15%C2%8D%C3%B0%C2%B3Msm%C3%85%17%10%C2%8F%C3%87%C3%BBig%19w%06%C3%AD4%C2%B5%C2%99%C3%85%C2%9C%C2%B2%C2%B6%C3%8B%C3%93J%C3%BF%C2%AC%C2%AB%C3%B56EN%C2%BA%C3%8B%C3%98%15%C2%80%17%C2%A7%C3%93%C2%99q%C2%BB%C3%9D%C2%BA%C3%B0%C3%AF%C3%A4%0BCc%C2%A9%C2%84%C2%B8%05%C3%A9%C3%A2%00%00%00%00IEND%C2%AEB%60%C2%82";

var solo_on_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0B%08%06%00%00%00O%C2%85%C2%BCb%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%3EIDATx%01%C2%BD%C3%8EA%0D%00%20%0C%04%C3%81%3B%C3%92%0AA%5B%C3%AB%03%C2%B0%C2%80%20%C2%94%C2%91%14%0F%C3%B7%60%C3%BE%C2%9B%2C%23%C2%A2%200%C2%92%0B%3Fq%C2%9F%2B%C2%AD6%C2%88%C3%BE%C2%872f%C3%A6%C2%84%C3%80%C2%AAj%40%60%C3%AE%C3%9E!x%C3%BE%C3%81%0Be4%0Ee%C3%8E%00%00%00%00IEND%C2%AEB%60%C2%82";

var solo_off_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0B%08%06%00%00%00O%C2%85%C2%BCb%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00AIDATx%01%C2%BD%C3%8EA%0D%C3%800%0CCQ%7B%0A%C2%90%0D%C3%A96%40%09%C2%A5BI%5B%0A%C3%BF%C3%90'%C3%B9%C3%B8%25%C2%BB%C2%AAZ%40t%C3%B7%C2%AF%C2%93%C2%BC%C2%AE%0E%01%C2%B1v%0B%C2%B8%04%C3%A1%10sf~%02%C3%82%C3%B6%2B%60%C2%87%C2%8F%C2%80%09%C2%875%0C%C3%95%10%C2%B0%C3%9Aj%00%00%00%00IEND%C2%AEB%60%C2%82";

var edit_group_effects_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%0C%08%06%00%00%00Vu%5C%C3%A7%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%A9IDATx%01%C2%9DQ%C3%9D%0D%C2%83%20%10%16%C3%92%C3%84W%C2%BB%C2%81%C3%9D%C2%A0%1B%147%C2%B0%1B%C3%88%08%5D%40P%07%C2%B1%23%C2%B8%C2%81%C2%8E%607%60%04%C3%9FM%C2%B4%C3%9F%11%20%C3%844%7D%C2%90%C3%A4%C3%A0%C3%AE%C2%BE%C3%BB%C3%BB%0E%C2%96%1CN%C3%934%1A%C2%8F%22%C2%9D1%C3%B6%C2%AE%C3%ABZ%C3%868%C2%A7Kk%C2%9Dw%5DW%C2%BA%C2%A0%C2%87%07%C3%B7%7D%C2%BF%C3%93%0BLP%C2%8C%C3%85%C3%A9j%C3%9B%C2%B6%07XA%5D%20%C3%99%C2%A1%C2%A9%C3%B5%C2%A1%C3%90%C2%84n%05Cf%05%C2%A3%C2%8F%23%60%0F%C2%AECy%C3%B0K%1Ai%C2%82%C2%98h%C2%8C%17*%3DI%C2%A0%17Q%C2%BC%C3%99%C2%B6m%C3%A6%C3%A8%608%C3%A7%C2%81X%C2%9A%C2%A6%C2%83%C3%97%C2%81MQ!%09%C3%9B%26%C3%A4%C3%88%0C%23%C2%AD%C3%AB%1A%C3%86%C3%B0%C2%8Bp%C3%A3%C3%B4%14K%1C%04%C2%8C%C3%B1%07%C2%87%C3%85q%C3%88b%0E~K%23%40%C2%91%C3%BC%3FF)u%C2%B3%C3%BF%C2%80%C2%91%24%11%C2%84%C2%83%C3%91%C3%BA%C2%A2%C2%A0%19%C3%BE%2B%24%2C%C3%A0%C3%A2%C3%88%19%C2%BF)%00%1F%3C%C3%82%C2%8D0%C2%A3%08%C3%BD%C3%83%C2%90%C2%9C%3D_T(wN%C3%93%C2%8C%C2%B7%00%00%00%00%00IEND%C2%AEB%60%C2%82";

var guide_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%ABIDATx%01%C2%BD%C2%92%C3%9B%0D%C3%820%0CE%C2%AF%2B%06%C3%A8%08%1D%C2%A1%1B%C3%80%26%C2%8C%C3%80%0A%C2%AC%C3%902%01%C2%83%10%C3%84%06l%C3%90%C2%8E%C2%90%7FJ%C2%8C%C2%9D%C3%84%C2%A2j%11H%7C%C3%84%C2%92%C2%AD%1C%3B%C3%B2C6%C2%90%C2%A5w%C3%8F%C2%A1%C2%BB%3C%C2%8E%C3%86'7%5DU%C2%8D5%C3%96%C2%BBi0%C2%AE%C3%B0%C2%A7%C2%90VJOn%C3%84xq%C3%B9%C3%8C%C2%B5%18Q%1A%3F%C3%B1%C2%869%C2%9Cc%06%C2%A2%03%01%C3%B7%C3%80%C3%A1%C2%96%C2%B8%C3%9Ak%22%C2%8BWD%5B%06Zc%C2%94%C2%9F%C3%91%C2%B2J%1B%3B%C3%AD%C2%9F%C3%80c%C3%A66~%C2%90%C3%B6%13S%C2%A3s%1A%C3%8F%2Bz%C3%BC%C2%96z%C3%A5)7%C2%A3Uy%C2%AF%C2%83%C3%A7%C3%AB%C3%80z%1D%C3%9C%C3%85%C3%B8%C2%97%03X%C3%B2%C3%A2%20J%C3%8F%C3%B8%02%C3%A1%7F%C2%8D%C3%9F%C2%A9%24R!%00%00%00%00IEND%C2%AEB%60%C2%82";

var guide_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%92IDATx%01%C3%85%C2%92%5D%0D%C2%800%0C%C2%84%3B%C2%82%00%24%20%01%07%C3%A0%04%09X%C3%80%02%12%10%C2%B0Y%208%C2%98%03%C2%90%C2%80%C2%83%C2%B1%C2%92k%C2%B2%C2%8C%C2%BF%C2%84%C2%87%C3%91%C2%A4i%C2%BEm%C2%B9%C3%AE%C3%92%12!%C2%8C1%C2%8B%C3%96%C2%BA%0Fx%C3%A2%14%C3%A6%3B~%23%C2%9C%C3%91%C3%87P%C2%81J%C3%A9sCr%14%C3%88%C3%B5%C2%8As%C3%A7%C3%9Cx((%C3%95%C3%B9b%3D%C3%8F%C3%A0%C2%96E%C2%82%C3%BB%C3%9A%C2%97J%C2%98%C3%A8%0F%C2%8F%C2%A2%C3%9A%C3%A0%C3%BF%2B%C2%B8B%C2%B5%C2%A8%25%3C%C3%9A%C2%B8%C3%A3F%C3%AFQ%C2%9CN%C3%92y%C2%94.7%C3%A3%C2%A0%C2%8Bq%0C%07%3F%2C%40%C3%8C%C3%B1B%24%C3%B6%C2%B8%03%3A%C3%BDy%C2%9BY.~%C2%94%00%00%00%00IEND%C2%AEB%60%C2%82";

var lock_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%10%08%06%00%00%00%22a%C2%9E%07%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%ACIDATx%01%C2%95R%C3%91M%C3%830%14%C2%BC%C2%B3%C3%83%7FF%08%13%00%13Ta%11%C3%A0%C2%93%2F%C3%88%060%01%02!%C3%B1%09Y%C2%840B7hF%C3%887%C3%849%C3%BC%C3%94%C2%A6r%C2%95%C2%AAMO%C2%B2t%C3%8F%C3%AF%C3%AE9g%C2%87H%C3%B0%C3%91%C2%A8%C3%A8%15%3E%05%5C%C3%862w%C3%84%C2%97%C2%87%7F%C2%BE%2F%C3%99%C2%8E%1A%C2%A6%C3%A2%3F%0D%0D%C2%A0%5CR%0D*'%C3%BC%C3%82z%C2%81%C3%AE%C2%AA*%C3%99%19%C3%8FF%C3%83%C3%AF%C3%90%3F%C2%92%2C%02%C3%BDyu%C2%BD%C2%9E%C3%B8%12%C2%87x%C2%85%C2%95%C2%8B%C2%BDX%3E%C3%99%C2%9E%1B%0D%C2%8E%C2%BC%C2%88%C3%87%C3%BDT%C3%89%C3%B1%C3%86%09.co%C2%B1%C3%95%C3%A1(%C3%94%C2%A5%15%C3%9F%1B%C3%9DH%C3%A1v%13%C3%94B-w%C3%A4%C3%A9%3E%C3%B1%C3%8A%C2%B7%C3%AF%5E%C2%98%C2%8Fn%C3%86'%C3%AD%20%3F%C3%95%C2%B0%2F4%5B%C2%BBZ%5B%C3%86%C2%8F%1A%C2%A4%C2%A1%C2%B6%C3%AB%C2%B4e%7C2n%1A%C2%9A%C3%AD%19%5Dil%C3%B3%C3%B2E%C3%9A%C3%8D0%C2%81%C3%BD%22a%C2%85%C3%B9%19%0E%C3%83%0C%C3%9D)%C2%86%C2%8C%C3%84%5D%7C%C3%8E%C2%879b%09%C3%B5%3FiJ_%C2%A3%C3%B5j%0F%16%00%00%00%00IEND%C2%AEB%60%C2%82";

var lock_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%10%08%06%00%00%00%22a%C2%9E%07%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%B9IDATx%01%C2%95Q%C3%AD%11%C2%820%0Cm%7B%0C%C3%80%06%C3%A2%06%3A%C2%82%1B%08%0C%C2%80n%C2%80%13%C2%88%1B%C3%88%04%C3%A0%00%C2%80L%C2%A0%1B%C3%88%08l%C2%A0%C3%BE%C3%A7%C3%83%C2%97%C2%B3%C3%A5z%08%C2%9C%C2%BC%C2%BB%5C%C3%924y%7DI9%C3%93%C2%90e%C2%99%C3%95%C2%B6m%C2%84pEg%C3%8E%C3%B9%15%C3%AEd%C3%9Bv%C2%A9jx%C2%AF%C3%B8F1%C3%BCE6x%C3%92%C2%AF%C3%91%C3%B4%C2%A2%C3%98P%0D(%C3%B2%C3%A1L%C2%BAt%1C%C2%A7%C2%94%241%C3%B2%C2%8F%C2%A6i%C3%A8.%C2%A0%C2%9C%C3%90%25%C3%A12%C3%94%C2%9F%C2%A7%18%04w%C3%98J%C3%A5%C2%BA%17%C3%80%C3%AA%C2%B3%01%C2%80%C3%A4%0D%C2%B7%C3%A8f%C3%88%C3%B3%C3%9C%C2%AB%C2%AAj%0B%16%C2%93%0DC%C2%B1%17%C2%90%16%1Au%5D%C2%9FQL%03%C2%95%23%0D%C2%85%C3%B4%C2%96%10%22%22I%26iw%5D7%60%13H%C2%92%24%00%C3%B1Q%C2%B0%C2%990%C3%BA%09%C3%BD%3F%C3%80%C2%B8%C3%91%C2%B7F%C3%B8y%01%C2%83%C3%ADH%2F%C2%99%C2%8C%C3%99d%03%06%C2%8B%C3%99w%01%C2%A5%C2%8C%C2%A7%25I%09K6%C2%82%C3%99C%C3%B34M%C2%9F%C3%B0S%C3%BF%C2%A0%60%C3%81L%C2%81M%C3%AC%C3%BF(%C2%A6%C2%8D%15%C2%B0%C3%83%07%3A%C3%B2g%C2%8BJEv8%00%00%00%00IEND%C2%AEB%60%C2%82";

var view_button_fx_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%8DR%0B%C2%91%C3%820%10MR%04T%02%C3%A7%C3%A0%C3%8E%01%C2%A7%C3%A0%C2%AE%C2%AD%01%1C%14%14P%1C%C2%80%02%40%40%C2%A7S%05T%02(%00%09%18h%C3%8B%7B%C3%8C%26%C2%B3%C3%BCy3%C2%9D%C3%AC%C2%BE%C3%ACK%C3%9Enj%C2%8DB%5D%C3%97y%C3%9B%C2%B6%05%C3%82%C3%98s%C3%96%C3%9A%C2%AF%24I%C2%8E%C2%BAn%C3%A0%C2%83%C2%AA%C2%AAb%11%C2%B0p%C2%ADjN%C3%A6%06A%04%C3%81%C3%889%17%C3%B7%7D%3FM%C3%93ta%5E%C3%80%C3%B9%20%C2%8A%C2%A2%C2%BF%0B%C3%A1%5Cc%C3%9E%C3%80%C3%92%16%7B%C3%80%0D%5B%C2%AE%C2%B0%C3%B6%C2%A3%0Bt%3F%C2%A8%1D%5E%0EFq%C2%85%C3%AF%C2%80x(%C3%A2%C2%83%C3%BE%C3%8A%C2%B2%2CD0c%C3%9Eu%C3%9Dx%C2%80%C2%93%C3%A7H%C3%B6%C3%A0s%C2%ACsm%0F%C3%B9%0C%C3%BB9%04%08%C3%BB%C2%82%C3%BBY%C2%96%15VNY%C2%81%18%C3%93%1A%C3%AC%C3%AC%C2%94%C2%9D%C2%91%C3%986%5E%10%06%01%C3%A2%1B%C3%8BI%0B%04a%C3%9Cp%10%26%C3%AAd%10%14%5D%09%C3%98%C2%B4%C3%9C%C3%920G%2F%C2%93%20%12%01%C2%B1%7F%208%C3%A2%C3%8D~)dow%22%C2%90%C2%8D'q*%7B%C3%99%C2%80Kdo%C2%8A%7C%C3%A9G%C3%8Ew%C3%A2h%C3%BE%1F%C3%BDc%C3%8F%C3%A0%C3%94%10%3E%12%10gup%C2%AC%C2%BD%C3%A7%C3%BASp%00%00%00%00IEND%C2%AEB%60%C2%82";

var view_button_fx_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01AIDATx%01%C2%8D%C2%92%C3%8BM%C3%83%40%10%C2%86g6N%C3%8E.%01%3AH%3A%C2%88%C2%95%02%C2%80%0ErEB%04W%10%C2%A7%02%C2%88%C2%8C%C3%841PA*%40%C3%AB%12H%05%C2%A4%C2%84%1C8%20%C3%AC%C3%9D%C2%9F%C2%99%0Dv%16%C3%84k%24%C3%8B%C3%A3%C2%99%C3%BD%C3%A6%C3%B1%C2%AF%C2%99%22%2B%C2%AD%C2%9B%01(%C3%84M%C3%9B%C2%98%C3%A3%C3%9Eq%C2%9E%C3%B16%3E%C2%97%C2%B4%C3%8E%C2%B5E%0A8%05%C3%88%C2%80%C3%AE%0F%10%C3%AD%C3%A8%C2%8BuP%C3%A2%C3%9C%18F%3A%C3%80%C3%A7%17%C2%93%C3%81%0D%C3%BDb%C2%A6u%C2%B8G'%C2%A1%C2%B2%C2%A1%C2%8A%C3%BE0%5E%C3%89X%C2%AF%C2%B2C%0Do%C2%89%C2%90%C3%B6%C2%B97%C2%8A%0F%C2%9CG%C3%BB%C3%9CY%1C%C2%85N%2Fp%C3%AB%1A%C3%AEY%00%0D%C2%A4%C3%AA%C3%87%C3%8F%C3%B2%C2%B1.%C3%B4%C2%A0%C2%884%C3%97%C3%AF7%C3%9FL%13b%2C%C3%A0i%C3%83%C3%8C%C2%AA%C3%9C%C3%82%C3%84%C3%A3%C2%81%C3%A7%24q%01%C2%A0%C2%AAj~6%C3%A9%17%C2%AC%C2%B9%5B%C3%9B%C2%AC%3Ch%C3%AA%C3%98%C2%8F%C3%B2l%C3%B0%C3%942%C2%A5%C2%AD%C3%87%00%C3%9B%C3%80%7F%00%C2%9D%10%C2%92%18%C3%8Ak%17%03%C3%BB%24%3A%C2%B9%C2%BDI%3AEM%C2%B8%1F%C3%82PZ~%02ti%07c%C2%89%C3%B7%C3%A3%1A%C3%9F%5CuPB%C3%8D0T%0261%C2%A0j2%C3%B1%C3%B62K2)X%C3%A9%C3%8E%1D%04%C2%8F%00%19%C3%83U%1B%C2%AC%C2%BD%5C4%C3%BCC%C3%83%C3%A6%2C%C3%A4%C3%98%C3%A7%C2%B2%C3%93%C2%B2%C2%95%C2%9CK%C3%9B%C2%AC%01%3A%C3%BD%C3%AE%1F%C3%BB%C3%89%C3%8CA%C2%84%C3%BF%01j%C3%AF%C2%83%C2%BD%C2%BA%C2%93!%C3%A8%C2%BFM%00%00%00%00IEND%C2%AEB%60%C2%82";

var collapse_transformation_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%40IDATx%01%C2%B5S%C3%8Bm%C2%83%40%10%5D%3E%C3%A2L%09%C2%B8%03%C2%A7%C2%82%40%05%C3%8E%1D%C2%81%C2%A0%C2%82l%07V*H%5C%01%09%1Fq%C2%A4%04%C2%93%0AB%3Ap%09D%C3%A2%C2%84%C3%B8%C3%A4-Z%C2%AC%C2%B5Ya_%3C%C3%92hwgv%C3%9E%C2%BCy%0B%C2%84%C3%9C%C2%B0(%C2%8A%C2%AC%C2%B5%C2%BC%C2%BA%C2%96L%C2%92%C3%846%0C%C3%83%C2%BE%1B%C2%A0(%0AS%3C%C2%8F%C3%A3%C2%B8%C2%85%3F%C2%8B%C2%B1%3C%C3%8F%C2%AD%2C%C3%8B%C2%B6R%C2%80%C2%A6i(%C2%BA%C3%AE%C3%A7%C2%B3%C2%A2(%C2%AC%C3%98%16%18%C2%BDv%5DG%5D%C3%97%C2%AD%C3%8EwD%00%C3%8Ckj%C2%9A%C3%B6%C2%A3%C2%AA*%19%C2%86%C3%A1%0D%C3%AB%1E%0C%2C%C2%A4%1C%C3%B8%C2%B4%C3%AF%C3%BB%C3%9E%09%C3%83%C3%B0%24%05%C2%98%C3%A7%C3%86r%24%12%03%40%C3%A8%C3%BB%C3%BE%C2%A7%18%5B%C2%88%C2%88%C2%AE5%C2%96J%06%C2%80%C2%91N%C2%8B%18%C2%A7%1D%20%C2%B9%C3%83%C2%99%C2%89c%C2%92%C3%9BV%C3%82%C2%BF%C2%A1%C3%87%C3%87y%04%C3%B6%C3%9E%C2%BA%C2%AE3%00%1BTw%00%C2%B4%24%C2%85%070%C2%AC%C3%9A%C2%B6-g%1D%16%1A%C2%B0g%C2%82PG.%C3%9E%C2%B59%C2%9E%C3%A7%C2%95b%60%C2%A1%01%C2%8Ag%C3%A5%0F%C3%B0%C2%9A%C2%87%C2%BF%C2%A6n%C2%8A%C3%B2~%7D%C3%BF%02%20%C2%8E%C3%A3%00%C3%8Fg%C3%B3N%14%05L%C3%8C%1A%C3%BB%00%C3%B3n%C2%903q%C2%87%C2%8A5%C2%BA%C2%84%C3%81%13%C3%A6%C2%9B%3A%C2%83%C3%89%2F%C3%BC%C2%8F%C3%AD%C3%B9%C3%8C%1B%C3%96%C2%84%C3%9Ck%C3%B8%26%5E%C3%924%C2%A5kwV%7F%26%C3%90.%C3%81%C2%A0%22%C2%8F%C2%B4%7F%C3%9A%C2%A4%C2%96h-9%C2%8E%C2%B6%00%00%00%00IEND%C2%AEB%60%C2%82";

var collapse_transformation_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%0F%08%06%00%00%00%C3%ADsO%2F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%017IDATx%01%C2%8DR%C3%8BQ%C3%830%10%C3%9D%C2%95%C2%93%19%C2%8E%C2%94%10%3Ap%3A%C2%B0%C2%A1%00%C3%92%C2%81%C3%93%00%13%C2%A7%02%C2%86%0A%3Cv%26%C3%831%C3%90%01%0D%04%C2%B9%03%C3%9C%01.%C3%81%07N%C2%B6%C2%A4E%C2%8B1%C3%84N%C3%BCy%17i%C2%A5%C3%9D%C3%B7%C2%B4%C3%BB%040%C2%80%C2%83%C2%A4k%18%C2%81%18%C2%BA%C3%BC%C3%92%C3%9A%C2%8BFHZ%04%C3%8F%C2%92%16%C2%A71%3Ap%3F%03%C3%ADM%26(%C2%8DZ'G%C2%B5nb%22t%C2%8D!%C2%AF%C2%89wR%3F%C3%AE%C2%A4Z%C2%B5DN%03~%C2%AEC%C3%BAS%20%C2%BC!%C2%98X%C2%93%C3%B8%C2%B0%09)%20%3D%11%C2%89%03%02%C3%A5%0F%C2%B73%C2%BF%C2%97%C2%80%C2%91%C3%882%04%12%11%5C%C2%80F%C3%A7f%C3%ABc%C3%9E%C3%9B%02%C3%83aEh'%C3%BD*%C2%A5Wp%0E%C3%BCy6%C3%A8%15%12%04%04%C3%A0%C3%9A%C2%B3%11%C3%AB0G%C2%A2L%09%C2%8A%C2%B7%C3%BE%3C%C3%BDk%C2%81%C2%89x%C3%A2%3C4D%0C%C2%BAD%08%C2%98%11%C3%AAW%5E%15%C3%8C2%C3%9BJQ%C2%9Fw%C3%80VVv%C2%90%C2%97%C2%945%C2%8AeS%C3%98%C3%A0l%06%15%19i%C2%97%C2%82%C2%88%C3%A2%C2%A6%C2%B0%C3%9E%C3%93B%18%15v%C3%B3%5B%04%C3%96%C3%A7%C2%8D%C2%B5%2C%C2%B3%C3%93%5En%C3%AE%C3%A6%C2%9C%5C%C3%988%C3%A5%3D%3B%C2%80(%C2%82%C2%BD%2C%5D%C3%A8C%C3%94%C3%B9%C2%89%C3%B1%7B%C3%B9%C2%92%C3%88%C3%BF%C2%8FU%C2%8BT%1ELEr%2C%C3%83hHq%0C%C3%BB%09%C3%85%C3%9F%C2%9D%C2%AF%C2%90%C2%84%C2%A7%C2%88%C2%9A%1E%00%00%00%00IEND%C2%AEB%60%C2%82";

var layer_3d_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01gIDATx%01u%C2%92%C3%81m%C3%82%40%10Eg%C3%96%C3%AB(G%C2%97%60%3A%20%1D%C3%84%C3%90%40R%01%C3%A1%C2%98%03%20*%C2%80%0E%10%10)GH%23%18*%08%1D%40%09%3EFaw'%C3%B37%40%2C%C2%8B%C3%B8bi%C3%B6%C3%8F%C3%8C%C3%BB%7F%C2%97%17%C2%A5%C2%9F%C2%91%C3%90%13%C3%A9%C3%A7%C3%99%14%C3%A3%C2%82%C2%8F%C3%94%C3%B8%C2%96%1BW%0Aq%C3%8E%2C%C3%BBAa%C2%9F-%1AD%C3%82%07%C2%9B(%C2%AE%C2%A2%C2%A8%3C%3DJ%C3%A0%7C%C3%98%C2%B5%C3%AB%C3%98%C3%854%C3%97%C2%91%C2%B9%C2%88%C2%99%C3%8DJ%C3%89y%C2%B1%C3%B1%07%C3%A6%C3%90%1F%14%C3%A9%C3%B6%5D%0BN%C3%BCJ%C2%88%C3%9A%C2%AA%C2%8C%03R%C3%9D%C3%BE%C2%AA%C3%9B!N%C3%84%1F%3C'-%C2%83%C2%A2%23%C2%BB_%C2%96~r%C3%92%C3%A2%2Ff%C3%B2%00T!%C2%BFC%C3%AD%C2%ADt%2BP%C2%A4%C3%9A%00%7C%C2%86%C3%A82%25%C3%A2%09%C2%8D%2FX%11S%C2%8C6%08%C3%BC%14%C2%A0A%C3%9D%C3%96%0D%0B%C3%8B%C2%9C%C3%89L%14y%C3%82%24G%11j%C2%AB%C3%9F9%C2%B3%C3%A9%C3%A9%C3%A9Ug%C3%AAM%C2%81%C3%AC%1AX%C2%B1A%C3%93%02%C3%A6%C2%A8%C2%9BN%C2%9Bi%C2%9Af%01%C3%8CAdG%2C%C3%9B%5B%C3%B1%C3%97%C3%B14)%3E%26%12JM%C2%B0%C3%B8%0E.%16%C3%BF%C3%92%C2%94L%C3%83%C2%BA%0E%60%5C%C2%9C%C3%A30%C3%96p%2B%23%C2%A7%C2%A9z%C3%AAa%C2%80z%C3%88%C3%B4%3C%C3%93%C2%A4%C2%B6%C2%8E%C2%93%3E%C3%84%18%0A%7C%03vK%C2%9C%01e%C3%94%C2%B9%7B%C3%81%3D%C3%80%C2%93%C2%8A%C3%B71%C2%B1%C2%8E%C2%AD%C2%BD%12%C3%89%C3%8F%C2%9B%C3%BC%C2%A7%C2%AEo%C2%9F%C3%AF%C2%A7u%C3%8B%07%1E%C3%80%C2%B9%C2%A1%C2%82%C3%86%3A%5Dw%C2%AF%188%1C%C3%BEc%1C%0F%00%C3%BF%2Fm%C3%92%C2%A1%C3%95%0F%03%C3%98%C3%88R%C2%93%3C%C2%97q%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var layer_3d_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%019IDATx%01m%C2%92%C2%8DQ%C2%83%40%10%C2%85%C3%83%C2%91%02%C2%B0%03%C3%92A%C3%92%01%C2%A9%20%C3%9A%01%C2%A9%40-%C2%80%C2%9F%40%03%C2%A4%C2%82h%05%C3%86%0A%C3%84%0A%C2%8C%15H%094%00%C3%B8%C2%BD%C3%8C%C2%9Ds%C2%83%C2%B9%C2%99%C2%9B%5Dv%C3%9F%C3%AE%C2%BD%7DKP%C2%96el%C2%8C9M%C3%93%14%07A%C3%90%C3%A6y%C2%BE_%C3%8CN%5D%C3%97%C3%898%C2%8E'%C3%9C%1E%C3%8C%C3%AB2%0C%C3%83%C2%98%40B%C3%91%C2%9E%C3%9B%0BD%C2%A3%C2%88F)%C3%B13~7%0C%C3%83%C2%85%C3%B0%C2%81%C2%82%04%C2%BB3%C2%AE%1B%C3%89%17%C3%AEY%5DI~%C3%91%C2%A0%C3%80%C3%BETU%C2%A5%17%22%C3%A5%C2%89%C2%B5%C3%82%06%C2%B6%20%C2%96%C2%B54%C3%97%C3%9C%23%C2%9F%C2%8D%C3%80%14%C2%BEa5B%C3%83%C2%8B%C3%87k%C3%8C%7B)%05%C2%A0%C2%AE%1DE%5B%C3%91%C2%B2%C3%B3%14%C3%90%2C%C3%A5%17Eq%C3%85%2Fg3%C2%8B%C3%BB%C2%B7%C2%A5%25%3A%12%60%C3%81w%C2%83%C3%BF%C3%A4%40%C3%86%C2%AF%20%C3%99%C3%93-%05%C2%B0%C3%A2%C3%9EKM%C3%AC%06%C3%BB%C3%AE%C3%A3%C3%8C%C3%A2%C3%86%C2%B1%C3%94%C2%A4%C3%A4'~%3F%C3%8F%C3%BB%C3%B44K%22%C2%B5%C2%A0tpAoG%C3%9D%1F%23%17%C2%84%C3%96J*%3A%C2%B5%C2%A4%C2%92%05FNMv%C2%AA%7D%C3%AE%C3%9CK%C2%B1Gkc%C2%95%7C%C3%A4v4%7CvJ%C3%9A%C2%A5%C3%87%01%C3%8EZ%C3%8B%C2%B4B%C3%A87%C3%9A%C3%8Eg%C2%B0l%3E%1C%C3%86Pt%C3%A1%C3%89%3B)F%C3%A2%C3%9F%7F%C2%A7%C2%93eYk%15%15%C3%A6%C3%A1%17%C2%82%3A%C3%8E%3D%C3%99%C2%A3%C2%BB%0A%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var motion_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%0D%08%06%00%00%00%C2%9D)%C2%8FB%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%ADIDATx%01%C2%95R%C3%9B%0D%02!%10%C3%A4%C2%B6%01)%C2%81%12(%C3%A1J%C2%B8%12%C2%B4%02%C2%B4%03%1E%C3%A1%C2%9F%16%C2%AC%C3%80%12%C3%8E%0E%C3%94%0E%2C%C3%A1%1A%00%1C%C2%92%C3%A3C%25%C2%97c%C2%92%0D%1Bvf%C2%99%2C%C3%8BX%03%C3%8E%C2%B9%091%C2%B6jT%13%C2%AD57%C3%86%3CJ%C2%9EsV)%C2%A5y%15%2B%C3%94%C3%84%C2%97%00%17%12%07G%C3%88%C3%9F%C2%8E%10O%C3%830%C3%8C%2B%C2%87%C2%91%C3%B7%5E%12%C2%91b%C3%9B%10%10%C3%9D%C2%8A%0B%C3%82%C3%93%C2%9C%C3%AD%C2%83%40%C3%A3%23%C2%B1%0E%C3%80%C3%9E%C3%98%25%C2%80%C2%ADC%C2%97%C2%A0%C2%A0%C3%97%C3%92%C2%8Bb%C2%8CK%C2%87%20%10F%C3%B5%C3%84%C2%A4%C2%AE%3B%C3%88%17p%C3%9F%C3%B5%C3%A3%C3%AE%1B%C3%9C%05%C3%A4%138%C3%A1%C2%AFRW%C3%80Z%7B%C3%86%C2%9A%C2%84%C2%96%C3%BA%03%C2%97%15J%C2%BEJ%17%3B%2F%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var motion_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%0D%08%06%00%00%00%C2%9D)%C2%8FB%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%8EIDATx%01%C2%95%C2%91%C3%81%0D%C2%82%40%10E%C3%BF_%09gK%C2%A0%04K%60%C2%B5%02%3B%C3%90%C2%A31%C3%81X%C2%81v%C2%A0%C2%84%18%C2%8Fb%05%C3%86%02%0C-P%C2%82%25pV%C3%98q%C2%91%C2%AC%07b%02%C3%BC%C3%8B%C3%BE%C3%8D%C3%8C%C3%BB%C2%B3%C2%9B!Z%3Ae%C2%AF%C2%89%C2%81%0A%3C%C2%8C%C3%B2%C2%95%C3%A6%C2%B3%5D%C2%A73%C3%89%C2%A3%C2%BC%09p%17H%40r%07%C3%81%C3%92%C3%95%C2%A2%C2%99%C2%97%3A%C2%AF%C3%8E%C2%99%04%C2%B5%11r%C3%92N%C2%ABa%1ByI%C2%B2j%C3%B7%03J17tHD%C3%B6I%C3%B6%0E%C2%BF%C2%80%7D%C3%86%18%7D%24%C3%BCNQ%C3%A8)%1B%1C%0E%02j%1D%C3%AC%7F%07%01VEo%C2%80%60%C2%BE%C3%95%C3%AC%0F%08%25%C2%AEO%05Vqg3%C3%8C5%C3%92%C3%8D%C3%B2T%C2%A4%C3%BDc3%12%C3%85%C3%9Ff%C2%91x3%C3%B5%17%C3%AE%C3%AE9SR%C3%8D-Ux%C2%A8B%1A%C2%A4T%26_k%3Fm%07%7C%003%C3%92C%C3%8Dd%C3%A1%C3%82K%00%00%00%00IEND%C2%AEB%60%C2%82"; 

///

var edit_group_layers_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0C%08%06%00%00%00R%C2%80%C2%8C%C3%9A%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%01IDATx%01%C2%95%C2%92%C2%BB%C2%8D%C3%82%40%10%C2%86w%C3%97W%C2%80%C3%93%C2%8B%C3%8E%25p%15%C3%9C%C3%9A%0D%C3%9C%5DF%C3%A8%C2%94%08%11%11Y%C2%AC%C2%9D8DT%00t%40%07%C2%86%0E%5C%02%25%10%3B%C2%B0%C3%B9%C3%86%C3%82%02Y%C3%A65%C3%92%C2%AF%C3%99%C3%99%C2%9D%7F%C2%9E%C2%AB%C2%9Ds%C2%BE1%26n%C2%9A%C3%86W%17%C3%A1%5Cr%C2%BFS%0F%C3%A4%03%C3%BC%C3%A1%C2%B8%C2%BC%C2%BD%C3%94Z%C2%AB%2C%C3%8Bf%C3%A8%C2%B2OH%C2%92d%2F%C3%9A%C3%B0%18%0CE%C2%94%60u%5D%17%7D%C2%A4i%C3%AAZ%C2%A2zSH%C3%B4%C3%95%C2%95%C3%BAHNd%5E%C2%A1%C2%BB~G%C3%98%C3%813%C2%A2%C2%90%C2%BE%19%C3%92%11X%C3%8F%C3%B3~%C3%A8%2F%C3%AD%1E%C2%BD0%0C-%C3%9A%0E%C2%944%C2%81x%C2%8C%C2%A2(%C3%86%C2%9Cs%1Es%C3%B6%C3%B1%C3%BF%2C%C2%8A%C2%A2%C2%BC%C3%9B%23%C2%83%C2%90%C3%B2%C2%AC%0C%09%1C%40%08d%03%0By%C2%BFK%C2%A4%C2%BC%13%C3%98%5CM%C2%B7G%1F%C3%80%C2%B6%C3%ADQ%C3%8A%C2%91%C2%BD%C3%B5%25%C3%8F%C3%B3%C2%A0%C2%AA%C2%AA%C2%B8%C2%8Dn%C3%8C%C2%9A%C2%BDJ%C3%96%C3%9F.%C2%90%C2%BE%C2%84%C2%B3%03Ie%C3%B9%C3%B2%C2%9BF%10%C2%A7%C2%90%C2%A4%C3%AC%7Fl%19V%C2%A9%5E%11%1C%032%C3%86%C2%B7wg%C3%9D%10%C2%8C%C2%B3%C2%86%C2%A2%C2%86%16%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var settings_effects_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%13IDATx%01%C2%A5R%C3%8D%C2%AD%C2%82%40%10%C3%9E%5D%5E%01%C2%96%C2%80%1Dh%07%C3%8B%C3%AD%1D%C3%9F%C3%AB%40K%C2%B0%01X%20%C2%84%C2%ABV%C3%A0%C3%95%12%C2%BC%C2%B9%25%C3%98%01%C3%9B%C2%81x%C2%84%03%C3%B8%C2%8D%0E%09%C2%AE%C2%98%C2%988%C3%892%7F%C3%9F%C3%8C%7C3A%C2%8A%09)%C3%8B2%24%C3%9D4Mm%C2%8C%C2%A9%C3%BD%C2%BC%C3%B2%03y%C2%9E%C3%AB%C2%B6m%2BzR%C3%8A%0B%C2%8A%C3%B4d%11%123%02%C2%93%C3%9D%C3%B7%C3%BD%C3%A2%09%C2%A0TH%C2%BA(%C2%8A%05%C3%A1%C3%88%C2%96%C3%B4%C3%89%C2%B2l%0F%C3%B0%0A%26Q%C2%99%C2%89Wqx!%26o%C3%A38%C3%9EHT%C2%93S%C2%BD%03%C3%BAA4%C2%8F%C2%88%C2%9E%C3%B6%C3%81H%C3%8C%C2%93%24%C2%99%C2%93%C3%A6%C3%A2'%C2%BA%C2%81%C2%B5%C3%B6%C2%AC%C2%B5%C2%BEb%C3%9A%C3%AF%C2%9D%C2%AF%C2%94)%0A%C2%8Ed%23Ws%C3%AE%C2%8F%C2%A7%C3%BC%23w%C2%B8%1F%22%08%C2%82%5E%7C%20%C3%83Qh%C2%A7%15%3A%C3%AD%3Dz%11%C3%A2%C2%8E%C3%B7%3D%C2%8Dw%C2%83%C2%BF%C3%BE%C3%B19%C2%8B%C3%87%C2%95%C2%AA4M%C2%9D%C2%988D%C3%97uV%C2%A1%C2%9B%C2%85%C2%BD%C3%A3%C3%98y%5C%C3%8C%C2%BA%1E%1A%C2%83%C3%81%C2%8E%18(v%0C%C3%9E%12K.%C2%A1%C3%97%C3%A3%C3%8E%C2%98%C2%BA%C3%A1KFp%0D%C3%85%C2%88%C2%9E%C3%A0%C3%BFk%C2%98%C3%A2%3C%3A%C2%8E1V%7C%237%20%C3%82%C2%87%C3%8B%C3%9E%C3%93%C2%902%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var add_layer_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0D%08%06%00%00%00%C2%99%C3%9C_%7F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%A3IDATx%01%C2%9DQ%C3%9B%11%C2%820%10L%18%18~-%C3%81%0E%C2%A4%04%C3%AD%C3%80%12%C2%B4%02%C2%B1%01%C2%92%40%03Z%01%C2%96%C2%A0%15%18%3B%C2%A0%03SB~%C2%81%01%C3%9C88%22%04t%C3%9C%C2%9F%C3%8B%C3%9E%C3%9D%5E%C3%AEAI%07%C2%9C%C3%B3%C3%80q%1C%C2%86%C3%A7%C2%8C%C2%8CC%C3%95u%C2%BDw%C2%BB%1EJi%C3%984%C3%8D%C2%9A%7C%01%C2%8A%C3%9F%C2%9E%C3%82%24I%C2%96UUe%C3%BD%04%14%C2%92%C2%A8%C2%BE%C2%85%C2%BD%0F%C3%84ho%C2%8E%C3%A0%C3%95%C3%B7%7Dk%7B%C2%88%2B%C2%9B%C3%9F%C2%B59%C3%B1%C3%83%19F%C3%83%C2%AA%C2%96%C2%9F%C2%8C%C3%85%18%01L0*%04.%C2%9E%C3%A7%C3%89%3C%C3%8F%C2%B5!x%0Bc%C3%8B%C2%B2%C3%9C%C2%B5b%C2%BB%10%C3%81%C2%B4(%0A%C2%B3%04%09%C2%BA%C3%82%7B8%23%C3%B9%13%C2%93B%C3%93V%1C%C3%87%C3%A9%2FB%C3%95%C3%A33%C2%887%7D%11%C2%AE%C2%90%7D%C3%8C%C3%88%18%C3%83%C3%B6%C2%B9%24%C3%93%C3%90%C3%88y%0B%C2%B1%C2%80P%08%C2%A1%C3%87%C2%B2q%12%1DE%C3%91%C3%A1%C3%85%5Ds%60%08%C2%8E%08%2C%C3%884T%C2%97%3C%00%06%C3%87_E%C3%8D.%C3%B2%0B%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var delete_group_layers_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0B%00%00%00%0F%08%06%00%00%002%3D50%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%BFIDATx%01%C2%95Q%C2%B9%0A%C3%82%40%10%C3%9D%5Ds%C2%98%C3%82%03K%C2%B1%C3%90%C2%9F%C2%B0%C3%96%C3%96%C3%92J%2Bm%C3%BC%00%3B%C2%AB%10b%C2%A1%C2%85Uj%05Q%C3%B0%2B%04%1B%5B%05%C3%AD%C2%B4%C3%B0%00%0B%C3%8B%C2%B4!%C3%87%C3%BA%22%09%24%C2%A2H%06vwv%C3%9E%7B3%C2%B3%C2%B3%C2%84%240%C2%AAiZ%C2%8D1V%0E%C3%AEi%C3%8E%C3%B9%08g%C3%BE%0DR%3A%C3%86q%0A%7CS%C3%80%C3%96%05%C2%A1%C3%B3-%13%C3%A2%C2%83%C2%88%7F%23%C2%89%C3%9A%C3%B07%5D%C3%977%C3%BF%C2%88%C2%9E%C3%A7%C3%B5%C2%85%C2%A0D%C2%8D%C3%BC%C2%B7%3C%C2%8B%C2%95%C2%A1t%05%C3%A16%C2%B8%C3%9E%C3%A1%0F%C3%BD%C2%A4!%1E%23%03%C3%9C%2B%C2%8A%C3%92%C2%80hj%C3%9Bv%C3%9Dq%C2%9C%25%C3%82%C3%8F%C2%AFd%C3%98%C3%84%C2%B2%C2%AC%C2%B6%C2%AA%C2%AA%3DY%C2%96%05Q%14%C3%97%C2%88%15%7F%C2%91%C2%AFx%C3%88%C3%9A0%C2%8C%C2%AC%24IOT%3AG%C3%81%C3%8F6%C2%BA%C3%B8%C2%A0%C2%8Ci%C2%9A%17%C2%B4%C3%91%C2%84%C2%A0%C2%85%C3%B0%23%C3%84%C2%85%C2%98%C2%92%C2%B19%049%C2%B8%05%C3%97ugX%3B%C3%B8%C2%A5O2%C3%B7%C2%87%01b%25%C2%A2MaU%23%C2%89x%C3%98%C3%86%02%13%C3%A0%C3%A4%C2%B7%1D%C3%B1%C2%96%03Ib%2FC%1Cf%C2%AA%07%0A%3E%C2%AF%00%00%00%00IEND%C2%AEB%60%C2%82"; 


//Setting Panel Icons

var create_group_layers_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0C%08%06%00%00%00%C2%BDB%C3%A7%C3%A4%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%8FIDATx%01%C2%A5R%5B%0D%C2%800%0C%C3%AC%08%02%C2%900%098%00%098%00%14%C2%81%03%C2%90%02J%40%02%0E%C3%8A5t%C2%84%0F%1E%C3%9B%C2%B8%C3%A4%C2%B2%C2%B5%C3%A9u%C2%BBu%C3%84%C3%8C%1D%C3%BBc%013r%C3%A0p%C2%94N%C2%9B%C3%90%0F%C2%A4%C2%BA%C2%8E%C3%A0%C3%BCQ%2B%C3%97%C3%AD%C3%AE%C3%84%C2%B31f%7CS%C2%AAW%0B%C2%AE%C3%97%C2%A4%C2%A0%C2%A1%08%04y%C3%86!%C2%95%C2%BCx%C2%94%C2%98%0E%C3%9F%C3%96%05%C2%A9%C2%8FBm%0D%C2%97%C2%98%C2%B1%C2%AC%5Eb%60%02%5B%C2%B0%04k%C3%9D%C2%9F%C3%A2%C3%A2h%C3%B6%C2%88M%C2%A6%C2%A15%C3%B59%19%24z%C3%8F%C2%9Fee%5C%60%C3%AE%3A%C3%AE%C2%94s%C3%80%C3%BFf%C3%B8%C2%8C%C2%8A%00%00%00%00IEND%C2%AEB%60%C2%82";

var save_my_presets_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0C%00%00%00%0D%08%06%00%00%00%C2%9D)%C2%8FB%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%89IDATx%01%C2%BDRA%0D%C2%800%0Cl%09%02%C2%900%09%C3%A0%C2%809%40%12N%C3%80%01%12%C2%90%00%0E%C3%80I%C2%B9%25e%C3%802%60%7C%C2%B8%C3%A4%C2%B2%C2%AD%C2%BD%5E%C2%9B%C2%A5D%11%C2%88%C2%88%01%0BJ%05%C3%84%23%C3%98%C3%86r%19%7D%C3%84%C3%8F%05%C2%98%C2%BB%09%C3%9E%26%C2%8C%C2%B1%06V%C3%A5%04%C3%8E%C2%A0%C3%91%C2%B3V%5D%05%C2%96%C2%BB%C2%8B%C3%BF%11u%5C%C3%A4%C2%80%C2%BB%1B%C3%8D%C3%B5%60w%19%C2%89%C2%99%5D%17%7B%C3%AAh5%C3%A6%C2%91S%00'%C2%80%C2%93%3D%19%C3%90c%C3%81%C2%9D%C3%90%03n%C2%83%C2%A4%C2%A3e%C3%9D%C2%99%1A%7C%C3%9D%1Dt%C3%AE7%C3%BD%C2%B5%C2%80%C2%B8%C3%A5%07%06%00%00%00%00%00IEND%C2%AEB%60%C2%82";

var load_my_presets_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0A%00%00%00%0D%08%06%00%00%00%C2%907%C3%BF%05%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%A7IDATx%01%C2%85Q%C3%9B%0D%C2%830%0Ct%22%C3%BE%C3%8B%08%C3%AD%06%C3%99%C2%A0%C3%AA%08%C3%9D%C2%80%0DJ'%C2%A9%C2%BAA%C2%BBA7H7%C2%80%11%18!%1B%C2%843r%C2%90%09%01N%3A%C3%85%C3%8A%C2%9D%7Dy%18%02b%C2%8Cg%C3%8A%60%C2%8C%19%16%1B0%C2%BDb%19%1DXk%C2%A3%07%5B%C2%9E%C2%AA%C3%98%C3%A6%C3%A6J%C3%BCAGA%0CR%3A%C2%90%07%C3%9D%2C%1D%C2%83%C3%8D%C2%9F-%C3%A3%0F%C2%BC%08%C2%9F%C3%A0%C2%A9%C3%8A%1D%C2%88qr%C3%AB%5E%1F%C3%83%16L%5E%C3%8E%C3%A5%C2%B4f%C2%95%C2%A9%16S%C2%82%C3%97%C3%AF%3BG%23*%40%C2%B8%C2%A3l%C2%B8%0F%C3%BC%C3%B2K%60%C2%8FV%C3%91%10%C3%BE%C2%A5ZO%C2%BC%C2%A6N%20%5D%C2%A2I%C3%9A%C3%94%C3%88%C2%BF%C2%80%C3%B5A%C3%BBx%C2%8FX%C2%98%7C%C2%88%C2%BC%3BF*%00%00%00%00IEND%C2%AEB%60%C2%82";

var unlink_layer_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%10%08%06%00%00%00%C3%B01%C2%94_%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C3%B2IDATx%01%C3%8DQ1h%14A%14%C3%BD%7Fv6wI%40%12H%23%C2%A2D%14-%02%C2%A2%C2%85%C2%95%C2%88%C2%B9S!%60%C2%95%C3%8AJ%0B%11%C3%84%C3%88%C2%8A%C2%B9N%1B%C2%B7%C3%91J%C2%B9%C3%8B%C3%A5%1Am%C2%84%C3%98%06%0CV%11%C3%8Dm%10%C3%81BAc%C2%91%C3%86%C3%82%C2%A0%C2%82%C3%98%24WhLvw%C3%BEs%C3%A6%C2%8E%C2%8D9E%C3%82%C2%A5%C3%8A%C2%83%C3%99%C3%BD%C3%B3g%C3%A6%C3%8D%C2%9B%C3%B7%C2%88v%0Ax%C3%B3%24%C2%8C%C2%A0%07%C2%84%C3%B6x%C2%AA%C3%95%C2%BFZ%C3%A0%25%C3%B7%7F%14%C2%A1o%C2%8D%C2%A8%C3%8F%C3%95%C2%A2%C3%88%5C%3BE_%C3%ADQd%C3%A7TVLF%C3%A9%C3%B9~%C2%98o%C3%82f)%C2%81%C3%B9%C3%A4%C3%86d%C2%94%0C%C2%BB%C2%B5%1F%C2%94%1E%C3%8Dz%C3%86%C2%98%C3%8F%C3%95%C3%88%7C%C2%9Fx%C2%91%C2%8C%C2%B4%C2%91T%C3%AA8%2CBSDxLH%0F%C3%BA%C3%AC%C3%ADw%23%25%C3%BD%C3%9E%C2%AD%07%05%7F%3E%C3%AB%C2%91%C2%98!%C2%80%C2%9E%C2%B0R%C3%93%C3%95%C3%A7%C3%B11%C2%B7%C2%AE%5B%1F%C2%B9%08%C3%A6%C3%85%C2%A0%C2%A8K-U%C3%A66%0B%06%7D%5B%C3%97%C3%A6%C3%92%C3%A6mF%0C%09%C3%89%C3%82%C3%B53%C2%B9%C2%8A%C2%9D%5E%C2%A9%C3%8E%C2%99a%C3%B1%C3%88)%7D%C3%97%24%01S%2F%20~%26OD%C3%BA%15%C3%B3%20%C3%BD%05%C3%85%5E%C3%A3%C2%8F%C2%9BhX%C3%AB%C2%BA7%C2%94(R%C3%93%C2%86%10%C3%94%C3%A6Q%C2%B2%C2%A6U%C2%98%C3%B9%06%C3%BD%07%0F%C3%9E%C3%82%C2%8F%1B2%06%C3%82q%C3%BB%C2%AC%C3%B1%C2%B6tjuS%12%C2%A6%3B%04%C3%A47.c%14%C2%9C%1F%C3%8E%60%C2%80%C2%A3M%5C%C3%ABLr3(v%C2%95%C3%9BH%1C%C3%8A%C2%B3%C3%98%C3%ADu%C2%A5%C2%87%C2%98%5B%7Dg%C3%ACx%C2%81%1Be%1B%C2%B1%C2%B6%0957!I%3C%C2%BF%7Bq%C3%AC%24%C2%AF%C3%90vp%C3%BF%19%C3%B6N%C2%BC%C3%82%3EW%C2%87!%C3%B4%C2%BD%C2%A7%18%C3%B8G%C3%89V%C2%A8%C3%96%C3%93%19%2BrH%C3%A7VO%C3%84q%C3%BE%C2%96Mdt%C3%A5%C2%A5w%40wB%C3%92%13%7B%C2%97~%C3%B9%C3%A6M%C2%B2%C3%96%C3%B3%C3%91%C2%A6%C3%B3%C2%93%C2%8D%C2%9C%0BC%C2%9D%C2%AANH.%C2%8F%C3%B0%C2%B2%C2%8D%C3%B2%C2%83%25%C3%98e%C3%A3%5D%C2%8E%C2%B5%C3%BF%C3%85%C3%B5%3B%22%C2%B1%C3%8Fyhc-Z%C3%A3G%C2%AD%C3%83%C3%B9%1C%C3%A4%C3%B5%C3%94%02z%3B%22!%C2%8Ff%09r6(%C3%A8%C2%99u%24%C2%A7E%C3%A1%C3%AE%C2%85%23%C2%B4%C3%BA%1B%C3%A0%C3%82%C3%9B%C3%96%C2%A4%03%C2%AB%C2%B4%00%00%00%00IEND%C2%AEB%60%C2%82";

var unlink_effects_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%10%08%06%00%00%00%C3%B01%C2%94_%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C3%B2IDATx%01%C3%8DQ1h%14A%14%C3%BD%7Fv6wI%40%12H%23%C2%A2D%14-%02%C2%A2%C2%85%C2%95%C2%88%C2%B9S!%60%C2%95%C3%8AJ%0B%11%C3%84%C3%88%C2%8A%C2%B9N%1B%C2%B7%C3%91J%C2%B9%C3%8B%C3%A5%1Am%C2%84%C3%98%06%0CV%11%C3%8Dm%10%C3%81BAc%C2%91%C3%86%C3%82%C2%A0%C2%82%C3%98%24WhLvw%C3%BEs%C3%A6%C2%8E%C2%8D9E%C3%82%C2%A5%C3%8A%C2%83%C3%99%C3%BD%C3%B3g%C3%A6%C3%8D%C2%9B%C3%B7%C2%88v%0Ax%C3%B3%24%C2%8C%C2%A0%07%C2%84%C3%B6x%C2%AA%C3%95%C2%BFZ%C3%A0%25%C3%B7%7F%14%C2%A1o%C2%8D%C2%A8%C3%8F%C3%95%C2%A2%C3%88%5C%3BE_%C3%ADQd%C3%A7TVLF%C3%A9%C3%B9~%C2%98o%C3%82f)%C2%81%C3%B9%C3%A4%C3%86d%C2%94%0C%C2%BB%C2%B5%1F%C2%94%1E%C3%8Dz%C3%86%C2%98%C3%8F%C3%95%C3%88%7C%C2%9Fx%C2%91%C2%8C%C2%B4%C2%91T%C3%AA8%2CBSDxLH%0F%C3%BA%C3%AC%C3%ADw%23%25%C3%BD%C3%9E%C2%AD%07%05%7F%3E%C3%AB%C2%91%C2%98!%C2%80%C2%9E%C2%B0R%C3%93%C3%95%C3%A7%C3%B11%C2%B7%C2%AE%5B%1F%C2%B9%08%C3%A6%C3%85%C2%A0%C2%A8K-U%C3%A66%0B%06%7D%5B%C3%97%C3%A6%C3%92%C3%A6mF%0C%09%C3%89%C3%82%C3%B53%C2%B9%C2%8A%C2%9D%5E%C2%A9%C3%8E%C2%99a%C3%B1%C3%88)%7D%C3%97%24%01S%2F%20~%26OD%C3%BA%15%C3%B3%20%C3%BD%05%C3%85%5E%C3%A3%C2%8F%C2%9BhX%C3%AB%C2%BA7%C2%94(R%C3%93%C2%86%10%C3%94%C3%A6Q%C2%B2%C2%A6U%C2%98%C3%B9%06%C3%BD%07%0F%C3%9E%C3%82%C2%8F%1B2%06%C3%82q%C3%BB%C2%AC%C3%B1%C2%B6tjuS%12%C2%A6%3B%04%C3%A47.c%14%C2%9C%1F%C3%8E%60%C2%80%C2%A3M%5C%C3%ABLr3(v%C2%95%C3%9BH%1C%C3%8A%C2%B3%C3%98%C3%ADu%C2%A5%C2%87%C2%98%5B%7Dg%C3%ACx%C2%81%1Be%1B%C2%B1%C2%B6%0957!I%3C%C2%BF%7Bq%C3%AC%24%C2%AF%C3%90vp%C3%BF%19%C3%B6N%C2%BC%C3%82%3EW%C2%87!%C3%B4%C2%BD%C2%A7%18%C3%B8G%C3%89V%C2%A8%C3%96%C3%93%19%2BrH%C3%A7VO%C3%84q%C3%BE%C2%96Mdt%C3%A5%C2%A5w%40wB%C3%92%13%7B%C2%97~%C3%B9%C3%A6M%C2%B2%C3%96%C3%B3%C3%91%C2%A6%C3%B3%C2%93%C2%8D%C2%9C%0BC%C2%9D%C2%AANH.%C2%8F%C3%B0%C2%B2%C2%8D%C3%B2%C2%83%25%C3%98e%C3%A3%5D%C2%8E%C2%B5%C3%BF%C3%85%C3%B5%3B%22%C2%B1%C3%8Fyhc-Z%C3%A3G%C2%AD%C3%83%C3%B9%1C%C3%A4%C3%B5%C3%94%02z%3B%22!%C2%8Ff%09r6(%C3%A8%C2%99u%24%C2%A7E%C3%A1%C3%AE%C2%85%23%C2%B4%C3%BA%1B%C3%A0%C3%82%C3%9B%C3%96%C2%A4%03%C2%AB%C2%B4%00%00%00%00IEND%C2%AEB%60%C2%82";

//Head Panel

var logo_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%7C%00%00%00%19%08%06%00%00%00%C3%B3'JW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%04%C3%B9IDATx%01%C3%ADXKn%1BG%10%C2%ADfhXI%14%C2%84A%0E%C3%A0%C3%91%0D%C3%A8%13x%C2%B6Y%C2%85%3E%01%C3%A9%13%C2%88%5Cf%C3%85%C3%91%09(%C2%9D%C2%80%14%C2%9C%20%08%C2%90%C2%804%C2%90%C2%AC%C3%89%C2%AC%C2%B2%14O%C3%A0%C2%99%C2%AC%C2%82%2C%022%C2%AB%C3%88%C2%B6%C3%A4N%C3%95%C3%8Ck%C2%B1%C3%94%C2%9C%19R0%0C%C3%88p%3F%C2%A0%C3%94%C2%BF%C3%AA%C3%97%C3%95%C3%95%C3%93%C3%95%25%12%05%04%04%04%04%04%04%04%04%04%04%C3%9C%2F%18%C3%9D%C2%B0%C3%96F%C2%95%C2%8A%C3%86d%C2%94%C3%98%16%C3%91e%C3%AB%C2%80%C3%9B%C2%97%C2%84%3F%07%07kJ%C3%8C%C2%9A%02%3E%084%5C%C2%85%0F%3B%C3%A5%C2%A2N%C2%88%1E%5E%C3%B6%C3%8D%03%C2%93%C2%BEj%C2%9A%C2%97%C2%A6a%5E%C3%92C%C3%AE%C2%BF%C2%BE%C3%AC%C2%94%113_%C3%8C2%16%5E%C2%96%0B%C3%94%23%C2%BAG%60%7BZ%2CsH%5C%C2%A13%C3%85x%C2%87%C3%9E%03%C3%A0%C2%A7%C3%B7%C3%86%C3%AF%C2%A3%C2%81E%23.D%C3%A4%C2%A6%C2%9E%C2%B1%C3%8CJ%C2%B5%3Fc9%C3%8CKcY%C3%A8%C3%90H%7D%C3%A1%C2%AB1_%C2%97%C2%8B9K%0F%C2%9C%C2%84%C2%BA%1C%7C%C2%9B%C3%AE%0F8bQ%0C%C3%99r8%C3%9B%C3%9AC%7F%0C%C3%9D%C2%9D%C3%A09%13%5B%20%C2%A2%C3%BD%10%C3%9D%C2%85%C3%BF%5D%C3%91%C3%B0%C3%9Ag%1C%C2%BA%C3%BB%5C%3E%2B%C3%95%3Ed%C3%B5%C3%8FY%C3%B8%C2%A0%C2%8D%1C%C3%B6%C2%A1%C2%99%C3%90w%C2%9FfZ%05%1B%C2%9D%C2%B0H%C3%BF%11%C3%B3%3D%16%C3%A1%C3%BA%C2%80%C2%8AM%C2%8D%C2%A0%C3%97%C3%82%C3%97%1D%C2%A1%C3%9EQ%1Cy%C3%9B%C2%8D%7B%C3%BC%C2%B1%C3%BEh4%0F%C3%9Amw%5B%C3%91%2F%3C%C3%BB8%C2%B3%5B%C2%A2%C3%97-ST%C3%B6u%C2%B4%7D%C2%B0%C3%AB%11%C2%9A%C3%AD%12%3B%C2%B7%C3%A6%C2%94%C3%B0%C3%B6%C3%8A%C2%A2%C2%8D%C3%9Ag%C2%A7%C3%8A'j~%C3%BD~%C3%A1t%C2%8B%C3%90%2B%13%C2%8F%C2%AD%C2%87%5C%C3%B1%C2%A7W%C2%89%C3%B9%C3%B1%C2%B5%C2%A5%1F%5E%5B%C3%B3%C2%9C%C3%8B%C3%AF%C3%9F%C2%8C%C3%A8%C3%B9%7F%C2%B1%C3%87%C3%95%C3%87%C2%94%5E%C3%89%3A2%C2%96(%C3%A3%05%23%C2%BD%06%C3%96%5E%C2%A9%C2%A5W%C2%88%18%C3%9A%C3%8E%C2%B1%C3%A2%C3%AC%C2%A1%2FA%3B%C2%85%C2%8C%14GjK%22%C2%8B%C3%A2K5G%C3%85X%0F%C3%BDm%C3%8F%3E%C3%81%10cs%C2%AF%7F%C2%BC%C3%87%1Cg%C3%BF%C3%90%C3%93%19)%5B%C3%9A%C3%8A%0E%7F%C2%BE%C2%B3s%C2%AEtb%C3%9Aq%C3%A0%C2%AD%12%C2%83n!W%C3%BC%C3%ADzh~%C2%BD%C2%B24%C3%A3%C3%83%C2%9E%C2%BE%C2%B1%C3%A6%17.%7F%C2%BE%C3%AAz%5C%13Li%C3%AFX%C3%93%1D%C3%B8%0A%C2%9B%C2%8E%C3%ADm'%C2%B7%C3%95FW%C2%B0q%C3%9F%03%17%C2%9CB%C3%9F%7D%C2%80s%C2%AA%3E%C3%B01%1Cv%C2%A1%C3%86%C3%86%C2%8E%17e%0F%C3%BD%C3%B2%C2%A6%C2%BB%C2%8B%C3%A1r%00k7%C2%91j%C3%AA%C2%9C%C2%8Ev%C3%8Bn%3EBw%13%2F%C3%94%C2%9C%C2%9E%C3%9As%0CI%C3%9D%C2%B8%C3%9AS%C2%AA%7C4Qk%C2%B8%3D8%5B%C3%B3u%C2%AB%C3%BC%C3%9E%C2%94%3F%1Cr%C3%97%C2%AC%24a7%C2%A2%3A4%1A%C3%A7%C2%B6y%C3%B5%C2%BB9h%C3%8C%C3%A9-%7F%03%C3%97%1C%C2%B6%C2%BFi%C2%9E%7BZ_%C2%A2%5C%2B%C3%A7%C2%A5%1E%C3%B7%C2%91%C2%AA%C3%8B32%C2%81%5E%C2%82%C2%BE%01%C3%B7-%C3%91w%C3%82%C2%85%1Cp%C2%8F%C2%AAr%C2%8Bm%C2%AC%C3%B14%09%C3%A4%C3%A0%C2%BF%C3%A52wN%C3%BE%C3%9FF9%5E%C2%B0HT%C2%88YgA%C3%85%C2%BB*%7D%C2%B7%C3%B4y%C3%AC)%C3%AC%C2%8Ah%C2%93%C3%B7%08%C2%84%7B%C3%81%C3%BD%C3%BF%C2%A2%C2%9D%C3%81%C2%AF%1D%C3%A8%0D%C3%80%2Bs%C2%9F%C2%82_%C3%A3L%C2%8D%C2%8BO%C3%A5%06Gj%C2%9DS%C2%B7%0E%C2%8B%C3%A8u%C3%811A%C3%BF%C2%82%C3%A7'%C2%B4%03MU%C2%8F%C2%A8%C3%A6%C3%80%C3%B1%C2%85%2F%C2%8Dy%C2%B0%C2%B0%7F%5Cq%C3%96%C3%96%C2%B0%C3%B6%C3%AD%26%04*%C3%BC%C2%A9%C3%B82%C3%94%25%11%C2%94%C2%AFN%1C_w%C3%B3%23%C2%94%C2%99%C3%AAs%C3%B5%C2%BB%245%C3%AB%0A%C2%9B%C3%AA8%26T8y%C2%A8%C2%9C%3C%C3%B0%C3%A7%C3%B0%C3%981%17%09%C3%BA%C3%B7%C3%B9w%C2%B4%C3%AD%C3%9B%C2%84%C2%8Fn%02%3E%C3%B2%C3%87%3DD(%C3%BB%10%C2%8DGtG4%C2%B1%C2%A8%18%3F%C3%9FC_n%C3%9BR%126%7B%C3%8DN%C2%B4%C2%9F%C2%BC(%C3%91%C2%91%5Bx%0CYH%07o%C3%B0%14%C3%AB%C2%B8%C3%B0_%C2%B5%C2%B9%C2%9B%C3%9B%22%C3%AB%C2%A8%C2%BA%3F%C3%A7%2B%C2%AAG%1EJ%C3%A5%C2%86%C2%A1%C3%AD%1C%C2%93UM%C3%80m%3C%C2%87%C3%9D%11%157tfU.%C2%82%0FA%C3%B6%22%7B%C2%94%1B%C2%9B!*%0D%C2%A9%1A%C2%99%C2%B3I%C3%B1H%C2%BDM5%C3%B6(%C2%B8%3D%0C%C2%9C%1F5%C3%AC%1D%C3%BF%C3%95mx%C3%86d%2C%12%C3%9AOjgI%C2%86%C3%BE%05%C2%87%C3%B5%C3%87%C3%9B%3F%C2%B8%20%2C%C3%89au%C3%B0%0E%C2%BA%C3%8CrJ%C2%85%23%C3%8F%C3%94A%C3%B8p!%7B%C3%A8%C3%9ED%C3%9A8s%C2%86%C2%9B!s%C2%9F%C3%A0%C3%AD%C3%ABP%C2%B9%C2%B3%5B%C2%8A%C3%83%C2%85%C2%BE%C2%ACf%5D%7F%C3%BD%C2%88%C3%A5%C2%BC%C2%82W%C2%B0%C3%86aK%C2%BB%5B%C3%81%C3%A5%C3%9E%C3%92%19l%3Ev%C3%AF%3E%15O%C3%94%3E%17L%C2%B0P%C3%B3%23%C3%A9%C2%B0E%C2%82%C2%97%C3%9A%5D%C3%89Y%15%C3%94%C3%83%C2%9F%C2%A0%C3%9D%C2%B2%C3%A5%C3%88%C3%87%C3%8D%C3%9F%C3%BC%C2%80%C3%BFU%C3%BDe%C2%81oZ2%7F%C2%A2tb%C3%8D%C2%A9%C3%BA%C2%93%C2%92y%7D5%C3%9E%C3%B7%C3%86F%C2%9E%C3%AD)d%C2%AEt%24%C3%A9kW%C3%98)%C3%90I%C2%A0%C2%9B%17%C2%A1%C3%AD%C2%92%C2%AA%1E%C3%9A%17%C2%8As%C2%A5%C3%9A%C2%B1%C2%B7%C2%AF%1B%5Ep%C3%B8IqR%C3%86%C3%AF%C3%B9%C3%80qv%C3%ACv%C2%96%3E%C3%B7%C3%B6%C2%B0%C3%97%07d%C3%9C%24*~M%C3%8B%C2%A8xo%C2%9FP%C3%89%0F%11%C2%8C%C2%93%3C1%C3%B8%C2%877%C3%B2%C2%B5y%C2%B6%C2%8B%1CNv%C2%8E%5E%C3%A8%C2%84%C3%89%C2%AA%C2%B0%C3%A6'R%C2%B0G%C3%86%C3%B2%1B%C3%A2%C3%9FL%C3%85%C3%ABn%C3%A4%0D%C2%8F-%12D%C2%894G%C2%B6%C2%88%00%C2%A5%1CU6%60%C3%AD%C2%96J%1A%C2%A5-%C2%B2t%1C%C2%8A7%C2%83%C3%B8%C3%A3%C3%8E%C3%BE%C2%B5J%C3%84%C3%B4%C2%9E%C2%96%3B%C3%B8%C2%A3%1A%C3%8E%16%C3%AC%5Dx%7BX%3B%C3%8E%C2%9D%C2%B0%C2%9B%7F%1Dv!%C3%89'%C2%AC%C3%AE%C3%97O%C2%A4%1A%C3%98GJ%01%1F%07%C3%82%C2%81%07%04%04%04%04%04%04%04%04%7C%C3%B0%C3%B8%1F%C3%97Yf.%C3%8A%C3%89c!%00%00%00%00IEND%C2%AEB%60%C2%82";

var logo_about_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%7C%00%00%00%19%08%06%00%00%00%C3%B3'JW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%04%C3%B9IDATx%01%C3%ADXKn%1BG%10%C2%ADfhXI%14%C2%84A%0E%C3%A0%C3%91%0D%C3%A8%13x%C2%B6Y%C2%85%3E%01%C3%A9%13%C2%88%5Cf%C3%85%C3%91%09(%C2%9D%C2%80%14%C2%9C%20%08%C2%90%C2%804%C2%90%C2%AC%C3%89%C2%AC%C2%B2%14O%C3%A0%C2%99%C2%AC%C2%82%2C%022%C2%AB%C3%88%C2%B6%C3%A4N%C3%95%C3%8Ck%C2%B1%C3%94%C2%9C%19R0%0C%C3%88p%3F%C2%A0%C3%94%C2%BF%C3%AA%C3%97%C3%95%C3%95%C3%93%C3%95%25%12%05%04%04%04%04%04%04%04%04%04%04%C3%9C%2F%18%C3%9D%C2%B0%C3%96F%C2%95%C2%8A%C3%86d%C2%94%C3%98%16%C3%91e%C3%AB%C2%80%C3%9B%C2%97%C2%84%3F%07%07kJ%C3%8C%C2%9A%02%3E%084%5C%C2%85%0F%3B%C3%A5%C2%A2N%C2%88%1E%5E%C3%B6%C3%8D%03%C2%93%C2%BEj%C2%9A%C2%97%C2%A6a%5E%C3%92C%C3%AE%C2%BF%C2%BE%C3%AC%C2%94%113_%C3%8C2%16%5E%C2%96%0B%C3%94%23%C2%BAG%60%7BZ%2CsH%5C%C2%A13%C3%85x%C2%87%C3%9E%03%C3%A0%C2%A7%C3%B7%C3%86%C3%AF%C2%A3%C2%81E%23.D%C3%A4%C2%A6%C2%9E%C2%B1%C3%8CJ%C2%B5%3Fc9%C3%8CKcY%C3%A8%C3%90H%7D%C3%A1%C2%AB1_%C2%97%C2%8B9K%0F%C2%9C%C2%84%C2%BA%1C%7C%C2%9B%C3%AE%0F8bQ%0C%C3%99r8%C3%9B%C3%9AC%7F%0C%C3%9D%C2%9D%C3%A09%13%5B%20%C2%A2%C3%BD%10%C3%9D%C2%85%C3%BF%5D%C3%91%C3%B0%C3%9Ag%1C%C2%BA%C3%BB%5C%3E%2B%C3%95%3Ed%C3%B5%C3%8FY%C3%B8%C2%A0%C2%8D%1C%C3%B6%C2%A1%C2%99%C3%90w%C2%9FfZ%05%1B%C2%9D%C2%B0H%C3%BF%11%C3%B3%3D%16%C3%A1%C3%BA%C2%80%C2%8AM%C2%8D%C2%A0%C3%97%C3%82%C3%97%1D%C2%A1%C3%9EQ%1Cy%C3%9B%C2%8D%7B%C3%BC%C2%B1%C3%BEh4%0F%C3%9Amw%5B%C3%91%2F%3C%C3%BB8%C2%B3%5B%C2%A2%C3%97-ST%C3%B6u%C2%B4%7D%C2%B0%C3%AB%11%C2%9A%C3%AD%12%3B%C2%B7%C3%A6%C2%94%C3%B0%C3%B6%C3%8A%C2%A2%C2%8D%C3%9Ag%C2%A7%C3%8A'j~%C3%BD~%C3%A1t%C2%8B%C3%90%2B%13%C2%8F%C2%AD%C2%87%5C%C3%B1%C2%A7W%C2%89%C3%B9%C3%B1%C2%B5%C2%A5%1F%5E%5B%C3%B3%C2%9C%C3%8B%C3%AF%C3%9F%C2%8C%C3%A8%C3%B9%7F%C2%B1%C3%87%C3%95%C3%87%C2%94%5E%C3%89%3A2%C2%96(%C3%A3%05%23%C2%BD%06%C3%96%5E%C2%A9%C2%A5W%C2%88%18%C3%9A%C3%8E%C2%B1%C3%A2%C3%AC%C2%A1%2FA%3B%C2%85%C2%8C%14GjK%22%C2%8B%C3%A2K5G%C3%85X%0F%C3%BDm%C3%8F%3E%C3%81%10cs%C2%AF%7F%C2%BC%C3%87%1Cg%C3%BF%C3%90%C3%93%19)%5B%C3%9A%C3%8A%0E%7F%C2%BE%C2%B3s%C2%AEtb%C3%9Aq%C3%A0%C2%AD%12%C2%83n!W%C3%BC%C3%ADzh~%C2%BD%C2%B24%C3%A3%C3%83%C2%9E%C2%BE%C2%B1%C3%A6%17.%7F%C2%BE%C3%AAz%5C%13Li%C3%AFX%C3%93%1D%C3%B8%0A%C2%9B%C2%8E%C3%ADm'%C2%B7%C3%95FW%C2%B0q%C3%9F%03%17%C2%9CB%C3%9F%7D%C2%80s%C2%AA%3E%C3%B01%1Cv%C2%A1%C3%86%C3%86%C2%8E%17e%0F%C3%BD%C3%B2%C2%A6%C2%BB%C2%8B%C3%A1r%00k7%C2%91j%C3%AA%C2%9C%C2%8Ev%C3%8Bn%3EBw%13%2F%C3%94%C2%9C%C2%9E%C3%9As%0CI%C3%9D%C2%B8%C3%9AS%C2%AA%7C4Qk%C2%B8%3D8%5B%C3%B3u%C2%AB%C3%BC%C3%9E%C2%94%3F%1Cr%C3%97%C2%AC%24a7%C2%A2%3A4%1A%C3%A7%C2%B6y%C3%B5%C2%BB9h%C3%8C%C3%A9-%7F%03%C3%97%1C%C2%B6%C2%BFi%C2%9E%7BZ_%C2%A2%5C%2B%C3%A7%C2%A5%1E%C3%B7%C2%91%C2%AA%C3%8B32%C2%81%5E%C2%82%C2%BE%01%C3%B7-%C3%91w%C3%82%C2%85%1Cp%C2%8F%C2%AAr%C2%8Bm%C2%AC%C3%B14%09%C3%A4%C3%A0%C2%BF%C3%A52wN%C3%BE%C3%9FF9%5E%C2%B0HT%C2%88YgA%C3%85%C2%BB*%7D%C2%B7%C3%B4y%C3%AC)%C3%AC%C2%8Ah%C2%93%C3%B7%08%C2%84%7B%C3%81%C3%BD%C3%BF%C2%A2%C2%9D%C3%81%C2%AF%1D%C3%A8%0D%C3%80%2Bs%C2%9F%C2%82_%C3%A3L%C2%8D%C2%8BO%C3%A5%06Gj%C2%9DS%C2%B7%0E%C2%8B%C3%A8u%C3%811A%C3%BF%C2%82%C3%A7'%C2%B4%03MU%C2%8F%C2%A8%C3%A6%C3%80%C3%B1%C2%85%2F%C2%8Dy%C2%B0%C2%B0%7F%5Cq%C3%96%C3%96%C2%B0%C3%B6%C3%AD%26%04*%C3%BC%C2%A9%C3%B82%C3%94%25%11%C2%94%C2%AFN%1C_w%C3%B3%23%C2%94%C2%99%C3%AAs%C3%B5%C2%BB%245%C3%AB%0A%C2%9B%C3%AA8%26T8y%C2%A8%C2%9C%3C%C3%B0%C3%A7%C3%B0%C3%981%17%09%C3%BA%C3%B7%C3%B9w%C2%B4%C3%AD%C3%9B%C2%84%C2%8Fn%02%3E%C3%B2%C3%87%3DD(%C3%BB%10%C2%8DGtG4%C2%B1%C2%A8%18%3F%C3%9FC_n%C3%9BR%126%7B%C3%8DN%C2%B4%C2%9F%C2%BC(%C3%91%C2%91%5Bx%0CYH%07o%C3%B0%14%C3%AB%C2%B8%C3%B0_%C2%B5%C2%B9%C2%9B%C3%9B%22%C3%AB%C2%A8%C2%BA%3F%C3%A7%2B%C2%AAG%1EJ%C3%A5%C2%86%C2%A1%C3%AD%1C%C2%93UM%C3%80m%3C%C2%87%C3%9D%11%157tfU.%C2%82%0FA%C3%B6%22%7B%C2%94%1B%C2%9B!*%0D%C2%A9%1A%C2%99%C2%B3I%C3%B1H%C2%BDM5%C3%B6(%C2%B8%3D%0C%C2%9C%1F5%C3%AC%1D%C3%BF%C3%95mx%C3%86d%2C%12%C3%9AOjgI%C2%86%C3%BE%05%C2%87%C3%B5%C3%87%C3%9B%3F%C2%B8%20%2C%C3%89au%C3%B0%0E%C2%BA%C3%8CrJ%C2%85%23%C3%8F%C3%94A%C3%B8p!%7B%C3%A8%C3%9ED%C3%9A8s%C2%86%C2%9B!s%C2%9F%C3%A0%C3%AD%C3%ABP%C2%B9%C2%B3%5B%C2%8A%C3%83%C2%85%C2%BE%C2%ACf%5D%7F%C3%BD%C2%88%C3%A5%C2%BC%C2%82W%C2%B0%C3%86aK%C2%BB%5B%C3%81%C3%A5%C3%9E%C3%92%19l%3Ev%C3%AF%3E%15O%C3%94%3E%17L%C2%B0P%C3%B3%23%C3%A9%C2%B0E%C2%82%C2%97%C3%9A%5D%C3%89Y%15%C3%94%C3%83%C2%9F%C2%A0%C3%9D%C2%B2%C3%A5%C3%88%C3%87%C3%8D%C3%9F%C3%BC%C2%80%C3%BFU%C3%BDe%C2%81oZ2%7F%C2%A2tb%C3%8D%C2%A9%C3%BA%C2%93%C2%92y%7D5%C3%9E%C3%B7%C3%86F%C2%9E%C3%AD)d%C2%AEt%24%C3%A9kW%C3%98)%C3%90I%C2%A0%C2%9B%17%C2%A1%C3%AD%C2%92%C2%AA%1E%C3%9A%17%C2%8As%C2%A5%C3%9A%C2%B1%C2%B7%C2%AF%1B%5Ep%C3%B8IqR%C3%86%C3%AF%C3%B9%C3%80qv%C3%ACv%C2%96%3E%C3%B7%C3%B6%C2%B0%C3%97%07d%C3%9C%24*~M%C3%8B%C2%A8xo%C2%9FP%C3%89%0F%11%C2%8C%C2%93%3C1%C3%B8%C2%877%C3%B2%C2%B5y%C2%B6%C2%8B%1CNv%C2%8E%5E%C3%A8%C2%84%C3%89%C2%AA%C2%B0%C3%A6'R%C2%B0G%C3%86%C3%B2%1B%C3%A2%C3%9FL%C3%85%C3%ABn%C3%A4%0D%C2%8F-%12D%C2%894G%C2%B6%C2%88%00%C2%A5%1CU6%60%C3%AD%C2%96J%1A%C2%A5-%C2%B2t%1C%C2%8A7%C2%83%C3%B8%C3%A3%C3%8E%C3%BE%C2%B5J%C3%84%C3%B4%C2%9E%C2%96%3B%C3%B8%C2%A3%1A%C3%8E%16%C3%AC%5Dx%7BX%3B%C3%8E%C2%9D%C2%B0%C2%9B%7F%1Dv!%C3%89'%C2%AC%C3%AE%C3%97O%C2%A4%1A%C3%98GJ%01%1F%07%C3%82%C2%81%07%04%04%04%04%04%04%04%04%7C%C3%B0%C3%B8%1F%C3%97Yf.%C3%8A%C3%89c!%00%00%00%00IEND%C2%AEB%60%C2%82";

var push_update_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%12%08%06%00%00%00%C2%BD%C3%B95T%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%90IDATx%01%C3%95%C2%92A%12%C2%820%0CE%C3%9B%C3%A2%C2%B0%C2%95%1B%C2%88%1B%C2%86%C2%9D%1C%C3%81%23p%03%C3%B1%04%C3%A8M8%C2%927PW0t%C3%91%2B%C2%B0n%C2%A7%C2%AD%C3%A9%C2%8C%0B%C2%A4%C2%B4UgX%C3%B07M%C3%92%C3%A4M%C2%92%09B%C2%AB%11c%2C%0D%C3%A5%10%C3%9Fg%C3%9F%C3%B7%15%C3%A7%C2%9C%C2%99%C3%B7%2F%08%C2%A5%C3%B4%C2%A8%C2%B5%C2%AE%C3%9F%C3%AE%09%40%C2%85%2B%17%C2%A3%C3%B9%0Ej%004%C3%938%C3%84%C2%AEy%C2%9E7AH%C3%9B%C2%B6)!%C3%A4%0Ef%C2%82l%0Dq%1C%C3%AFA%C3%838h%C2%8D%03%C2%80%C3%82%010J%C2%84%10%C2%A5U3%C2%93%C3%A8%C2%9C%C3%9D%08FJ%C2%BF%C2%81%C3%BC%C2%AC%C3%85%20%07_%01%C3%86x%C3%A7%C2%85t%5Dw%C2%81%C2%A7%C3%B4A%60'%C3%95%C3%B4%C3%B86%1FDBnR%C3%8A3%0A(%C2%8A%C2%A2%C3%87%C3%98%C3%87%C2%BEd%C3%A8%C2%AC%01%C3%B0%C3%96%C3%98Y%C2%969%C3%A1%C3%9E%C3%85B%C3%AB%C3%A6%C2%A8%0A%C2%A5%C3%94%13%C2%ADB%2Fu%C3%ACH%C2%81%04k%07%C2%95%00%00%00%00IEND%C2%AEB%60%C2%82";

var push_update_new_update_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%12%08%06%00%00%00%C2%BD%C3%B95T%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%81IDATx%01%C3%95%C2%93%C2%B1N%C3%82%60%10%C3%87%C2%AF%C2%ADL%C2%A4%C2%B1%0C%24%C3%92%04%C2%84%C2%A51a%C3%B0%5Bdn%C3%A4%01%60pS%C2%92%C3%BA%04%C3%A8%C3%A2Z%1F%C2%80A%13%06FM%7C%C2%80%C3%BA%02%C2%85A%16MHI%20%25%C2%90%002%18%02%03%04%07%16h%C2%BD%C3%8F%C3%81%C2%B4%C3%94%C2%96%C2%B8%C3%89%7F%C3%B8%C3%AE%C2%BE%C3%8B%C3%A5w%C3%97%C3%BB%C2%AE%00%C3%BFE%C3%8C%C2%B6%C2%84%C3%81%60%C2%90L%C2%A5RCB%C2%88%60YV%C3%91%C2%B6%C3%AD%24%C3%830%C3%AF%2C%C3%8B%3E%18%C2%861%C2%A49%5C%10%C2%A0%C3%9B%C3%AD*%C3%AB%C3%B5%C2%BA%C2%9A%C3%8DfA%C3%97%C3%B5JN%14%C3%B3%17%C3%B18%C3%A1C!%C3%99%5C%2C%C3%B2%C2%A2(%3E%C2%8F%C3%87%C3%A3%C2%B9%2F%C2%A4%C3%97%C3%AB%C3%89XUE%C3%B7%C2%A0%5C.%C3%8Bg%3C%2F%C3%9CH%12%1C%C3%B1%3C%C2%9CF%C2%A3%C2%80%20%C3%A1e%3A%25%C2%93%C3%89%C3%A4%C2%91%C3%B5%C3%A9%C2%A0%C2%88%C2%ADW%C3%91%25%C3%B4%C3%9En%C2%B7%C3%A1%3C%C2%91p%C3%A5%C3%A4b1jdzx%20%C2%A6i%26%C2%B1%C2%83%5Bg%2C%1C%0E%7B%0A%7D%C2%AEV%C3%94%C3%8C%7F%C2%85%C3%A0%C3%80hu%C3%81%19%C3%8Bd2P%C3%A9%C3%B7%5DyO%C2%A3%115%1A%3D%C3%B6%C3%80%2B%C2%B2%19P%14%05TU%05%C2%BD%5E%C2%87%C2%93H%04%3E%C2%96Kx%C2%9B%C3%8Dj%1C%C3%87%5D%C3%BBA%3C%C2%A2%C2%9FS*%C2%95%C2%BEg%C3%93h4%C2%B4WM%C2%BBo%C2%B5Z%C2%B5%C2%9F%C3%AE%C3%A1%0FJ%C2%A7%C3%93P(%14%C2%9AN%C2%80%1F%C3%A4%18%02%C2%84%C2%8Bv%C2%B8%19sA%3A%C2%9D%C3%8E%15%C2%9A%7C%00%03%C3%B0%C3%A5%14%C2%BA%C2%84%C3%8E%C2%98k%26%C3%B825%C3%9C%C3%90K%C3%98%22%1C%C2%A8%C3%A1%C2%BC%07%C3%BE%3B%C3%98%C3%99%1D%C2%82%C3%B7%C2%A9%2FI%C2%92%2F%3Cp%C2%B0%C3%98%3A%5D%26%C2%82%C3%9B%C3%9B%C2%84%C2%9D%C3%90%17%C3%B2k%C2%89%C2%B2%07%C2%A9%C3%A4F%00%00%00%00IEND%C2%AEB%60%C2%82";

var settings_window_button_panel_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%0F%08%06%00%00%00%C3%ADsO%2F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%8CIDATx%01%C2%95S%C2%81%0D%C2%820%10%7C%C2%8C%030%02%1B8%C2%82l%C2%A0%1B%C2%88%1B%C3%A8%06l%C3%A0%08%C2%B8%C2%81%3AA%C3%83%04%C2%B8A%C3%99%C2%A0n%C3%B0%5E%0DM%C3%8A%C3%9B%C2%AFr%C3%89%05%C3%8A%C3%9D%C3%BF_%3F%C2%81(%01fny%C2%8E%3B)X)%C3%9F%C2%B7%C3%A2%C2%BC%C2%A1%1C0a%0F%1A%C2%B0%01k%C3%90%C3%B27%C2%82%C3%A6%7D%C2%A7%C2%B8%C2%B8R%0Arp%C2%BE.4%C2%B8d%C2%8C6%C2%A3%C2%99%C3%90%60H%C2%88C%C2%980%25%C2%BC*)%C3%8A%600B%C2%AC%12%7Br%22Y%15%C2%8Bu%2C*%C2%8B%C2%8E%C2%874r%C2%89%C3%BF%24%C2%B0%C3%89%04%C3%BC%7B%07%25%C3%98%25%3C.4hY%C2%87%C3%A5%C3%B9%C3%9Dct%14Mp%C2%BC%1C%C2%9F%C2%84%C3%AB%C2%A2(%5E8%C2%9C%C3%B1%C2%BE%03%7Bp%04%7D%C3%B7R%C2%AC%C3%A18%3D%0F%C3%A0%03u%23i%40%C3%83%C2%9B%C2%BC%C2%8A%C3%A6%C3%95~%C2%A6%5E%C2%9C%C2%9F%C2%8A%C2%8F%C3%9E%1F%1E'%C2%BD%C2%90%C3%A4%C3%AD%C3%AB%00%00%00%00IEND%C2%AEB%60%C2%82";

// ABOUT ICONS

var update_ready_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0E%08%06%00%00%00%C3%B0%C2%8AF%C3%AF%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%90IDATx%01%C3%9D%C2%91%C3%8D%0D%C3%820%0C%C2%85%C3%BDZ%C3%A0%C3%8C%08e%04%26%C2%80%C2%88E%60%00%C3%BE%26%00%26%40%C3%80%C2%81%2B%1B0%01%C2%84%11%C3%98%C2%80%C2%8E%C3%90%3Bm%1F%C2%B1P%11%C2%94%C2%B6R%C3%85%C2%8D'E%C2%91c%7FN%C3%B2%0C)%C3%91%C3%8E%C3%9E%C3%BB%24%C2%ACPF%C2%93A%C3%A3PT%C3%A3%C3%89%0F%C3%BA%17xo%19%14%15%C2%AA%C2%81%C3%B93%C2%BC%07k%C3%8B%C2%B6%C3%8F%C3%A4%06A(%C3%A0%C2%8A%C2%94%C2%A3%C2%BA%C3%AD%C2%AE%C3%A8%C2%B9%7D%C2%98%20%C3%AD%C3%8EM%C3%AB%C3%BA%C2%827%C2%A7%C3%BB%12%C3%80%22%C2%81%C3%9F%C2%99%1B%C2%84Y%C3%ACr%C2%91%5Bm%C3%91F%C3%82%C2%80%C3%A4j%3Ah.%15%C3%9A%C2%9Ecj%C3%BC%C3%B5l-%C3%90%C3%84%13T%7D%C2%82%C2%95%7F%C3%8E5%C2%902%C2%B0%14%C3%8E%1A%004e%60%25%C2%AC%1A%C2%9B%C3%A6%C2%A5*%C3%9F%C2%800R%C3%93%C2%BD4%C2%9E9%C2%B3%22%C2%A9!%C2%B8%C3%B1%04%3ES%C2%AB%C3%86%C3%94%C3%80%C3%82%04%C2%9Ey%00%C2%92%C3%9E_%0F%C3%86gw%C3%91%00%00%00%00IEND%C2%AEB%60%C2%82";

var updates_check_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%5BIDATx%01%7D%C2%92%C3%91Q%C3%82%40%10%C2%86%C3%BF%C2%BD%04%C2%9E)%01%2B0%25%24%C3%92%00V%00%C2%AF%3E%60%C2%A4%02%C2%A0%02%40t%7C%C3%95%0E%C3%92%00%13%C2%A9%C3%80X%C2%81%C2%B1%C2%83%3C%C2%9B%C3%9C%C2%AD%C2%BB%C3%889a%06%C3%98%C2%99%C3%8C%C3%A4%C3%AE%C3%BE%C3%AFn%C3%AF%C3%BF%C2%8F%C3%90%C2%AA%C2%97%C2%9C%C3%BB%16.eF%C3%8C%40%C2%8F%C3%80%25%11%15%01%C3%8C%C3%BA.%C2%A1R5%C2%9B%C3%9C%C3%8E%C3%88%03%3A%60%C3%A6%C2%B9%C3%BCV%C3%84x%C2%97%C2%85%C2%8A%09%7D%C2%81c%5D%17X%C3%97%C2%A0%1Aj%03%C3%B2%C2%AD%C2%9D%09%C3%A7%C3%93%C2%84*%C2%BF%C3%99RN7%5C%C2%8B%C3%90%C2%8C%C3%BC%1CiK5%C3%9B%2F%01%16%C3%A9%C2%A03%C3%B7m6%C2%B0%C3%91%24%093%1D%3F%C3%A5%3Crl_%3Dd%2C%C3%ACL%C3%98%C3%92%03Z%0D%C2%9A%C2%BE%C3%9Cky%0A%C3%90%0A%1Dc%08%C3%A2%0Cg*%00v%01%05WG%C2%90%7C%3Dv%C3%BC%7D%0A%C2%90%C3%BB%C3%B4%C2%BCkZ%C3%8F%C3%B9Oda%22%C2%A3n)%C3%98%167%08%0B%C2%86%C3%9B%05%C3%AC%3E%1E%C2%B7%C3%8D%C3%B8%7F%C3%9E%C3%91%10%C3%92%C2%B6%11%C3%BB%0A%C2%B1s%C3%94%C2%86%C3%94%C2%BD%C3%B4%C2%A6%3B%C2%B6do%C3%85%C3%AB%C2%99%C2%9E%C2%B8w%C2%8D%C3%84ABF%C2%9B%C2%BC%C2%8E%C2%99)%07%C2%BB%C3%A9%C3%BD%C2%A0%C2%BB%C3%82%C2%99%C2%92X%24t%5E%11qb%26IG%C2%82to%20%C2%B3%C3%94%C2%BC.%01%C2%9A%C3%A3%C2%9F%C3%BEP%C3%ABm-%C2%BBP%C2%AA%C3%B6K%C3%8F%C2%99%03%7F%1A%C3%90%C2%B5%08%23%7D%15%0AH%2C%0F%C3%BB6%C2%8Fw%C2%ACc8J%C3%A5%C3%B9%C3%84%07s*%C2%BD%C2%B3D%C2%B2%C3%90%13%C2%BC%C3%AE%17%C3%A5-%C3%80%0B%C2%A9%C3%A0Y%C2%B6%00%00%00%00IEND%C2%AEB%60%C2%82";

//WITH Groups

var close_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0D%08%06%00%00%00r%C3%AB%C3%A4%7C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%88IDATx%01%C2%8D%C2%92%C3%8B%0D%C3%83%20%0C%C2%861%13d%C2%93v%C2%84f%C2%8EHi%C3%98%C2%A0%C2%9D%C2%A4%C3%AA%04%C2%A4y%C2%9C3BV%C3%88(%C2%BDp%02AM%14*%C2%8BB%1AK%60%C2%84%C3%BDa%C3%BB%17%C2%8C%C2%A1M%C3%93T%C2%8C%C3%A3xf%7F%C2%AC%C3%AF%C3%BB%C2%8B%C3%B7%C3%9CoJ%C2%A9%C3%99Z%3B%C3%AF%C2%81%C3%830%5C%C3%91%C3%8D%C3%A8%1F%2B%C2%84%C3%80%13%5D%C2%91%03%3D%C3%A0%C2%9Ck%C3%B1%C3%B8%C3%96Z%C2%BF%20%04%C2%BA%C2%AEk%00%40%C3%BA%00%C3%A7%C2%BC%C2%AC%C2%AAj%C2%89%01cL)%C2%84X%C2%80%C2%BE%18%C2%83%C2%98%7C%C2%8A%01%C2%9F%07q%2B%14%C3%B4-%C3%87%C3%80W%08ju%5D%C2%B7%08%C2%B5%1B%C3%80%C2%B0%C3%92%C2%9D%02%C3%89Jt%C2%86P%C2%89%C3%8E%C3%B8S)%1E%1A%C3%8F%C2%82%25T%C2%85%1C%10ZJ%C2%A9%0A%7B%40NU%C2%BE%0D%7B%C3%8B%01A%1C%C3%92j%C2%B3%5EJ)%0B%5C%C2%87%C3%BF%C3%9E%07%C3%AB%C2%9A%C2%B5%C2%B8%C3%9C%7C%0B%C3%A1%00%00%00%00IEND%C2%AEB%60%C2%82";

var open_selected_comp_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%B3IDATx%01%C2%95%C2%92%C3%A1%0D%C2%820%10%C2%85%5B%C3%92%01%C2%BA%C2%818%02%1B%C3%A8%08%C3%BC%26%C2%A4%C2%B2%C2%81%1B%C2%80%230%01%1A%18%C3%80%11%18%C2%81%0D%60%C2%84%0E%40%C3%80w%0AZ%C2%A4%C2%80%C2%BE%C2%84p%C3%A9%C3%B5%C2%BB%C3%B6%5D%C2%8F%C2%B3AY%C2%96%C2%B9%C3%8C%C2%90%C2%94R%C3%BB%C2%BE%C2%AFm%C2%B9(%C2%8A%1ANAQ%14u%C3%9F%C3%B7%C2%93%24%C2%A9m%C3%9B%C2%BD%10%C3%A2%C2%8406%C3%97%1D%C3%87%C3%B1%04%05%03%C2%94%C3%A2%C2%BB%1B%C2%90%C2%A6%C3%8A%08%C2%93%3C%C3%8FK%C3%BC%C2%A9%C2%80%C2%A2%5C%C3%97uR%18U%C2%AA%20%08Jf%11%C3%A7%7C%C2%87%C3%A2%04%C3%9DF%C3%98a%1B%C2%82%0D%05%C3%A8%C2%8AS.%C2%B8E2%C2%AE%C2%8B_!%C2%A5%C3%94%13%C3%82%C2%B5S%14h%C3%84%3F%10)%0C%C3%83%C3%B3%C3%A2%C2%89K%10%C2%9EE%C2%A2%C3%8B5%C3%BAq%C2%9Cy%C2%A4%C2%A4%0D%1A%24%C3%A9%C2%A3%C2%AE%C3%8E%40%3C%C2%81%C2%86%07%C3%8F%02Md%C3%AD*%C3%A0%C2%8Am%C3%A8%C3%AD%11%C3%87%C2%BB%C3%A8%C3%98am3%C2%BC%C2%B9%C3%98%C3%B7%01%C3%B1%C3%80%25%7C%C3%91X%C3%85k%C3%A0%00%C2%91%C2%95%C3%97%C2%AC%C2%92%C2%BE%07yE4%C2%8A%C3%BA%01%C3%9Bd%C2%94%C3%A1S%C2%A4%C2%B5%C3%98%00%00%00%00IEND%C2%AEB%60%C2%82";

var disable_effect_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01oIDATx%01%C3%A5SK%C2%8E%C2%82%40%10m0%26%26%C2%BA%C3%80%C2%85%C2%BF%C3%84d%C3%A4%06%C3%A3%0D%C3%B0%06z%02%C2%99%13%C3%8C%C3%9C%409%C2%81%C3%83%09%C3%B4%06r%C2%83%C3%A1%06%C3%8C%0D%60V%04%C3%98%C3%B4%06%12%16%C3%80%C2%BC%22%C2%B6i%09%24%C2%B3%1E%2B1%C3%9D%C3%B5%C2%AA%C3%AA%C3%B9%C3%AA%01%C2%8C%C3%BD%C3%9BP%C2%BA%0AI%C2%92%18eY%1A%C2%B8%C2%BE%C3%9C%C2%A0%1FUU%C3%9D%C3%89d%C3%A2%C3%BE%C2%89(%C2%8E%C3%A3w%1C%C3%87%C2%AA%C2%AA4%C3%96%1E%C2%81%C2%A2(%C3%96t%3A%C2%BD%C2%B4%12%C3%B9%C2%BE%C2%AF%C2%8DF%C2%A33Tl%05%062%1BC.0%0E5%26%C2%A0%C2%BD4%C3%ABdY%C3%B6%C2%A6%C3%AB%3A%C2%A7D%15%C3%A8p8%C2%BC%C3%8A%24%20X%C3%8F%C3%A7%C3%B3%0F%C2%9CA%C2%AF%C3%97%C3%A3%C2%B3%C3%99%C3%8C%24L%22%C3%9A%C3%92%C2%8CHj%C2%A2(%C2%8A%0E%C3%B8wC%22%C2%B9%40%C3%BA7%C3%96%3C%01%C3%B7%C3%A8%07%C3%8FN%C2%84%C2%91JI%C2%B1%C2%81%C3%99c%3D%13%C2%86%C3%A1%0A%C2%B2%7Dy_%C3%A4%C2%9B%3C%C3%8Fy%C2%BF%C3%9F%C3%B7%1E%7C%C2%80%22%0C%C2%AFp%C2%BDJ0%C3%87%C2%8A%C2%BA%3A%18%0C8%1A%C2%B8%3C%C2%80%15%C2%BB%C2%8C%C2%A6%1Ao%40%1A84u%3C%1E%C3%B3%C2%A2(l%C2%B9B%C2%92%C2%97%C3%8Bes%0D%C2%9BV%C2%83_%C3%BB%06%C2%91%C2%B5X%2C%C2%82%C3%BBS%C2%83%1F_%0D%C2%9F%C3%967%C2%9F%5E)%17w%C3%B2K%C3%AAq%C2%81oj%3B%04%08%3Fv8%1CI%C2%81%C2%87%C3%813%C2%9A5%C3%B2E%18%2F%C3%AA%C3%B0%C3%91I%C3%93tw'm%C3%88d0%C3%9FD%C3%93%01%C3%97%15k%09%C3%B2%13%3EYx5%3E%1Fp%C3%96%11%204%40h0%C3%A9%13%01%C2%81%0B%3F%5C%C3%B6%5C%C3%B1%0BY.%C2%BA%C3%B0%C3%A0%24%C2%9B6%00%00%00%00IEND%C2%AEB%60%C2%82";

var import_ffx_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%8DR%0B%C2%91%C3%820%10MR%04T%02%C3%A7%C3%A0%C3%8E%01%C2%A7%C3%A0%C2%AE%C2%AD%01%1C%14%14P%1C%C2%80%02%40%40%C2%A7S%05T%02(%00%09%18h%C3%8B%7B%C3%8C%26%C2%B3%C3%BCy3%C2%9D%C3%AC%C2%BE%C3%ACK%C3%9Enj%C2%8DB%5D%C3%97y%C3%9B%C2%B6%05%C3%82%C3%98s%C3%96%C3%9A%C2%AF%24I%C2%8E%C2%BAn%C3%A0%C2%83%C2%AA%C2%AAb%11%C2%B0p%C2%ADjN%C3%A6%06A%04%C3%81%C3%889%17%C3%B7%7D%3FM%C3%93ta%5E%C3%80%C3%B9%20%C2%8A%C2%A2%C2%BF%0B%C3%A1%5Cc%C3%9E%C3%80%C3%92%16%7B%C3%80%0D%5B%C2%AE%C2%B0%C3%B6%C2%A3%0Bt%3F%C2%A8%1D%5E%0EFq%C2%85%C3%AF%C2%80x(%C3%A2%C2%83%C3%BE%C3%8A%C2%B2%2CD0c%C3%9Eu%C3%9Dx%C2%80%C2%93%C3%A7H%C3%B6%C3%A0s%C2%ACsm%0F%C3%B9%0C%C3%BB9%04%08%C3%BB%C2%82%C3%BBY%C2%96%15VNY%C2%81%18%C3%93%1A%C3%AC%C3%AC%C2%94%C2%9D%C2%91%C3%986%5E%10%06%01%C3%A2%1B%C3%8BI%0B%04a%C3%9Cp%10%26%C3%AAd%10%14%5D%09%C3%98%C2%B4%C3%9C%C3%920G%2F%C2%93%20%12%01%C2%B1%7F%208%C3%A2%C3%8D~)dow%22%C2%90%C2%8D'q*%7B%C3%99%C2%80Kdo%C2%8A%7C%C3%A9G%C3%8Ew%C3%A2h%C3%BE%1F%C3%BDc%C3%8F%C3%A0%C3%94%10%3E%12%10gup%C2%AC%C2%BD%C3%A7%C3%BASp%00%00%00%00IEND%C2%AEB%60%C2%82";

var export_ffx_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0DIDATx%01%C2%8DR%0B%C2%91%C3%820%10MR%04T%02%C3%A7%C3%A0%C3%8E%01%C2%A7%C3%A0%C2%AE%C2%AD%01%1C%14%14P%1C%C2%80%02%40%40%C2%A7S%05T%02(%00%09%18h%C3%8B%7B%C3%8C%26%C2%B3%C3%BCy3%C2%9D%C3%AC%C2%BE%C3%ACK%C3%9Enj%C2%8DB%5D%C3%97y%C3%9B%C2%B6%05%C3%82%C3%98s%C3%96%C3%9A%C2%AF%24I%C2%8E%C2%BAn%C3%A0%C2%83%C2%AA%C2%AAb%11%C2%B0p%C2%ADjN%C3%A6%06A%04%C3%81%C3%889%17%C3%B7%7D%3FM%C3%93ta%5E%C3%80%C3%B9%20%C2%8A%C2%A2%C2%BF%0B%C3%A1%5Cc%C3%9E%C3%80%C3%92%16%7B%C3%80%0D%5B%C2%AE%C2%B0%C3%B6%C2%A3%0Bt%3F%C2%A8%1D%5E%0EFq%C2%85%C3%AF%C2%80x(%C3%A2%C2%83%C3%BE%C3%8A%C2%B2%2CD0c%C3%9Eu%C3%9Dx%C2%80%C2%93%C3%A7H%C3%B6%C3%A0s%C2%ACsm%0F%C3%B9%0C%C3%BB9%04%08%C3%BB%C2%82%C3%BBY%C2%96%15VNY%C2%81%18%C3%93%1A%C3%AC%C3%AC%C2%94%C2%9D%C2%91%C3%986%5E%10%06%01%C3%A2%1B%C3%8BI%0B%04a%C3%9Cp%10%26%C3%AAd%10%14%5D%09%C3%98%C2%B4%C3%9C%C3%920G%2F%C2%93%20%12%01%C2%B1%7F%208%C3%A2%C3%8D~)dow%22%C2%90%C2%8D'q*%7B%C3%99%C2%80Kdo%C2%8A%7C%C3%A9G%C3%8Ew%C3%A2h%C3%BE%1F%C3%BDc%C3%8F%C3%A0%C3%94%10%3E%12%10gup%C2%AC%C2%BD%C3%A7%C3%BASp%00%00%00%00IEND%C2%AEB%60%C2%82";

//Volume

var volume_off_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%81IDATx%01%C2%A5T%C3%8Bq%C3%820%10%C2%95M%C3%A0%C3%84%C3%81%C3%A9%C2%80T%10%C3%92%01T%10rf%20v%05I%07%C2%98%0A%C2%92T%C3%A0%C2%84%C3%8Fpt%09%C3%90A%C3%9CA%C3%A8%20%3A%00%07%C3%BC%C3%8B%7B%1E%C2%99%18%C2%90a%18vF%C3%9E%C2%95%C2%B5z%C3%BB%C3%9Ez%C3%87B%C3%80%7C%C3%9F%C2%B7%C3%84%15fz%C2%9Eg%C2%ADV%C2%AB%C3%9F%C3%B1x%3C8%C2%95%C2%88%C2%BC%C3%A6d2%C3%B9%1E%C2%8DF%C3%B6%11%C2%88%C3%A38%12%C3%BE%0B%C3%8B%3D%04%C2%9A%C3%8Df%C2%8D%C3%A9t%C3%9A%C3%8C%C3%B7I%C2%92X%C2%86ax%00%C3%B3%C2%8A%C3%ACM%3Ez%C2%BD%C2%9E%C2%AD%03%C2%8A%C3%A3%C3%98%C3%87%C3%859c%14%0B%C3%BA%C3%BD%C3%BE%1D%C3%82a%C2%9A%C2%A6%C3%B6z%C2%BD~%C3%9B%03)%03%0A%C3%83%C3%90%C3%89%C3%8F%C3%B3%C3%8A%C3%88s%C3%A1%3E%08%C2%84%C2%BC%C3%8E%1E%08%C2%B4%C2%BE%C3%82-%C2%B1d%0E%C3%84%C3%AAQ%14%C2%B5y%C2%BE%C3%99l%3A%C2%94%C3%81%18%C3%AF%5C%C2%95%C3%B7%C3%82%C2%BD%C3%81%07.%C2%B4%C3%A0%C3%A6%C3%A2%C3%98%5CT%1E2%40olH%23H%1B%C3%AF%16%C2%B8%C3%B3N%C2%90z%C2%BD~k%C2%8A%C3%93%C2%B6%C2%93%C2%B6%C3%9Dn%03U%3D%C2%93%009Kz)%C2%A5u%0EDh%C2%A4%C3%89%C3%A2a%C2%ADV%C2%B3n%18%C2%98%C2%A6)A%C3%B5%1C%C2%90P%C3%92%02u%C3%A7%1ElD%C2%B7%C3%9B%0D2%26%0C%C3%A0%C2%9Ep%C3%A0p%C3%A5T%0B%C2%A6%C2%9B%C2%A3%16%C3%96%C2%82%C2%81%C2%A1%2B%C2%8B%C3%A9lT*%C2%959%06%C2%AB%C3%81%3D%18%18%00%C3%B8D%C3%B8%2CT%C2%B39%C3%81%C2%90%C2%92%11%C3%90%C2%82%14%C2%81%18%C2%AB!%13%C2%87%40ynic%C3%91%C3%88%25%26%C2%B6%C2%8D%C3%B5%C2%A0%00%C3%B8U%1E%C3%85%7F%C2%8Fv%C3%92J%C2%99%C3%A8%C2%98U%C2%AB%C3%95%01%C3%BA%C3%85%C3%BE%C3%98%3AF%17%1B%C2%A5a%C3%8A%7F%C3%84%C2%B5%C3%86%C3%9F%08%C3%BD%1Fh~%C3%98%C2%80%C2%B2%C3%87%15r%00%00%00%00IEND%C2%AEB%60%C2%82";

var volume_min_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01dIDATx%01%C3%8D%C2%93%5DN%C2%83%40%10%C3%87w%11%C3%9F%C3%94%C3%A0%0D%C3%B0%04%5E%01%C2%BC%C2%80%C3%B6%00%040%3E%C3%B8%C3%88%0DZNP%7D%C3%97T%03%09%C2%8F%C3%A8%09%C2%96%1B%C3%B4%08r%03%C2%89%C2%85%C3%B8%C3%80%C3%878%C2%83%2C%C3%81*M%C3%93%C3%B8%C3%90I%C2%96%C3%BD%0F%C3%8B%C3%BCvgg%60%C3%AC%1F%C2%8Co%C3%BBa%14EzUU%0B%C2%94%C2%BEeY%C3%89pM%C3%99%14%C3%A8%C2%81%C3%90n%3F%C2%85N%1A%01%3A%00%C2%90%16a%18%C3%8E%C2%B7%C2%82P%C3%B0%C2%AA%C2%80eY%C3%81%C2%92%7C%C3%9A%C2%BD%C2%AEk%13%C3%A53%C3%82%C2%BC!H%19%03%C2%945%08%06LGW%C2%93%C3%A9%C2%B8%C2%AE%C2%9B%22%C3%8C%C2%91%C2%A0%20%08%0CZSe%C3%A0%C3%B5%C2%87p%C2%A4F%C3%80%C2%B4%03%C3%B4%C2%86%C3%A98%18%04%08%C3%B1Q%7B%C2%AA%C2%AA%5E%C3%A2%C3%AB)%C2%8E%C2%A4%3D%C3%89%C3%8DJ%18%C2%9C%C3%83B%C2%8Eu%C3%80%C3%80f%C2%B4%3B%C2%9E(C%C3%BD%C2%8A%C3%83%C2%88%C3%A3X%C3%9Bx%C2%B1%23ftsJ%C2%8F%2C%C3%8Bv%C2%82%C3%BC%C2%B2%5D%20I7%C2%9F%C3%93%C2%83.%C2%BB%C2%85%3C%1C%C2%9B%09%03%3E%01%C3%A0.%0Dl%C3%81%C3%B4%C2%AF%C3%A8%C2%A6i%C3%9AF%C2%A3J%C2%B1%C3%AF%C2%B4Z%60_%C2%9D%C3%87%13%C3%B3Ej%C3%A7%5D%24%07%C2%87%7D%C2%89%5B%C3%83%C2%8A%C3%9Cu%17J%C2%9Az%C2%84J%C3%AF%C2%93%3F%C3%9A%C3%B6%08%C3%92%5B%10mptqF3U%C2%A2(%C2%8A9%C3%B6%C2%88C%C2%A7%C2%B2m%7BF%C3%AFG%C3%AF%C3%A4%C3%A9%C3%94L%C3%AB%C2%92%C2%9B%0A%C3%A3%13%C3%B2%C2%B1%C2%B4Wy%C2%9E%C2%BF%11%00%C3%9D%7B%09%C3%B8%C2%91%C3%8E%18h%C2%90N%C2%8A%0D%C2%96%10%60%C3%BD%07%C3%9C%1F%C3%BB%02%C2%9C%C3%90%C2%B6%C3%A3%C3%85(%C3%A1%C2%9A%00%00%00%00IEND%C2%AEB%60%C2%82";

var volume_normal_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01pIDATx%01%C3%8D%C2%93%C3%81m%C3%820%14%C2%86%C3%AD%C3%84%C2%BD3B%3AAW%C2%88%C2%BB%40%C3%8B%00(%C3%A4%C3%98%03%15%C2%9D%C2%A0d%02%C3%9Ar%C3%A8%C2%91V%20q%C2%A4%C2%9D%C3%80%C3%99%C2%80%11%C2%9A%11%22%15.%25%C2%B6%C3%BB%C2%BF%C2%80Q%1A%11%04R%0F%3C%C3%A9%25%C3%BFs%C3%AC%C3%8F~~%2F%C2%8C%C3%BD%C2%83%C3%B1c'%C3%8Ef%C2%B3%C2%A0(%C2%8A1d%C3%92%C3%A9t%C3%92%C3%AA7%C3%AF%C3%90%C3%82%C2%B1%C2%B2%C2%ADWe%03%C3%92%00%04%C3%96%C2%96ZM%C2%A7%C3%93%C3%A1Q%10Z%C3%BCm%C3%8Dbm%C3%B5%C2%82b%C3%9A%5Dk-!%C3%9F%01%C3%ABWA%C2%BC%09%C2%B0%C2%B6F1%C2%B69%C3%85%C3%BD%C2%B5%C3%A04v'yF%C3%B1d2y%C3%83%2B%C2%82K%C2%82%0B%C2%B7%C3%B0E%15%5D%C2%A7%01xt%00g%3F%C2%A6%C3%A8%C2%8E%C2%94%C2%B6%3D%C3%A9'H%C2%AD%2F%C2%84%C2%B8%C3%810%C3%A6%C2%B1%C2%B4Lg%C2%A4%C3%96!%C2%B3l%C2%BC%C3%B3%1A%C3%80%19%C3%92%18%C3%90%C3%9C8%C2%8Es%C2%84%C2%9F%C3%B0p%3E%C2%9F%C2%B7%0E%5E%C3%AC%3E3%C2%86%C2%85%5B%C2%99%C3%91%23%C3%8F%C3%B3%C3%93!%C3%BB%C3%ACd%C2%88%C3%A7%C2%B1t%2B%C2%AF%C3%A8%C2%81%C3%94%C2%B2%12%C3%92%C2%93%17)%C3%A7%C2%AC%C2%8DZ%C3%85%C2%A5%C2%B3M%15%C3%AA%C2%86%3BIh.5%1E%C3%82%10%5E%02w%C3%95%C3%A9I%C3%B1%C3%A1%C3%B4P%C3%99%C3%94%C2%AF%C2%94%C2%98%C3%8Cx%C3%A2%C3%A9Ar%C2%BAPj%3C%C3%AA%C2%91%16%3C%C2%A1%C2%B8%C2%B1%C3%AD%01%0A6%20%C3%AA%13%C3%BF%C2%92%C3%9ET%C2%89%C3%95j5%C3%84%C2%89%C2%BA%C3%86%C2%98%24%C2%8A%C2%A2A%C2%99b%13%04%C2%BBf%C2%9A%7B%C3%92%C3%A7%C2%BAM1%1A%C3%ACv%C2%B9%5C~%11%00%C3%A1%C2%B3%03%C3%BCI%C2%A7%09%C3%A44R%C3%88%C3%90%60)%01%C3%AA%3F%C3%A0%C3%B9%C3%98%2FN%10%C2%B5%00~%2B%C3%BBG%00%00%00%00IEND%C2%AEB%60%C2%82";

var volume_high_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01tIDATx%01%C3%8D%C2%93KN%C3%830%10%C2%86%C3%87q%C3%83%C2%82U%C2%8E%C2%90.%C2%8Bx%C2%88%1B%C2%94%13%007%08%07H%1F'h%7B%C2%82%00EbYq%038A%7C%C2%83.%C2%90%C2%9Ae%7B%C2%84J%15%C2%A8%22%C3%B6%0Cc%C2%97%04%C2%A8%C2%9A%0AX%C2%A0%C2%8E%14ylg%C2%BE%C3%BC%C3%B3%C3%9B%01%C3%B8%C3%8F%C2%A0%C3%AC%3E%C3%94%C2%93a%C2%9Ag%C3%83%C3%A6%C3%BA%C2%9E%C2%B7%C2%B5p%3A%0Al%C2%B1%C3%8D%C2%B5%C3%96%C2%A1%00%0A%05Rj%26w%C3%89%C2%8F%20%C2%B6%18_%17c%C2%83%C3%B9%C3%98%C3%8E%C3%BD%C2%A3Xy%C3%82%C2%9C!%C3%91%03%11v%C2%BE%C2%82%C2%BCJ%00%C3%A6)%01%C2%84%3C%0D%C2%8A5%C3%91%C3%A8%C3%8E%C3%B6%0E%C3%9B%11%C2%92p%C2%A0%C3%BCy%C3%95Z%C2%AD(%C3%94%C3%99mT%C3%A4%0C%C3%A8%7D%00%C3%8A%C3%90%C3%B8%16%C2%99lH%C2%B2%11%0F%C3%BC%5Cw%C2%8C%2F%C3%8F%C2%85%C2%84%1Eo)%C2%A7%C3%84%C2%99%C2%850*%C2%9Eu%40%C2%A9%10%C2%A9o%C2%BF.N%C2%BBs%04z%02%C2%A2%26M%C2%93%60%C2%AB%C2%B1%1B%C3%83%C3%83%C2%A6%1D%C2%84%C2%80%C2%99%C2%9B%2F%C3%A1%0F%C2%90M%5C%C3%B8m%C2%A0%C2%A7%C2%9C%12%C3%B0N%C3%9C%C3%88f%3B%C2%88%C3%9F%C2%88%15%18q%C3%89%C3%A9%C2%95%7DJ%C2%A9k%C3%81%C2%9E%0C%C3%ACQ%C2%BB%C2%BB%C3%83~pO%0EX%C2%9EN%C3%AD8~%2C_%C3%8E%12%C2%85%20S%C2%A2O%C2%83k%C3%BBx-%C3%AA%C3%9D%C2%B9%C3%8D%0D%C3%AA%C2%84%C2%A5%04d%60%C2%B0RU%11%0C%0A%C2%91djsy%C3%90%C2%AA%C2%BB5%C2%BE%C3%81f%C2%B9H%C3%B8%04%C2%A3%C2%95%C2%AAv%C3%9F%C2%AEWz%C3%A2z%C3%A5%1BjH%C3%9A6%C2%81%C3%BF%C2%9B%0B%C3%B3%C2%B2%C2%98%3A%00%C3%91M%01%C3%B8%C3%96N%15%C2%A8%C3%88%C2%91%3C%C2%86%C2%A2%22%04%06%C2%B4%14%C3%ACd%C2%BC%03%C3%88%C2%92%C3%83%C2%98%C2%8E%C2%B6%C2%B4%C3%B4%00%00%00%00IEND%C2%AEB%60%C2%82";

var volume_on_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%AAIDATx%01%C2%BD%C2%93%C3%9F%11%C2%820%0C%C3%86S%C3%BE%C2%BC3%02%1B%C3%A8%08%C2%B8%C2%81n%C3%A0%26%C3%82%04%C2%BA%C2%81n%C3%A0%082%C2%82%1B%C3%88%06%C2%BEC%C2%B9%C2%98%C2%94%C2%90%2B'%C2%9E%C3%80%03%C3%9F%5D%C2%AF%C2%A5%C3%A9%C3%B7k%C3%92%16%C2%805%C2%85%C2%88)Z%C3%BB%C3%80%C2%A6%C3%89%C3%A6%C3%B8%C3%98%C2%98%C2%B0%C3%99%C2%8D%C3%89%C2%8Cm%C3%BB%22%10R%7F%C2%9E%0AH%C3%85%C3%B4%1E%C3%8C%C3%95%C3%B5m%12%C3%88%03%20%C2%B7~N%C3%A3%3DHJ3%1A%C2%B0%C3%B6%C2%A8%14cN%C3%A0%C2%99L%14%192%C3%A4%10%04h%C3%82%C2%B0%C3%A02%C2%816%C2%A1%C3%90%C2%93b%3B%C3%90ze%C3%97%C2%B1%26kr%7Fw%C3%8D%C2%86%C2%80%01%C3%8CW%26%C3%99V%C3%B2%C2%BD%08%C3%B2%C2%A5%25%C2%90%12%C2%BAL6%5Dg%C2%AA%C3%88%0D%C3%A2%C2%B8%C2%A4%C3%BA%0E%C2%9C%C2%9A%2C%18%1C%C2%AC%0A%C2%B1pk9%C3%96%C2%B6%C2%99%02%C3%87%C3%B4%C3%A3%C2%8A%13%C2%8D%5B%7B%C3%B7%0F%C3%B9%3F%C2%A8%C2%BB%C3%8A~.!%C3%B3U%009L%C2%91%C2%BC%C3%90%C2%AD%C3%AC%C2%BE%C3%A7%C3%97%2B%C2%80%0B%2C%11%C3%83%5C%19s%7F%C3%80U%C3%B5%01%1DW%02k%3D%C2%BA%C2%9Ao%00%00%00%00IEND%C2%AEB%60%C2%82";

//Solo icons

var shapes_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%11%08%06%00%00%00%C3%90Z%C3%BC%C3%B9%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%012IDATx%01%C2%AD%C2%93%C3%8BM%C3%840%10%C2%86m'%C3%8A9t%C3%A0t%10*%00*%60%C2%A9%00%3A%609%C3%A6%C2%90%C2%87%14E9%02%1D%C2%B0%15%40%07%C3%90%01%C2%A1%03%C2%97%C2%B0%C3%97%1C%C2%92%C3%B0O%C3%A4%C2%ACV%2B%3FvW%3B%C2%923~%C3%BC%C3%BEf%C3%ACq%18%C2%BB%C2%90%C3%B1%C3%BDAUU%C2%B1%10b5M%C2%93%C2%A41%C3%BA%5D%C2%9E%C3%A7_'%C2%81%00I9%C3%A7%C2%9F%C3%A8%C3%8A%03%C2%8D%02%C3%B8%0E%C3%AB%C3%8A%0B%C2%82H%02%C3%B2%C2%8Bnl%C3%91%11%C3%AC%1A%C2%BA%C2%AD%0D%24%C3%A6%C2%8F%10%C2%A5%03BF%C2%81%C3%96%C2%8Eu%16%C3%92%07%C3%91V%C3%8Cc%00%C3%9D%C2%90%C2%AF%C3%ABz%C3%96%0E%C3%83%C3%90%C3%AD%1F7%C3%94%3E%C3%B6%C2%81%C2%96%02%C3%80%3F%C2%A3%C3%9D%02%C2%AC0L%C2%96u%C2%A1%C2%BD%C3%B2%C2%81%C3%B4F%02-Ae%C3%9B%C2%B6%C3%B2%10%C2%B4a~%C3%9BPQ%C3%A0S%C3%93%C2%A2%C3%90Q%C3%9E%3CYuEQ%7C%04A%C3%B0h%13%C3%8C%20*%2B%C2%BD%15Sf%C2%98%7F%C3%97%C3%AF(%1D%C3%87%C2%B1r%C2%824L%C2%95e%C3%B9%C2%84M%09mD%7B%40%C2%BB%C3%82%C3%BC%C2%9A2%C3%81%1D%7D3%C2%87q%C3%93d%C3%934%14%5D%C3%AAJ%C3%9DS%C2%95L%C2%BA(%C2%8A%C2%92%2C%C3%8B%14%C3%B5C%C2%93%00o%C3%A4%C3%95%C2%B6%C3%99f%C3%822%C2%BFeGX%C3%9F%C3%B7%3B%C2%9D1%23%1C%C3%AB%05w%C3%B2%C3%A7%60P%11~%5C%C3%BF%C3%9E%C3%99%C3%B6%0F%23%16%C2%8Dx%01%2B%C2%8E%C3%A8%00%00%00%00IEND%C2%AEB%60%C2%82";

var shapes_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%09IDATx%01%C3%8D%C2%92%C3%91%0D%C3%82%20%10%C2%86%C2%8F%C3%86D%1F%1D%C2%A1%C2%9D%40%C3%9D%407%C3%B1%C3%91%C2%A8%C2%89u%C2%83v%02%C3%B5%C3%85%C3%B8%C2%A6N%C2%A0n%C3%90%11%C3%9C%00%C3%9D%C2%A0%C3%8F%26%05%7F%2C5%C3%98%C2%B4%3D%1F%C3%BB'p%C3%80%C3%81ww%00Q%C3%9B%24%C3%9C%C3%89%C3%BC%C2%A9WZQ%C2%88%C2%A1o%C2%9Dw%C2%98%C3%9D%3E%10%C2%A7%C2%BFAs%C2%A9%C2%8F%C2%9AhZ%C2%B3)%02%2CfA3%C2%A9%C2%A7%18%1C%C2%9B6%22%C3%88%C3%A4%10%C2%88%C2%A4%C3%8E%C3%AF%C3%99nE%C2%BC%C3%82%26g%C3%87F%1B%12%23d%3C0%16Wp%C2%A1%C3%BC%0E%C2%AFn%C2%B9%C2%9E%C2%B5)%C3%B1Jm%C3%90%C2%BE%09%C2%8C%16%C2%85R%C3%B7%C3%8B%C2%A0%3BG%11%C3%9Ew%C2%8F%C2%9B%C3%BD%2F%08%C3%B4%C2%98%C3%A1%C2%A4JQ%C2%BC%C2%94z%C3%AC%1Ev%C3%B5%01%C2%99%C3%97h%C2%80%C2%A5%C3%B0%C2%AD%7B%C2%B0Y%C3%83%C3%8B%16%C2%A5%19X%C2%84%03%01%C3%92%3Bc%C2%9A%C2%98%26%14%C3%AD%C2%B06%02%C3%A4%C3%BA%22%C3%9A%C2%90%C3%BD%C2%A8U%12%C3%84%C3%88%C2%94c3%C3%B1%C3%8B%C2%BE.%02o%03%C3%B10%C3%A3N%C3%95%C3%A1%C2%85%C3%94%1Bd2F%C3%B3%C2%B3%C2%9A%3B)%C2%AB%12%C2%A4%C3%B2%C2%97a%C3%BF%C2%96%2B%C2%AFf%C3%BDF%C2%BC%C2%92%C2%A2%C2%ACv%C3%AA%0D%C2%95%3FO%C3%B1%C2%AC)%C3%99O%00%00%00%00IEND%C2%AEB%60%C2%82";

var text_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%12%08%06%00%00%00V%C3%8E%C2%8EW%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%92IDATx%01%C3%9DS%C2%BB%0D%C2%830%14%C2%B4%11%12%C2%ADG%08%1B%C2%91%09%C2%A2L%C2%90%C2%A4%C2%A42%C2%88%C2%822%2Bx%04F%20%1Bd%C2%83x%04Z%C2%BB%C2%B0s%2F%22R%3EFq%C3%A1%02%C3%A5%24s%C3%A8%1E%1C%C2%BE%C2%B3%60lm%C3%A0t%C3%A9%C2%BA%C2%AE%C3%B2%C3%9E%C2%8B%C2%98%17%C2%9CsC%C3%934%C3%93%C2%A7%C2%9E%C3%8F%C3%833h%13cT%14%C3%85%08%C3%BA2%C3%8AX%22%3Cv%C2%84X%C3%BB7%C3%B7%2C%3B%40%C2%AB%C3%A8%C3%8B%C3%A0%C3%AD%C3%AB%C2%AC%C2%AEk%1D2%C3%A2!%C2%B1m%5B%05%C3%9Aai)e%C2%89N%04%22-vH%C3%A69%C2%8B%00%C3%A7%C3%BCh%C2%AD%C2%95K%C3%B3%C2%BE%C3%AF%C3%8B%C2%B4%1D%C3%BD%02z%1A%40%C2%9A%C3%AE%C2%B1%3B%3Aa%C2%8Ay%C2%81%C2%AEH3%C3%86LQF%C3%A8%C3%A8%0A%C2%A2E%C3%BDQD%01%C3%83%1B%C3%BAS%C3%8Fg%C2%92E%C3%BBc%C2%A3%60%C3%99%C3%B3i%C2%8C%2C%C3%B0Oav%02%09%C2%B0f%C2%AB%C3%86%1D3%C2%B1O%15%C3%A90%C3%94%C2%B8%00%00%00%00IEND%C2%AEB%60%C2%82";

var text_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%12%00%00%00%11%08%06%00%00%00%C3%90Z%C3%BC%C3%B9%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%88IDATx%01%C3%9D%C2%92Q%0E%011%10%C2%86%C3%BF%C3%99H%3CI%1C%C2%A1n%C3%A0%0AN%C3%80%0Dp%04Y%09%1E%C2%BD%C3%A0%C2%85%C3%AC%11%1C%C3%81%0D8%C2%82%1B%C3%A8%11%C3%AA%C2%8D%07%C3%86t5%C2%8BMW%C2%9A%C3%B0%C2%B0%C3%99%3F%C3%AD%C2%B4%C2%9Di%C2%BFi%C2%A6%05%C3%8A%26%C2%B2%C2%86W%C3%A3%C2%BDX%15t%C2%82o%1D%C2%9A%25%3A%C3%AF%C2%AE%C2%B9%C2%A8%12%C2%A3%C3%B0%C2%83%1C(%3A%0AL%C2%BF%C2%A5U%2F0%1D%3EN%5C%C2%9B%C3%86%07%22%C2%9F%C2%93%C2%97%C3%B1V%22%7D%C2%99j%C2%9A%C2%AE%5B%08%C2%BF%C3%91w%C3%B1%22%C3%AE!B%C2%B7p%C3%83%C2%A51%0A%02%C2%81%C2%A8-%C2%B8Aa%C2%BCn%C3%A6a%C2%A0%C3%A8n%C3%80%C2%A4%C3%9DJ%3D%C3%A1%10%1F%C2%B2z%05%C2%81h%C2%B2Id%C2%B0%5D%C2%BEJ%7CJa%C2%8C%C2%9D%C3%94o%C2%98%C3%A5%C3%82%C2%9FTa%C2%90%C2%BF%C3%98%C2%94%C2%BE%C2%86v%3D%1F%14%1F%C3%9BvF%C2%A9%C3%B5%00%C2%BC%7B1%C2%AE%C2%9C%C3%BA%0F%C2%BA%00%00%00%00IEND%C2%AEB%60%C2%82";

var null_objects_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%1FIDATx%01%C3%9DS%C3%81%C2%91%C2%830%0C%C2%94%C3%A1%0AH%09)!%1D%60*%C2%B8%C3%AB%20)%C3%A3%5E%60C%23I%25q%09%C2%94%C3%A0%12%C2%B8%02%C3%80%C2%B7%3Bc%C3%8F%18%C2%87%C2%BB%17%C2%AFhF%C2%A0Y-%C2%8B%2C%C3%89%22%07%C2%98J%C3%818%C2%8E%3A%C3%85%C3%8B%C2%B2xc%C2%8C%2F%C3%89%C3%80%C3%8Eu%5D%C2%9F3%C3%9E%04l%C2%AERr%5D%C3%97gr%C2%A5%C3%94m%C3%B7%C2%8F%C3%80s%1E%C2%A0%0B%C3%B1%C2%8F%C2%9C%C3%94%C3%B7%C2%BD%1A%C2%86%C3%A1%19B%C3%A8%C2%AD%C2%B5%C3%BD%1FB%C2%AE%C3%AB%C2%BA%16%C3%B9%C2%90%C2%B0%C2%8DH%14%C2%A0%C3%BA%03%C3%AF%C3%BB%5E%25%C3%80%3F%23OJ%C2%91%19nY%01%C2%88w%C2%94%C3%BA%C3%80%11%C2%9D%C2%BC%C3%B6D%C2%AA%C2%AA%02-%C3%9C%C3%88%C2%87%C3%BB%C2%92%23%2C%11D-%C3%BF%18%07%C2%90%1F%C2%85V%C3%89%01%C3%B6f%225%1Fh%C3%A6%C2%A9m%C3%9Bo%C2%84%1A%C3%9D%C2%97%C2%A6i~%C2%9Cs%C2%BE%24%C2%B3%C3%A9%C2%98%C3%9E%15%C3%A1%05%7C%C2%A5%C2%B5%C3%B6%C3%A0%C3%8Di%C3%84'8%C3%87%C3%AB0%C2%BE%2F%0Aa%0A%2F%7FD%C3%AE%C3%8A%7C%C3%A4q%19%1D%C3%9Co%C2%8E%C3%83M%04a%C3%A2%1E%C3%A4%C3%AB%C2%9D%C2%9C8%C3%B3%C3%A4%C3%A5%C3%9Fm6%C2%96%C3%B3%C2%8F%C2%9Bhq%05LY%09%C3%B2%26%5E%C2%89%C2%B0'2%23%C2%99%C2%AB%7B%C3%99%C2%B1x%15%5C%06Mr%C2%94%C3%BD%025%C3%93%C3%80Yy%3FjR%00%00%00%00IEND%C2%AEB%60%C2%82";

var null_object_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%1AIDATx%01%C3%9DS1%C2%B2%C2%820%10%C3%9D(%C2%85%C2%A5G%C2%A0t%06%0A%C2%8E%C3%B09%C3%81%C3%B7%06r%13%C3%B0%26x%12s%04%0A%C3%AC9%C2%82%C2%85%C2%85%053%C3%AB%C3%9B52%C3%84%C3%84%C2%B1%C2%A1rg%12vv%1F%2F%2F%C3%89%0B%C3%91%02a%5E%09%C3%A7%C3%B9%C3%9FTM%C2%92%C3%81t%C3%9D%C3%B0%0E%C3%A6%C2%A2Hi%1C%C3%93%19%C2%AE%03%C3%AE%C2%BA%C3%92%C3%A6n%C2%97%12%C3%B3y%1A%C3%A3X%C3%85V%C3%94%C2%BA%C2%8F%2B%C2%94%C3%8B%C2%93u%C2%B9%18(%12%40%C3%8DYV%07%24%C3%8C2%5B%C3%A0J%C3%B4y%12%C3%A4a%C2%B2%C3%AC%C2%8C%C2%8F%C2%B0%C2%9F%C3%88%C2%986BRa%C3%BEw8%C3%B2I6%C2%9B%2B%C2%A4%1DE%01F%0B%C2%82%C2%93%C3%A9%7B%1Bp%C3%A4%C2%B9%10%C2%89%C2%82%0A%C2%98%23%C3%BE%19%C3%82%C2%85%20%C3%91%3B%C3%A0HH%7F%C2%BE%15%C2%89%15-%10%C2%BFH%02'nq%60%C2%8DV%C2%98%0F%C2%9F%0EW%C3%AB%C3%A8%C2%BB%C2%BCQ%C2%93%C3%92%C3%AB%C2%8A%C3%AF%C3%B7-%C2%AD%C3%975%C2%AE%C3%8D%02%C2%B4%17S%C3%A9u%06%2C%200f%C2%8F%C3%8C%C2%AA%1D%C2%92%C3%84%22%1F%7C%C3%87%C3%B6%7D%C3%A9%1C%5B9c%C3%85%C2%88%C2%BE%3A%C2%96%C3%95%C3%9A0%12%08%1B%0A%C2%B7%C3%93%C2%B8'%C3%A1%C3%B9d%C3%AE%C3%98r%C2%AA%C3%86%C2%9C%C3%B8%C2%AC%C2%B7n%0B%C3%8F%C2%B8%C3%9D%3AZ*%1E%C3%8A%C2%93%C2%A08%C2%B1%C3%A4%C2%8E'%00%00%00%00IEND%C2%AEB%60%C2%82";

var trackmatte_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%09IDATx%01%C3%8D%C2%92%C3%9F%0D%C2%820%10%C3%86%C2%AF%C3%84%C3%B0%C3%8C%088%C2%81%C2%BA%01N%C2%A0N%20n%C2%80%0BP%C3%9E%18C6%10'%C3%90%0D%C3%84%0D%18%C2%81WB%02~%C2%A75%C2%A9%14%C2%A5%C2%8F%5Cr%C3%A9%C2%BF%C2%AF%C2%BF%C2%BB%5E%C2%8Fh*%26%C2%866%C2%93%24%C3%B1%1C%C3%87%091%5D%C3%80%7Dx%05%C2%BF%C3%84q%C2%9CYA%00X%0A!%C3%8E%C3%AA%C3%B2%5B%24%C3%84%C2%AD%C3%AB%C2%BA%C3%97%1A%C3%A3%1A%C2%9A%C3%B2'%04%C2%87%3E.%C3%9C1%C3%B5%C3%B4%7D%C3%97u%C3%A7u%5D3%2C%C3%82r%0F%C3%90J%079%C2%BA%18O8%C3%B5%01Z%C2%80RJ%19qVJG%06%C2%84%C2%B3%40%C2%84%C2%80F%C2%ACm%C3%9B%23%C3%AB%C3%924%C3%B5%0D%08%C3%A8%5B%C2%B20%C3%B5%C2%8C%C2%A2i%C2%9A%C3%80%C2%80%C2%80%C3%AE%C2%91%C2%A5%C3%A1I%C3%95%C2%A7%C3%90%7DHI%C2%96%C3%86%01%19d%408E%1B%00%C3%97%0E%C3%83%12%C2%B5%C3%89%0D%08%0E%0B%C2%AE%C3%BC%18%04%C2%B5%C2%93%C2%AC%C3%93%C2%BFx%C2%A6%0B%40%3F%0C%C3%B5%C2%89%0A%C3%82%5D%2C%C3%B9g%C2%B8%C3%A1%C3%B4%C2%B3%C2%A1%C2%8E%C3%A5%C2%86%C2%BB%C3%92w%C3%87%C3%A6%C3%AA%C3%BB%C2%B9%C2%A0%3B%C3%8E%C3%BA%2FD%C2%83%C2%85%C2%88%C2%BCQY%C2%95%C3%B0%072%C3%8D%C2%B0_%C3%91d%C3%AD%09%C3%A5nx%3F%C2%8C%C2%B3%C3%85T%00%00%00%00IEND%C2%AEB%60%C2%82";

var trackmatte_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%B6IDATx%01%C3%8D%C2%92%C3%81%0D%C3%820%0CE%1D%26%C3%88%08%C3%9E%C2%80%C2%8E%C3%80%060B7%C2%82%0D%C3%A8%06%15%13d%05%C2%98%C2%A0%C3%99%C2%80n%60~%C2%84%0FiH%C2%83%C3%A1%C3%94%2F%3DYr%C3%93%C3%97%C3%8A%0E%C3%91V%C3%A2jM%11%C3%B1(%3D%C3%98%03%063%C2%B89%C3%A7%06%C2%B2%04%C2%82%0EL%C2%B2L%C3%90%5E%C2%82%C2%BF%09%18%3C%C3%A53%C2%AC%5C%C3%B49%C2%B7%24A%C3%AA%C3%A1%C3%AC%C3%8C%C2%98%C3%8E%C2%B5%C3%BEB%0C%12.%7B%C2%BB%C3%8Cs%22C0%C3%9C%C2%88r%07%C2%87%C2%9A%C3%84%C2%93%3Di%5B%5C%C2%93D%C2%B2%C3%87%C2%ABh%19%5D%C3%AD_3)E%C3%81%20%C2%B9%C2%AEn'%C3%BB%C3%8A%C3%9A%3D%C3%B1%C3%A0%2C%3F%5C%C2%B8%C2%A9%C2%90%C2%8C*O%C3%BD%C2%AE%7C%C3%875d%3D%C3%8A%C2%91%C3%9EC%C2%8C%C3%A0%01%06%C2%ACx%C2%A6%C3%8D%C3%A6%05%7C%C2%959%C3%B2%C2%BA%C2%AB'%1C%00%00%00%00IEND%C2%AEB%60%C2%82";

var Adjust_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%015IDATx%01%C3%8D%C2%93%C3%A1q%C3%820%0C%C2%85%C3%AD%5C%07%60%C2%83%C2%A6%13%C2%B4%23x%03%C3%98%C2%80f%C2%830A%C3%9C%C3%8B%00%C2%B0A%C3%9B%09J'%20%23%C2%94%09H7%C2%80%01%C2%92%C3%B4Sc8%C3%85%09%C3%BC%C3%86w%C3%AF%C3%ACHO%C3%8F%C2%92%C2%AC%18s%2F%C3%8BN%19%C2%BD%C3%B7%C2%B3%24I%5E9%3E%C2%83%14%1C%C3%81w%C3%9B%C2%B6%15%C2%BE%3A%C3%A6'%13%02%0Bk%C3%AD%C2%A1%C3%AB%C2%BA%C2%82%C3%8F%19%C2%BB%13%C2%BB%7Cc%C3%9F%C2%89%C3%BF%C2%A6H%10%C3%B8%22%C3%A0%13%3Cq%C3%B3*%08%C2%BC%04J*%C3%BEX%C3%88*%01!%C3%ACD%C2%80%C2%B3W%C2%B6%03%C2%A5%C3%A5M%C3%93%C2%9C%C3%BE%03%C2%ACuls%C2%B9%04%C2%BF%C2%94i%1E%C2%94%C2%A0%0B%C2%81%3EN%C2%97%C2%8C6%04%0FK%C3%A8%7B%C2%B6%19%C2%88%60%C2%9C%C2%B3Ufz%C2%BDqs%C2%AD%C2%B8K%C3%937%C3%9D%C3%84%C2%99H%13%C3%B7WD%0A%C2%9D%09%3C)%C2%AB%1A%C2%89%C3%A0%C3%B8%C3%85%C3%B18%C2%A5%C2%80%5D%1A%7CT%C2%A6%25%C3%BC%C3%93%253E%C3%BC%C3%81%C2%B1%C2%90%19%C2%89E%C2%B0%C2%AF%C3%81%C2%BB%C2%82%C2%83%C2%BF%1D%C2%89%C3%90%C2%BC%0F%C3%93%C3%97%5B%C3%84%22%C3%B2%3A%04e%01%C3%92%C3%8CZ%06o%24%22%C3%8F%C3%85%0D%19%C3%88%C3%8B%C2%B2%1C%08%11%C2%90%C2%ABl%C3%A4%C2%BC%C3%92%C2%93%3B%1A%C3%BB0pk%5D%C2%A2%C2%A4%C2%AE%267%C2%83%C2%B3%C3%951%C3%97%C3%BE%C2%9D%C2%94%C3%8D%C2%85g%C2%97%1E%C3%95%60%2F%25%C2%9F%07%C3%AC%3E%C3%97%1F~%C3%9F%C2%BBU%C3%80%C3%99y%C2%AE%00%00%00%00IEND%C2%AEB%60%C2%82";

var Adjust_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%C2%84IDATx%01%C3%8D%C2%92%C3%81m%C3%82%40%10E%C3%A7%C2%AF%03%C2%96%C2%95%0B%1D%04N%C2%88%13)%01%0E%11G%C2%A0%C2%82%C2%84%0EB%05%40%05P%02T%009E%C2%91%22A%09%C3%A1%14q%C2%82t%00%12%C2%91%C3%A5%60v2kb%C3%A3%C3%98%16gF%C3%B2a%C2%BFw%C3%9F%C3%BC%C3%BD%3BD%C3%97R%C3%88%12%C3%A7k.%C3%B8%C2%9E%C3%BB%C3%84%40%C2%95%C2%98%C2%8A%20l%C2%99%C3%B9%25G%C2%B4%C2%A8W%C2%9CMr%C2%BFJ%0Ao%2B%C2%AF%C3%A5%C3%BF%C2%B8k%C3%81%C3%B7%40%5C%10%C2%A9%16%C2%B4%C2%92%C3%B5%0147%C3%BF%2FB%C3%8C%06%C2%B0%C2%9E2%C3%93d%C2%9FwJ%C2%BEF%C3%97%C3%A8%C3%A2%C3%A2%C3%BEoK%C3%91%C3%BCO%C2%82%C2%A2%C3%AB%C3%8C%3F%C3%9D%C2%A2%C3%A9%C3%84%C2%AC'%C2%8D%C3%8Am%C3%9Fh%C2%AF%C2%A2Y%C2%A0%C2%B5Rx%C3%96G%C3%9E%05%40%C3%925(%C2%AB%C2%99%C3%8B%C3%9B%C2%A5z%09%5B%C2%A3%C3%9D%C2%84%C2%90%C2%83%C2%B1-%15%02%C3%A2%C2%A55%C2%8F%C3%82v0%C3%A6%C3%85%C2%AA'%C2%99%C3%89r%C3%B4%0F%02%C2%A0)A.(%C2%A3%C3%A4%C3%8C%40%18%C2%9B%C2%98%C3%BFG%05%C2%AB%1A.%23%08K%C2%88%C2%ACy%C2%99%05%C2%81%C2%84%C2%9A%26%C3%ABE%1A%C3%82%C3%B4%05%C2%A5%C3%AE2!%C3%84%5D%C3%A6%C3%93%C3%BDC'%C3%92p%C2%97%C2%82(%C3%B0%C2%87%C2%B8%C3%A9%C3%89%C2%8Ct%C3%83%C3%80%C3%8E.1LN%C2%94%5C%C2%BF%13%C2%9D%C2%8Dh%C2%B67%C2%96%08%C3%89%3F%C2%B8)%C3%AB%C3%A6u%C2%84%C3%941%1F%14L%C2%98%C2%9B%C2%A3%0C%C3%9E%C3%99X%C2%AC%C3%9EW%C3%9F-%C3%8Dj*%19%C3%B4%1F%C3%8A%C3%8E%20%7Cbs%08%C2%90%C3%8C%18%C2%85%C3%80%19T%C2%BBQ%C2%B6g%C2%99%C2%90%18hx%C2%B2%2CWd%C2%B4d%C3%ACg%04%5D3%C2%9A%26%C2%AB%13%07dBL%05%0Edn%C2%A0%C2%B8%19t%C2%878a%5E%C3%AEmg%C3%9CN%C3%A4u%5D%C3%B5%0B%C3%BE%04%C2%AF%C3%80%7D%C3%A6%C2%90%C3%BB%00%00%00%00IEND%C2%AEB%60%C2%82";

var solo_anim_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%B0IDATx%01%C3%9D%C2%92%C3%AD%0D%C2%820%10%C2%86%C3%9B%C3%86%01%1C%017%60%04%C3%98%C3%80%0D%C2%84%09%C2%8C%0B%20%C2%85%01t%03%1D%C2%81%0D%C3%AC%08l%20%230%01%C3%B8%C2%9E%C2%96Z%C3%A0H%C3%B8%C3%8D%25M%C3%AF%C2%A3yz_BlJ%C3%A4%C2%9AGeY%1E%C3%BB%C2%BE%C3%9Fs%C2%B1%C2%AE%C3%AB%C2%AA%C2%9D%C3%AF%C3%88%C3%B3%3CPJ%C3%9D%10H%C2%A1%C2%B7%C3%9E%C3%83%10%C3%97%C2%95a48%C2%95%C3%B4%01R%C3%8A%17%C3%94%00%C2%A7%C3%86%C3%8F%C2%B1%0F%C3%92Z%C2%BFm%C3%AC_%C2%86%C2%94i%C2%96eO%C3%85%00HB%C2%B2%C3%A1w%25%00%C2%9AN%C2%B3%20%00)%C2%8A%01%08%0E%C2%84%C3%9B%C3%806%1E4%1Et%C2%B4%40%3D%18%C2%80%03Q%C2%8F%06%03%C2%BD%C3%91%C2%B6%0C%03h%C3%A3%20%C3%94D%C3%B1k%10'5%C3%A2%17%C3%AF%C3%87%C2%93%C3%8D%22%02%24r~%22%C3%9A%C3%94%C2%A6%C2%A0Qsq'%C2%B0%13%0F%C3%A8%C2%A654v%0A%C2%9AM%07%25%C2%8CFL%C3%99%14E%C3%B1%C2%85%C2%8E%C2%96miO%C2%B0lg%C3%B8%C3%AEb.-%60%C2%87U%1Bk%C3%AB%0F%16%C3%82FlK%3E%C3%96K%C2%8A%0EH%7B%10A%00%00%00%00IEND%C2%AEB%60%C2%82";

var solo_anim_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%0AIDATx%01%C3%9D%C2%92%C2%B1%C2%91%C3%820%10E%C2%BF%C3%A4%C2%9B%C2%BB%0B%C2%8F%C2%99%23_%3A%C2%A0%04%C3%93%01%C2%84%C2%8E%C3%80%150T%C3%80P%01t%00%C2%99%C2%81%04%3A%C3%80%25%C3%90%01%C3%8A%C2%81%C2%81%C2%94%C3%80%16kc%C2%84%C2%B0%C3%8C%0C1%1BH%C2%BBZ%C3%8D%C3%93%C3%AA%C3%AF%02%1Fe%C3%A2%C2%9DK%C2%8B%03%C2%B5S%C3%A0%C2%AF*%C3%B7%C3%ABa%C3%BDe%1FD'%22%C2%99%60%C3%BC%C3%AD!%C3%AC%C3%94%C3%94%C3%B9~%C2%9Ej4%C2%85%C3%80%C2%B0%C2%A2%04%C3%85%C3%ABZ%C3%98%00%C2%91b%03%0D%C3%A2%C3%A4%C3%B6G%C2%A2e%C2%83%C3%A6G%C3%9A%C3%A59%C3%8B4%10%06%C3%BFj%26%1D%C3%80-%C3%9B%C2%BCp%C2%BC%3A%C2%91%C3%B9%C2%82N%11%C2%96%C2%AB%C3%88%00%C2%99%2B%1D%C3%80%C3%A3%C2%99'PPW1o%C2%B1Is%C2%A5w_%C2%8A%04S%07%60%C2%83X%23%13j%C2%8C%0A7%0EjJ%19%C2%88f%11%0B%C2%81%5C%C3%8B%C2%B4%C3%B100%C2%A1%40%C2%B7p%C3%BDhO%C2%BE%C2%81d%C3%84%C2%BC%C2%B42%C2%A8%24nt%C2%A0%1Eo%3D%0Bh%C2%BA%C2%95%0B%C3%AB%C2%80*%C2%BAS%C3%91b%C2%BF%00%3F%0F%C3%9B%C2%AB9Y%1E%C2%A9%C3%8F%C2%B32%C2%81kg%C3%BEn%C3%A3%C2%AD%C2%89e%C2%B8%C2%8F%C3%A4%C2%85%C3%B8%C3%9E%C2%A3c%1FbW%C2%BC(q%C3%86H%7D%23%C2%9B%00%00%00%00IEND%C2%AEB%60%C2%82";

var solo_mask_select_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%10%08%06%00%00%00%1F%C3%B3%C3%BFa%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01yIDATx%01%C2%95RMN%C3%82P%10%C2%9E%16KH%C3%98p%04%1A%2F%007%C2%80%1B%C3%98%13%C2%98.Q%09t%C2%A7B%C3%82%23%01%C3%A3%0E%C2%88%20K%C2%BC%C2%81x%02%C3%B0%04p%C2%83Wn%C3%80%C3%8A%05%7F%C3%8Fo%00%C3%89%C2%B3%C3%90*%C2%93L%C3%9A7%C3%9F7%C3%BFC%14!%C3%9D%C2%8Al%C3%B5%1Ee-%C2%8Ac%C2%9C2%C3%B6%C2%85L%C2%AF%C2%97%C3%B4%C2%8E%C3%9F%C3%8C%C2%96%C2%A4hh%C3%86%C3%89%2B%08%C3%9B%C3%BF3%C3%80KU%C3%A6%C3%A00%C3%80o%3A%00%C3%B91%C2%8B%C3%B2%C3%81%20%C2%A6%C3%BE%C3%A8Ug%258%C2%8FN8%C2%B3pU%C2%B2%C3%BB%20%C3%8BG%15%0C%C2%84L%7D%C2%ADh%C2%A0%14%5D%C3%91%3F%04Y%C3%9B7M%C3%9B%C3%9B%06h%C3%81%C3%99Z%C3%92%24%24k%C2%94%C3%B8K%C2%8B%C2%B2%C2%A6'%C3%AC9%1E%C2%9Ds%3C%C2%95As%C2%A8%C3%8B%C2%BE%C2%87!%C3%B6%C3%AF1%C3%B9Xh%C3%BF%C2%BALckr%0A%C3%8F%C2%BBa%1E%C2%86%C3%88%06%00y%C3%83%C2%A0ahf%C2%B5%C3%A9%24%C2%B1%C2%89D%C2%82%C3%A6%3F6C%C3%9B9aM%0E%C2%AF%09%C2%AB%14%C3%98F%C3%B0%C2%80%C2%BC%C2%BB%C2%A6%C3%9D%C3%9E%C3%B3G%C3%80%C2%A7%C2%8B8%C2%B9%26%3B%C2%A0%C2%9F%0F%102%0C%C3%A0%C3%B22%C3%85%C2%86-%60s%60%C3%B3YA%C3%8E%C2%B2%C3%B3kev%C2%BDZ%C3%91%04X%0A%C3%BA%C3%B9k%06%C3%BA%01%C3%A1%2Bn%C2%9F%C3%AC%3A%C3%8F%C2%85%C3%8BuA%C3%A4%C2%B3%06V%C3%9E%07t%C2%80O%C2%B7-%C3%A85%C3%AA%C2%83%04%C3%B0%C2%B6%C2%B0%C3%88K%10%C2%A5P%19%07%C3%8E%C2%81%3DN%5E%C2%90%C3%A3%C3%AE6GG%01%C2%B4j%C3%9A%C3%88R%C3%9A%C2%B7%C3%80%C2%92V%C3%86%C2%A6%5El%5C%C2%8A%20%C3%B7d%00%16%C2%94%5C%06ZS%C2%BB%C2%A7%C2%83%C2%B9%C2%8C%C3%A9%5C%C3%A1%C2%96X%C2%A38%C3%9F%C3%B7%C3%80%C2%A7R%C3%A6%C3%89%C3%BB%5C%00%00%00%00IEND%C2%AEB%60%C2%82";

var solo_mask_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%10%08%06%00%00%00%C3%89V%25%04%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%60IDATx%01%C2%95R%C2%BBR%C2%83%40%14e%C2%A1%C2%B1Lk%C2%97%C3%92R%3B%C2%BB%40h%C2%B4%0B_%60%C3%BC%02%C3%87%C3%92%02X%1E%3D%C3%A6%0B%C3%A2'%24%C2%9D%1Dkg%17%3E!%C2%A5%25%C2%96%16%C2%80%C3%A7%C3%84e%06%054%C3%9E%C2%99%C2%9D%C3%9D%C2%B9%C3%B7%C2%9C%C2%BD%C3%A7%3E%C2%841bR%C3%8A%C2%A9i%C2%9AY%5D%C3%97%2B%C2%BC%C3%95%10%C3%86%1Ar%26Ib%C3%A3%C3%8Aq%C3%8E%C2%85%10K%C3%97u%C2%8D%3C%C3%8F_~%C3%A2%C3%84%001D6%C3%99%03%0A%C2%B1%C2%81%C3%BF%1E*%C3%B6%3D2%C2%9C%13%C3%88%5C7M%C2%B30%C3%86m%C2%8F%C2%B8%C3%93~%60i%22%C3%A5Q%C3%A6%C2%A5%C3%B1%C2%BBMX%C3%86%7C%3E%C3%BF%40%19%C2%AF%02%C3%84%25%1C%19%03%C3%86%C3%BF%2C%C2%B2%C2%94R%C2%85%C3%A38%C2%A7Gd%C3%ADZ%01%C3%B9%0F%07%C3%99%C3%B8%C3%A0%C3%99%C2%B6%C3%ADw(%C2%B8%C3%BA%C2%8B%05%C3%92%0A%C3%97-%14%C2%BF%1D%1A%C3%86f%C3%A1%C2%94%C2%9C%C2%AD%C2%AE%7D%3A%C3%80%2BA%C2%8C%C2%80yl%1D%C2%96n%C3%96%0E%C2%B3%3C%09%C3%83p%0B%05%5Bt%C2%9D%C3%A4%C2%B3%0E%C2%91%5D%C2%BE%06v%C2%93%C2%A6%C3%A9%C3%8Dl6Sl%C2%9A%C3%89%1FAV%C2%9Cm%14E%3B%22%C2%83%20%C3%B0%C2%98%C2%85o%C3%86%C3%B0%C2%BE%00%C2%B1%C2%88%C3%A38%C2%AB%C2%AA%C3%AA%C2%89%1C%C3%A0Uw%C3%8E%12%C3%80Pg%C3%B1%08%C2%A6*%7DO%C3%B5%0E%C3%98%3A%11%C3%A3%C3%A5%C2%B7%0D%C2%83c%C2%A1%C3%87F%C2%B0%C3%B4%7D%3F%C3%A2%C2%AA%02%C2%BC%C2%A6O%C3%97%2C%5B%7Co%3D%C2%BBM%C3%A3J%C3%AA%C2%8D%2B%C2%B5%1A%C3%95%C3%85%C3%B6%C3%88%C2%AD%C2%A1~v%C3%B5%C3%8E%C3%B8%C2%9A%C2%A9%C3%97%C3%9D%C3%A9%C2%A3%C2%8Cep%C2%8Cc%C3%B1O%3Db%C3%85%12%5B%C2%84%C3%B4%C2%9F%00%00%00%00IEND%C2%AEB%60%C2%82";

//TOOLS

var add_null_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0F%00%00%00%0F%08%06%00%00%00%3B%C3%96%C2%95J%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%18IDATx%01%C3%95%C2%92AR%C2%83%40%10E%7F%0F%C2%B8%C3%A7%06r%04n%10%C3%B0%02%C3%A6%06%C2%BAu%C2%91%C3%B2%08)O%40%25%2C%C3%9C%C2%86%13%18%C3%B7%1A%C3%B0%06z%03%C2%8E%C3%80Zf%C2%A6%C3%AD%26%C2%91*C%C3%8C%C2%86Uz%01L%C3%B7%7F3%C3%94%C3%BC%0FL(%C3%92%C3%87s%C3%85q%07%C2%97%1E%1A%C3%AD%22%0B%C2%B7%C3%87%C3%82%C2%A2%C2%B2s%06%22%C3%BD%C2%BEBP%3Fd%C3%94%C2%84%C2%BA%C3%A8%C2%BC%C2%80DK%027%22H%C3%96%C2%95%C2%8DF%C3%870%3D%12%C3%8B%C2%9C(%C3%A9%C3%98ig%13%0E%C2%BF%40%C3%BC%C3%89%C3%9E%7F%C2%80LJ%C2%8C%C2%BB%11%0B%C2%8E%01_%12%C2%99%C2%88y%C3%9F%C3%ABa2h%C2%A5%C2%91%C3%B6%20P%2Fn%C3%82%C3%AC%18%5E%C3%AD%C2%BE7%02%C3%A6%C2%A2kE%C2%BF%C3%BA3%5C%C2%BF%C3%9B%C3%BBbg%2B%C2%9C)%C2%9D%C2%AB%C3%AEwm0%C2%A1.%19.%C3%9E%C3%AC%5C%C3%92%C2%91%C2%8B%03%C3%A9%7F%C2%97%26%C3%9E%C2%BFh%06T%C3%97%C3%ABq%C2%B0%C2%8A%09%C2%91%C3%B8%C3%B8%25!%C3%982%C2%99%C3%A5%C2%A9%0D%C3%84%C2%A2%04%C3%AC%C2%9F%60%C3%8CL%C3%B5%03%C2%ACE0%C3%97%C2%92%C2%B0%19%C3%AF7%2BGG3%C3%85%C3%A2%C3%B3-%C3%8B%5B%16%C2%AF%03%C3%ACLP%07p%0Ai%C2%B6%C3%8BS%C3%99%C3%8E%C2%AB%C2%AE%09%C3%90%C2%83p%14%C3%94%C2%98Z%3F%19%03x%C3%AC%1ED%C2%94X%00%00%00%00IEND%C2%AEB%60%C2%82";

var clear_all_panels_button_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%10%00%00%00%0E%08%06%00%00%00%26%2F%C2%9C%C2%8A%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01%7FIDATx%01%C2%9DR%C3%8Bm%C3%82%40%10%C2%9D%C2%B1%1D%C3%8E%C2%94%40*%C2%88K0%C2%90%02%C3%A8%008%C3%A6%40%C3%80%15%04*%08%1FE9%C2%92%0E%20%C3%B7%C2%80%C3%A9%00%C2%A7%02(%C3%81%C2%91r%0A%C3%9E%7D%C2%99%C2%B5X%C3%8B%06D%C2%A4%C3%8CeWow%C3%9E%C2%BC%C2%99yL%17b%1E%C2%A1%C3%BAM%C2%BAO%40%00%22_%C2%A0*%13%C3%87%C3%8C%C2%88%5DrG%0Fu%C3%9E%C3%9B%C2%BF%7C%C2%9A%C3%BC%12%C3%BD%C3%B8%0A%C3%AE%C2%82%08%C2%B5%2C%09%C2%88%15%C3%A1%C3%8Ba%C2%BE%13%C2%B2%20%C3%BB%04%1D%3E6%2B%C3%A33%C2%82%C3%97%08%C2%B5%03%C3%94V%C3%A0%C2%84Yw%7B%C3%B5%C2%9BM%C3%B1%C3%BDY%C3%9E%3D%C3%A8%05%08%C2%BE%25)%11L%C3%97jgN%C3%85N%3D%2C%C3%88%3C%C2%8D%C3%99%3A%C2%8DLk%C2%8A%C3%9D%5B%2F%07%C2%A3C%00%C2%A0%26%C2%9A%C2%BA%C3%97%C2%92M%C2%A4%C3%ACv%5D%C2%A8%C2%9D%C2%A3%C3%93%C2%81cA%C2%AD%C2%A9%C2%95U'wYR%C2%B5J%3B%C2%93%C3%95a(%C3%B2%C2%AB%163%05D%C3%BA%C2%86%C2%99%C3%9B%C2%B9%023%24%C3%A9%3D%C2%96%C3%87%24W%C3%B5%C2%91%C2%B6%C3%804%C2%97a%C2%92T3%04%C2%83%C2%BC%20%C3%B0)%04%C2%81g%C3%98%C3%A5%C3%B2%C2%84%0C%C2%86%C3%8C!%C2%95N0%C3%AA7o%C2%86%C3%A4%22!%C3%B0%C2%B5n%C3%881%1FM%C2%82%05%C3%A4%3E%C3%89%C2%92%25%C2%B2-%C3%88L%C2%88u%C2%A8%1DoXJ%14%C3%85%C3%99%C2%9A-%60%C2%94%10%C2%A3%C3%96oT%3A%C3%B4G%1C%C3%97%C2%BD%13%C3%B27%C2%A6%7F%C3%84l%C2%AD%C2%B6%C3%86%0B%C2%A55%C2%9EVH%C2%95%C3%B2%7B%C3%B7%C3%9E%C3%B2%0C%C2%87%C2%9A%5B%23%C2%85%0Do%C3%8F%C2%97%2BdF%09%C2%AC%C2%95%C2%A5%C3%A1Df%C3%A3%1F%C2%AD%2C%C2%83%C3%95%C2%A3%C2%8BV.%C3%864J%3B%0Cj%C3%A7%C3%BE'%C3%9E%03%C3%BA%5D%C2%869.%1A%C3%AD%171X%C3%8D%C3%91%C2%9F%C3%BC%C3%93%C2%8D%00%00%00%00IEND%C2%AEB%60%C2%82";

var track_matte__imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%10%08%06%00%00%00%C3%B01%C2%94_%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%01.IDATx%01%C3%8D%C2%91%C2%B1J%03A%10%C2%86%C3%BF%C3%99%C3%9D%2B%C2%B4%12%2B%C2%B1Q%2CB%5E%40%C3%85*%C3%86%7B%C2%82%C2%94i%C3%A4l%04%C2%91%C2%9C%C3%B8%00%22%C2%A4%C2%B3%12%7C%07AP%C3%90%C3%86%C3%86%C3%82%C3%93V%C2%B0P%5B%5B-%C2%83%C2%95%18r%C2%BB%C3%A3DX%0C%C3%87%C3%A6re%C2%A6%C3%9A%7F%C2%98%C3%B9v%C3%BE%19%60Z%C2%82%C3%BC%C3%A3%C3%A4%C2%8E%17g%C2%8C%C3%8B%00%C2%AEM%C3%ACb8%C2%AD%C3%B4%C3%B6~%C2%93%C3%8E%C2%87R%C3%B9%C3%BCl%C2%94%C3%97*%01%C2%80%2FV%C3%B4j%C3%99%C3%AE%C3%B8%C2%84%C2%9A%C3%90%C3%B0I%C2%8C%0B%C3%B9%C3%B9%C3%89%03%C2%88%C2%B8%05%C2%B6%2FbAW%C2%80p%17%3Fz%C2%A5%13%C2%9Bv%1A%C2%9Bu%C3%92%3A%16%C3%A0n%C2%A7%19%3D%14%2BM%C2%B8%1F%C3%B7i%1C%1D%7By%C2%9A%C3%B1%1C%C2%AC%3DbBO%C3%A4e5%08%C3%A8j%14%60%C3%98%5E3%C2%B0)%C3%B2%3BT%5D%C2%BA%C2%93%02%60l%04!%C2%A4%C2%B8%15%02%C3%882oC%C3%B5A%3B%C3%8CX%C3%95p%C2%A9%00%1A%C3%BFdz6N%1DV%C2%9D%C3%A4%C3%AF%C2%8C%C3%A9%C2%96%C3%AEF%03%C2%BD%C2%A0%08m%C2%90%C3%9B%C3%A8%3D%C2%AA%C2%B5%C2%BD%C2%98%3EP6%C2%89%26cs%C2%B6%C3%83%C2%99o%18%C2%B4%7C%C2%96%C3%A5%C3%89%00%C3%96%C3%BFU%C2%9Fo%C3%98%C2%BA%C3%A4%C2%BC%C2%AD%25vr%C3%83%22%C2%A4%C3%8Fx%13%C3%B1.V%12%C2%91%09JB%C2%BA%C3%BB%60%3A%C3%80%C3%94%C3%85%2F%C2%95%C3%83o%C2%B5%C2%AF%C3%8B%C3%98%C3%9A%00%00%00%00IEND%C2%AEB%60%C2%82";

var effect_manager_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0E%08%06%00%00%00%C3%B4%7F%C2%96%C3%92%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%86IDATx%01%C2%8DR%0B%0D%021%0C%C3%9D.%08%40%C3%82%24%20a%0E%18%0A%C2%98%04P%40P%C3%80%24%20%01%07%03%05%04%05w%0E%C3%80Ai%C2%93w%C2%97f%C2%8C%C2%BB%C2%BD%C3%A4e%C3%9D%C3%BAogM%01%22%C2%8A%7C8%C3%B5%C2%94%C2%AC%C2%B5%1F%C3%B3%0F%C3%ACp%C2%A1_83%076x3%7B%C3%A6%C3%9A%C2%B4%C2%80%0D%3D%22%C3%87%25%C3%9BN%C3%89%01%C3%A7%7D%C3%89I2%04fFi%04Y%C3%93%C3%83n%C2%8F%7BX%C3%81w%60zdy%C2%A8%C2%98%5B%C3%A6%C2%89%0DE%C2%BE2%C3%8F%3C%C3%89%C2%9B%C3%8E%268%C2%98z%C2%9FRE*KLPn%C2%8Aw7%C3%8E%C2%BD%C3%96W.%15p%C3%A8A%1A%7B%C3%93%06%C2%92%3EW%1C%C2%9E%C2%B23%C3%88%C2%93%C2%BECI%C2%B2%C3%8C%C2%97%C2%8A%131%C2%94%1D%C2%BE%C3%90Q%C2%865%C3%BD%0EY%26%C3%92%07%C3%93%08Y%C2%AEx%0F%60%13%C2%BE%C2%B2%C3%96%C3%A3T%C2%BD%01_%C2%8E%00%00%00%00IEND%C2%AEB%60%C2%82";

var pre_comps_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%B5IDATx%01%C2%A5%C2%91%C3%81%0D%C2%830%0CE%C3%A3%10qf%C2%84%C2%B0AG(cq%01%C3%82%C2%851%3AC'h7(%230B%C3%AEQ%C2%92%C3%BED%C3%90S%C2%A4Z%C3%B0%C2%A5%C3%84%C2%96%C3%A5%17%C3%9B1%C2%89%5D%C3%8B%C2%B2h%C3%81P%C3%9F%C3%B7%5B%C2%B24MSCD%1F%C3%B8%2C%10%C2%B9%C3%AFa%18%3AUU%C3%95-%C2%84%C2%A0c%C2%8C-%C2%83%C3%938%C2%AF%C3%A4%C2%A8%23%C2%82%C3%8A%C3%9B%3F%0A9%3F_y%C3%AFW%C2%94%C2%B7%C3%86%C2%98(x%C3%9A%C3%92%25%C3%B1%C2%8A%C2%85%7D2%C2%A14%C2%A3%C3%89%C2%A08%C2%A9%22X%C3%97u%3B%C2%8E%23%C2%A5%23%C2%A5%C3%ACJ9%C2%AA%14t%C3%8E%3D%C3%A6y%C3%8E%3E~%C2%BCa%C2%83X%C3%8D%5D%C2%9Ci%C2%95%C2%A3k%20Z%5B%C2%B9%00f%C3%8E%C2%B9t%04%C2%B0O%C3%8D%C3%A0%C3%AC%C2%BEw%C3%B1%05%C2%83%C2%98%3B%7F%C2%9D%C2%9F%7B%C3%A5%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var rename_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0D%08%06%00%00%00%C2%99%C3%9C_%7F%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%9DIDATx%01%C3%8D%C2%8E%C2%B1%0DB1%0CDc%07)%C3%AD%1F!%230%C3%82g%14%26%00%C3%8AT%C2%84*-%1B%C3%81%06%C2%8C%40%C3%A6H%C2%91p%C3%AE%10r%0C%25'Y%C2%8E%C3%AC%3C%C3%9FQ)%25%3AC)%C2%A5%C2%AA%C3%8D%C2%B9%C2%B5%C3%B6%C2%B4*%C3%A7%C2%BCj%C3%A0f%C2%8C%C2%B1w%C2%B6%C2%AA%0A%C2%86%10%C3%AE%C3%AEo%C2%A3%C3%A2%C3%88%C2%96%C2%99%C3%8F%C2%BD%C3%B7%C2%93%1AU%C2%8B%07(J%C2%87%C3%91JDW%C3%BE%25%C2%9E8%C3%A1%C3%B3%03n%07%C2%80%3B%C3%94q%16%C2%B5~%407%3C%17qC%C2%BF%60V%C3%89%19z%C2%87%C3%A4%C2%98%C2%B8%09%24%3B2%C2%A0(%C3%B14H%C3%843%C3%90%7B%1Fg%C3%90W%C2%89%2Bj%C3%91v%2F%C2%A9%C3%B1%C2%A5d%06%C3%A2%C2%87%C2%BC%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var group_viewer_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0C%08%06%00%00%00R%C2%80%C2%8C%C3%9A%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%B4IDATx%01%C2%9D%C2%91%C3%8D%09%C3%830%0C%C2%85e%13%C3%88%C2%B1%19!%C2%9B4%2Bt%C2%82f%C2%84%5E%7D%C3%B2%C3%8F%C3%85%C3%A7N%C3%90%C2%8C%C3%92%11%3ABF%C3%A8%C3%99%06%C2%BB%2F%60%C2%87B%2BH%C3%B2%0E%C2%96%40%C3%BA%C3%84%C2%93%2C%082%C3%86tm%C3%9Bv%C2%B4QJ%C2%A9Y%00%1A%C2%85%10%0F%C3%9A!%C3%B4O%12OO%3B%C2%95s%1E%24%1DTS%C3%A2%1BS.%5C%C2%93%C2%94R%C2%A7%C2%94%C3%AC%C2%92%C3%83%C3%A1%C2%88p%5EA%C3%AC%C3%BA%C3%A4%40%C3%A7%C3%9C%C2%B5%C3%96%C2%AD%C2%B5%C3%837H%C3%9E%C3%BB%C2%9E%03c%C2%8C%C3%84Y%C3%ADB%08%23%07%C3%BE%3B%C3%A0jUkm%C2%88%C2%B7%C3%BA%C3%B3%5D%C2%87%C2%AF*0%C3%AD%C2%86%C2%8Bj%C3%98yqM%C2%A8%C3%B7%C2%A8%C3%8F5_%1C68%C3%B3Tv8%C2%B1%C3%93%0BTs0%C3%B7%0F1AA%C2%86Inr8%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var sort_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%11%00%00%00%11%08%06%00%00%00%3BmG%C3%BA%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%A6IDATx%01%C3%9D%C2%93%C2%B1%09%02A%10E%C3%BFz%17%18%09%22%C2%87%C2%89%C2%99%0DX%C2%84%3D%C3%98%C2%82M%08%C3%B6%20FV%60%C2%A0%16cj%03%06%26f%222%3E%C2%90%C2%83u%C3%99%C3%93%5B%13%C2%8F%7B%C3%B0%C2%99e%C2%98%7Dl%C2%B0%235%05%176%C3%8ClL%C3%99%C2%93%5Ed%C3%BEF%C3%96%C3%8E%C2%B9%C2%95%C3%9F%C3%8C%23%C2%83%059%C2%A8%C2%9A%7B%C3%98%C3%88%C2%83W%C3%8C(K%C3%92U5%C2%8C%C3%99%C2%84%C3%97%C3%8C%C2%A3%12%C3%A8%C2%93%C2%ADj%C2%80h%C2%88%C3%A8%C3%BC%26%C2%A19%C2%A2L%C3%89%C2%A0%C2%8E%C2%83%1C%C3%89.4%2F%2C%C2%8DSy%C2%B7%C3%A3y2%C2%A5%C2%91%C3%85%24%3F%C3%93b%C3%89Ui%5C%C3%8A%C2%83%C3%BF%C3%996z%C3%ADF%C2%A1%C3%AF%3C%C3%B4y5%C3%BE%C3%84%13%C3%8E%19S%5E%C2%82x%C2%B0~%00%00%00%00IEND%C2%AEB%60%C2%82";

var duplicate_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%13%00%00%00%13%08%06%00%00%00rP6%C3%8C%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%02TIDATx%01%C3%8DSMh%13Q%10%C2%9Eyo7-%C3%B4bR%C3%A9%C3%85%C2%8A%1E%05%11%3D%08%C3%A2%0F%0D%C2%9BV%C2%A5G%3D%C3%B9%C2%83D%C3%B1%07%C2%A44%C2%8DV%C2%BC%C2%A9%C3%91%C2%BB%14%13R%15Q%C2%A4%14%C2%A19(%C2%82%07AHR%C3%81%3F%C2%A8%C3%90%C2%80'A%C2%BDx%C2%90%C3%86%C2%98*%C2%A8%C3%B9%C3%99%C3%B7%C3%86%C3%99M%23%C2%BB%C3%95%10-%3Dt%0E%C3%BBf%C3%9E%C3%8C%7C%C3%BB%7D%C3%B3%C3%9E%03X%C2%A9%C2%86M'%C2%93!%C3%B9)d%C3%AF%40%09%C3%B2_%C2%9B%C2%89%C2%8Cr%2C%C2%82%05%1F%C2%98%0B%C2%B4Z%C3%B3%26m%C2%84%C3%BF4%C2%8D%C3%BAD%C3%9C%0A%C3%9Cv%7C%C3%A1%7C%C3%A6%C2%BA%C2%A1%C3%97%01%22%C2%A2k%C2%88%C2%B0%C2%AF%1D%00%02%C3%8E%22%C2%92%C3%A5%C2%AC%02%C3%84%C2%AE%C3%A6%C2%BE%0BV%17%0D%C2%86%1C%C3%8C%13%C3%80*X%C2%A2%19%C3%9E%C2%80%10%2F%01%C2%B5o%22%C2%A0-%5C%C2%9C%C2%83F%C3%B1%C2%AC%C2%8F%C3%99%C3%AF%C2%A2%C2%BF%C3%8A%C3%84%02%C3%8B%19%12%C2%82%C3%B6H%C2%A4A%C3%90p%07%C2%81%5E5ez%2B%C3%85%C2%A2%C3%80'%C2%93%C3%BD%C3%B1%2FO%C3%85%C3%96%C3%A1%C2%88%1CG2%5E%0CY%C3%A6%C3%A3%C3%98%C2%80q%C3%9C%40%C3%A3%40%C2%ADJeXd%C3%AE%C2%AC%C3%86r%C2%B4%5E%C2%92%C3%BA%C3%A0g%09%C3%AF%03%C2%9Dr%C2%BB%C2%AE%C3%83%3A%C2%A5%C3%AC%20%22F%09%C3%A4%3D%C2%AD%C3%AA%C3%9D%C3%B1%C3%9D%C2%81%C2%89t%C2%8E%0E%2BR%C2%93%C2%8Cp7f%19%C3%87%C3%BE%60%06%C2%A4%C3%8F8%C3%B4%C3%9D%C2%84%C2%A4%C2%A9%C3%93%3Bq%C2%AEFP%04%C3%84%C2%87%C3%8C%C3%B2%10%C2%80z%C2%84R%0C8%C3%B9%22%C3%80%14%C3%8F%C3%AD%5Bk%C2%99Blv%C2%87%C3%8B%C2%A6lz%C2%97%C3%88%C2%91!%C2%B5%C2%BA%C3%82a%C2%A7G%C2%8A%C2%95%C3%8A%C3%9B%C2%83%09%0Bm%40z%C3%93%12L%13%1C%05%12cn%02!%C3%A04H!%1D%C2%B0%1F%C2%9E%C2%B2%C2%B7%C2%A5%C2%BC%7C%C3%92%00%C2%A6ZK0%C2%AFLD%C2%B1%C2%ADA%C2%A5%1E%C3%A4%C3%84%0D%C3%B7%C2%A2%12%3D%C3%A0%C2%9DH%C2%B0O%C2%A5%13%092%C2%B4%C2%82%0B%7CJ%3F%7D%60%C2%A6f%C3%B5%C2%AC%C3%8C%2B%C2%93g%14%C2%BE9Cf1l%C2%BE%C2%8EE%C3%8CQ%C2%8D%C3%B6%C2%91%C3%A1~s%3F%C3%BF%C3%A5%1C%C3%97%C2%9E%0C%C2%85%C3%B5%C2%AD%C3%B23%C3%A3%C2%A5Dy%C3%9E%07%C3%96S%C2%82%C2%8F%C2%BC%C3%9Cg%C2%99%C3%91%05%C2%99%C3%B3%C2%80%C3%BA%60%C2%ADT%C3%A9%C3%AD%C3%89%C3%83)%C2%A7f%C3%84%C3%AAp%C3%A7%13%C2%B3%C3%A4Uf9%C3%8A%C3%87%1D%0D%C3%B5%C2%A9%C3%89%C3%A24T%3C%C3%B3%5CPH%24%C3%92YX%2B%C3%B9ii%C3%B8%5E%C2%A9vt%7D5%C2%ABv%C2%86%087%C3%98%0C%7C%C3%96%0A%C3%8Cx'%C2%92%C3%8C%C2%AA%C2%8B%C3%9Cu%C3%99%C2%B9%C3%A8%23%C3%BDf%1C%C3%9A%C3%99D%C2%81%C2%BAR%C3%99%C3%BA%C3%9EV%C3%B9d%C2%AE%16Of%C3%AD%C3%8F%C2%A9%C3%A9%C3%AA%26X%0E%C2%BB%C3%BE%C2%9C%C3%964%C3%BD_%3D%C2%8B%C3%B9xs%1F%01%C3%A3%00%00%00%00IEND%C2%AEB%60%C2%82";

//About//
var telegram_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0D%00%00%00%0B%08%06%00%00%00%C2%A4%C2%B2%07a%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C3%9BIDATx%01%C2%8DQ%C3%91%0D%C2%82%40%0C%7D%C2%BD%C3%B8%2Fn%C2%A2%13%088%C2%88h%C3%BC%07'%00'0%C3%BEc%C3%A2%0AN%00%23%C3%A0%06%C2%B8%01%C3%8A%2FR%0B'DH%20%C2%BC%C3%A4%C3%92%C2%BB%C2%B6%C2%AF%7D%C3%AD%11%26%C3%A2%10%C2%B1Y%02k%C2%94x%C3%92X%C2%A2%17%C2%B1%C2%91%03%26%18.*%C2%ABq%C2%9F%0D%25%C2%BF%017gx%C3%B24%C3%A4%C2%A4m%C2%90%C2%91%C3%8E%C3%BA%12%18%C3%98J%C2%B2%C3%B3%C2%93%C2%90%11%C3%A3X*%C3%8C%C3%85%06%C2%95C%C3%BC%C2%9AT'3%7C9fS%40%C2%82qA%C3%98)%C2%82K%C2%BA%C2%A3%C2%86B%C2%A2%C3%AA%C2%8ERY%C3%8C%C2%B2%250N%C2%A1M%C2%96%04%C3%BD%0EAP%00%09%C3%B5%C3%A5U%C3%8E%C2%9BE%C3%99%3E%C3%A2s%C2%9FP%C3%89%C2%BD%C3%9A%C2%B4%C3%A8%C3%8C%14Z%14%C2%B7*J%C2%BC%C2%B8%C2%B7%5By%26Z%C3%A1%00%C3%82%0D%05D%C2%B0%C3%B0%C2%B79%19%C3%A31Jj%3A%7F%08%2BY%C3%B3%C2%A5%26)%C3%9Di2%1C%C3%B9%C2%BB%C3%A6%C3%BE%05%5C%C2%88T%06E%C3%8F4%C3%92%00%00%00%00IEND%C2%AEB%60%C2%82"; 

var manual_imgString = "%C2%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%00%0E%08%06%00%00%00%1FH-%C3%91%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%C2%9A%C2%9C%18%00%00%00%01sRGB%00%C2%AE%C3%8E%1C%C3%A9%00%00%00%04gAMA%00%00%C2%B1%C2%8F%0B%C3%BCa%05%00%00%00%C2%A4IDATx%01%C3%95%C2%921%0E%02!%10E%07%C3%98%C3%A05%C2%A4!%C2%A1%C3%9B%0B%19%3BK%7Bo%C2%B1%C2%89%17%C3%90%13%C2%A87%C3%91%0A%3A%3C%C2%81%C3%99%C2%92%0A%C3%BC%16%24%C2%A8%C3%8B%C2%9Alb%C2%B1%3F!3L%C3%A6%C3%BDb%C3%B2%C2%89%26%C2%8A%C3%A5%C3%86Z%C2%BB%14B%C2%ACRJ%C2%A2%C2%B6%2C%C2%A5%C3%AC%C2%94R%C3%BD%C2%ABo%C3%B2%C2%90s%C2%BE%03%C2%B4%C2%A1%11%C2%85%10%0E(%C3%AF%20%C2%B4(%C3%BA3c%C2%AC%C3%8F%1F%18%C2%B6(mi%C3%92%0C%7B%C3%93%C2%B1%04%0B%C3%B8'x%C2%8A1%C3%92%C2%988M%C3%94%C2%8C%C3%80%C3%8F%C3%A3%5Cp%C2%94%C2%AE%C2%B6l%C2%8C%C2%B9%0F%C2%817%C2%BC-%C3%92%C2%B3%C2%AE%C2%81%C3%9E%C3%BB%C3%ABWr%C2%B4%C3%96%7B%C3%A7%C3%9C%03%09R%C3%B4O%3D%01%01%C3%A4.%C2%90%C3%9D%C3%A0%C2%B1%C3%BA%00%00%00%00IEND%C2%AEB%60%C2%82"; 



////////////////////

var panelGlobal = this;
var palette = (panelGlobal instanceof Panel)
    ? panelGlobal
    : new Window("palette", undefined, undefined, { maximizeButton: true, resizeable: true });

if (!(panelGlobal instanceof Panel)) palette.text = "YO Group Matcher " + scriptVersion;
palette.preferredSize.width = 395;
palette.preferredSize.height = 490;
palette.orientation = "column";
palette.alignChildren = ["fill", "top"];
palette.spacing = 11;
palette.margins = 0;

//----------------------------------------
//                HEAD_PANEL
//----------------------------------------

var head_panel = palette.add("group", undefined, { name: "head_panel" });
head_panel.orientation = "row";
head_panel.alignChildren = ["left", "fill"];
head_panel.spacing = 8;
head_panel.margins = [8, 10, 5, 0];

// --- LOGO ---

var logo = head_panel.add("image", undefined, File.decode(logo_imgString), { name: "logo" });
logo.alignment = ["left", "fill"];
logo.helpTip = "YO Group Matcher " + scriptVersion;

// --- SAVE PRESETS BUTTON ---

var save_my_presets_button = head_panel.add("iconbutton", undefined, File.decode(save_my_presets_button_imgString), {
    name: "save_my_presets_button",
    style: "toolbutton"
});
save_my_presets_button.helpTip = "Save current Layer and Effect Groups to a .pgm file";
save_my_presets_button.text = "";
save_my_presets_button.preferredSize.width = 32;
save_my_presets_button.preferredSize.height = 32;

// --- LOAD PRESETS BUTTON ---

var load_my_presets_button = head_panel.add("iconbutton", undefined, File.decode(load_my_presets_button_imgString), {
    name: "load_my_presets_button",
    style: "toolbutton"
});
load_my_presets_button.helpTip = "Load Layer and Effect Groups from a .pgm file";
load_my_presets_button.text = "";
load_my_presets_button.preferredSize.width = 32;
load_my_presets_button.preferredSize.height = 32;


// --- DIVIDER1 ---

var divider1 = head_panel.add("panel", undefined, undefined, { name: "divider1" });
divider1.alignment = "fill";
divider1.helpTip = "Divider";

// --- ABOUT / CHECK UPDATE ---

var check_update_button = head_panel.add("iconbutton", undefined, File.decode(push_update_imgString), {
    name: "check_update_button",
    style: "toolbutton"
});
check_update_button.helpTip = "Open About & Check for Updates window";
check_update_button.preferredSize.width = 32;
check_update_button.preferredSize.height = 32;

// (1) "Технический" статус, невидимый
var silentUpdateStatus = head_panel.add("statictext", undefined, "");
silentUpdateStatus.visible = false;

// Новый блок для solo‑кнопок (располагается под head_panel)
var solo_buttons_group = palette.add("group", undefined, { name: "solo_buttons_group" });
solo_buttons_group.orientation = "row";          // Располагаем кнопки в ряд (можно изменить на "column", если нужно)
solo_buttons_group.alignChildren = ["left", "center"];
solo_buttons_group.spacing = 5;
solo_buttons_group.margins = [8, 0, 5, 0];

// ----- Новая кнопка для режима Solo Animation ----- 
var solo_anim_button = solo_buttons_group.add("iconbutton", undefined, File.decode(solo_anim_imgString), { name: "solo_anim_button", style: "toolbutton" });
solo_anim_button.helpTip = "Solo Animation: show only layers with more than one animation keyframe";
solo_anim_button.text = "";
solo_anim_button.preferredSize.width = 32;
solo_anim_button.preferredSize.height = 32;

// Новая кнопка для режима Solo Track Matte
var solo_mask_button = solo_buttons_group.add("iconbutton", undefined, File.decode(solo_mask_imgString), { name: "solo_mask_button", style: "toolbutton" });
solo_mask_button.helpTip = "Solo Mask: show only layers with masks";
solo_mask_button.text = "";
solo_mask_button.preferredSize.width = 32;
solo_mask_button.preferredSize.height = 32;

// Новая кнопка для режима Solo Track Matte
var solo_trackmatte_button = solo_buttons_group.add("iconbutton", undefined, File.decode(trackmatte_imgString), { name: "solo_trackmatte_button", style: "toolbutton" });
solo_trackmatte_button.helpTip = "Solo Track Matte: show only layers involved in track matte (main layer and matte)";
solo_trackmatte_button.text = "";
solo_trackmatte_button.preferredSize.width = 32;
solo_trackmatte_button.preferredSize.height = 32;

// Кнопка Solo Shapes
var solo_shapes_button = solo_buttons_group.add("iconbutton", undefined, File.decode(shapes_imgString), { name: "solo_shapes_button", style: "toolbutton" });
solo_shapes_button.helpTip = "Solo Shapes: show only shape layers";
solo_shapes_button.text = "";
solo_shapes_button.preferredSize.width = 32;
solo_shapes_button.preferredSize.height = 32;

// Кнопка Solo Text
var solo_text_button = solo_buttons_group.add("iconbutton", undefined, File.decode(text_imgString), { name: "solo_text_button", style: "toolbutton" });
solo_text_button.helpTip = "Solo Text: show only text layers";
solo_text_button.text = "";
solo_text_button.preferredSize.width = 32;
solo_text_button.preferredSize.height = 32;

// Кнопка Solo Null Objects
var solo_null_button = solo_buttons_group.add("iconbutton", undefined, File.decode(null_objects_imgString), { name: "solo_null_button", style: "toolbutton" });
solo_null_button.helpTip = "Solo Null Objects: show only null layers";
solo_null_button.text = "";
solo_null_button.preferredSize.width = 32;
solo_null_button.preferredSize.height = 32;

// Новая кнопка для режима Solo Adjustment Layers
var solo_adjust_button = solo_buttons_group.add("iconbutton", undefined, File.decode(Adjust_imgString), { name: "solo_adjust_button", style: "toolbutton" });
solo_adjust_button.helpTip = "Solo Adjustment Layers: show only adjustment layers";
solo_adjust_button.text = "";
solo_adjust_button.preferredSize.width = 32;
solo_adjust_button.preferredSize.height = 32;

// Создаем панель с вкладками
var tpanel1 = palette.add("tabbedpanel", undefined, undefined, { name: "tpanel1" });
tpanel1.alignChildren = "fill";
tpanel1.preferredSize.width = 100;
tpanel1.margins = 0;
tpanel1.helpTip = "Switch between Layers Group, Effects Group, and Tools tabs";

// --- TAB_LAYERS ---
var tab_layers = tpanel1.add("tab", undefined, undefined, { name: "tab_layers" });
tab_layers.text = "Layers Group";
tab_layers.orientation = "column";
tab_layers.alignChildren = ["left", "top"];
tab_layers.spacing = 10;
tab_layers.margins = 10;
tab_layers.helpTip = "Here you can manage your Layer Groups";

// --- TAB_EFFECTS ---
var tab_effects = tpanel1.add("tab", undefined, undefined, { name: "tab_effects" });
tab_effects.text = "Effects Group";
tab_effects.orientation = "column";
tab_effects.alignChildren = ["fill", "top"];
tab_effects.spacing = 10;
tab_effects.margins = 10;
tab_effects.helpTip = "Manage your Effects Groups";

// Если вкладка Tools уже не создана, создаём её:
var tab_tools = tpanel1.add("tab", undefined, undefined, { name: "tab_tools" });
tab_tools.text = "Tools";
tab_tools.orientation = "column";
tab_tools.alignChildren = ["fill", "top"];
tab_tools.spacing = 7;
tab_tools.margins = 10;
tab_tools.helpTip = "Tools Tab";

// Добавляем группу для кнопок напрямую в tab_tools
var compsButtonGroup = tab_tools.add("group");
compsButtonGroup.orientation = "row";
compsButtonGroup.alignChildren = ["left", "top"];
compsButtonGroup.spacing = 8;

// Добавляем кнопку "Auto Sort Comps"
var autoSortCompsButton = compsButtonGroup.add("iconbutton", undefined, File.decode(sort_imgString), {
    name: "sort_comps",
    style: "toolbutton"
});
autoSortCompsButton.text = "Sort Files";
autoSortCompsButton.preferredSize = [110, 35];
autoSortCompsButton.helpTip = "Automatically sort project items into folders: Compositions, Footages, Audio, Nulls & Solids, Images";

// Добавляем кнопку "Duplicate Comp"
var duplicateCompButton = compsButtonGroup.add("iconbutton", undefined, File.decode(duplicate_imgString), {
    name: "duplicate_button",
    style: "toolbutton"
});
duplicateCompButton.text = "";
duplicateCompButton.preferredSize = [35, 35];
duplicateCompButton.helpTip = "Duplicate the active composition. All duplicate comps (including nested ones) will be moved to a folder 'Duplicate (CompName)', a new color label is assigned to each, and the duplicated comp is opened.";

// Переносим кнопку "Add Null Objects" в ту же группу
var add_null_objects_button = compsButtonGroup.add("iconbutton", undefined, File.decode(add_null_imgString), {
    name: "add_null_objects_button",
    style: "toolbutton"
});
add_null_objects_button.helpTip = "Add Null Object for selected layers";
add_null_objects_button.text = "";
add_null_objects_button.preferredSize.width = 35;
add_null_objects_button.preferredSize.height = 35;

// Переносим кнопку "Add Track Matte Layer" в ту же группу
var add_track_matte_button = compsButtonGroup.add("iconbutton", undefined, File.decode(track_matte__imgString), {
    name: "add_track_matte_button",
    style: "toolbutton"
});
add_track_matte_button.helpTip = "Add Track Matte Layer to the active layer";
add_track_matte_button.text = "";
add_track_matte_button.preferredSize.width = 35;
add_track_matte_button.preferredSize.height = 35;

// "Create + Unlink" group
var create_unlink_group = tab_layers.add("group", undefined, { name: "create_unlink_group" });
create_unlink_group.orientation = "row";
create_unlink_group.alignChildren = ["left", "center"];
create_unlink_group.spacing = 7;
create_unlink_group.margins = [0, 0, 0, 0];

// Button: Create a New Layer Group
var create_group_layers_button = create_unlink_group.add(
    "iconbutton",
    undefined,
    File.decode(create_group_layers_button_imgString),
    { name: "create_group_layers_button", style: "toolbutton" }
);
create_group_layers_button.helpTip = "Create a new Layer Group";
create_group_layers_button.text = "CRT";
create_group_layers_button.preferredSize.width = 100;
create_group_layers_button.preferredSize.height = 35;
create_group_layers_button.alignment = ["left", "center"];

// Button: Unlink Layer
var unlink_layer_button = create_unlink_group.add(
    "iconbutton",
    undefined,
    File.decode(unlink_layer_button_imgString),
    { name: "unlink_layer_button", style: "toolbutton" }
);
unlink_layer_button.helpTip = "Remove group prefix [XXX] from selected layers";
unlink_layer_button.text = "";
unlink_layer_button.preferredSize.width = 35;
unlink_layer_button.preferredSize.height = 35;
unlink_layer_button.alignment = ["left", "center"];


// switch_button//
var switch_button = create_unlink_group.add(
    "iconbutton",
    undefined,
    File.decode(switch_view_imgString),
    { name: "switch_button", style: "toolbutton" }
);
switch_button.helpTip = "Switch Mode";
switch_button.text = "";
switch_button.preferredSize.width = 103;
switch_button.preferredSize.height = 35;
switch_button.alignment = ["left", "center"];

// Отключаем её
switch_button.enabled = false;

// Просто ссылаемся на ваши строковые переменные:
var bmpView  = switch_view_imgString;
var bmpTools = switch_tools_imgString;
var bmpMode  = switch_mode_imgString;

// Текущий индекс иконки: 0=view, 1=tools, 2=mode
var currentIcon = 0;

// Обработчик клика — переключаем значение и ставим новую иконку
switch_button.onClick = function() {
    currentIcon = (currentIcon + 1) % 3;
    switch (currentIcon) {
        case 0:
            setButtonIcon(switch_button, bmpView,  "switch_view");
            break;
        case 1:
            setButtonIcon(switch_button, bmpTools, "switch_tools");
            break;
        case 2:
            setButtonIcon(switch_button, bmpMode,  "switch_mode");
            break;
    }
};


// --- "Панель" внутри Layers (удаляем её потом)
var layer_group_default = tab_layers.add("panel", undefined, undefined, { name: "layer_group_default" });



//PANEL EFFECTS LAYERS///

// (1) Create + Unlink (Effects)
var create_unlink_effects_group = tab_effects.add("group", undefined, { name: "create_unlink_effects_group" });
create_unlink_effects_group.orientation = "row";
create_unlink_effects_group.alignChildren = ["left", "center"];
create_unlink_effects_group.spacing = 7;
create_unlink_effects_group.margins = [0, 0, 0, 0];

// (2) "Create a New Effects Group"
var create_group_effects_button = create_unlink_effects_group.add(
    "iconbutton",
    undefined,
    File.decode(create_group_layers_button_imgString),
    {
        name: "create_group_effects_button",
        style: "toolbutton"
    }
);
create_group_effects_button.helpTip = "Create a new Effects Group";
create_group_effects_button.text = "CRT";
create_group_effects_button.preferredSize.width = 75;
create_group_effects_button.preferredSize.height = 35;
create_group_effects_button.alignment = ["left", "center"];

// (3) "Unlink Effects"
var unlink_effects_button = create_unlink_effects_group.add(
    "iconbutton",
    undefined,
    File.decode(unlink_effects_button_imgString),
    {
        name: "unlink_effects_button",
        style: "toolbutton"
    }
);
unlink_effects_button.helpTip = "Remove [GroupPrefix] from selected effects";
unlink_effects_button.text = "";
unlink_effects_button.preferredSize.width = 35;
unlink_effects_button.preferredSize.height = 35;
unlink_effects_button.alignment = ["left", "center"];

// Добавляем разделитель
var separator = create_unlink_effects_group.add("panel", undefined, undefined, { borderStyle: "sunken" });
separator.preferredSize = [2, 35]; // Ширина 2 пикселя, высота как у кнопок

// ===== Новый блок: кнопка Effects Manager =====
var effects_manager_button = create_unlink_effects_group.add(
    "iconbutton",
    undefined,
    File.decode(effect_manager_imgString),
    {
        name: "effects_manager_button",
        style: "toolbutton"
    }
);
// Кнопка Effects Manager (оставляем без изменений)
effects_manager_button.helpTip = "Open Effects Manager";
effects_manager_button.text = "FX Manager";
effects_manager_button.preferredSize.width = 118;
effects_manager_button.preferredSize.height = 35;
effects_manager_button.alignment = ["left", "center"];


// "Панель" внутри Effects (удаляем потом)
var effect_group_default = tab_effects.add("panel", undefined, undefined, { name: "effect_group_default" });
var view_effects_checkbox = effect_group_default.add("checkbox", undefined, undefined, { name: "view_effects_checkbox" });
view_effects_checkbox.helpTip = "Example: checkbox for showing/hiding effects";
var add_effect_button = effect_group_default.add("iconbutton", undefined, File.decode(add_layer_button_imgString), { name: "add_effect_button", style: "toolbutton" });
add_effect_button.helpTip = "Add effect";
var edit_group_effects_button = effect_group_default.add("iconbutton", undefined, File.decode(edit_group_effects_button_imgString), { name: "edit_group_effects_button", style: "toolbutton" });
edit_group_effects_button.helpTip = "Edit group effects";
var delete_group_effects_button = effect_group_default.add("iconbutton", undefined, File.decode(delete_group_layers_button_imgString), { name: "delete_group_effects_button", style: "toolbutton" });
delete_group_effects_button.helpTip = "Delete group effects";

// Какую вкладку показывать при старте
tpanel1.selection = tab_layers;

// Финальные настройки панели
palette.layout.layout(true);
palette.layout.resize();
palette.onResizing = palette.onResize = function () { this.layout.resize(); };

// 3-ий пункт: обновление при смене активной композиции
palette.onActivate = function () {
    refreshSoloButtons();
};

// Запускаем автообновление каждые 2000 мс (2 секунды)
$.global.refreshTaskId = app.scheduleTask("refreshSoloButtons()", 1000, true);


if (palette instanceof Window) {
    palette.onClose = function () {
        if ($.global.refreshTaskId) {
            app.cancelTask($.global.refreshTaskId);
        }
    };
}

if (palette instanceof Window) palette.show();



// При запуске — тихая проверка обновлений
checkForUpdatesQuietlyForHeadPanel(check_update_button);



// ======== Обработчик "About" / "Check for Updates" ========

check_update_button.onClick = function () {
    var dialog = new Window("dialog", "About | Group Matcher");
    dialog.orientation = "column";
    dialog.alignChildren = ["center", "top"];
    dialog.spacing = 10;
    dialog.margins = 16;

    // Логотип
    var logo_image = dialog.add("image", undefined, File.decode(logo_about_imgString), { name: "logo" });
    logo_image.alignment = ["center", "center"];

    // Текст текущей сборки
    var build_version = dialog.add("statictext", undefined, undefined, { name: "build_version" });
    build_version.text = "Build " + scriptVersion;
    build_version.helpTip = "Version information.";

    // Кнопки Telegram / Manual
    var group1 = dialog.add("group", undefined, { name: "group1" });
    group1.orientation = "row";
    group1.alignChildren = ["left", "center"];
    group1.spacing = 10;
    group1.margins = 0;

        // Telegram Button с иконкой
    var telegram_button = group1.add(
        "iconbutton",
        undefined,
        File.decode(telegram_imgString), // строка-ресурс для иконки Telegram
        { name: "telegram_button", style: "toolbutton" }
    );
    telegram_button.text = "Telegram";
    telegram_button.helpTip = "Open Telegram channel.";
    telegram_button.preferredSize = [100, 32];
    telegram_button.onClick = function () {
        openURL("https://t.me/romlogunov_hub");
    };

    // Manual Button с иконкой
    var manual_button = group1.add(
        "iconbutton",
        undefined,
        File.decode(manual_imgString), // строка-ресурс для иконки Manual
        { name: "manual_button", style: "toolbutton" }
    );
    manual_button.text = "Manual";
    manual_button.helpTip = "Open user manual.";
    manual_button.preferredSize = [90, 32];
    manual_button.onClick = function () {
        openURL("https://romlogunov.notion.site/Manual-YO-Group-Matcher-122dc723a706801ca52edde6ac3920d6?pvs=74");
    };

    // Разделитель
    var divider_about = dialog.add("panel", undefined, undefined, { name: "divider_about" });
    divider_about.alignment = "fill";

    // Кнопка "Check For Updates"
    var check_updates = dialog.add("iconbutton", undefined, File.decode(updates_check_button_imgString), { name: "check_updates", style: "toolbutton" });
    check_updates.text = "Check For Updates";
    check_updates.preferredSize.width = 203;
    check_updates.preferredSize.height = 39;
    check_updates.helpTip = "Check for the latest updates.";

    // Статус обновлений
    var Status_update = dialog.add("statictext", undefined, undefined, { name: "Status_update" });
    Status_update.text = "Status Update...";
    Status_update.helpTip = "Current update status.";
    Status_update.alignment = ["fill", "top"];

    // Привязываем проверку обновлений
    check_updates.onClick = function () {
        checkForUpdates(Status_update, check_updates);
    };

    // Кнопка Close
    var close_button = dialog.add("button", undefined, "Close", { name: "close_button" });
    close_button.helpTip = "Close the dialog.";
    close_button.onClick = function () {
        dialog.close();
    };

    // Обработчик закрытия окна через крестик
    dialog.onClose = function () {
        dialog.close();
    };

    dialog.show();
};


//UPDATE CHECK//FUNCTIONS//

function compareVersions(v1, v2) {
    var v1parts = v1.split(".");
    var v2parts = v2.split(".");
    var len = Math.max(v1parts.length, v2parts.length);

    for (var i = 0; i < len; i++) {
        var a = parseInt(v1parts[i] || "0", 10);
        var b = parseInt(v2parts[i] || "0", 10);
        if (a > b) return 1;
        if (a < b) return -1;
    }
    return 0;
}

function checkForUpdatesQuietlyForHeadPanel(headPanelButton) {
    var githubApiUrl = "https://api.github.com/repos/yo-romlogunov/YO-Group-Matcher/releases/latest";

    try {
        var curlCmd = 'curl -s -H "User-Agent: YO-Group-Matcher" "' + githubApiUrl + '"';
        var response = system.callSystem(curlCmd);
        if (response) {
            var tagNameMatch = response.match(/"tag_name":\s*"v?([0-9.]+)"/);
            if (tagNameMatch) {
                var latestVersion = tagNameMatch[1];
                if (compareVersions(latestVersion, scriptVersion) > 0) {
                    // Новая версия
                    setButtonIcon(headPanelButton, push_update_new_update_imgString, "head_update_new");
                } else {
                    // Актуальная
                    setButtonIcon(headPanelButton, push_update_imgString, "head_update_normal");
                }
            }
        }
    } catch (e) {
        // alert("Ошибка при тихой проверке: " + e.toString());
    }
}

function checkForUpdates(Status_update, check_updates) {
    var githubApiUrl = "https://api.github.com/repos/yo-romlogunov/YO-Group-Matcher/releases/latest";

    try {
        var curlCmd = 'curl -s -H "User-Agent: YO-Group-Matcher" "' + githubApiUrl + '"';
        var response = system.callSystem(curlCmd);

        if (response) {
            var tagNameMatch = response.match(/"tag_name":\s*"v?([0-9.]+)"/);
            var htmlUrlMatch = response.match(/"html_url":\s*"([^"]+)"/);

            if (tagNameMatch && htmlUrlMatch) {
                var latestVersion = tagNameMatch[1];
                var downloadUrl = htmlUrlMatch[1];

                if (compareVersions(latestVersion, scriptVersion) > 0) {
                    // Новая версия
                    Status_update.text = "New Update: v" + latestVersion;
                    check_updates.text = "Download Now (Open Page)";
                    setButtonIcon(check_updates, update_ready_imgString, "update_ready");

                    check_updates.onClick = function () {
                        openURL(downloadUrl);
                    };

                } else {
                    // Версия актуальна
                    Status_update.text = "You are using the latest version";
                    check_updates.text = "Check For Updates";
                    setButtonIcon(check_updates, updates_check_button_imgString, "updates_check");

                    check_updates.onClick = function () {
                        checkForUpdates(Status_update, check_updates);
                    };
                }
            } else {
                Status_update.text = "Не удалось обработать ответ об обновлении.";
            }
        } else {
            Status_update.text = "Не удалось получить ответ от GitHub API.";
        }
    } catch (e) {
        Status_update.text = "Ошибка при проверке обновлений: " + e.toString();
    }
}

function openURL(url) {
    try {
        if ($.os.indexOf("Mac") !== -1) {
            system.callSystem('open "' + url + '"');
        } else if ($.os.indexOf("Windows") !== -1) {
            system.callSystem('cmd.exe /c start "" "' + url + '"');
        } else {
            alert("Unsupported operating system.");
        }
    } catch (e) {
        alert("Error opening URL: " + e.message);
    }
}

////SOLO BUTTONS FUNCTIONS///

function updateSoloForComp(comp) {
    var compId = comp.id;
    var soloShapes = soloShapesStates[compId] || false;
    var soloText = soloTextStates[compId] || false;
    var soloNull = soloNullStates[compId] || false;

    // Если ни один режим не активен – снимаем shy со всех слоёв
    if (!soloShapes && !soloText && !soloNull) {
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        // Для каждого слоя: если он соответствует выбранному типу – оставляем shy = false,
        // иначе устанавливаем shy = true (то есть он будет скрыт в панели, если Hide активен)
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            var show = false;
            if (soloShapes && layer.matchName === "ADBE Vector Layer") {
                show = true;
            }
            if (soloText && layer.property("Source Text") !== null) {
                show = true;
            }
            if (soloNull && layer.nullLayer === true) {
                show = true;
            }
            layer.shy = !show;
        }
    }
    // Включаем Hide в композиции, если он ещё не активен
    comp.hideShyLayers = true;
}

solo_anim_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    // Переключаем состояние soloAnim для данной композиции
    soloAnimStates[compId] = !soloAnimStates[compId];
    if (soloAnimStates[compId]) {
        setButtonIcon(solo_anim_button, solo_anim_select_imgString, "solo_anim_select");
    } else {
        setButtonIcon(solo_anim_button, solo_anim_imgString, "solo_anim");
    }
    updateSoloAnim(comp);
};

function updateSoloMask(comp) {
    var compId = comp.id;
    var soloMask = soloMaskStates[compId] || false;
    if (!soloMask) {
        // Режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        // Режим активен – показываем только слои, у которых есть хотя бы одна маска
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            var hasMask = false;
            try {
                // Проверяем наличие масок: свойство "ADBE Mask Parade" содержит маски, если они есть
                if (layer.property("ADBE Mask Parade") && layer.property("ADBE Mask Parade").numProperties > 0) {
                    hasMask = true;
                }
            } catch (e) {
                // Если произошла ошибка, оставляем hasMask = false
            }
            layer.shy = !hasMask;
        }
    }
    // Включаем режим Hide в композиции, чтобы скрытые (shy) слои не отображались в панели
    comp.hideShyLayers = true;
}

function updateSoloAnim(comp) {
    var compId = comp.id;
    var soloAnim = soloAnimStates[compId] || false;
    if (!soloAnim) {
        // Если режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        // Проверяем каждый слой: если в нём есть хотя бы одно свойство с более чем одним ключевым кадром – показываем его, иначе скрываем.
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            var show = hasMoreThanOneKey(layer);
            layer.shy = !show;
        }
    }
    // Включаем режим Hide, чтобы скрытые (shy) слои не отображались в панели
    comp.hideShyLayers = true;
}

// Рекурсивная функция для проверки, есть ли в свойстве (или группе свойств)
// хотя бы одно свойство с более чем одним ключевым кадром.
function hasMoreThanOneKey(prop) {
    // Если объект является свойством, проверяем количество ключевых кадров
    if (prop instanceof Property && prop.numKeys && prop.numKeys > 1) {
        return true;
    }
    // Если объект является группой свойств, рекурсивно проверяем все дочерние свойства
    if (prop.numProperties && prop.numProperties > 0) {
        for (var i = 1; i <= prop.numProperties; i++) {
            if (hasMoreThanOneKey(prop.property(i))) {
                return true;
            }
        }
    }
    return false;
}

solo_mask_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    // Переключаем состояние solo mask
    soloMaskStates[compId] = !soloMaskStates[compId];
    if (soloMaskStates[compId]) {
        // Предполагается, что у вас есть переменная solo_mask_select_imgString для иконки выбранного состояния
        setButtonIcon(solo_mask_button, solo_mask_select_imgString, "solo_mask_select");
    } else {
        setButtonIcon(solo_mask_button, solo_mask_imgString, "solo_mask");
    }
    updateSoloMask(comp);
};

solo_trackmatte_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloTrackMatteStates[compId] = !soloTrackMatteStates[compId];
    if (soloTrackMatteStates[compId]) {
        setButtonIcon(solo_trackmatte_button, trackmatte_select_imgString, "solo_trackmatte_select");
    } else {
        setButtonIcon(solo_trackmatte_button, trackmatte_imgString, "solo_trackmatte");
    }
    updateSoloTrackMatte(comp);
};

solo_shapes_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloShapesStates[compId] = !soloShapesStates[compId];
    if (soloShapesStates[compId]) {
        setButtonIcon(solo_shapes_button, shapes_select_imgString, "solo_shapes_select");
    } else {
        setButtonIcon(solo_shapes_button, shapes_imgString, "solo_shapes");
    }
    updateSoloForComp(comp);
};

solo_text_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloTextStates[compId] = !soloTextStates[compId];
    if (soloTextStates[compId]) {
        setButtonIcon(solo_text_button, text_select_imgString, "solo_text_select");
    } else {
        setButtonIcon(solo_text_button, text_imgString, "solo_text");
    }
    updateSoloForComp(comp);
};

solo_null_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloNullStates[compId] = !soloNullStates[compId];
    if (soloNullStates[compId]) {
        setButtonIcon(solo_null_button, null_object_select_imgString, "solo_null_select");
    } else {
        setButtonIcon(solo_null_button, null_objects_imgString, "solo_null");
    }
    updateSoloForComp(comp);
};

solo_adjust_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var compId = comp.id;
    soloAdjustStates[compId] = !soloAdjustStates[compId];
    if (soloAdjustStates[compId]) {
        setButtonIcon(solo_adjust_button, Adjust_select_imgString, "solo_adjust_select");
    } else {
        setButtonIcon(solo_adjust_button, Adjust_imgString, "solo_adjust");
    }
    updateSoloAdjust(comp);
};

function updateSoloAdjust(comp) {
    var compId = comp.id;
    var soloAdjust = soloAdjustStates[compId] || false;
    if (!soloAdjust) {
        // Если режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
    } else {
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            // Если слой является Adjustment Layer (adjustmentLayer == true), показываем его, иначе скрываем
            layer.shy = !layer.adjustmentLayer;
        }
    }
    // Включаем режим Hide, чтобы скрытые слои не отображались в панели
    comp.hideShyLayers = true;
}

function updateSoloTrackMatte(comp) {
    var compId = comp.id;
    var soloTM = soloTrackMatteStates[compId] || false;
    if (!soloTM) {
        // Если режим не активен – снимаем shy со всех слоёв
        for (var i = 1; i <= comp.numLayers; i++) {
            comp.layer(i).shy = false;
        }
        return;
    }
    // Если активен режим solo для track matte, для каждого слоя проверяем:
    // 1. Является ли слой основным, т.е. его trackMatteType != NO_TRACK_MATTE
    // 2. Либо является ли слой matte-слоем: если для слоя с индексом i+1 задан trackMatteType (то есть, слой i используется как маска)
    for (var i = 1; i <= comp.numLayers; i++) {
        var layer = comp.layer(i);
        var isMain = false;
        var isMatte = false;
        try {
            if (layer.trackMatteType && layer.trackMatteType !== TrackMatteType.NO_TRACK_MATTE) {
                isMain = true;
            }
        } catch (e) {
            // Если слой не поддерживает trackMatteType – пропускаем
        }
        if (i < comp.numLayers) {
            var nextLayer = comp.layer(i + 1);
            try {
                if (nextLayer.trackMatteType && nextLayer.trackMatteType !== TrackMatteType.NO_TRACK_MATTE) {
                    isMatte = true;
                }
            } catch (e) { }
        }
        // Если слой участвует в track matte, делаем его видимым (shy = false), иначе скрываем (shy = true)
        layer.shy = !(isMain || isMatte);
    }
    // Включаем Hide режим в композиции, чтобы скрытые (shy) слои не отображались в панели
    comp.hideShyLayers = true;
}

// Обновление состояния всех кнопок solo (в том числе solo_anim)
function refreshSoloButtons() {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) return;
    var compId = comp.id;
    if (soloShapesStates[compId]) {
        setButtonIcon(solo_shapes_button, shapes_select_imgString, "solo_shapes_select");
    } else {
        setButtonIcon(solo_shapes_button, shapes_imgString, "solo_shapes");
    }
    if (soloTextStates[compId]) {
        setButtonIcon(solo_text_button, text_select_imgString, "solo_text_select");
    } else {
        setButtonIcon(solo_text_button, text_imgString, "solo_text");
    }
    if (soloNullStates[compId]) {
        setButtonIcon(solo_null_button, null_object_select_imgString, "solo_null_select");
    } else {
        setButtonIcon(solo_null_button, null_objects_imgString, "solo_null");
    }
    if (soloTrackMatteStates[compId]) {
        setButtonIcon(solo_trackmatte_button, trackmatte_select_imgString, "solo_trackmatte_select");
    } else {
        setButtonIcon(solo_trackmatte_button, trackmatte_imgString, "solo_trackmatte");
    }
    if (soloAdjustStates[compId]) {
        setButtonIcon(solo_adjust_button, Adjust_select_imgString, "solo_adjust_select");
    } else {
        setButtonIcon(solo_adjust_button, Adjust_imgString, "solo_adjust");
    }
    // Пример добавления обновления solo_mask_button
    if (soloMaskStates[compId]) {
        setButtonIcon(solo_mask_button, solo_mask_select_imgString, "solo_mask_select");
    } else {
        setButtonIcon(solo_mask_button, solo_mask_imgString, "solo_mask");
    }
    // Обновляем состояние кнопки solo_anim
    if (soloAnimStates[compId]) {
        setButtonIcon(solo_anim_button, solo_anim_select_imgString, "solo_anim_select");
    } else {
        setButtonIcon(solo_anim_button, solo_anim_imgString, "solo_anim");
    }
    
}

// Привязываем обновление при активации панели
palette.onActivate = function () {
    app.scheduleTask("refreshSoloButtons()", 10, false);
};


///UNLINKS///

unlink_layer_button.onClick = function () {
    unlinkSelectedLayersFromGroup();
};

//
// ============= getDefaultLabelForLayer =============
//
function getDefaultLabelForLayer(layer) {
    if (layer.matchName === "ADBE Vector Layer") {
        return 11; // Teal
    }
    var isTextLayer = layer.property && layer.property("Source Text") !== null;
    if (isTextLayer) {
        return 1; // Text -> Red
    }
    if (
        layer instanceof AVLayer &&
        layer.source && layer.source.mainSource &&
        layer.source.mainSource.isSolid
    ) {
        return 1; // Solid -> Red
    }
    if (layer.nullLayer === true) {
        return 1; // Null -> Red
    }
    if (layer instanceof LightLayer) {
        return 6; // Light -> Peach
    }
    if (layer instanceof CameraLayer) {
        return 4; // Camera -> Pink
    }
    if (layer.adjustmentLayer === true) {
        return 5; // Adjustment -> Lavender
    }
    if (layer instanceof AVLayer && layer.source instanceof CompItem) {
        return 15; // Precomp -> Sandstone
    }
    return 1; // Default -> Green
}


// Функция "unlinkSelectedLayersFromGroup" (дублируется — для удобства)
function unlinkSelectedLayersFromGroup() {
    var layers = getSelectedLayersInActiveComp();
    if (!layers) return;

    app.beginUndoGroup("Unlink Layers from Groups");

    for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];

        // (1) Удаляем любой префикс в квадратных скобках + пробел
        var newName = layer.name.replace(/\[.*?\]\s*/g, "");
        layer.name = newName;

        // (2) Возвращаем родной цвет (label)
        layer.label = getDefaultLabelForLayer(layer);
    }

    app.endUndoGroup();
}


unlink_effects_button.onClick = function () {
    unlinkSelectedEffectsFromGroup();
};

// (5) Обработчик кнопки Unlink (Effects)
function unlinkSelectedEffectsFromGroup() {
    var layers = getSelectedLayersInActiveComp();
    if (!layers) return;

    app.beginUndoGroup("Unlink Effects from Groups");

    for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];
        var selectedProps = layer.selectedProperties;
        if (!selectedProps || selectedProps.length === 0) continue;

        for (var j = 0; j < selectedProps.length; j++) {
            var prop = selectedProps[j];
            if (
                prop.matchName !== "ADBE Effect Parade" &&
                prop.parentProperty &&
                prop.parentProperty.matchName === "ADBE Effect Parade"
            ) {
                var newName = prop.name.replace(/\[.*?\]\s*/g, "");
                prop.name = newName;
            }
        }
    }
    app.endUndoGroup();
}



//
// ============= ICONS / FUNCTIONS FOR BUTTONS =============
//

var labelColorIcons = {
    0: none_color_label_button_imgString,
    1: red_color_label_button_imgString,
    2: yellow_color_label_button_imgString,
    3: aqua_color_label_button_imgString,
    4: pink_color_label_button_imgString,
    5: lavender_color_label_button_imgString,
    6: peach_color_label_button_imgString,
    7: sea_color_label_button_imgString,
    8: blue_color_label_button_imgString,
    9: green_color_label_button_imgString,
    10: purple_color_label_button_imgString,
    11: orange_color_label_button_imgString,
    12: brown_color_label_button_imgString,
    13: fuchsia_color_label_button_imgString,
    14: cyan_color_label_button_imgString,
    15: sandstone_color_label_button_imgString,
    16: dark_green_color_label_button_imgString
};

function setButtonIcon(button, source, prefix) {

    // ── Если уже File ──────────────────────────────────────────────
    if (source instanceof File) {          // << ключевая проверка
        button.image = source;
        if (typeof button.notify === "function") button.notify("onDraw");
        return;
    }

    // ── Если пришла строка (как раньше) ───────────────────────────
    try {
        var decoded = decodeURIComponent(source);
        var tmp = new File(Folder.temp.fsName +
                           "/tmp_" + prefix + "_" + Date.now() + ".png");
        if (!tmp.open("w+b")) throw Error("Не открыть файл " + tmp.fsName);
        tmp.encoding = "BINARY";
        tmp.write(decoded);
        tmp.close();

        button.image = tmp;
        if (typeof button.notify === "function") button.notify("onDraw");
    } catch (e) {
        alert("Ошибка иконки: " + e.message);
    }
}

function setColorLabelButtonIcon(button, labelColorIndex) {
    var imgString = labelColorIcons[labelColorIndex] || default_color_label_button_imgString;
    setButtonIcon(button, imgString, "label_icon_" + labelColorIndex);
}

function setLabelButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "label_icon");
}

function setViewButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "view_icon");
}
function setGuideButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "guide_icon");
}
function setLockButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "lock_icon");
}
function setHideButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "hide_icon");
}
function setSoloButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "solo_icon");
}
function setViewButtonIconEffects(button, imgString) {
    setButtonIcon(button, imgString, "view_icon_effects");
}
function setSoloButtonIconEffects(button, imgString) {
    setButtonIcon(button, imgString, "solo_icon_effects");
}
function setCollapseTransformationsButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "collapse_transformations_icon");
}
function setMotionBlurButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "motion_blur");
}
function set3DLayerButtonIcon(button, imgString) {
    setButtonIcon(button, imgString, "3d_layer");
}

function trim(str) {
    return str.replace(/^\s+|\s+$/g, '');
}

var layerGroups = [];
var effectGroups = [];

// Сразу убираем временные дефолтные панели
tab_layers.remove(layer_group_default);
tab_effects.remove(effect_group_default);


/////////////

//
// ФУНКЦИЯ: получить все композиции проекта
//
function getAllCompositions() {
    var comps = [];
    for (var i = 1; i <= app.project.numItems; i++) {
        if (app.project.item(i) instanceof CompItem) {
            comps.push(app.project.item(i));
        }
    }
    return comps;
}

//
// ФУНКЦИЯ: получить выбранные слои в активной композиции
//
function getSelectedLayersInActiveComp() {
    var activeComp = app.project.activeItem;
    if (!(activeComp instanceof CompItem)) {
        alert("Please ensure that the active item is a composition.");
        return null;
    }

    var selectedLayers = [];
    for (var l = 1; l <= activeComp.numLayers; l++) {
        var layer = activeComp.layer(l);
        if (layer.selected) {
            selectedLayers.push(layer);
        }
    }

    if (selectedLayers.length === 0) {
        alert("Please select layers in the active composition.");
        return null;
    }

    return selectedLayers;
}

function isEnglishLetter(ch) {
    return /^[A-Za-z]$/.test(ch);
}

function containsOnlyEnglishLetters(str) {
    return /^[A-Za-z0-9_\s]+$/.test(str);
}

//
// generateUniquePrefix
//
function generateUniquePrefix(groupName) {
    var vowels = "aeiouyAEIOUY";
    var prefix = "";
    var trailingDigits = groupName.match(/\d+$/);
    trailingDigits = trailingDigits ? trailingDigits[0] : "";
    var nameWithoutDigits = groupName.replace(/\d+$/, '');
    var nameParts = nameWithoutDigits.split('_');

    for (var p = 0; p < nameParts.length; p++) {
        var part = nameParts[p];
        for (var i = 0; i < part.length; i++) {
            var ch = part.charAt(i);
            if (vowels.indexOf(ch) === -1 && isEnglishLetter(ch)) {
                prefix += ch;
            }
        }
    }

    if (trailingDigits !== "") {
        prefix = prefix.substring(0, 3).toUpperCase() + trailingDigits;
    } else {
        prefix = prefix.substring(0, 4).toUpperCase();
    }

    var basePrefix = prefix;
    var suffix = 1;
    while (isPrefixUsed(prefix)) {
        prefix = basePrefix + suffix;
        suffix++;
    }
    return prefix;
}

function isPrefixUsed(prefix) {
    for (var i = 0; i < layerGroups.length; i++) {
        if (layerGroups[i].prefix === prefix) {
            return true;
        }
    }
    for (var j = 0; j < effectGroups.length; j++) {
        if (effectGroups[j].prefix === prefix) {
            return true;
        }
    }
    return false;
}


function promptForAutoSave() {
    // Если нет ни одной группы (слоёв и эффектов)
    if ((layerGroups.length + effectGroups.length) === 0) {
        var response = confirm("This is the first group.\nDo you want to save the project settings now?");
        if (response) {
            // Вызов функции сохранения, которая откроет окно диалога сохранения
            saveData();
        }
    }
}

function autoSavePreset() {
    if (!autoSaveEnabled || presetFilePath === "") return;
    var file = new File(presetFilePath);
    if (file.open("w")) {
        try {
            var dataLines = [];
            dataLines.push("LayerGroups:");
            for (var i = 0; i < layerGroups.length; i++) {
                var lg = layerGroups[i];
                dataLines.push("GroupType: LayerGroup");
                dataLines.push("Name: " + lg.name);
                dataLines.push("Prefix: " + lg.prefix);
                dataLines.push("LabelColorIndex: " + lg.labelColorIndex);
                dataLines.push("DisableLabelColor: " + lg.disableLabelColor);
                dataLines.push("");
            }
            dataLines.push("EffectGroups:");
            for (var j = 0; j < effectGroups.length; j++) {
                var eg = effectGroups[j];
                dataLines.push("GroupType: EffectGroup");
                dataLines.push("Name: " + eg.name);
                dataLines.push("Prefix: " + eg.prefix);
                dataLines.push("");
            }
            var data = dataLines.join("\n");
            file.write(data);
            file.close();
            // Можно добавить console.log или $.writeln для отладки, но лучше тихо.
        } catch (e) {
            alert("Error auto-saving preset: " + e.toString());
        }
    }
}

//
// ===================== CREATE LAYER GROUP UI =====================
//
function createLayerGroupUI(groupName, prefix, labelColorIndex, disableLabelColor, guideCheckboxValue, lockCheckboxValue, disableVolumePresets) {

    // Если это первая группа (слоёв и эффектов)
    if ((layerGroups.length + effectGroups.length) === 0) {
        promptForAutoSave();
    }

    // Основная панель группы
    var groupPanel = tab_layers.add("panel", undefined, undefined, { name: "layer_group_" + prefix });
    groupPanel.text = groupName + " [" + prefix + "]";
    groupPanel.orientation = "row";
    groupPanel.alignChildren = ["center", "center"];
    groupPanel.spacing = 7;
    groupPanel.margins = [5, 13, 7, 10];
    groupPanel.alignment = ["fill", "top"];
    groupPanel.helpTip = "Layer Group panel for " + groupName;

    // --- (A) Кнопка метки цвета
    var color_label_icon = groupPanel.add("image", undefined, undefined, { name: "color_label_icon_" + prefix });
    color_label_icon.helpTip = "Color Label of this Group";
    color_label_icon.preferredSize.width = 8;
    color_label_icon.preferredSize.height = 28;
    setColorLabelButtonIcon(color_label_icon, labelColorIndex);

    // ---------------------
    // (B) КНОПКА VOLUME AUDIO (первая после цветовой)
    // ---------------------
    var volumeAudioButton = groupPanel.add("iconbutton", undefined, undefined, {
        name: "volume_audio_button_" + prefix,
        style: "toolbutton"
    });
    volumeAudioButton.helpTip = "Volume Audio (Off / Min / Normal / High)";
    volumeAudioButton.preferredSize.width = 28;
    volumeAudioButton.preferredSize.height = 28;

    // Иконка по умолчанию (normal)
    setButtonIcon(volumeAudioButton, volume_normal_imgString, "volume_normal");

    // Проверяем, есть ли аудио в группе
    var hasAudio = groupHasAudio(prefix);
    if (!hasAudio) {
        volumeAudioButton.enabled = false;
        volumeAudioButton.helpTip = "No audio layers found in this group.";
    }

    // Четыре состояния (или два, если пресеты отключены)
    var volumeStates = disableVolumePresets ? ["off", "on"] : ["off", "min", "normal", "high"];
    var currentVolumeIndex = disableVolumePresets ? 0 : 2; // По умолчанию "off" или "normal"

    // --- Volume Audio Button ---
volumeAudioButton.onClick = function () {
    var p = groupData.prefix;
    var states = groupData.volumeStates;
    // переключаем индекс
    groupData.currentVolumeIndex = (groupData.currentVolumeIndex + 1) % states.length;
    var nextState = states[groupData.currentVolumeIndex];

    // обновляем иконку
    switch (nextState) {
        case "off":
            setButtonIcon(volumeAudioButton, volume_off_imgString, "volume_off");
            break;
        case "on":
            setButtonIcon(volumeAudioButton, volume_on_imgString, "volume_on");
            break;
        case "min":
            setButtonIcon(volumeAudioButton, volume_min_imgString, "volume_min");
            break;
        case "normal":
            setButtonIcon(volumeAudioButton, volume_normal_imgString, "volume_normal");
            break;
        case "high":
            setButtonIcon(volumeAudioButton, volume_high_imgString, "volume_high");
            break;
    }

    app.beginUndoGroup("Volume " + nextState + " for group " + p);
    var comps = getAllCompositions();
    var foundAny = false;

    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + p + "]") === 0 && layer instanceof AVLayer && layer.hasAudio) {
                foundAny = true;
                switch (nextState) {
                    case "off":
                        layer.audioEnabled = false;
                        break;
                    case "on":
                        layer.audioEnabled = true;
                        break;
                    case "min":
                        layer.audioEnabled = true;
                        var grpMin = layer.property("ADBE Audio Group");
                        if (grpMin) {
                            var lvlMin = grpMin.property("ADBE Audio Levels");
                            if (lvlMin) {
                                var cur = lvlMin.value;
                                lvlMin.setValue([cur[0] - 11, cur[1] - 11]);
                            }
                        }
                        break;
                    case "normal":
                        layer.audioEnabled = true;
                        var grpNorm = layer.property("ADBE Audio Group");
                        if (grpNorm) {
                            var lvlNorm = grpNorm.property("ADBE Audio Levels");
                            if (lvlNorm) {
                                lvlNorm.setValue([0, 0]);
                            }
                        }
                        break;
                    case "high":
                        layer.audioEnabled = true;
                        var grpHigh = layer.property("ADBE Audio Group");
                        if (grpHigh) {
                            var lvlHigh = grpHigh.property("ADBE Audio Levels");
                            if (lvlHigh) {
                                lvlHigh.setValue([3, 3]);
                            }
                        }
                        break;
                }
            }
        }
    }

    if (!foundAny) {
        alert("No audio layers found for group [" + p + "]");
    }
    app.endUndoGroup();
};

    // --- (C) Кнопка View
    var view_button = groupPanel.add("iconbutton", undefined, undefined, { name: "view_button_" + prefix, style: "toolbutton" });
    view_button.helpTip = "Toggle visibility of layers in this group across all compositions";
    view_button.preferredSize.width = 28;
    view_button.preferredSize.height = 28;

    var viewState = true;
    setViewButtonIcon(view_button, view_button_on_imgString);

    view_button.onClick = function () {
        var p = groupData.prefix;               // всегда берём из groupData
        var n = groupData.name;                 // если нужно сообщение
        var v = groupData.viewState = !groupData.viewState;
        setViewButtonIcon(view_button, v ? view_button_on_imgString : view_button_off_imgString);
    
        app.beginUndoGroup("Toggle View for " + n);
        var comps = getAllCompositions(), found = false;
        for (var c = 0; c < comps.length; c++) {
            for (var l = 1; l <= comps[c].numLayers; l++) {
                var layer = comps[c].layer(l);
                if (layer.name.indexOf("[" + p + "]") === 0) {
                    layer.enabled = v;
                    found = true;
                }
            }
        }
        if (!found) alert("Layers for group '" + n + "' not found.");
        app.endUndoGroup();
    };

    // --- (D) Кнопка Solo
    var solo_button = groupPanel.add("iconbutton", undefined, undefined, { name: "solo_button_" + prefix, style: "toolbutton" });
    solo_button.helpTip = "Solo this group: show only layers in this group and hide all others";
    solo_button.preferredSize.width = 28;
    solo_button.preferredSize.height = 28;

    var soloState = false;
    setSoloButtonIcon(solo_button, solo_off_button_imgString);
    
    solo_button.onClick = function () {
        var p = groupData.prefix;
        var n = groupData.name;
    
        // toggle solo
        groupData.soloState = !groupData.soloState;
        setSoloButtonIcon(
          solo_button,
          groupData.soloState ? solo_on_button_imgString : solo_off_button_imgString
        );
    
        app.beginUndoGroup((groupData.soloState ? "Solo On: " : "Solo Off: ") + n);
    
        var comps = getAllCompositions();
    
        if (groupData.soloState) {
            // — SOLO ON — store current states, then hide all non-group layers
            var pre = [];
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    var isThis = layer.name.indexOf("[" + p + "]") === 0;
                    // save original
                    pre.push({
                      layer:    layer,
                      enabled:  layer.enabled,
                      shy:      layer.shy
                    });
                    if (isThis) {
                      layer.enabled = true;
                      layer.shy     = false;
                    } else {
                      layer.enabled = false;
                      layer.shy     = true;
                    }
                }
            }
            groupData.preSoloStates = pre;
    
        } else {
            // — SOLO OFF — restore all saved states
            var pre = groupData.preSoloStates || [];
            for (var i = 0; i < pre.length; i++) {
                var st = pre[i];
                if (st.layer) {
                    st.layer.enabled = st.enabled;
                    st.layer.shy     = st.shy;
                }
            }
            groupData.preSoloStates = null;
        }
    
        app.endUndoGroup();
    };

    // --- (E) Кнопка Hide
    var hide_button = groupPanel.add("iconbutton", undefined, undefined, { name: "hide_button_" + prefix, style: "toolbutton" });
    hide_button.helpTip = "Toggle hide (Shy) for layers in this group without disabling them";
    hide_button.preferredSize.width = 28;
    hide_button.preferredSize.height = 28;

    var hideState = false;
    setHideButtonIcon(hide_button, hide_off_button_imgString);

    // --- Hide Button ---
hide_button.onClick = function () {
    var p = groupData.prefix;
    var n = groupData.name;

    // переключаем состояние
    groupData.hideState = !groupData.hideState;
    setHideButtonIcon(hide_button,
        groupData.hideState ? hide_on_button_imgString : hide_off_button_imgString
    );

    app.beginUndoGroup("Toggle Hide for " + n);

    var comps = getAllCompositions();
    var found = false;

    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        var inThisComp = false;

        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + p + "]") === 0) {
                layer.shy = groupData.hideState;
                found = true;
                inThisComp = true;
            }
        }
        // если хоть один слой есть — применяем флаг shy ко всей композиции
        if (inThisComp) {
            comp.hideShyLayers = groupData.hideState;
        }
    }

    if (!found) {
        alert("Layers for group '" + n + "' not found in any composition.");
    }

    app.endUndoGroup();
};

    // --- Разделитель
    var divider1 = groupPanel.add("panel", undefined, undefined, { name: "divider1" });
    divider1.alignment = "fill";
    divider1.helpTip = "Divider for layout";
    divider1.graphics.backgroundColor = divider1.graphics.newBrush(divider1.graphics.BrushType.SOLID_COLOR, [0.5, 0.5, 0.5, 1]);
    divider1.preferredSize.height = 1;

    // --- (F) Кнопка Add Layer
    var add_layer_button = groupPanel.add("iconbutton", undefined, File.decode(add_layer_button_imgString), {
        name: "add_layer_button_" + prefix,
        style: "toolbutton"
    });
    add_layer_button.helpTip = "Add selected layers to this group across all compositions";
    add_layer_button.text = "";
    add_layer_button.preferredSize.width = 30;
    add_layer_button.preferredSize.height = 30;

    add_layer_button.onClick = function() {
        var p = groupData.prefix;
        app.beginUndoGroup("Add Layers to " + groupData.name);
        var layers = getSelectedLayersInActiveComp();
        // …
        for (var i = 0; i < layers.length; i++) {
            var layer = layers[i];
            var base = layer.name.replace(/^\[.*?\]\s*/, "");
            layer.name = "[" + p + "] " + base;
            if (!groupData.disableLabelColor) layer.label = groupData.labelColorIndex;
            if (groupData.guideCheckbox.value) layer.guideLayer = true;
            if (groupData.lockCheckbox.value) layer.locked = true;
            layer.enabled = groupData.viewState;
        }
        app.endUndoGroup();
    
        // обновляем доступность аудио-кнопки по новому префиксу
        var hasAudio = groupHasAudio(p);
        volumeAudioButton.enabled = hasAudio;
        volumeAudioButton.helpTip = hasAudio
            ? "Volume Audio (Off / Min / Normal / High)"
            : "No audio layers found in this group.";
    };

    // --- (G) Кнопка Edit
    var edit_group_layers_button = groupPanel.add("iconbutton", undefined, File.decode(edit_group_layers_button_imgString), { name: "edit_group_layers_button_" + prefix, style: "toolbutton" });
    edit_group_layers_button.helpTip = "Rename and settings this Group";
    edit_group_layers_button.preferredSize.width = 30;
    edit_group_layers_button.preferredSize.height = 30;


    // Setting layer group////

    edit_group_layers_button.onClick = function () {
        var dialog = new Window("dialog", "Settings Layer Group: " + groupName);
        dialog.orientation = "column";
        dialog.alignChildren = ["fill", "top"];
        dialog.spacing = 10;
        dialog.margins = 10;

        // Основной контейнер с двумя колонками
        var mainGroup = dialog.add("group");
        mainGroup.orientation = "row";
        mainGroup.alignChildren = ["fill", "top"];
        mainGroup.spacing = 10;

        // Левая колонка: Name & Prefix, Color Label, Audio Control
        var leftColumn = mainGroup.add("group");
        leftColumn.orientation = "column";
        leftColumn.alignChildren = ["fill", "top"];
        leftColumn.spacing = 10;

        // --- Панель: Name and Prefix ---
        var namePrefixPanel = leftColumn.add("panel", undefined, "Name and Prefix");
        namePrefixPanel.orientation = "column";
        namePrefixPanel.alignChildren = ["fill", "top"];
        namePrefixPanel.margins = [10, 15, 10, 10];

        var groupNameGroup = namePrefixPanel.add("group");
        groupNameGroup.add("statictext", undefined, "Group Name:");
        var groupNameInput = groupNameGroup.add("edittext", undefined, groupData.name);
        groupNameInput.characters = 15;

        var prefixGroup = namePrefixPanel.add("group");
        prefixGroup.add("statictext", undefined, "Prefix:");
        var prefixInput = prefixGroup.add("edittext", undefined, groupData.prefix);
        prefixInput.characters = 5;

        var autoPrefixGroup = namePrefixPanel.add("group");
        autoPrefixGroup.orientation = "row";
        autoPrefixGroup.alignChildren = ["left", "center"];
        autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
        var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
        autoPrefixCheckbox.value = false;
        prefixInput.enabled = !autoPrefixCheckbox.value;

        autoPrefixCheckbox.onClick = function () {
            prefixInput.enabled = !autoPrefixCheckbox.value;
            if (autoPrefixCheckbox.value) {
                if (containsOnlyEnglishLetters(groupNameInput.text)) {
                    prefixInput.text = generateUniquePrefix(groupNameInput.text);
                } else {
                    autoPrefixCheckbox.value = false;
                    prefixInput.enabled = true;
                    alert("Auto-prefix generation is disabled for group names containing non-English characters or special symbols.");
                }
            }
        };

        groupNameInput.onChanging = function () {
            if (autoPrefixCheckbox.value) {
                if (containsOnlyEnglishLetters(groupNameInput.text)) {
                    prefixInput.text = generateUniquePrefix(groupNameInput.text);
                } else {
                    autoPrefixCheckbox.value = false;
                    prefixInput.enabled = true;
                    prefixInput.text = "";
                    alert("Auto-prefix generation is disabled for group names containing non-English characters or special symbols.");
                }
            }
        };

        // --- Панель: Color Label ---
        var colorLabelPanel = leftColumn.add("panel", undefined, "Color Label");
        colorLabelPanel.orientation = "column";
        colorLabelPanel.alignChildren = ["fill", "top"];
        colorLabelPanel.margins = [10, 15, 10, 10];

        var labelColorGroup = colorLabelPanel.add("group");
        labelColorGroup.add("statictext", undefined, "Label Color:");
        var labelColorDropdown = labelColorGroup.add("dropdownlist", undefined, [
            "None", "Red", "Yellow", "Aqua", "Pink", "Lavender", "Peach", "Sea Foam",
            "Blue", "Green", "Purple", "Orange", "Brown", "Fuchsia", "Cyan", "Sandstone"
        ]);
        labelColorDropdown.selection = groupData.labelColorIndex;
        labelColorDropdown.helpTip = "Select a label color for layers in this group";

        var disableLabelColorCheckbox = colorLabelPanel.add("checkbox", undefined, "Disable label color assignment");
        disableLabelColorCheckbox.value = groupData.disableLabelColor;
        labelColorDropdown.preferredSize.width = 130; // расширяем выпадающий список
        disableLabelColorCheckbox.helpTip = "Disable automatic label color assignment to layers in this group";
        labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
        disableLabelColorCheckbox.onClick = function () {
            labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
        };

        // --- Панель: Audio Control ---
        var audioControlPanel = leftColumn.add("panel", undefined, "Audio Control");
        audioControlPanel.orientation = "column";
        audioControlPanel.alignChildren = ["fill", "top"];
        audioControlPanel.margins = [10, 15, 10, 10];

        //Options
        var OptionslayerPanel = leftColumn.add("panel", undefined, "Options");
        OptionslayerPanel.orientation = "column";
        OptionslayerPanel.alignChildren = ["fill", "top"];
        OptionslayerPanel.margins = [10, 15, 10, 10];

        // --- Кнопка Guide Layers (в Parameters) ---
        var guideLayerButton = OptionslayerPanel.add("iconbutton", undefined, undefined, { name: "guide_layer_button", style: "toolbutton" });
        guideLayerButton.text = "Guide Layer Mode";
        guideLayerButton.preferredSize.width = 150;
        guideLayerButton.preferredSize.height = 35;
        guideLayerButton.helpTip = "Toggle Guide Layer for this group";
        setGuideButtonIcon(guideLayerButton, groupData.guideCheckbox.value ? guide_on_imgString : guide_off_imgString);
        guideLayerButton.onClick = function () {
            groupData.guideCheckbox.value = !groupData.guideCheckbox.value;
            setGuideButtonIcon(guideLayerButton, groupData.guideCheckbox.value ? guide_on_imgString : guide_off_imgString);
        };

        var audioControlGroup = audioControlPanel.add("group");
        audioControlGroup.orientation = "row";
        audioControlGroup.alignChildren = ["left", "center"];
        audioControlGroup.add("statictext", undefined, "Disable Volume Presets:");
        var disableVolumePresetsCheckboxEdit = audioControlGroup.add("checkbox", undefined, "");
        disableVolumePresetsCheckboxEdit.value = groupData.disableVolumePresets || false;

        // Правая колонка: Group Tools, Parameters
        var rightColumn = mainGroup.add("group");
        rightColumn.orientation = "column";
        rightColumn.alignChildren = ["fill", "top"];
        rightColumn.spacing = 10;
        rightColumn.preferredSize.width = 250; // ← Увеличиваем ширину правой панели

        // --- Панель: Group Tools ---
        var toolsgroupPanel = rightColumn.add("panel", undefined, "Group Tools");
        toolsgroupPanel.orientation = "column";
        toolsgroupPanel.alignChildren = ["fill", "top"];
        toolsgroupPanel.margins = [10, 15, 10, 10];

        // --- NEW: Кнопка Group Viewer (с иконкой)
        var groupViewerButton = toolsgroupPanel.add(
            "iconbutton",
            undefined,
            File.decode(group_viewer_imgString),
            { name: "groupViewerButton", style: "toolbutton" }
        );
        groupViewerButton.helpTip = "Open the Group Viewer for this group";
        groupViewerButton.text = "Group Viewer";
        groupViewerButton.preferredSize = [150, 30];
        groupViewerButton.onClick = function () {
            showGroupCompositions(groupData);
        };

        // Pre-compose Tool (с иконкой)
        var precomposeButton = toolsgroupPanel.add(
            "iconbutton",
            undefined,
            File.decode(pre_comps_imgString),
            { name: "precomposeButton", style: "toolbutton" }
        );
        precomposeButton.text = "Pre-compose";
        precomposeButton.helpTip = "Pre-compose selected layers for this group";
        precomposeButton.preferredSize = [150, 30];
        // добавьте precomposeButton.onClick по вашей логике

        // Rename Layers Tool (с иконкой)
        var renamelayersButton = toolsgroupPanel.add(
            "iconbutton",
            undefined,
            File.decode(rename_imgString),
            { name: "renamelayersButton", style: "toolbutton" }
        );
        renamelayersButton.text = "Rename Layers";
        renamelayersButton.helpTip = "Rename layers with this group";
        renamelayersButton.preferredSize = [150, 30];


        // --- Rename Layers Tool ---
renamelayersButton.onClick = function () {
    var cp = groupData.prefix;
    var cn = groupData.name;

    // Открываем диалог переименования
    var renameDialog = new Window("dialog", "Rename Layers In Group: " + cn);
    renameDialog.orientation = "column";
    renameDialog.alignChildren = ["fill","top"];
    renameDialog.margins = 16;

    // Поля ввода
    var fields = renameDialog.add("group");
    fields.orientation = "row";
    fields.add("statictext", undefined, "Prefix:");
    var prefixField = fields.add("edittext", undefined, "[" + cp + "]");
    prefixField.enabled = false;
    fields.add("statictext", undefined, "New Name:");
    var newNameField = fields.add("edittext", undefined, "");
    newNameField.characters = 20;

    var useGroupName = renameDialog.add("checkbox", undefined, "Use Group Name for Rename");
    useGroupName.onClick = function() {
        newNameField.text = useGroupName.value ? cn : "";
    };

    // Кнопки
    var btns = renameDialog.add("group");
    btns.alignment = "right";
    var okBtn     = btns.add("button", undefined, "OK");
    var cancelBtn = btns.add("button", undefined, "Cancel");

    okBtn.onClick = function () {
        var newName = newNameField.text;
        if (!newName) {
            alert("Please enter a new name.");
            return;
        }
        app.beginUndoGroup("Rename Layers In Group " + cn);
        var comps = getAllCompositions();
        for (var i = 0; i < comps.length; i++) {
            var comp = comps[i];
            for (var j = 1; j <= comp.numLayers; j++) {
                var layer = comp.layer(j);
                if (layer.name.indexOf("[" + cp + "]") === 0) {
                    layer.name = "[" + cp + "] " + newName;
                }
            }
        }
        app.endUndoGroup();
        renameDialog.close();
    };

    cancelBtn.onClick = function () {
        renameDialog.close();
    };

    renameDialog.center();
    renameDialog.show();
};

        // --- Панель: Parameters ---
        var parametersPanel = rightColumn.add("panel", undefined, "Parameters");
        parametersPanel.orientation = "column";
        parametersPanel.alignChildren = ["fill", "top"];
        parametersPanel.margins = [10, 19, 10, 17];

        // Создаём Pre-compose окно (диалог), вызываемый по кнопке precomposeButton
        var precompose_window = new Window("dialog");
        precompose_window.text = "Pre-compose Tool Group";
        precompose_window.orientation = "column";
        precompose_window.alignChildren = ["left", "top"];
        precompose_window.spacing = 10;
        precompose_window.margins = 16;

        var About = precompose_window.add("statictext", undefined, undefined, { name: "About" });
        About.text = "Pre-compose works only on active composition, not on all at the same time";
        About.graphics.foregroundColor = About.graphics.newPen(About.graphics.PenType.SOLID_COLOR, [0.5569, 0.7333, 0.9412], 1);
        About.justify = "center";
        About.alignment = ["center", "top"];

        var group1 = precompose_window.add("group");
        group1.orientation = "row";
        group1.alignChildren = ["left", "center"];
        group1.spacing = 10;
        group1.margins = 0;

        var name_layers_text = group1.add("statictext", undefined, "Name Layers:");
        // Поле для префикса (оставляем, хотя оно задизейблено)
        var prefixField = group1.add("edittext");
        prefixField.enabled = false;
        prefixField.text = prefix;
        prefixField.preferredSize.width = 50;

        // Поле ввода названия прекомпозиции
        var name_pre_comps = group1.add("edittext");
        name_pre_comps.text = "Pre-Compose: " + groupName;
        name_pre_comps.preferredSize.width = 255;

        // Выпадающий список – доступен и содержит два варианта: None и Numbers
        var Add_Prefix_array = ["None", "Numbers"];
        var Add_Prefix = group1.add("dropdownlist", undefined, undefined, { items: Add_Prefix_array });
        Add_Prefix.enabled = true;
        Add_Prefix.selection = 0;

        // Чекбокс для применения collapse transformations
        var collapseCheckbox = precompose_window.add("checkbox", undefined, "Apply Collapse Transformations");
        collapseCheckbox.value = false;

        var select_group = precompose_window.add("group");
        select_group.orientation = "column";
        select_group.alignChildren = ["left", "top"];
        select_group.spacing = 10;
        select_group.margins = 0;

        var Leave_all = select_group.add("radiobutton");
        Leave_all.text = "Leave all attributes in composition (Safe Group)";

        var radiobutton1 = select_group.add("radiobutton");
        radiobutton1.text = "Move all attributes into new composition (Safe Group)";
        radiobutton1.value = true;

        var apply_cancel_group = precompose_window.add("group");
        apply_cancel_group.orientation = "row";
        apply_cancel_group.alignChildren = ["right", "center"];
        apply_cancel_group.spacing = 10;
        apply_cancel_group.margins = 0;
        apply_cancel_group.alignment = ["right", "top"];

        var cancel_button = apply_cancel_group.add("button", undefined, "Cancel");
        var apply_button = apply_cancel_group.add("button", undefined, "Apply");

        cancel_button.onClick = function () {
            precompose_window.close();
        };

        apply_button.onClick = function () {
            var cp        = groupData.prefix;
            var userName  = name_pre_comps.text;
            var useNums   = Add_Prefix.selection.text === "Numbers";
            var collapse  = collapseCheckbox.value;
            var moveAll   = radiobutton1.value; // если true — Move all attributes
            var activeComp= app.project.activeItem;
        
            if (!(activeComp instanceof CompItem)) {
                alert("Open a composition first!");
                return;
            }
        
            // Собираем индексы всех слоёв с нашим префиксом
            var indices = [];
            for (var i = 1; i <= activeComp.numLayers; i++) {
                var ly = activeComp.layer(i);
                if (ly.name.indexOf("[" + cp + "]") === 0) {
                    indices.push(ly.index);
                }
            }
            if (indices.length === 0) {
                alert("No prefixed layers [" + cp + "] found.");
                return;
            }
        
            // Сортируем по убыванию, чтобы индексы не сбивались
            indices.sort(function(a,b){return b - a;});
        
            app.beginUndoGroup("Pre-compose Group " + groupData.name);
            var counter = 1;
            for (var k = 0; k < indices.length; k++) {
                var idx   = indices[k];
                var layer = activeComp.layer(idx);
                // Формируем имя прекомпозиции
                var numPrefix = useNums ? ((counter<10?"0"+counter:counter) + "_") : "";
                var preName   = "[" + cp + "] " + userName + numPrefix;
        
                // Сохраняем оригинальный parent-null, если есть
                var origParent = (layer.parent && layer.parent.nullLayer) ? layer.parent : null;
        
                // Прекомпозиция
                activeComp.layers.precompose([idx], preName, moveAll);
                var newLayer = activeComp.layer(idx);
                if (collapse) newLayer.collapseTransformation = true;
                if (origParent) newLayer.parent = origParent;
        
                if (useNums) counter++;
            }
            app.endUndoGroup();
            precompose_window.close();
        };

            // --- Pre-compose Tool ---
        precomposeButton.onClick = function () {
            if (precompose_window.visible) {
                precompose_window.bringToFront();
            } else {
                precompose_window.show();
            }
        };

        // --- Кнопка Lock Layers (в Parameters) ---
        var lockLayerButton = parametersPanel.add("iconbutton", undefined, undefined, { name: "lock_layer_button", style: "toolbutton" });
        lockLayerButton.text = "Lock Layers";
        lockLayerButton.preferredSize.width = 150;
        lockLayerButton.preferredSize.height = 35;
        lockLayerButton.helpTip = "Toggle Lock Layers for this group";
        setLockButtonIcon(lockLayerButton, groupData.lockCheckbox.value ? lock_on_imgString : lock_off_imgString);
        lockLayerButton.onClick = function () {
            groupData.lockCheckbox.value = !groupData.lockCheckbox.value;
            setLockButtonIcon(lockLayerButton, groupData.lockCheckbox.value ? lock_on_imgString : lock_off_imgString);

            app.beginUndoGroup("Toggle Lock Layers for " + groupData.name);
            var comps = getAllCompositions();
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    if (layer.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        layer.locked = groupData.lockCheckbox.value;
                    }
                }
            }
            app.endUndoGroup();
        };

        // --- Кнопка Collapse Transformations (в Parameters) ---
        var collapse_transformationButton = parametersPanel.add("iconbutton", undefined, undefined, { name: "collapse_transformationButton", style: "toolbutton" });
        collapse_transformationButton.text = "Collapse Transformations";
        collapse_transformationButton.preferredSize.width = 150;
        collapse_transformationButton.preferredSize.height = 35;
        collapse_transformationButton.helpTip = "Toggle Collapse Transformations for all layers in this group";

        if (groupData.collapseTransformationsState) {
            setCollapseTransformationsButtonIcon(collapse_transformationButton, collapse_transformation_on_imgString);
        } else {
            setCollapseTransformationsButtonIcon(collapse_transformationButton, collapse_transformation_off_imgString);
        }

        // --- Collapse Transformations Button ---
    collapse_transformationButton.onClick = function () {
    var p = groupData.prefix;
    var n = groupData.name;

    // переключаем состояние в данных группы
    groupData.collapseTransformationsState = !groupData.collapseTransformationsState;
    // обновляем иконку
    if (groupData.collapseTransformationsState) {
        setCollapseTransformationsButtonIcon(collapse_transformationButton, collapse_transformation_on_imgString);
    } else {
        setCollapseTransformationsButtonIcon(collapse_transformationButton, collapse_transformation_off_imgString);
    }

    app.beginUndoGroup("Toggle Collapse Transformations for " + n);

    var comps = getAllCompositions();
    var foundAny = false;
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + p + "]") === 0) {
                if (layer instanceof AVLayer) {
                    layer.collapseTransformation = groupData.collapseTransformationsState;
                    foundAny = true;
                }
            }
        }
    }

    if (!foundAny) {
        alert("Layers for group '" + n + "' not found in any composition.");
    }

    app.endUndoGroup();
};

// --- Motion Blur ---
var motionBlurButton = parametersPanel.add("iconbutton", undefined, undefined, { name: "motionBlurButton", style: "toolbutton" });
motionBlurButton.text = "Motion Blur";
motionBlurButton.preferredSize.width  = 150;
motionBlurButton.preferredSize.height = 35;
motionBlurButton.helpTip = "Toggle Motion Blur for all layers in this group";

// иконка по состоянию
if (groupData.motionBlurState) {
    setMotionBlurButtonIcon(motionBlurButton, motion_on_imgString);
} else {
    setMotionBlurButtonIcon(motionBlurButton, motion_off_imgString);
}

motionBlurButton.onClick = function () {
    var prefix = groupData.prefix, name = groupData.name;
    groupData.motionBlurState = !groupData.motionBlurState;
    setMotionBlurButtonIcon(
        motionBlurButton,
        groupData.motionBlurState ? motion_on_imgString : motion_off_imgString
    );

    app.beginUndoGroup("Toggle Motion Blur for " + name);
    var comps = getAllCompositions();
    for (var i = 0; i < comps.length; i++) {
        var comp = comps[i];
        for (var j = 1; j <= comp.numLayers; j++) {
            var layer = comp.layer(j);
            if (layer instanceof AVLayer && layer.name.indexOf("[" + prefix + "]") === 0) {
                layer.motionBlur = groupData.motionBlurState;
            }
        }
    }
    app.endUndoGroup();
};

// --- 3D Layer ---
var layer3DButton = parametersPanel.add("iconbutton", undefined, undefined, { name: "layer3DButton", style: "toolbutton" });
layer3DButton.text = "3D Layer";
layer3DButton.preferredSize.width  = 150;
layer3DButton.preferredSize.height = 35;
layer3DButton.helpTip = "Toggle 3D Layer for all layers in this group";

// иконка по состоянию
if (groupData.threeDState) {
    set3DLayerButtonIcon(layer3DButton, layer_3d_on_imgString);
} else {
    set3DLayerButtonIcon(layer3DButton, layer_3d_off_imgString);
}

layer3DButton.onClick = function () {
    var prefix = groupData.prefix, name = groupData.name;
    groupData.threeDState = !groupData.threeDState;
    set3DLayerButtonIcon(
        layer3DButton,
        groupData.threeDState ? layer_3d_on_imgString : layer_3d_off_imgString
    );

    app.beginUndoGroup("Toggle 3D Layer for " + name);
    var comps = getAllCompositions();
    for (var i = 0; i < comps.length; i++) {
        var comp = comps[i];
        for (var j = 1; j <= comp.numLayers; j++) {
            var layer = comp.layer(j);
            if (layer instanceof AVLayer && layer.name.indexOf("[" + prefix + "]") === 0) {
                layer.threeDLayer = groupData.threeDState;
            }
        }
    }
    app.endUndoGroup();
};


        //
        // ——— Функция удаления группы ———
        //
        function performDeleteGroup() {
            app.beginUndoGroup("Delete Layer Group " + groupData.name);
            var layersFound = false;
            var comps = getAllCompositions();

            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = comp.numLayers; l >= 1; l--) {
                    var layer = comp.layer(l);
                    if (layer.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        // Снимаем префикс
                        layer.name = layer.name.replace("[" + groupData.prefix + "] ", "");
                        // Восстанавливаем оригинальный цвет
                        layer.label = getDefaultLabelForLayer(layer);
                        layersFound = true;
                    }
                }
            }

            if (!layersFound) {
                alert("Layers for group '" + groupData.name + "' not found in any composition.");
            }

            // Удаляем панель из интерфейса
            tab_layers.remove(groupData.panel);
            for (var j = 0; j < layerGroups.length; j++) {
                if (layerGroups[j].panel === groupData.panel) {
                    layerGroups.splice(j, 1);
                    break;
                }
            }
            palette.layout.layout(true);
            palette.layout.resize();
            if (autoSaveEnabled) autoSavePreset();

            app.endUndoGroup();
        }

        //
        // ——— Кнопки Delete / OK / Cancel внизу окна ———
        //
        var buttonsGroup = dialog.add("group");
        buttonsGroup.alignment = "center";

        // Кнопка Удалить
        var deleteButton = buttonsGroup.add("button", undefined, "Delete this Group");
        deleteButton.helpTip = "Delete this Layer Group";
        deleteButton.onClick = function () {
            if (!confirm("Are you sure you want to delete this group?")) {
                return;
            }
            performDeleteGroup();
            cancelButton.onClick();
        };

        // Кнопка OK — сохраняет изменения
        var okButton = buttonsGroup.add("button", undefined, "OK");
        okButton.helpTip = "Confirm changes to the Layer Group";
        okButton.onClick = function () {
            // … (ваша существующая логика OK: проверка имени, префикса, перекраска, сохранение в groupData, autoSavePreset) …
            dialog.close();
        };

        // Кнопка Cancel — закрывает без сохранения
        var cancelButton = buttonsGroup.add("button", undefined, "Cancel");
        cancelButton.helpTip = "Cancel editing the Layer Group";
        cancelButton.onClick = function () {
            dialog.close();
        };

        okButton.onClick = function () {
            var newGroupName = trim(groupNameInput.text);
            var newPrefix = trim(prefixInput.text);
            var newLabelColorIndex = labelColorDropdown.selection ? labelColorDropdown.selection.index : 0;
            var newDisableLabelColor = disableLabelColorCheckbox.value;
            var newGuideLayer = groupData.guideCheckbox.value;
            var newLockLayers = groupData.lockCheckbox.value;

            if (newGroupName === "") {
                alert("Please enter a group name.");
                return;
            }
            if (newPrefix === "") {
                if (autoPrefixCheckbox.value) {
                    newPrefix = generateUniquePrefix(newGroupName);
                    prefixInput.text = newPrefix;
                } else {
                    alert("Please enter a prefix.");
                    return;
                }
            }

            app.beginUndoGroup("Edit Layer Group " + groupData.name);

            var comps = getAllCompositions();
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    if (layer.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        var baseName = layer.name.replace("[" + groupData.prefix + "] ", "");
                        layer.name = "[" + newPrefix + "] " + baseName;
                        if (!newDisableLabelColor) {
                            layer.label = newLabelColorIndex;
                        }
                        layer.guideLayer = newGuideLayer;
                        layer.locked = newLockLayers;
                    }
                }
            }

            // Обновляем объект groupData
            groupData.name = newGroupName;
            groupData.prefix = newPrefix;
            groupData.labelColorIndex = newLabelColorIndex;
            groupData.disableLabelColor = newDisableLabelColor;
            groupData.guideCheckbox.value = newGuideLayer;
            groupData.lockCheckbox.value = newLockLayers;
            groupData.disableVolumePresets = disableVolumePresetsCheckboxEdit.value;
            groupData.volumeStates = groupData.disableVolumePresets ? ["off", "on"] : ["off", "min", "normal", "high"];
            groupData.currentVolumeIndex = groupData.disableVolumePresets ? 0 : 2;

            groupPanel.text = newGroupName + " [" + newPrefix + "]";
            groupPanel.name = "layer_group_" + newPrefix;
            setColorLabelButtonIcon(groupData.colorLabelButton, newLabelColorIndex);
            setGuideButtonIcon(guideLayerButton, newGuideLayer ? guide_on_imgString : guide_off_imgString);
            setLockButtonIcon(lockLayerButton, newLockLayers ? lock_on_imgString : lock_off_imgString);

            palette.layout.layout(true);
            palette.layout.resize();
            if (autoSaveEnabled) {
                autoSavePreset();
            }

            app.endUndoGroup();
            dialog.close();
        };

        cancelButton.onClick = function () {
            dialog.close();
        };

        dialog.center();
        dialog.show();
    };

    // Общий объект данных группы
    var groupData = {
        name: groupName,
        prefix: prefix,
        panel: groupPanel,
        colorLabelButton: color_label_icon,
        volumeAudioButton: volumeAudioButton, // Новое
        // Сохраняем состояние переключения аудио:
        volumeStates: disableVolumePresets ? ["off", "on"] : ["off", "min", "normal", "high"],
        currentVolumeIndex: disableVolumePresets ? 0 : 2,
        viewButton: view_button,
        viewState: viewState,
        soloButton: solo_button,
        soloState: soloState,
        hideButton: hide_button,
        hideState: hideState,
        addButton: add_layer_button,
        editButton: edit_group_layers_button,
        labelColorIndex: labelColorIndex,
        disableLabelColor: disableLabelColor,
        guideCheckbox: { value: guideCheckboxValue },
        lockCheckbox: { value: lockCheckboxValue },
        collapseTransformationsState: false,
        motionBlurState:            false,  // ← новое
        threeDState:                false,  // ← новое
        disableVolumePresets: disableVolumePresets
    };

    layerGroups.push(groupData);

    palette.layout.layout(true);
    if (autoSaveEnabled) {
        autoSavePreset();
    }
}

//
// "Create a New Layer Group" кнопка
//
create_group_layers_button.onClick = function () {
    var dialog = new Window("dialog", "Add New Layer Group");
    dialog.orientation = "column";
    dialog.alignChildren = ["fill", "top"];

    // Name + Prefix
    var nameAndPrefixPanel = dialog.add("panel", undefined, "Name and Prefix");
    nameAndPrefixPanel.orientation = "column";
    nameAndPrefixPanel.alignChildren = ["fill", "top"];

    var groupNameGroup = nameAndPrefixPanel.add("group");
    groupNameGroup.add("statictext", undefined, "Group Name:");
    var groupNameInput = groupNameGroup.add("edittext", undefined, "");
    groupNameInput.characters = 15;

    var prefixGroup = nameAndPrefixPanel.add("group");
    prefixGroup.add("statictext", undefined, "Prefix:");
    var prefixInput = prefixGroup.add("edittext", undefined, "");
    prefixInput.characters = 5;

    var autoPrefixGroup = nameAndPrefixPanel.add("group");
    autoPrefixGroup.orientation = "row";
    autoPrefixGroup.alignChildren = ["left", "center"];
    autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
    var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
    autoPrefixCheckbox.value = true;
    prefixInput.enabled = !autoPrefixCheckbox.value;

    autoPrefixCheckbox.onClick = function () {
        prefixInput.enabled = !autoPrefixCheckbox.value;
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                alert("Auto-prefix generation is disabled for group names containing non-English characters.");
            }
        }
    };

    groupNameInput.onChanging = function () {
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                prefixInput.text = "";
                alert("Auto-prefix generation is disabled for group names containing non-English characters.");
            }
        }
    };

    // Color Label
    var colorLabelPanel = dialog.add("panel", undefined, "Color Label");
    colorLabelPanel.orientation = "column";
    colorLabelPanel.alignChildren = ["fill", "top"];

    var labelColorGroup = colorLabelPanel.add("group");
    labelColorGroup.add("statictext", undefined, "Label Color:");
    var labelColorDropdown = labelColorGroup.add("dropdownlist", undefined, [
        "None", "Red", "Yellow", "Aqua", "Pink", "Lavender", "Peach", "Sea Foam",
        "Blue", "Green", "Purple", "Orange", "Brown", "Fuchsia", "Cyan", "Sandstone"
    ]);
    labelColorDropdown.selection = 0;
    labelColorDropdown.helpTip = "Select a label color for layers in this group";

    var disableLabelColorCheckbox = colorLabelPanel.add("checkbox", undefined, "Disable label color assignment");
    disableLabelColorCheckbox.value = false;
    disableLabelColorCheckbox.helpTip = "Disable automatic label color assignment to layers in this group";
    labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
    disableLabelColorCheckbox.onClick = function () {
        labelColorDropdown.enabled = !disableLabelColorCheckbox.value;
    };

    // Volume Presets Checkbox
    var volumePresetsPanel = dialog.add("panel", undefined, "Audio Control");
    volumePresetsPanel.orientation = "column";
    volumePresetsPanel.alignChildren = ["fill", "top"];
    var volumePresetsCheckboxGroup = volumePresetsPanel.add("group");
    volumePresetsCheckboxGroup.orientation = "row";
    volumePresetsCheckboxGroup.alignChildren = ["left", "center"];
    volumePresetsCheckboxGroup.add("statictext", undefined, "Disable Volume Presets:");
    var disableVolumePresetsCheckbox = volumePresetsCheckboxGroup.add("checkbox", undefined, "");
    disableVolumePresetsCheckbox.value = false;
    disableVolumePresetsCheckbox.helpTip = "Disable advanced volume presets (only On/Off will be available)";

    // Buttons
    var buttonsGroup = dialog.add("group");
    buttonsGroup.alignment = "center";
    var okButton = buttonsGroup.add("button", undefined, "OK");
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel");

    okButton.onClick = function () {
        var groupName = groupNameInput.text;
        var prefix = prefixInput.text;
        var labelColorIndex = labelColorDropdown.selection ? labelColorDropdown.selection.index : 0;
        var disableLabelColor = disableLabelColorCheckbox.value;
        var disableVolumePresets = disableVolumePresetsCheckbox.value; // Новое значение

        if (groupName === "") {
            alert("Please enter a group name.");
            return;
        }
        if (prefix === "") {
            if (autoPrefixCheckbox.value) {
                prefix = generateUniquePrefix(groupName);
                prefixInput.text = prefix;
            } else {
                alert("Please enter a prefix.");
                return;
            }
        }

        createLayerGroupUI(groupName, prefix, labelColorIndex, disableLabelColor, false, false, disableVolumePresets);
        dialog.close();
    };

    cancelButton.onClick = function () {
        dialog.close();
    };

    dialog.center();
    dialog.show();
};


/**
 * Проверяет, есть ли в проекте хотя бы один слой с [prefix] и audio
 */
function groupHasAudio(prefix) {
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            if (layer.name.indexOf("[" + prefix + "]") === 0) {
                if (layer instanceof AVLayer && layer.hasAudio) {
                    return true;
                }
            }
        }
    }
    return false;
}

/**
 * Возвращает все композиции из текущего проекта.
 * @returns {CompItem[]} Массив композиций.
 */
function getAllCompositions() {
    // Заглушка: вернёт все композиции в текущем проекте.
    // В реальном скрипте можете добавить фильтры, проверки и т.п.
    var result = [];
    for (var i = 1; i <= app.project.numItems; i++) {
        var item = app.project.item(i);
        if (item instanceof CompItem) {
            result.push(item);
        }
    }
    return result;
}

/**
 * Возвращает список эффектов по проекту (уникальные).
 * При этом в начало списка добавляется "None".
 * @returns {String[]} Массив уникальных имён эффектов, включая "None".
 */
function getAllUniqueEffectsInProject_WithNone() {
    var effectNamesSet = {};
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                // Убираем префикс [XXX], если он есть, чтобы получить "чистое" имя эффекта
                var baseName = eff.name.replace(/^\[[^\]]+\]\s*/, "");
                effectNamesSet[baseName] = true;
            }
        }
    }

    var resultArray = [];
    for (var nm in effectNamesSet) {
        if (effectNamesSet.hasOwnProperty(nm)) {
            resultArray.push(nm);
        }
    }
    resultArray.sort();

    // Добавляем пункт "None" в начало
    resultArray.unshift("None");
    return resultArray;
}


//GROUP VIEWER///

/**
 * Основная функция, которую вы вызываете.
 * @param {Object} groupData Параметры группы:
 *                          {name: "...", prefix: "..."}
 */
function showGroupCompositions(groupData) {
    var groupName = groupData.name;    // напр. "MyGroup"
    var groupPrefix = groupData.prefix;  // напр. "LR"

    /****************************************
     * (A) Сбор данных о композициях и эффектах
     ****************************************/
    var comps = getAllCompositions();
    var compsWithGroup = [];
    var allEffectsFromAllComps = [];

    // 1) Сканируем проект, собираем все comps, где есть слои с [groupPrefix]
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        var layerCount = 0;
        var layerNamesArray = [];
        var layerEffectsArray = [];

        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);

            // Проверяем, начинается ли имя слоя с "[<prefix>]"
            if (layer.name.indexOf("[" + groupPrefix + "]") === 0) {
                layerCount++;
                layerNamesArray.push(layer.name);

                // Эффекты этого слоя
                var effectGroup = layer.property("ADBE Effect Parade");
                var effectNames = [];
                if (effectGroup && effectGroup.numProperties > 0) {
                    for (var e = 1; e <= effectGroup.numProperties; e++) {
                        var effectProp = effectGroup.property(e);
                        if (effectProp) {
                            effectNames.push(effectProp.name);

                            // Сохраняем в общий массив (для списка All Effects)
                            allEffectsFromAllComps.push({
                                name: effectProp.name,
                                comp: comp,
                                layerIndex: l, // 1-based
                                effectProp: effectProp,
                                isEnabled: effectProp.enabled
                            });
                        }
                    }
                }
                layerEffectsArray.push(effectNames);
            }
        }

        // Если в этой компе были слои с группой prefix
        if (layerCount > 0) {
            compsWithGroup.push({
                comp: comp,
                layerCount: layerCount,
                layerNames: layerNamesArray,
                layerEffects: layerEffectsArray
            });
        }
    }

    // Если ни одной композиции не найдено, завершаем
    if (compsWithGroup.length === 0) {
        alert("No compositions containing the group '" + groupName + "'");
        return;
    }

    /****************************************
     * (A2) Создаём основной диалог (UI)
     ****************************************/
    var dialog = new Window("dialog");
    dialog.text = ("Group Viewer: " + groupData.name);
    dialog.orientation = "column";
    dialog.alignChildren = ["left", "top"];
    dialog.spacing = 10;
    dialog.margins = 16;

    // ------------------------------------------------------------------------
    //  ГОЛОВНОЙ БЛОК (head_group) + сортировка (sort_group) + кнопка (close_group)
    // ------------------------------------------------------------------------
    var head_group = dialog.add("group");
    head_group.orientation = "row";
    head_group.alignChildren = ["left", "fill"];
    head_group.spacing = 192;

    // (1) Группа сортировки
    var sort_group = head_group.add("group");
    sort_group.orientation = "row";
    sort_group.alignChildren = ["center", "center"];
    sort_group.spacing = 18;

    sort_group.add("statictext", undefined, "Sort by layer count:");
    var Sort_array = ["Ascending", "Descending"];
    var Sort = sort_group.add("dropdownlist", undefined, undefined, { items: Sort_array });
    Sort.selection = 0; // Ascending

    // (2) Группа закрытия окна
    var close_group = head_group.add("group");
    close_group.orientation = "row";
    close_group.alignChildren = ["left", "fill"];
    close_group.spacing = 10;
    close_group.margins = [300, 0, 0, 0];

    var close_button = close_group.add(
        "iconbutton",
        undefined,
        File.decode(close_button_imgString),
        { style: "toolbutton" }
    );
    close_button.text = "Close";
    close_button.preferredSize.width = 98;

    // ------------------------------------------------------------------------
    //  ОСНОВНОЙ БЛОК (main_group) с тремя панелями:
    //     1) ПАНЕЛЬ All Effects (слева)
    //     2) ПАНЕЛЬ Compositions (по центру)
    //     3) ПАНЕЛЬ Effects and Layers (справа)
    // ------------------------------------------------------------------------
    var main_group = dialog.add("group");
    main_group.orientation = "row";
    main_group.alignChildren = ["left", "center"];
    main_group.spacing = 13;
    main_group.margins = [0, 0, 0, 8];

    /****************************************
     * ПАНЕЛЬ: ALL EFFECTS (слева)
     ****************************************/
    var All_Effects_panel = main_group.add("panel");
    All_Effects_panel.text = "All Effects Group";
    All_Effects_panel.orientation = "column";
    All_Effects_panel.alignChildren = ["left", "top"];
    All_Effects_panel.spacing = 10;
    All_Effects_panel.margins = 10;
    All_Effects_panel.alignment = ["left", "top"];

    var All_effects = All_Effects_panel.add("group");
    All_effects.orientation = "column";
    All_effects.alignChildren = ["left", "top"];
    All_effects.spacing = 10;
    All_effects.margins = [0, 0, 0, 0];

    var All_Effects_list = All_effects.add("listbox", undefined, undefined);
    All_Effects_list.preferredSize.width = 200;
    All_Effects_list.preferredSize.height = 329;

    var disable_effect_button = All_effects.add(
        "iconbutton",
        undefined,
        File.decode(disable_effect_button_imgString),
        { style: "toolbutton" }
    );
    disable_effect_button.text = "Disable Select Effect";
    disable_effect_button.preferredSize.width = 193;
    disable_effect_button.preferredSize.height = 39;
    disable_effect_button.alignment = ["fill", "top"];

    /****************************************
     * ПАНЕЛЬ: COMPOSITIONS (по центру)
     ****************************************/
    var compositions_panel = main_group.add("panel");
    compositions_panel.text = "Compositions Group";
    compositions_panel.orientation = "column";
    compositions_panel.alignChildren = ["left", "top"];
    compositions_panel.spacing = 10;
    compositions_panel.margins = 10;
    compositions_panel.alignment = ["left", "top"];

    var compositions_group = compositions_panel.add("group");
    compositions_group.orientation = "column";
    compositions_group.alignChildren = ["left", "top"];
    compositions_group.spacing = 10;
    compositions_group.margins = [0, 0, 0, 0];

    var compositions_list = compositions_group.add("listbox", undefined, undefined);
    compositions_list.preferredSize.width = 246;
    compositions_list.preferredSize.height = 328;

    var open_selected_comp_button = compositions_group.add(
        "iconbutton",
        undefined,
        File.decode(open_selected_comp_button_imgString),
        { style: "toolbutton" }
    );
    open_selected_comp_button.text = "Open Selected Compositions";
    open_selected_comp_button.preferredSize.width = 240;
    open_selected_comp_button.preferredSize.height = 39;
    open_selected_comp_button.alignment = ["center", "top"];

    /****************************************
     * ПАНЕЛЬ: EFFECTS AND LAYERS (справа)
     ****************************************/
    var Effects_and_Layers_Group = main_group.add("panel");
    Effects_and_Layers_Group.text = "Effects and Layers";
    Effects_and_Layers_Group.orientation = "column";
    Effects_and_Layers_Group.alignChildren = ["left", "top"];
    Effects_and_Layers_Group.spacing = 10;
    Effects_and_Layers_Group.margins = 10;
    Effects_and_Layers_Group.alignment = ["left", "top"];

    var Effects_and_layers_group = Effects_and_Layers_Group.add("group");
    Effects_and_layers_group.orientation = "column";
    Effects_and_layers_group.alignChildren = ["left", "top"];
    Effects_and_layers_group.spacing = 10;
    Effects_and_layers_group.margins = [0, 0, 0, 0];

    var layers_text = Effects_and_layers_group.add("statictext", undefined, "Layers");
    var layers_list = Effects_and_layers_group.add("listbox", undefined, undefined);
    layers_list.preferredSize.width = 250;
    layers_list.preferredSize.height = 136;

    var Effects_text = Effects_and_layers_group.add("statictext", undefined, "Effects");
    var effects_layer_list = Effects_and_layers_group.add("listbox", undefined, undefined);
    effects_layer_list.preferredSize.width = 250;
    effects_layer_list.preferredSize.height = 130;

    // Кнопки FFX (import/export)
    var ffx_button = Effects_and_layers_group.add("group");
    ffx_button.orientation = "row";
    ffx_button.alignChildren = ["center", "center"];
    ffx_button.spacing = 10;

    var import_ffx = ffx_button.add("iconbutton", undefined, File.decode(import_ffx_imgString), { style: "toolbutton" });
    import_ffx.text = "Import FFX";
    import_ffx.preferredSize.width = 120;
    import_ffx.preferredSize.height = 39;
    import_ffx.enabled = false; // по умолчанию отключена

    var export_ffx = ffx_button.add("iconbutton", undefined, File.decode(export_ffx_imgString), { style: "toolbutton" });
    export_ffx.text = "Export FFX";
    export_ffx.preferredSize.width = 120;
    export_ffx.preferredSize.height = 40;
    export_ffx.enabled = false; // по умолчанию отключена

    /****************************************
     * (B1) Функции сортировки и заполнения
     ****************************************/

    /**
     * Сортирует массив compsWithGroup по количеству слоёв (возр/убыв).
     * @param {Array} compsArray массив объектов {comp, layerCount, ...}
     * @param {String} order "Ascending" или "Descending".
     */
    function sortCompositions(compsArray, order) {
        compsArray.sort(function (a, b) {
            if (order === "Descending") {
                return b.layerCount - a.layerCount;
            } else {
                return a.layerCount - b.layerCount;
            }
        });
    }

    /**
     * Заполнение списка «Compositions» (с учётом текущего массива compsWithGroup).
     */
    function fillCompositionsList() {
        compositions_list.removeAll();
        for (var i = 0; i < compsWithGroup.length; i++) {
            var compName = compsWithGroup[i].comp.name;
            var layerCount = compsWithGroup[i].layerCount;
            var txt = compName + " [" + layerCount + " layer" + (layerCount !== 1 ? "s" : "") + "]";
            compositions_list.add("item", txt);
        }
    }

    /**
     * Группируем одинаковые эффекты, чтобы выводить в списке All_Effects_list одной строкой.
     */
    function fillAllEffectsList() {
        All_Effects_list.removeAll();

        var effectGroups = {}; // ключ = имя эффекта, значение = массив объектов effObj

        for (var i = 0; i < allEffectsFromAllComps.length; i++) {
            var effObj = allEffectsFromAllComps[i];
            var effName = effObj.name;

            if (!effectGroups[effName]) {
                effectGroups[effName] = [];
            }
            effectGroups[effName].push(effObj);
        }

        for (var groupName in effectGroups) {
            if (effectGroups.hasOwnProperty(groupName)) {
                var groupArray = effectGroups[groupName];

                // Проверяем, выключены ли все эффекты (allDisabled)
                var allDisabled = true;
                for (var k = 0; k < groupArray.length; k++) {
                    if (groupArray[k].isEnabled) {
                        allDisabled = false;
                        break;
                    }
                }

                var count = groupArray.length;
                var itemLabel = groupName + " (" + count + ")" + (allDisabled ? " | Off" : "");
                var newItem = All_Effects_list.add("item", itemLabel);

                newItem.__effectDataGroup = groupArray;
                newItem.__groupName = groupName;
            }
        }
    }

    // Первоначальная инициализация (сортируем + выводим)
    sortCompositions(compsWithGroup, Sort.selection.text);
    fillCompositionsList();
    fillAllEffectsList();

    // (C1) Обработчик: сортировка композиций (DropDown "Ascending"/"Descending")
    Sort.onChange = function () {
        sortCompositions(compsWithGroup, Sort.selection.text);
        fillCompositionsList();
        layers_list.removeAll();
        effects_layer_list.removeAll();
    };

    // (C2) Обработчик: кнопка «Disable Select Effect» (переключает On/Off у выбранной группы эффектов)
    disable_effect_button.onClick = function () {
        var selItem = All_Effects_list.selection;
        if (!selItem) {
            alert("Select an effect group from 'All Effects' first!");
            return;
        }

        var effDataGroup = selItem.__effectDataGroup;
        if (!effDataGroup || effDataGroup.length === 0) {
            alert("No effect data group found!");
            return;
        }

        // Проверяем, есть ли хотя бы один включённый эффект
        var anyEnabled = false;
        for (var i = 0; i < effDataGroup.length; i++) {
            if (effDataGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }

        var count = effDataGroup.length;
        if (anyEnabled) {
            // Выключаем все
            for (var j = 0; j < effDataGroup.length; j++) {
                effDataGroup[j].effectProp.enabled = false;
                effDataGroup[j].isEnabled = false;
            }
            selItem.text = selItem.__groupName + " (" + count + ") | Off";
            disable_effect_button.text = "Enable Select Effect";
        } else {
            // Включаем все
            for (var j = 0; j < effDataGroup.length; j++) {
                effDataGroup[j].effectProp.enabled = true;
                effDataGroup[j].isEnabled = true;
            }
            selItem.text = selItem.__groupName + " (" + count + ")";
            disable_effect_button.text = "Disable Select Effect";
        }
    };

    // При смене выделения в списке «All Effects» — меняем надпись кнопки disable_effect_button
    All_Effects_list.onChange = function () {
        var selItem = All_Effects_list.selection;
        if (!selItem) {
            disable_effect_button.text = "Disable / Enable";
            return;
        }
        var effDataGroup = selItem.__effectDataGroup;
        if (!effDataGroup || effDataGroup.length === 0) {
            disable_effect_button.text = "Disable / Enable";
            return;
        }

        // Проверяем, есть ли включённый
        var anyEnabled = false;
        for (var i = 0; i < effDataGroup.length; i++) {
            if (effDataGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }

        disable_effect_button.text = anyEnabled ? "Disable Select Effect" : "Enable Select Effect";
    };

    // (C3) Обработка выбора композиции — заполнить список слоёв
    compositions_list.onChange = function () {
        layers_list.removeAll();
        effects_layer_list.removeAll();

        var selItem = compositions_list.selection;
        if (!selItem) return;

        // Из строки "CompName [5 layers]" берём CompName
        var compName = selItem.text.split(" [")[0];

        var foundItem = null;
        for (var i = 0; i < compsWithGroup.length; i++) {
            if (compsWithGroup[i].comp.name === compName) {
                foundItem = compsWithGroup[i];
                break;
            }
        }
        if (!foundItem) return;

        // Заполняем список слоёв
        for (var l = 0; l < foundItem.layerNames.length; l++) {
            layers_list.add("item", foundItem.layerNames[l]);
        }
    };

    // (C4) Обработка выбора слоя — заполняем список «Effects»
    layers_list.onChange = function () {
        effects_layer_list.removeAll();

        var compSel = compositions_list.selection;
        var layerSel = layers_list.selection;
        if (!compSel || !layerSel) return;

        var compName = compSel.text.split(" [")[0];
        var foundItem = null;
        for (var i = 0; i < compsWithGroup.length; i++) {
            if (compsWithGroup[i].comp.name === compName) {
                foundItem = compsWithGroup[i];
                break;
            }
        }
        if (!foundItem) return;

        var layerIndexInArray = layerSel.index;
        var effectNamesForLayer = foundItem.layerEffects[layerIndexInArray];
        if (!effectNamesForLayer) return;

        for (var e = 0; e < effectNamesForLayer.length; e++) {
            effects_layer_list.add("item", effectNamesForLayer[e]);
        }
    };

    // Кнопка "Open Selected Composition"
    open_selected_comp_button.onClick = function () {
        var sel = compositions_list.selection;
        if (!sel) {
            alert("Select a composition first!");
            return;
        }
        var compName = sel.text.split(" [")[0];
        for (var i = 0; i < compsWithGroup.length; i++) {
            var compObj = compsWithGroup[i].comp;
            if (compObj && compObj.name === compName) {
                compObj.openInViewer();
                break;
            }
        }
    };

    // (D3) Кнопка закрытия основного окна
    close_button.onClick = function () {
        dialog.close();
    };

    // Показываем диалог
    dialog.center();
    dialog.show();
}







//
// ===================== EFFECT GROUP =====================
//


// Убираем в конце эффекта любые пробел + число (например "Curves 2" -> "Curves")
function unifyEffectBaseName(baseName) {
    // Удаляем конечные пробел + цифра (например, "Curves 2" => "Curves")
    // Если вам нужно более гибкое правило, корректируйте эту регулярку.
    return baseName.replace(/\s+\d+$/, "");
}

// Собираем статистику эффектов по префиксу группы
function getEffectCountsByBaseName(prefix) {
    var comps = getAllCompositions();
    var prefixString = "[" + prefix + "]";
    var prefixLength = prefixString.length;
    var result = {}; // формат: { baseName: count }

    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                // Проверяем, начинается ли имя эффекта с [prefix]
                if (eff.name.indexOf(prefixString) === 0) {
                    // baseName без префикса [CRVS] и пробела
                    var baseName = eff.name.substring(prefixLength + 1);
                    baseName = unifyEffectBaseName(baseName);

                    if (!result[baseName]) {
                        result[baseName] = 0;
                    }
                    result[baseName]++;
                }
            }
        }
    }
    return result;
}

// Обновляем заголовок панели группы с учётом до 3 уникальных имён эффектов и общего количества
function updateEffectGroupPanelTitle(groupData) {
    var groupName = groupData.name;
    var prefix = groupData.prefix;
    var countsMap = getEffectCountsByBaseName(prefix);
    var baseNames = [];

    for (var nm in countsMap) {
        if (countsMap.hasOwnProperty(nm)) {
            baseNames.push(nm);
        }
    }
    baseNames.sort();

    // Если вообще нет эффектов с таким префиксом, просто показываем "GroupName [PRFX]"
    if (baseNames.length === 0) {
        groupData.panel.text = groupName + " [" + prefix + "]";
        return;
    }

    // Берём первые 3 эффекта
    var top3 = baseNames.slice(0, 3);
    var top3String = top3.join(", ");

    // Считаем общее количество эффектов (сумма значений в countsMap)
    var totalCount = 0;
    for (var k in countsMap) {
        if (countsMap.hasOwnProperty(k)) {
            totalCount += countsMap[k];
        }
    }

    // Формируем итоговую надпись
    // Пример: "Curves [CRVS] | Curves, Levels, Hue (7)"
    groupData.panel.text = groupName + " [" + prefix + "] | " + top3String + " (" + totalCount + ")";
}

function createEffectGroupUI(groupName, prefix, effectName) {
    var groupPanel = tab_effects.add("panel", undefined, undefined, { name: "effect_group_" + prefix });
    groupPanel.text = groupName + " [" + prefix + "]"; // Изначально
    groupPanel.orientation = "row";
    groupPanel.alignChildren = ["center", "center"];
    groupPanel.spacing = 6;
    groupPanel.margins = [5, 13, 5, 10];
    groupPanel.alignment = ["fill", "top"];
    groupPanel.helpTip = "Effect Group panel for " + groupName;

    // VIEW
    var view_button = groupPanel.add("iconbutton", undefined, undefined, { name: "view_button_" + prefix, style: "toolbutton" });
    view_button.helpTip = "Toggle visibility of effects in this group across all compositions";
    view_button.preferredSize.width = 26;
    view_button.preferredSize.height = 26;
    var viewState = true;
    setViewButtonIconEffects(view_button, view_button_fx_on_imgString);

    // SOLO
    var solo_button = groupPanel.add("iconbutton", undefined, undefined, { name: "solo_button_" + prefix, style: "toolbutton" });
    solo_button.helpTip = "Toggle solo mode for this effects group";
    solo_button.preferredSize.width = 26;
    solo_button.preferredSize.height = 26;
    var soloState = false;
    setSoloButtonIconEffects(solo_button, solo_off_button_imgString);

    // Разделитель
    var divider1 = groupPanel.add("panel", undefined, undefined, { name: "divider1" });
    divider1.alignment = "fill";
    divider1.helpTip = "Divider for layout";
    divider1.graphics.backgroundColor = divider1.graphics.newBrush(
        divider1.graphics.BrushType.SOLID_COLOR, [0.5, 0.5, 0.5, 1]
    );
    divider1.preferredSize.height = 1;

    // "Add Effect"
    var add_effect_button = groupPanel.add(
        "iconbutton",
        undefined,
        File.decode(add_layer_button_imgString),
        { name: "add_effect_button_" + prefix, style: "toolbutton" }
    );
    add_effect_button.helpTip = "Add selected effects to this group across all compositions";
    add_effect_button.text = "Add FX";
    add_effect_button.preferredSize.width = 82;
    add_effect_button.preferredSize.height = 30;

    // "Edit"
    var edit_group_effects_button = groupPanel.add(
        "iconbutton",
        undefined,
        File.decode(edit_group_effects_button_imgString),
        { name: "edit_group_effects_button_" + prefix, style: "toolbutton" }
    );
    edit_group_effects_button.helpTip = "Rename and settings this Group";
    edit_group_effects_button.text = "";
    edit_group_effects_button.preferredSize.width = 30;
    edit_group_effects_button.preferredSize.height = 30;

    // "Delete"
    var delete_group_effects_button = groupPanel.add(
        "iconbutton",
        undefined,
        File.decode(delete_group_layers_button_imgString),
        { name: "delete_group_effects_button_" + prefix, style: "toolbutton" }
    );
    delete_group_effects_button.helpTip = "Delete this Effects Group";
    delete_group_effects_button.text = "";
    delete_group_effects_button.preferredSize.width = 30;
    delete_group_effects_button.preferredSize.height = 30;

    // Собираем все данные
    var groupData = {
        name: groupName,
        prefix: prefix,
        effectName: effectName,
        panel: groupPanel,
        viewButton: view_button,
        viewState: viewState,
        soloButton: solo_button,
        soloState: soloState,
        addButton: add_effect_button,
        deleteButton: delete_group_effects_button,
        editButton: edit_group_effects_button
    };
    effectGroups.push(groupData);

    // VIEW onClick
    view_button.onClick = function () {
        groupData.viewState = !groupData.viewState;
        if (groupData.viewState) {
            setViewButtonIconEffects(view_button, view_button_fx_on_imgString);
        } else {
            setViewButtonIconEffects(view_button, view_button_fx_off_imgString);
        }
        app.beginUndoGroup("Toggle View for " + groupName);

        var comps = getAllCompositions();
        var effectsFound = false;
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                var fx = layer.property("Effects");
                if (!fx) continue;
                for (var i = 1; i <= fx.numProperties; i++) {
                    var effect = fx.property(i);
                    if (effect.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        effect.enabled = groupData.viewState;
                        effectsFound = true;
                    }
                }
            }
        }
        if (!effectsFound) {
            alert("Effects for group '" + groupName + "' not found in any composition.");
        }

        app.endUndoGroup();
    };

    // SOLO onClick
    solo_button.onClick = function () {
        groupData.soloState = !groupData.soloState;
        if (groupData.soloState) {
            setSoloButtonIconEffects(solo_button, solo_on_button_imgString);
        } else {
            setSoloButtonIconEffects(solo_button, solo_off_button_imgString);
        }
        app.beginUndoGroup("Toggle Solo for " + groupName);

        var comps = getAllCompositions();
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                var effects = layer.property("Effects");
                if (!effects) continue;

                // Проверяем, есть ли в слое эффект из этой группы
                var hasGroupEffect = false;
                for (var e = 1; e <= effects.numProperties; e++) {
                    var eff = effects.property(e);
                    if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        hasGroupEffect = true;
                        break;
                    }
                }
                if (hasGroupEffect) {
                    // Переключаем enable
                    for (var e = 1; e <= effects.numProperties; e++) {
                        var eff = effects.property(e);
                        if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                            eff.enabled = groupData.viewState;
                        } else {
                            eff.enabled = !groupData.soloState;
                        }
                    }
                }
            }
        }
        app.endUndoGroup();
        // Названия эффектов не менялись, если нужно — можно обновить:
        // updateEffectGroupPanelTitle(groupData);
    };

    // ADD EFFECT onClick
    add_effect_button.onClick = function () {
        var layers = getSelectedLayersInActiveComp();
        if (!layers) return;

        app.beginUndoGroup("Add Effects to " + groupName);
        var effectsFound = false;

        for (var j = 0; j < layers.length; j++) {
            var layer = layers[j];
            var selectedProps = layer.selectedProperties;
            if (selectedProps.length === 0) continue;

            for (var i = 0; i < selectedProps.length; i++) {
                var effect = selectedProps[i];
                if (
                    effect.matchName !== "ADBE Effect Parade" &&
                    effect.parentProperty.matchName === "ADBE Effect Parade"
                ) {
                    var baseName = effect.name.replace(/^\[[^\]]+\]\s*/, "");
                    effect.name = "[" + groupData.prefix + "] " + baseName;
                    effectsFound = true;
                }
            }
        }
        if (!effectsFound) {
            alert("Please select effects to add to " + groupName + ".");
        }
        app.endUndoGroup();
        updateEffectGroupPanelTitle(groupData);
    };

    // EDIT onClick
    edit_group_effects_button.onClick = function () {
        var dialog = new Window("dialog", "Settings Effect Group: " + groupData.name);
        dialog.orientation = "column";
        dialog.alignChildren = ["fill", "top"];

        var namePrefixPanel = dialog.add("panel", undefined, "Name and Prefix");
        namePrefixPanel.orientation = "column";
        namePrefixPanel.alignChildren = ["fill", "top"];
        namePrefixPanel.margins = [10, 15, 10, 10];

        var groupNameGroup = namePrefixPanel.add("group");
        groupNameGroup.add("statictext", undefined, "Group Name:");
        var groupNameInput = groupNameGroup.add("edittext", undefined, groupData.name);
        groupNameInput.characters = 15;

        var prefixGroup = namePrefixPanel.add("group");
        prefixGroup.add("statictext", undefined, "Prefix:");
        var prefixInput = prefixGroup.add("edittext", undefined, groupData.prefix);
        prefixInput.characters = 5;

        var autoPrefixGroup = namePrefixPanel.add("group");
        autoPrefixGroup.orientation = "row";
        autoPrefixGroup.alignChildren = ["left", "center"];
        autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
        var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
        autoPrefixCheckbox.value = false;
        prefixInput.enabled = !autoPrefixCheckbox.value;

        autoPrefixCheckbox.onClick = function () {
            prefixInput.enabled = !autoPrefixCheckbox.value;
            if (autoPrefixCheckbox.value) {
                if (containsOnlyEnglishLetters(groupNameInput.text)) {
                    prefixInput.text = generateUniquePrefix(groupNameInput.text);
                } else {
                    autoPrefixCheckbox.value = false;
                    prefixInput.enabled = true;
                    alert("Auto-prefix generation is disabled for invalid characters.");
                }
            }
        };

        groupNameInput.onChanging = function () {
            if (autoPrefixCheckbox.value) {
                if (containsOnlyEnglishLetters(groupNameInput.text)) {
                    prefixInput.text = generateUniquePrefix(groupNameInput.text);
                } else {
                    autoPrefixCheckbox.value = false;
                    prefixInput.enabled = true;
                    prefixInput.text = "";
                }
            }
        };

        if (groupData.effectName && groupData.effectName !== "") {
            var updateButton = dialog.add("button", undefined, "Update Group Effects");
            updateButton.helpTip = "Re-scan the project for '" + groupData.effectName + "' and prefix them.";

            updateButton.onClick = function () {
                addAllEffectsOfThisTypeToGroup(groupData.prefix, groupData.effectName);
                alert("All '" + groupData.effectName + "' have been updated with [" + groupData.prefix + "].");
            };
        } else {
            var infoText = dialog.add("statictext", undefined, "(No effect is tracked in this group.)");
            infoText.graphics.foregroundColor = infoText.graphics.foregroundColor = infoText.graphics.newPen(
                infoText.graphics.PenType.SOLID_COLOR,
                [0.5569, 0.7333, 0.9412], // RGB для #8EBBF0
                1                         // непрозрачность 100%
            );
        }

        var buttonsGroup = dialog.add("group");
        buttonsGroup.alignment = "center";
        var okButton = buttonsGroup.add("button", undefined, "OK");
        var cancelButton = buttonsGroup.add("button", undefined, "Cancel");

        okButton.onClick = function () {
            var newGroupName = groupNameInput.text;
            var newPrefix = prefixInput.text;
            if (!newGroupName || !newPrefix) {
                alert("Please enter both a group name and prefix.");
                return;
            }
            app.beginUndoGroup("Settings Effect Group " + groupData.name);

            var comps = getAllCompositions();
            for (var c = 0; c < comps.length; c++) {
                var comp = comps[c];
                for (var l = 1; l <= comp.numLayers; l++) {
                    var layer = comp.layer(l);
                    var fx = layer.property("Effects");
                    if (!fx) continue;
                    for (var e = 1; e <= fx.numProperties; e++) {
                        var eff = fx.property(e);
                        if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                            var baseName = eff.name.replace("[" + groupData.prefix + "] ", "");
                            eff.name = "[" + newPrefix + "] " + baseName;
                        }
                    }
                }
            }

            groupData.name = newGroupName;
            groupData.prefix = newPrefix;
            updateEffectGroupPanelTitle(groupData);
            palette.layout.layout(true);
            palette.layout.resize();
            app.endUndoGroup();
            dialog.close();
        };

        cancelButton.onClick = function () {
            dialog.close();
        };

        dialog.center();
        dialog.show();
    };

    // DELETE onClick
    delete_group_effects_button.onClick = function () {
        app.beginUndoGroup("Delete Effect Group " + groupName);
        var effectsFound = false;

        var comps = getAllCompositions();
        for (var c = 0; c < comps.length; c++) {
            var comp = comps[c];
            for (var l = 1; l <= comp.numLayers; l++) {
                var layer = comp.layer(l);
                var fx = layer.property("Effects");
                if (!fx) continue;
                for (var i = fx.numProperties; i >= 1; i--) {
                    var eff = fx.property(i);
                    if (eff.name.indexOf("[" + groupData.prefix + "]") === 0) {
                        var originalName = eff.name.replace("[" + groupData.prefix + "] ", "");
                        eff.name = originalName;
                        effectsFound = true;
                    }
                }
            }
        }

        if (!effectsFound) {
            alert("Effects for group '" + groupName + "' not found in any composition.");
        }

        tab_effects.remove(groupPanel);
        palette.layout.layout(true);
        palette.layout.resize();

        for (var j = 0; j < effectGroups.length; j++) {
            if (effectGroups[j].panel === groupPanel) {
                effectGroups.splice(j, 1);
                break;
            }
        }
        app.endUndoGroup();
    };
    updateEffectGroupPanelTitle(groupData);
    palette.layout.layout(true);
    palette.layout.resize();

    if (autoSaveEnabled) {
        autoSavePreset();
    }
}

//
// "Create a New Effects Group" кнопка
//
create_group_effects_button.onClick = function () {
    var dialog = new Window("dialog", "Add New Effects Group");
    dialog.orientation = "column";
    dialog.alignChildren = ["fill", "top"];

    var projectEffects = getAllUniqueEffectsInProject_WithNone();
    if (projectEffects.length === 0) {
        alert("No effects in the project! The list is empty.");
        return;
    }

    var nameAndPrefixPanel = dialog.add("panel", undefined, "Name and Prefix");
    nameAndPrefixPanel.orientation = "column";
    nameAndPrefixPanel.alignChildren = ["fill", "top"];

    var groupNameGroup = nameAndPrefixPanel.add("group");
    groupNameGroup.add("statictext", undefined, "Group Name:");
    var groupNameInput = groupNameGroup.add("edittext", undefined, "");
    groupNameInput.characters = 15;

    var prefixGroup = nameAndPrefixPanel.add("group");
    prefixGroup.add("statictext", undefined, "Prefix:");
    var prefixInput = prefixGroup.add("edittext", undefined, "");
    prefixInput.characters = 5;

    var autoPrefixGroup = nameAndPrefixPanel.add("group");
    autoPrefixGroup.orientation = "row";
    autoPrefixGroup.alignChildren = ["left", "center"];
    autoPrefixGroup.add("statictext", undefined, "Auto-generate Prefix:");
    var autoPrefixCheckbox = autoPrefixGroup.add("checkbox", undefined, "");
    autoPrefixCheckbox.value = true;
    prefixInput.enabled = !autoPrefixCheckbox.value;

    autoPrefixCheckbox.onClick = function () {
        prefixInput.enabled = !autoPrefixCheckbox.value;
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                alert("Auto-prefix disabled: non-English characters.");
            }
        }
    };

    groupNameInput.onChanging = function () {
        if (autoPrefixCheckbox.value) {
            if (containsOnlyEnglishLetters(groupNameInput.text)) {
                prefixInput.text = generateUniquePrefix(groupNameInput.text);
            } else {
                autoPrefixCheckbox.value = false;
                prefixInput.enabled = true;
                prefixInput.text = "";
            }
        }
    };

    var effectSelectPanel = dialog.add("panel", undefined, "Select an Effect from Project (optional)");
    effectSelectPanel.orientation = "column";
    effectSelectPanel.alignChildren = ["fill", "top"];
    effectSelectPanel.margins = [10, 15, 10, 10];

    var ddGroup = effectSelectPanel.add("group");
    ddGroup.add("statictext", undefined, "Effect Name:");
    var effectDropdown = ddGroup.add("dropdownlist", undefined, projectEffects);
    effectDropdown.selection = 0;
    effectDropdown.preferredSize.width = 120;

    effectDropdown.onChange = function () {
        var chosenEffect = effectDropdown.selection ? effectDropdown.selection.text : "";
        if (chosenEffect && chosenEffect !== "None") {
            if (groupNameInput.text === "") {
                groupNameInput.text = chosenEffect;
            }
        }
    };

    var buttonsGroup = dialog.add("group");
    buttonsGroup.alignment = "center";
    var okButton = buttonsGroup.add("button", undefined, "OK");
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel");

    okButton.onClick = function () {
        var groupName = groupNameInput.text;
        var prefix = prefixInput.text;
        var chosenEffect = effectDropdown.selection ? effectDropdown.selection.text : "";

        if (!groupName) {
            alert("Please enter a group name.");
            return;
        }
        if (!prefix) {
            if (autoPrefixCheckbox.value) {
                prefix = generateUniquePrefix(groupName);
                prefixInput.text = prefix;
            } else {
                alert("Please enter a prefix.");
                return;
            }
        }

        var finalEffectName = (chosenEffect === "None") ? "" : chosenEffect;
        createEffectGroupUI(groupName, prefix, finalEffectName);

        if (finalEffectName !== "") {
            addAllEffectsOfThisTypeToGroup(prefix, finalEffectName);
        }
        dialog.close();
    };


    cancelButton.onClick = function () {
        dialog.close();
    };

    dialog.center();
    dialog.show();

};

function getAllUniqueEffectsInProject_WithNone() {
    var effectNamesSet = {};
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                var baseName = eff.name.replace(/^\[[^\]]+\]\s*/, "");
                effectNamesSet[baseName] = true;
            }
        }
    }
    var resultArray = [];
    for (var nm in effectNamesSet) {
        if (effectNamesSet.hasOwnProperty(nm)) {
            resultArray.push(nm);
        }
    }
    resultArray.sort();
    resultArray.unshift("None");
    return resultArray;
}

function addAllEffectsOfThisTypeToGroup(prefix, effectName) {
    app.beginUndoGroup("Add All Effects of " + effectName + " -> " + prefix);
    var comps = getAllCompositions();
    var countAdded = 0;
    var prefixRegex = /^\[[^\]]+\]\s*/;

    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;

            for (var e = 1; e <= fx.numProperties; e++) {
                var eff = fx.property(e);
                var baseName = eff.name.replace(prefixRegex, "");
                if (baseName === effectName) {
                    if (prefixRegex.test(eff.name)) {
                        // Уже какой-то [префикс], пропускаем
                        continue;
                    }
                    eff.name = "[" + prefix + "] " + baseName;
                    countAdded++;
                }
            }
        }
    }
    app.endUndoGroup();
    $.writeln("Added prefix [" + prefix + "] to " + countAdded + " \"" + effectName + "\" effects.");
}



// EFFECTS MANAGER///

effects_manager_button.onClick = function () {
    openEffectsManager();
};

function openEffectsManager() {
    var win = new Window("dialog", "Effects Manager Tool V1.5");
    win.orientation = "column";
    win.alignChildren = ["fill", "top"];
    win.spacing = 10;
    win.margins = 15;

    // Основной контейнер с двумя колонками: слева – эффекты, справа – композиции
    var mainGroup = win.add("group");
    mainGroup.orientation = "row";
    mainGroup.alignChildren = ["fill", "fill"];
    mainGroup.spacing = 10;
    mainGroup.margins = 0;

    // Левая панель: список эффектов
    var effectsPanel = mainGroup.add("panel", undefined, "All Effects");
    effectsPanel.orientation = "column";
    effectsPanel.alignChildren = ["left", "top"];
    effectsPanel.spacing = 10;
    effectsPanel.margins = 10;

    var effectsList = effectsPanel.add("listbox", undefined, undefined);
    effectsList.preferredSize.width = 300;
    effectsList.preferredSize.height = 350;

    // Правая панель: список композиций, содержащих выбранный эффект
    var compsPanel = mainGroup.add("panel", undefined, "Compositions");
    compsPanel.orientation = "column";
    compsPanel.alignChildren = ["left", "top"];
    compsPanel.spacing = 10;
    compsPanel.margins = 10;

    var compsList = compsPanel.add("listbox", undefined, undefined);
    compsList.preferredSize.width = 270;
    compsList.preferredSize.height = 350;

    // Группа для кнопок (располагаются в один ряд) – ниже основных панелей
    var btnGroup = win.add("group");
    btnGroup.orientation = "row";
    btnGroup.alignChildren = ["fill", "center"];
    btnGroup.spacing = 10;

    // Кнопка Disable Select Effect
    var disableEffectBtn = btnGroup.add(
        "iconbutton",
        undefined,
        File.decode(disable_effect_button_imgString),
        { name: "disableEffectBtn", style: "toolbutton" }
    );
    disableEffectBtn.text = "Disable";
    disableEffectBtn.helpTip = "Disable the currently selected effect";
    disableEffectBtn.preferredSize.width = 90;
    disableEffectBtn.preferredSize.height = 35;

    // Кнопка Delete с иконкой
    var deleteEffectBtn = btnGroup.add(
        "iconbutton",
        undefined,
        File.decode(delete_group_layers_button_imgString),
        { name: "deleteEffectBtn", style: "toolbutton" }
    );
    deleteEffectBtn.text = "Delete";
    deleteEffectBtn.helpTip = "Delete the selected effect";
    deleteEffectBtn.preferredSize.width = 80;
    deleteEffectBtn.preferredSize.height = 35;

    // Кнопка Add to Group с иконкой
    var addToGroupBtn = btnGroup.add(
        "iconbutton",
        undefined,
        File.decode(add_layer_button_imgString),
        { name: "addToGroupBtn", style: "toolbutton" }
    );
    addToGroupBtn.text = "Add to Group Effects";
    addToGroupBtn.helpTip = "Add the selected effect to a group";
    addToGroupBtn.preferredSize.width = 155;
    addToGroupBtn.preferredSize.height = 35;

    // *** Кнопка "Open Selected Composition" – интегрированный готовый код ***
    var open_selected_comp_button = btnGroup.add("iconbutton", undefined, File.decode(open_selected_comp_button_imgString), { name: "openselectBtn", style: "toolbutton" });
    open_selected_comp_button.text = "Open Selected Comp";
    open_selected_comp_button.helpTip = "Open the selected composition";
    open_selected_comp_button.preferredSize.width = 175;
    open_selected_comp_button.preferredSize.height = 35;

    // Кнопка Close с иконкой
    var closeBtn = btnGroup.add(
        "iconbutton",
        undefined,
        File.decode(close_button_imgString),
        { name: "closeBtn", style: "toolbutton" }
    );
    closeBtn.text = "Close";
    closeBtn.helpTip = "Close the Effects Manager dialog";
    closeBtn.preferredSize.width = 90;
    closeBtn.preferredSize.height = 35;

    // Глобальная переменная для хранения композиций с информацией о группе (используется в onClick кнопки Open Selected Composition)
    var compsWithGroup = [];

    // Функция заполнения списка эффектов (группировка по префиксу и базовому имени)
    function fillEffectsList() {
        effectsList.removeAll();
        var allEffects = getAllEffectsInProject();
        var groups = {};
        for (var i = 0; i < allEffects.length; i++) {
            var eff = allEffects[i];
            var prefix = "";
            var baseName = "";
            // Если имя эффекта начинается с "[XXX] ", разбиваем его на префикс и базовое имя
            var m = eff.name.match(/^\[([^\]]+)\]\s*(.*)/);
            if (m) {
                prefix = m[1];
                baseName = m[2];
            } else {
                prefix = "None";
                baseName = eff.name;
            }
            var key = "[" + prefix + "] " + baseName;
            if (!groups[key]) groups[key] = [];
            groups[key].push(eff);
        }
        for (var key in groups) {
            if (groups.hasOwnProperty(key)) {
                var groupArray = groups[key];
                var allDisabled = true;
                for (var j = 0; j < groupArray.length; j++) {
                    if (groupArray[j].effectProp.enabled) {
                        allDisabled = false;
                        break;
                    }
                }
                var count = groupArray.length;
                var itemLabel = key + " (" + count + ")" + (allDisabled ? " | Off" : "");
                var item = effectsList.add("item", itemLabel);
                item.__effectDataGroup = groupArray;
                item.__groupName = key;
            }
        }
    }

    fillEffectsList();

    // Функция для заполнения списка композиций для выбранного эффекта.
    // Кроме того, она формирует массив compsWithGroup, используемый для открытия композиции.
    function updateCompositionsList() {
        compsList.removeAll();
        compsWithGroup = [];
        var selItem = effectsList.selection;
        if (!selItem) return;
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) return;
        var compsFound = {};
        // Проходим по всем экземплярам эффекта и собираем уникальные композиции
        for (var i = 0; i < effGroup.length; i++) {
            var comp = effGroup[i].comp;
            compsFound[comp.name] = comp;
        }
        // Добавляем найденные композиции в список и массив compsWithGroup
        for (var compName in compsFound) {
            // Здесь можно добавить дополнительную информацию в названии (например, группу) если требуется
            var displayName = compName; // Если нужно, можно добавить " [info]"
            compsWithGroup.push({ comp: compsFound[compName] });
            compsList.add("item", displayName);
        }
    }

    // При изменении выбора эффекта обновляем список композиций
    effectsList.onChange = function () {
        updateCompositionsList();
        // Обновляем подсказку для кнопки Disable/Enable
        var selItem = effectsList.selection;
        if (!selItem) {
            disableEffectBtn.helpTip = "Disable/Enable";
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            disableEffectBtn.helpTip = "Disable/Enable";
            return;
        }
        var anyEnabled = false;
        for (var i = 0; i < effGroup.length; i++) {
            if (effGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }
        disableEffectBtn.helpTip = anyEnabled ? "Disable Select Effect" : "Enable Select Effect";
    };

    // Обработчик кнопки Disable/Enable
    disableEffectBtn.onClick = function () {
        var selItem = effectsList.selection;
        if (!selItem) {
            alert("Select an effect group from the list first!");
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            alert("No effect data found!");
            return;
        }
        var anyEnabled = false;
        for (var i = 0; i < effGroup.length; i++) {
            if (effGroup[i].effectProp.enabled) {
                anyEnabled = true;
                break;
            }
        }
        var count = effGroup.length;
        if (anyEnabled) {
            for (var j = 0; j < effGroup.length; j++) {
                effGroup[j].effectProp.enabled = false;
                effGroup[j].isEnabled = false;
            }
            selItem.text = selItem.__groupName + " (" + count + ") | Off";
        } else {
            for (var j = 0; j < effGroup.length; j++) {
                effGroup[j].effectProp.enabled = true;
                effGroup[j].isEnabled = true;
            }
            selItem.text = selItem.__groupName + " (" + count + ")";
        }
        updateCompositionsList();
    };

    // Обработчик кнопки Delete
    deleteEffectBtn.onClick = function () {
        var selItem = effectsList.selection;
        if (!selItem) {
            alert("Select an effect group from the list first!");
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            alert("No effect data found!");
            return;
        }
        app.beginUndoGroup("Delete Selected Effect(s)");
        for (var i = 0; i < effGroup.length; i++) {
            effGroup[i].effectProp.remove();
        }
        app.endUndoGroup();
        fillEffectsList();
        updateCompositionsList();
    };

    // Обработчик кнопки Add to Group
    addToGroupBtn.onClick = function () {
        var selItem = effectsList.selection;
        if (!selItem) {
            alert("Select an effect group from the list first!");
            return;
        }
        var effGroup = selItem.__effectDataGroup;
        if (!effGroup || effGroup.length === 0) {
            alert("No effect data found!");
            return;
        }
        var dlg = new Window("dialog", "Add to Group");
        dlg.orientation = "column";
        dlg.alignChildren = ["fill", "top"];
        dlg.spacing = 10;
        dlg.margins = 15;
        dlg.add("statictext", undefined, "Select Effect Group:");
        var groupDropdown = dlg.add("dropdownlist", undefined, []);
        if (typeof effectGroups !== "undefined" && effectGroups.length > 0) {
            for (var i = 0; i < effectGroups.length; i++) {
                groupDropdown.add("item", effectGroups[i].name + " [" + effectGroups[i].prefix + "]");
            }
            groupDropdown.selection = 0;
        } else {
            groupDropdown.add("item", "No groups available");
            groupDropdown.selection = 0;
        }
        var btnGroupDlg = dlg.add("group");
        btnGroupDlg.alignment = "center";
        var okBtn = btnGroupDlg.add("button", undefined, "OK");
        var cancelBtn = btnGroupDlg.add("button", undefined, "Cancel");
        okBtn.onClick = function () {
            if (typeof effectGroups !== "undefined" && effectGroups.length > 0) {
                var selIndex = groupDropdown.selection.index;
                var targetGroup = effectGroups[selIndex];
                for (var j = 0; j < effGroup.length; j++) {
                    var effectProp = effGroup[j].effectProp;
                    var baseName = effectProp.name.replace(/^\[[^\]]+\]\s*/, "");
                    effectProp.name = "[" + targetGroup.prefix + "] " + baseName;
                }
                dlg.close();
                fillEffectsList();
                updateCompositionsList();
            } else {
                alert("No effect groups available to add.");
            }
        };
        cancelBtn.onClick = function () { dlg.close(); };
        dlg.center();
        dlg.show();
    };

    // *** Интегрированный готовый код для кнопки "Open Selected Composition" ***
    open_selected_comp_button.onClick = function () {
        var sel = compsList.selection;
        if (!sel) {
            alert("Select a composition first!");
            return;
        }
        var compName = sel.text.split(" [")[0];
        for (var i = 0; i < compsWithGroup.length; i++) {
            var compObj = compsWithGroup[i].comp;
            if (compObj && compObj.name === compName) {
                compObj.openInViewer();
                break;
            }
        }
    };

    closeBtn.onClick = function () {
        win.close();
    };

    win.center();
    win.show();
}

// Вспомогательная функция для получения всех эффектов в проекте
function getAllEffectsInProject() {
    var allEffects = [];
    var comps = getAllCompositions();
    for (var c = 0; c < comps.length; c++) {
        var comp = comps[c];
        for (var l = 1; l <= comp.numLayers; l++) {
            var layer = comp.layer(l);
            var fx = layer.property("Effects");
            if (!fx) continue;
            for (var e = 1; e <= fx.numProperties; e++) {
                var effectProp = fx.property(e);
                allEffects.push({
                    name: effectProp.name,
                    effectProp: effectProp,
                    comp: comp,
                    layerIndex: l,
                    isEnabled: effectProp.enabled
                });
            }
        }
    }
    return allEffects;
}



//TOOLS//

//Sort Project Files Tool//

// Функция для подсчёта файлов с определённым расширением
function countFilesWithExtension(ext) {
    var count = 0;
    for (var i = 1; i <= app.project.numItems; i++) {
        var item = app.project.item(i);
        // Проверяем только элементы, которые имеют источник файла
        if (item && item.mainSource && item.mainSource.file) {
            var fileName = item.mainSource.file.name;
            var itemExt = fileName.split('.').pop().toLowerCase();
            if (itemExt === ext.toLowerCase()) {
                count++;
            }
        }
    }
    return count;
}

autoSortCompsButton.onClick = function () {
    var customSortParams = null;
    var useCustomSort = false;

    // Главное окно "Sort Project Files Tool"
    var dlg = new Window("dialog", "Sort Project Files Tool V1.3");
    dlg.orientation = "column";
    dlg.alignChildren = "fill";
    dlg.spacing = 10;
    dlg.margins = 15;

    dlg.add("statictext", undefined, "Select category to sort:");
    var sortOptions = ["All Sort", "Compositions", "Footages", "Audio", "Nulls & Solids", "Images & SQ", "PSD", "Vector", "GLB Models", "Other", "Custom Sort Folder"];
    var sortDropdown = dlg.add("dropdownlist", undefined, sortOptions);
    sortDropdown.selection = 0;

    // Применить цвет папки к файлам
    var applyColorCheckbox = dlg.add("checkbox", undefined, "Apply Folder color to files");
    applyColorCheckbox.value = false;
    applyColorCheckbox.helpTip = "Apply color label to all files in the selected category";
    applyColorCheckbox.margins = [20, 10, 0, 0];

    // Панель дополнительных опций
    var optionsPanel = dlg.add("panel", undefined, "Additional Options");
    optionsPanel.orientation = "column";
    optionsPanel.alignChildren = ["left", "top"];
    optionsPanel.margins = [15, 15, 10, 10];

    var removeUnusedCheckbox = optionsPanel.add("checkbox", undefined, "Remove unused Footages and Compositions");
    removeUnusedCheckbox.helpTip = "Remove unused Footages and Compositions from the project";
    removeUnusedCheckbox.value = false;

    var remove_disabled_effects_checkbox = optionsPanel.add("checkbox", undefined, "Remove disabled Effects");
    remove_disabled_effects_checkbox.helpTip = "Remove disabled Effects from all compositions";
    remove_disabled_effects_checkbox.value = false;

    // Кнопки Apply/Cancel
    var btnGroup = dlg.add("group");
    btnGroup.alignment = "center";
    var applyBtn = btnGroup.add("button", undefined, "OK");
    var cancelBtn = btnGroup.add("button", undefined, "Cancel");

    dlg.center();
    if (dlg.show() !== 1) {
        return;
    }
    // Для отладки можно вывести значения чекбоксов:
    $.writeln("Remove Unused: " + removeUnusedCheckbox.value +
        ", Remove Disabled Effects: " + remove_disabled_effects_checkbox.value +
        ", Apply folder color: " + applyColorCheckbox.value);

    var chosenOption = sortDropdown.selection.text;

    // Если выбрана опция "Custom Sort Folder", открываем окно Custom Sort
    if (chosenOption === "Custom Sort Folder") {
        var customDlg = new Window("dialog", "Custom Sort Folder");
        customDlg.orientation = "column";
        customDlg.alignChildren = "fill";
        customDlg.spacing = 10;
        customDlg.margins = 15;

        // Функция для подсчёта файлов с определённым расширением
        function countFilesWithExtension(ext) {
            var count = 0;
            for (var i = 1; i <= app.project.numItems; i++) {
                var item = app.project.item(i);
                if (item && item.mainSource && item.mainSource.file) {
                    var fileName = item.mainSource.file.name;
                    var itemExt = fileName.split('.').pop().toLowerCase();
                    if (itemExt === ext.toLowerCase()) {
                        count++;
                    }
                }
            }
            return count;
        }

        // Ввод имени папки
        customDlg.add("statictext", undefined, "Enter custom folder name:");
        var folderNameInput = customDlg.add("edittext", undefined, "");
        folderNameInput.characters = 25;

        // Выбор color label для создаваемой папки
        customDlg.add("statictext", undefined, "Select color label for folder:");
        var colorOptions = [
            { name: "None", value: 0 },
            { name: "Red", value: 1 },
            { name: "Yellow", value: 2 },
            { name: "Aqua", value: 3 },
            { name: "Pink", value: 4 },
            { name: "Lavender", value: 5 },
            { name: "Peach", value: 6 },
            { name: "Sea", value: 7 },
            { name: "Blue", value: 8 },
            { name: "Green", value: 9 },
            { name: "Purple", value: 10 },
            { name: "Orange", value: 11 },
            { name: "Brown", value: 12 },
            { name: "Fuchsia", value: 13 },
            { name: "Cyan", value: 14 },
            { name: "Sandstone", value: 15 },
            { name: "Dark Green", value: 16 }
        ];

        var colorNames = [];
        for (var i = 0; i < colorOptions.length; i++) {
            colorNames.push(colorOptions[i].name);
        }
        var colorDropdown = customDlg.add("dropdownlist", undefined, colorNames);
        colorDropdown.selection = 0; // По умолчанию "None"

        // Выбор форматов файлов
        customDlg.add("statictext", undefined, "Select file formats (extensions):");

        // Контейнер для панелей форматов
        var formatsGroup = customDlg.add("group");
        formatsGroup.orientation = "row";
        formatsGroup.alignChildren = "fill";
        formatsGroup.spacing = 10;

        // Панель для растровых изображений
        var rasterPanel = formatsGroup.add("panel", undefined, "Raster Images");
        rasterPanel.orientation = "column";
        rasterPanel.alignChildren = "left";
        rasterPanel.spacing = 5;

        // Панель для векторных форматов
        var vectorPanel = formatsGroup.add("panel", undefined, "Vector Formats");
        vectorPanel.orientation = "column";
        vectorPanel.alignChildren = "left";
        vectorPanel.spacing = 5;

        // Панель для видеоформатов
        var videoPanel = formatsGroup.add("panel", undefined, "Video Formats");
        videoPanel.orientation = "column";
        videoPanel.alignChildren = "left";
        videoPanel.spacing = 5;

        // Новая панель для аудио форматов
        var audioPanel = formatsGroup.add("panel", undefined, "Audio Formats");
        audioPanel.orientation = "column";
        audioPanel.alignChildren = "left";
        audioPanel.spacing = 5;

        // Определяем массивы расширений для каждой панели
        var rasterFormats = ["psd", "jpg", "jpeg", "png", "tif", "gif", "exr"];
        var vectorFormats = ["ai", "pdf"];
        var videoFormats = ["mov", "mp4"];
        var audioFormats = ["mp3", "wav", "aif", "aiff", "ogg", "aac"];

        // Создание чекбоксов для растровых форматов с количеством файлов
        var rasterCheckboxes = [];
        for (var i = 0; i < rasterFormats.length; i++) {
            var count = countFilesWithExtension(rasterFormats[i]);
            var labelText = rasterFormats[i] + " : " + count + " Files";
            var cb = rasterPanel.add("checkbox", undefined, labelText);
            rasterCheckboxes.push(cb);
        }

        // Создание чекбоксов для векторных форматов с количеством файлов
        var vectorCheckboxes = [];
        for (var i = 0; i < vectorFormats.length; i++) {
            var count = countFilesWithExtension(vectorFormats[i]);
            var labelText = vectorFormats[i] + " : " + count + " Files";
            var cb = vectorPanel.add("checkbox", undefined, labelText);
            vectorCheckboxes.push(cb);
        }

        // Создание чекбоксов для видеоформатов с количеством файлов
        var videoCheckboxes = [];
        for (var i = 0; i < videoFormats.length; i++) {
            var count = countFilesWithExtension(videoFormats[i]);
            var labelText = videoFormats[i] + " : " + count + " Files";
            var cb = videoPanel.add("checkbox", undefined, labelText);
            videoCheckboxes.push(cb);
        }

        // Создание чекбоксов для аудио форматов с количеством файлов
        var audioCheckboxes = [];
        for (var i = 0; i < audioFormats.length; i++) {
            var count = countFilesWithExtension(audioFormats[i]);
            var labelText = audioFormats[i] + " : " + count + " Files";
            var cb = audioPanel.add("checkbox", undefined, labelText);
            audioCheckboxes.push(cb);
        }

        // Кнопочная группа для подтверждения/отмены
        var customBtnGroup = customDlg.add("group");
        customBtnGroup.alignment = "center";
        var customApply = customBtnGroup.add("button", undefined, "OK");
        var customCancel = customBtnGroup.add("button", undefined, "Cancel");

        if (customDlg.show() == 1) {
            customSortParams = {};
            customSortParams.folderName = folderNameInput.text;
            // Сохраняем выбранное числовое значение цвета для папки
            customSortParams.color = colorOptions[colorDropdown.selection.index].value;
            customSortParams.formats = [];

            // Сбор выбранных растровых форматов
            for (var i = 0; i < rasterFormats.length; i++) {
                if (rasterCheckboxes[i].value) {
                    customSortParams.formats.push(rasterFormats[i]);
                }
            }
            // Сбор выбранных векторных форматов
            for (var i = 0; i < vectorFormats.length; i++) {
                if (vectorCheckboxes[i].value) {
                    customSortParams.formats.push(vectorFormats[i]);
                }
            }
            // Сбор выбранных видеоформатов
            for (var i = 0; i < videoFormats.length; i++) {
                if (videoCheckboxes[i].value) {
                    customSortParams.formats.push(videoFormats[i]);
                }
            }
            // Сбор выбранных аудио форматов
            for (var i = 0; i < audioFormats.length; i++) {
                if (audioCheckboxes[i].value) {
                    customSortParams.formats.push(audioFormats[i]);
                }
            }
            if (customSortParams.folderName !== "" && customSortParams.formats.length > 0) {
                useCustomSort = true;
            } else {
                alert("Please enter a folder name and select at least one file format.");
                return;
            }
        } else {
            return;
        }
    }

    ///////////////////////////////////////////////////////////////////////////
    // Определяем базовые имена папок для стандартной сортировки.
    var defaultPresets = ["Compositions", "Footages", "Audio", "Nulls & Solids", "Images & SQ", "PSD", "Vector", "GLB Models", "Other"];
    var folderNames = {};
    for (var i = 0; i < defaultPresets.length; i++) {
        folderNames[defaultPresets[i]] = defaultPresets[i];
    }

    var presetData = {
        "Compositions": { color: 8 },
        "Footages": { color: 9 },
        "Audio": { color: 2 },
        "Nulls & Solids": { color: 1 },
        "Images & SQ": { color: 14 },
        "PSD": { color: 15 },
        "Vector": { color: 11 },
        "GLB Models": { color: 10 },
        "Other": { color: 0 }
    };

    app.beginUndoGroup("Auto Sort Comps");

    // Функция для поиска или создания папки
    function getOrCreateFolder(folderName) {
        for (var i = 1; i <= app.project.numItems; i++) {
            var item = app.project.item(i);
            if (item instanceof FolderItem && item.name === folderName) {
                return item;
            }
        }
        return app.project.items.addFolder(folderName);
    }

    // Функция для удаления пустых папок
    function removeEmptyFolders() {
        var removedCount = 0;
        // Проходим по всем элементам проекта в обратном порядке
        for (var i = app.project.numItems; i >= 1; i--) {
            var item = app.project.item(i);
            if (item instanceof FolderItem) {
                var hasChild = false;
                // Проверяем, есть ли дочерние элементы у папки
                for (var j = 1; j <= app.project.numItems; j++) {
                    if (app.project.item(j).parentFolder === item) {
                        hasChild = true;
                        break;
                    }
                }
                if (!hasChild) {
                    item.remove();
                    removedCount++;
                }
            }
        }
        return removedCount;
    }

    if (!useCustomSort) {
        // Стандартная сортировка по выбранной категории
        var folderMap = {};
        for (var key in folderNames) {
            var folder = getOrCreateFolder(folderNames[key]);
            folder.label = presetData[key].color;
            folderMap[key] = folder;
        }

        var audioExtensions = ["mp3", "wav", "aif", "aiff", "ogg", "aac"];
        var psdExtensions = ["psd"];
        var vectorExtensions = ["ai", "pdf"];
        var imageExtensions = ["jpg", "jpeg", "png", "tif", "tiff", "gif", "bmp"];
        var videoExtensions = ["mov", "mp4", "m4v", "avi", "mxf", "vob", "flv", "mkv", "mpg", "mpeg"];
        var glbExtensions = ["glb"];

        function getCategory(item) {
            if (item instanceof CompItem) return "Compositions";
            if (item instanceof FootageItem) {
                if (item.mainSource instanceof SolidSource || (item.name && item.name.match(/^solid/i))) {
                    return "Nulls & Solids";
                }
                if (item.mainSource && item.mainSource.file) {
                    var fileName = item.mainSource.file.name;
                    var ext = fileName.split('.').pop().toLowerCase();
                    if (audioExtensions.indexOf(ext) !== -1) return "Audio";
                    if (psdExtensions.indexOf(ext) !== -1) return "PSD";
                    if (vectorExtensions.indexOf(ext) !== -1) return "Vector";
                    if (imageExtensions.indexOf(ext) !== -1) return "Images & SQ";
                    if (glbExtensions.indexOf(ext) !== -1) return "GLB Models";
                    if (videoExtensions.indexOf(ext) !== -1) return "Footages";
                }
                return "Other";
            }
            return null;
        }

        var sorted = false;
        while (!sorted) {
            sorted = true;
            for (var i = app.project.numItems; i >= 1; i--) {
                var item = app.project.item(i);
                if (item instanceof FolderItem) continue;
                var category = getCategory(item);
                if (!category) continue;
                if (chosenOption === "All Sort" || chosenOption === category) {
                    var targetFolder = folderMap[category];
                    if (targetFolder && item.parentFolder !== targetFolder) {
                        item.parentFolder = targetFolder;
                        // Если установлен флажок, применяем цвет метки к файлу
                        if (applyColorCheckbox.value) {
                            item.label = targetFolder.label;
                        }
                        sorted = false;
                    }
                }
            }
        }
    } else {

        // Пользовательская сортировка (Custom Sort)
        var customFolderName = customSortParams.folderName;
        if (customFolderName === "") {
            alert("Custom folder name cannot be empty.");
            return;
        }
        var targetFolder = getOrCreateFolder(customFolderName);
        // Устанавливаем цвет для пользовательской папки согласно выбранному значению
        targetFolder.label = customSortParams.color;

        // Собираем все элементы, удовлетворяющие выбранным форматам, в отдельный массив
        var itemsToMove = [];
        for (var i = 1; i <= app.project.numItems; i++) {
            var item = app.project.item(i);
            if (item instanceof FolderItem) continue;
            if (item.mainSource && item.mainSource.file) {
                var fileName = item.mainSource.file.name;
                var ext = fileName.split('.').pop().toLowerCase();
                if (customSortParams.formats.indexOf(ext) !== -1) {
                    itemsToMove.push(item);
                }
            }
        }

        // Перемещаем собранные элементы в целевую папку
        for (var i = 0; i < itemsToMove.length; i++) {
            var item = itemsToMove[i];
            item.parentFolder = targetFolder;
            // Применяем цвет метки, если установлен флажок
            if (applyColorCheckbox.value) {
                item.label = targetFolder.label;
            }
        }
    }

    var removedCount = removeEmptyFolders();

    // Если активен чекбокс – удаляем неиспользуемые материалы
    if (removeUnusedCheckbox.value) {
        app.beginUndoGroup("Remove Unused Footage and Compositions");
        for (var i = app.project.numItems; i >= 1; i--) {
            var item = app.project.item(i);
            if (item instanceof FootageItem && item.usedIn && item.usedIn.length === 0) {
                item.remove();
            }
        }
        for (var i = app.project.numItems; i >= 1; i--) {
            var item = app.project.item(i);
            if (item instanceof CompItem && item.usedIn && item.usedIn.length === 0 && item.numLayers === 0 && item !== app.project.activeItem) {
                item.remove();
            }
        }
        app.endUndoGroup();
    }

    // Если отмечен чекбокс "Remove disabled effects", запускаем его функциональность
    if (remove_disabled_effects_checkbox.value) {
        app.beginUndoGroup("Remove Disabled Effects");
        var comps = getAllCompositions();
        for (var i = 0; i < comps.length; i++) {
            var comp = comps[i];
            for (var j = 1; j <= comp.numLayers; j++) {
                var layer = comp.layer(j);
                var fx = layer.property("Effects");
                if (fx) {
                    for (var k = fx.numProperties; k >= 1; k--) {
                        var effect = fx.property(k);
                        if (!effect.enabled) {
                            effect.remove();
                        }
                    }
                }
            }
        }
        app.endUndoGroup();
        alert("Disabled effects removed.");
        remove_disabled_effects_checkbox.value = false;
    }

    app.endUndoGroup();
    app.project.refresh();
    alert("Sorted items into folders.\nRemoved " + removedCount + " empty folder(s).");
};


//Duplicate Comp Tool//


duplicateCompButton.onClick = function () {
    app.beginUndoGroup("Duplicate Comp");
    var activeComp = app.project.activeItem;
    if (!(activeComp instanceof CompItem)) {
        alert("Please select a composition.");
        app.endUndoGroup();
        return;
    }

    // Функция для поиска или создания папки
    function getOrCreateFolder(folderName) {
        for (var i = 1; i <= app.project.numItems; i++) {
            var item = app.project.item(i);
            if (item instanceof FolderItem && item.name === folderName) {
                return item;
            }
        }
        return app.project.items.addFolder(folderName);
    }

    // Создаём папку для всех дубликатов: "Duplicate (Имя Композиции)"
    var dupFolder = getOrCreateFolder("Duplicate (" + activeComp.name + ")");
    // Назначаем новый цвет метки для дубликатов (например, 10)
    var newColor = 10;

    // Запускаем рекурсивное дублирование с передачей пустого кэша (объект для хранения уже продублированных композиций)
    var dupComp = duplicateCompRecursively(activeComp, dupFolder, newColor, {});

    // Открываем дублированную композицию в окне Project
    dupComp.openInViewer();

    app.endUndoGroup();
    alert("Composition duplicated successfully.");
};

/**
 * Рекурсивно дублирует композицию целиком.
 * Атомарное дублирование композиции через compItem.duplicate() сохраняет
 * порядок слоёв, привязки (parenting) и track matte-связи.
 * Для вложенных композиций выполняется замена источника на их уникальную копию,
 * при этом если одна и та же композиция встречается несколько раз – дублируется только один раз (кэширование).
 *
 * @param {CompItem} compItem - композиция для дублирования.
 * @param {FolderItem} targetFolder - папка, в которую перемещаются все дубликаты.
 * @param {Number} newColor - новый цвет метки для дубликатов.
 * @param {Object} cache - объект для хранения уже продублированных композиций (ключ – compItem.id).
 * @returns {CompItem} - дубликат композиции.
 */
function duplicateCompRecursively(compItem, targetFolder, newColor, cache) {
    if (!cache) { cache = {}; }

    // Если композиция уже была продублирована, возвращаем копию из кэша
    if (cache[compItem.id]) {
        return cache[compItem.id];
    }

    // Атомарно дублируем композицию – так сохраняются все внутренние связи (track matte, parenting и т.п.)
    var dupComp = compItem.duplicate();
    dupComp.label = newColor;
    if (targetFolder) {
        dupComp.parentFolder = targetFolder;
    }

    // Сохраняем продублированную композицию в кэше
    cache[compItem.id] = dupComp;

    // Обходим все слои в продублированной композиции
    for (var i = 1; i <= dupComp.numLayers; i++) {
        var layer = dupComp.layer(i);

        // Если источник слоя – композиция, рекурсивно дублируем её (или берём из кэша, если уже была продублирована)
        if (layer.source instanceof CompItem) {
            var dupNestedComp = duplicateCompRecursively(layer.source, targetFolder, newColor, cache);
            // Заменяем источник слоя на дубликат вложенной композиции
            layer.replaceSource(dupNestedComp, false);
        }
    }
    return dupComp;
}


//// Null Object Tool//

add_null_objects_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }
    var selectedLayers = [];
    for (var i = 1; i <= comp.numLayers; i++) {
        var layer = comp.layer(i);
        if (layer.selected) { selectedLayers.push(layer); }
    }
    if (selectedLayers.length === 0) {
        alert("Please select layers in the active composition.");
        return;
    }

    // Вычисляем среднюю позицию выбранных слоёв (учитывая X, Y и Z)
    var sumX = 0, sumY = 0, sumZ = 0;
    for (var i = 0; i < selectedLayers.length; i++) {
        var pos = selectedLayers[i].property("Position").value;
        sumX += pos[0];
        sumY += pos[1];
        var zVal = (pos.length > 2) ? pos[2] : 0;
        sumZ += zVal;
    }
    var avgPos = [
        sumX / selectedLayers.length,
        sumY / selectedLayers.length,
        sumZ / selectedLayers.length
    ];

    // Проверяем наличие 3D или камеры среди выбранных слоёв
    var is3D = false;
    for (var i = 0; i < selectedLayers.length; i++) {
        if (selectedLayers[i].matchName === "ADBE Camera Layer" || (selectedLayers[i].threeDLayer && selectedLayers[i].threeDLayer === true)) {
            is3D = true;
            break;
        }
    }

    app.beginUndoGroup("Add Null Object for Selected Layers");
    var nullLayer = comp.layers.addNull();
    // Формируем название согласно формату: NULL | (Имя слоя)
    nullLayer.name = "NULL | " + selectedLayers[0].name;

    if (is3D) {
        nullLayer.threeDLayer = true;
        nullLayer.property("Position").setValue(avgPos);
    } else {
        nullLayer.property("Position").setValue([avgPos[0], avgPos[1]]);
    }

    for (var i = 0; i < selectedLayers.length; i++) {
        selectedLayers[i].parent = nullLayer;
    }
    app.endUndoGroup();
};


function getLayerIndices(layersArray) {
    var indices = [];
    for (var i = 0; i < layersArray.length; i++) {
        indices.push(layersArray[i].index);
    }
    return indices;
}

//Track Matte Tool//

add_track_matte_button.onClick = function () {
    var comp = app.project.activeItem;
    if (!(comp instanceof CompItem)) {
        alert("Active item is not a composition.");
        return;
    }

    if (comp.selectedLayers.length === 0) {
        alert("Please select one or more layers.");
        return;
    }

    app.beginUndoGroup("Add Track Matte Layer");
    var solidColor = [1, 1, 1]; // белый цвет

    if (comp.selectedLayers.length > 1) {
        var baseName = comp.selectedLayers[0].name;
        var indices = getLayerIndices(comp.selectedLayers);
        var precomp = comp.layers.precompose(indices, "Precomp (" + baseName + ")", true);
        var matteLayerName = "TRMT (" + baseName + ")";
        var matteLayer = comp.layers.addSolid(solidColor, matteLayerName, comp.width, comp.height, comp.pixelAspect, comp.duration);
        matteLayer.moveBefore(precomp);
        precomp.trackMatteType = TrackMatteType.ALPHA;
    } else {
        var activeLayer = comp.selectedLayers[0];
        var matteLayerName = "TRMT (" + activeLayer.name + ")";
        var matteLayer = comp.layers.addSolid(solidColor, matteLayerName, comp.width, comp.height, comp.pixelAspect, comp.duration);
        matteLayer.moveBefore(activeLayer);
        activeLayer.trackMatteType = TrackMatteType.ALPHA;
    }

    app.endUndoGroup();
};


//
// ================== SAVE / LOAD PRESETS ==================
//

save_my_presets_button.onClick = function () {
    saveData();
};

load_my_presets_button.onClick = function () {
    loadData();
};

function saveData() {
    var saveWindow = new Window("dialog", "Save Presets and Settings Project");
    saveWindow.orientation = "column";
    saveWindow.alignChildren = ["fill", "top"];
    saveWindow.spacing = 15;
    saveWindow.margins = 15;
    saveWindow.helpTip = "Save the current Layer/Effect groups to a .pgm file";

    var pathGroup = saveWindow.add("group");
    pathGroup.orientation = "row";
    pathGroup.add("statictext", undefined, "Save path:");
    var pathEdit = pathGroup.add("edittext", undefined, "");
    pathEdit.size = [300, 25];
    var browseButton = pathGroup.add("button", undefined, "Browse");
    browseButton.onClick = function () {
        var folder = Folder.selectDialog("Please select a folder for saving");
        if (folder) {
            pathEdit.text = folder.fsName;
        }
    };

    var fileGroup = saveWindow.add("group");
    fileGroup.orientation = "row";
    fileGroup.add("statictext", undefined, "Preset Name:");
    var fileEdit = fileGroup.add("edittext", undefined, "My_Preset_Project");
    fileEdit.size = [375, 25];

    var buttonsGroup = saveWindow.add("group");
    buttonsGroup.orientation = "row";

    var exportButton = buttonsGroup.add("button", undefined, "Export", { name: "ok" });

    exportButton.onClick = function () {
        var savePath = pathEdit.text;
        var fileName = fileEdit.text;

        if (savePath === "" || fileName === "") {
            alert("Please specify the path and file name.");
            return;
        }

        // Добавляем расширение .pgm, если его нет
        if (!/\.pgm$/i.test(fileName)) {
            fileName += ".pgm";
        }

        var fullPath = savePath + "/" + fileName;
        var file = new File(fullPath);
        if (file.open("w")) {
            try {
                var dataLines = [];
                dataLines.push("LayerGroups:");
                for (var i = 0; i < layerGroups.length; i++) {
                    var lg = layerGroups[i];
                    dataLines.push("GroupType: LayerGroup");
                    dataLines.push("Name: " + lg.name);
                    dataLines.push("Prefix: " + lg.prefix);
                    dataLines.push("LabelColorIndex: " + lg.labelColorIndex);
                    dataLines.push("DisableLabelColor: " + lg.disableLabelColor);
                    dataLines.push("");
                }

                dataLines.push("EffectGroups:");
                for (var j = 0; j < effectGroups.length; j++) {
                    var eg = effectGroups[j];
                    dataLines.push("GroupType: EffectGroup");
                    dataLines.push("Name: " + eg.name);
                    dataLines.push("Prefix: " + eg.prefix);
                    dataLines.push("");
                }

                var data = dataLines.join("\n");
                file.write(data);
                file.close();
                alert("Preset successfully saved.");
                presetFilePath = fullPath;
                autoSaveEnabled = true;
                saveWindow.close();

            } catch (e) {
                alert("Error saving the preset: " + e.toString());
            }
        } else {
            alert("Failed to save the Preset.");
        }
    };

    var cancelButton = buttonsGroup.add("button", undefined, "Cancel", { name: "cancel" });
    cancelButton.onClick = function () {
        saveWindow.close();
    };

    saveWindow.center();
    saveWindow.show();
}

function loadData() {
    // Создаём диалог импорта
    var importWindow = new Window("dialog", "Load Preset and Settings Project");
    importWindow.orientation = "column";
    importWindow.alignChildren = ["fill", "top"];
    importWindow.spacing = 10;
    importWindow.margins = 15;

    // Группа для выбора .pgm файла
    var fileGroup = importWindow.add("group");
    fileGroup.orientation = "row";
    fileGroup.alignChildren = ["left", "center"];
    fileGroup.add("statictext", undefined, "Preset to import:");
    var fileEdit = fileGroup.add("edittext", undefined, "");
    fileEdit.size = [300, 25];
    fileEdit.helpTip = "Select the .pgm file with previously saved settings";

    var browseButton = fileGroup.add("button", undefined, "Browse");
    browseButton.helpTip = "Click to find .pgm file";

    browseButton.onClick = function () {
        var file = File.openDialog("Please select a file to import", "*.pgm");
        if (file) {
            fileEdit.text = file.fsName;
        }
    };
    // Группа настроек Options (колонка)
    var optionsGroup = importWindow.add("group");
    optionsGroup.orientation = "row";
    optionsGroup.alignChildren = ["left", "centrer"];
    optionsGroup.spacing = 10;

    optionsGroup.add("statictext", undefined, "Options:");

    // Кнопка Clear All Panels
    var clear_all_panels_button = optionsGroup.add("iconbutton", undefined, File.decode(clear_all_panels_button_imgString), {
        name: "clear_all_panels_button",
        style: "toolbutton"
    });
    clear_all_panels_button.helpTip = "Clear All Panels";
    clear_all_panels_button.text = "Clear All Panels";
    clear_all_panels_button.preferredSize.width = 140;
    clear_all_panels_button.preferredSize.height = 30;

    clear_all_panels_button.onClick = function () {
        var confirmClear = confirm("Are you sure you want to clear all groups and reset layer and effect prefixes? This action cannot be undone.");
        if (!confirmClear) return;
        try {
            app.beginUndoGroup("Clear All Groups and Reset Names");

            if (!tab_layers || !tab_effects) {
                alert("Error: 'tab_layers' or 'tab_effects' is not defined.");
                app.endUndoGroup();
                return;
            }

            // Очистка групп слоёв
            for (var i = layerGroups.length - 1; i >= 0; i--) {
                var lg = layerGroups[i];
                var comps = getAllCompositions();
                for (var c = 0; c < comps.length; c++) {
                    var comp = comps[c];
                    for (var l = comp.numLayers; l >= 1; l--) {
                        var layer = comp.layer(l);
                        if (layer.name.indexOf("[" + lg.prefix + "]") === 0) {
                            var originalName = layer.name.replace("[" + lg.prefix + "] ", "");
                            layer.name = originalName;
                        }
                    }
                }
                if (lg.panel && lg.panel.parent === tab_layers) {
                    try {
                        tab_layers.remove(lg.panel);
                    } catch (removeError) {
                        alert("Failed to remove layer group panel for '" + lg.name + "': " + removeError.toString());
                    }
                } else {
                    alert("Layer group panel for '" + lg.name + "' has already been removed or does not exist.");
                }
                layerGroups.splice(i, 1);
            }

            // Очистка групп эффектов
            for (var i = effectGroups.length - 1; i >= 0; i--) {
                var eg = effectGroups[i];
                var comps = getAllCompositions();
                for (var c = 0; c < comps.length; c++) {
                    var comp = comps[c];
                    for (var l = 1; l <= comp.numLayers; l++) {
                        var layer = comp.layer(l);
                        if (layer.property("Effects")) {
                            for (var e = layer.property("Effects").numProperties; e >= 1; e--) {
                                var effect = layer.property("Effects").property(e);
                                if (effect.name.indexOf("[" + eg.prefix + "]") === 0) {
                                    var originalName = effect.name.replace("[" + eg.prefix + "] ", "");
                                    effect.name = originalName;
                                }
                            }
                        }
                    }
                }
                if (eg.panel && eg.panel.parent === tab_effects) {
                    try {
                        tab_effects.remove(eg.panel);
                    } catch (removeError) {
                        alert("Failed to remove effect group panel for '" + eg.name + "': " + removeError.toString());
                    }
                } else {
                    alert("Effect group panel for '" + eg.name + "' has already been removed or does not exist.");
                }
                effectGroups.splice(i, 1);
            }

            palette.layout.layout(true);
            palette.layout.resize();

            alert("All groups have been cleared and layer and effect prefixes have been reset.");
            app.endUndoGroup();
        } catch (error) {
            alert("An error occurred while clearing groups: " + error.toString());
            app.endUndoGroup();
        }
    };
    // Группа кнопок (Import/Cancel)
    var buttonsGroup = importWindow.add("group");
    buttonsGroup.orientation = "row";
    buttonsGroup.alignChildren = ["fill", "center"];

    // Кнопка Import
    var importButton = buttonsGroup.add("button", undefined, "Import", { name: "ok" });
    importButton.helpTip = "Load the selected .pgm preset";

    importButton.onClick = function () {
        var filePath = fileEdit.text;

        if (filePath === "") {
            alert("Please select a file to import.");
            return;
        }

        var file = new File(filePath);
        if (file.exists && file.open("r")) {
            try {
                var content = file.read();
                file.close();

                // Разделяем содержимое файла по строкам
                var lines = content.split(/\r\n|\n|\r/);
                var currentSection = "";
                var currentGroup = {};

                // Начинаем группу Undo для очистки и импорта
                app.beginUndoGroup("Import Preset and Reset Groups");

                // Сохраняем копии текущих групп, чтобы безопасно очистить
                var layerGroupsCopy = layerGroups.slice();
                var effectGroupsCopy = effectGroups.slice();

                //--------------------------------------------------------
                // (1) Полная очистка существующих групп слоёв
                //--------------------------------------------------------
                for (var i = layerGroupsCopy.length - 1; i >= 0; i--) {
                    var lg = layerGroupsCopy[i];

                    // Сброс префиксов слоёв
                    var comps = getAllCompositions();
                    for (var c = 0; c < comps.length; c++) {
                        var comp = comps[c];
                        for (var l = comp.numLayers; l >= 1; l--) {
                            var layer = comp.layer(l);
                            if (layer.name.indexOf("[" + lg.prefix + "]") === 0) {
                                var originalName = layer.name.replace("[" + lg.prefix + "] ", "");
                                layer.name = originalName;
                            }
                        }
                    }

                    // Удаление UI панели группы слоёв
                    if (lg.panel && lg.panel.parent === tab_layers) {
                        try {
                            tab_layers.remove(lg.panel);
                        } catch (removeError) {
                            alert("Failed to remove layer group panel for '" + lg.name + "': " + removeError.toString());
                        }
                    }
                    // Удаляем из массива layerGroups позже (ниже), а пока просто удалили панели
                }
                // Полностью обнуляем массив
                layerGroups = [];

                //--------------------------------------------------------
                // (2) Полная очистка существующих групп эффектов
                //--------------------------------------------------------
                for (var k = effectGroupsCopy.length - 1; k >= 0; k--) {
                    var eg = effectGroupsCopy[k];

                    // Сброс префиксов эффектов
                    var comps = getAllCompositions();
                    for (var c = 0; c < comps.length; c++) {
                        var comp = comps[c];
                        for (var l = 1; l <= comp.numLayers; l++) {
                            var layer = comp.layer(l);
                            if (layer.property("Effects")) {
                                for (var e = layer.property("Effects").numProperties; e >= 1; e--) {
                                    var effect = layer.property("Effects").property(e);
                                    if (effect.name.indexOf("[" + eg.prefix + "]") === 0) {
                                        var originalName = effect.name.replace("[" + eg.prefix + "] ", "");
                                        effect.name = originalName;
                                    }
                                }
                            }
                        }
                    }

                    // Удаление UI панели группы эффектов
                    if (eg.panel && eg.panel.parent === tab_effects) {
                        try {
                            tab_effects.remove(eg.panel);
                        } catch (removeError) {
                            alert("Failed to remove effect group panel for '" + eg.name + "': " + removeError.toString());
                        }
                    }
                }
                // Обнуляем массив
                effectGroups = [];

                // Обновляем интерфейс после удаления групп
                palette.layout.layout(true);
                palette.layout.resize();

                //--------------------------------------------------------
                // (3) Разбор файла и создание новых групп
                //--------------------------------------------------------
                for (var i = 0; i < lines.length; i++) {
                    var line = trim(lines[i]);
                    if (line === "LayerGroups:") {
                        currentSection = "LayerGroups";
                        continue;
                    } else if (line === "EffectGroups:") {
                        currentSection = "EffectGroups";
                        continue;
                    }

                    // --- (A) Если читаем секцию LayerGroups ---
                    if (currentSection === "LayerGroups") {
                        if (line.indexOf("GroupType:") === 0) {
                            currentGroup = {};
                            currentGroup.type = trim(line.split(":")[1]);
                        } else if (line.indexOf("Name:") === 0) {
                            currentGroup.name = trim(line.split(":")[1]);
                        } else if (line.indexOf("Prefix:") === 0) {
                            currentGroup.prefix = trim(line.split(":")[1]);
                        } else if (line.indexOf("LabelColorIndex:") === 0) {
                            currentGroup.labelColorIndex = parseInt(trim(line.split(":")[1]), 10);
                        } else if (line.indexOf("DisableLabelColor:") === 0) {
                            currentGroup.disableLabelColor = (trim(line.split(":")[1]).toLowerCase() === "true");
                        }

                        // Если собраны все поля для LayerGroup
                        if (
                            currentGroup.name &&
                            currentGroup.prefix &&
                            typeof currentGroup.labelColorIndex !== 'undefined' &&
                            typeof currentGroup.disableLabelColor !== 'undefined' &&
                            currentGroup.type === "LayerGroup"
                        ) {
                            // Проверяем уникальность префикса сразу в layerGroups и effectGroups
                            if (isPrefixUsedAcrossAll(currentGroup.prefix)) {
                                // Генерируем новый уникальный префикс
                                currentGroup.prefix = generateUniquePrefix(currentGroup.name);
                                alert(
                                    "Prefix for group '" + currentGroup.name +
                                    "' was already in use. A new unique prefix '" +
                                    currentGroup.prefix + "' has been generated."
                                );
                            }

                            // Создаём группу
                            createLayerGroupUI(
                                currentGroup.name,
                                currentGroup.prefix,
                                currentGroup.labelColorIndex,
                                currentGroup.disableLabelColor,
                                false, // guideCheckboxValue
                                false  // lockCheckboxValue
                            );
                            // Сброс объекта
                            currentGroup = {};
                        }
                    }
                    // --- (B) Если читаем секцию EffectGroups ---
                    else if (currentSection === "EffectGroups") {
                        if (line.indexOf("GroupType:") === 0) {
                            currentGroup = {};
                            currentGroup.type = trim(line.split(":")[1]);
                        } else if (line.indexOf("Name:") === 0) {
                            currentGroup.name = trim(line.split(":")[1]);
                        } else if (line.indexOf("Prefix:") === 0) {
                            currentGroup.prefix = trim(line.split(":")[1]);
                        }

                        // Если собраны все поля для EffectGroup
                        if (
                            currentGroup.name &&
                            currentGroup.prefix &&
                            currentGroup.type === "EffectGroup"
                        ) {
                            // Проверяем уникальность префикса сразу в layerGroups и effectGroups
                            if (isPrefixUsedAcrossAll(currentGroup.prefix)) {
                                currentGroup.prefix = generateUniquePrefix(currentGroup.name);
                                alert(
                                    "Prefix for effect group '" + currentGroup.name +
                                    "' was already in use. A new unique prefix '" +
                                    currentGroup.prefix + "' has been generated."
                                );
                            }

                            // Создаём группу
                            createEffectGroupUI(
                                currentGroup.name,
                                currentGroup.prefix
                            );
                            currentGroup = {};
                        }
                    }
                }

                // После импорта заново перерисовываем окно
                palette.layout.layout(true);
                palette.layout.resize();

                alert("Preset successfully loaded and all existing groups have been cleared.");
                app.endUndoGroup();
                importWindow.close();

            } catch (e) {
                alert("Error reading the preset: " + e.toString());
                app.endUndoGroup();
            }
        } else {
            alert("The file does not exist or cannot be opened.");
        }
    };

    // Кнопка Cancel
    var cancelButton = buttonsGroup.add("button", undefined, "Cancel", { name: "cancel" });
    cancelButton.helpTip = "Cancel the upload and close the window";
    cancelButton.onClick = function () {
        importWindow.close();
    };

    importWindow.center();
    importWindow.show();
}

/**
 * Вспомогательная функция trim: убирает пробелы слева и справа строки
 */
function trim(str) {
    return str.replace(/^\s+|\s+$/g, '');
}

/**
 * ВАЖНО: Исправленная функция проверки занятости префикса:
 * Теперь учитывает и массив layerGroups, и массив effectGroups,
 * чтобы не допускать конфликтов.
 */
function isPrefixUsedAcrossAll(prefix) {
    // Сначала проверяем в layerGroups
    for (var i = 0; i < layerGroups.length; i++) {
        if (layerGroups[i].prefix === prefix) {
            return true;
        }
    }
    // Затем в effectGroups
    for (var j = 0; j < effectGroups.length; j++) {
        if (effectGroups[j].prefix === prefix) {
            return true;
        }
    }
    return false;
}